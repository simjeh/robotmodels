/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2023-04-10 05:40:54.710534
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69;
x0=IKsin(j[3]);
x1=IKcos(j[3]);
x2=IKsin(j[5]);
x3=IKcos(j[4]);
x4=IKcos(j[5]);
x5=IKcos(j[0]);
x6=IKcos(j[7]);
x7=IKsin(j[4]);
x8=IKcos(j[2]);
x9=IKsin(j[7]);
x10=IKcos(j[6]);
x11=IKsin(j[2]);
x12=IKsin(j[6]);
x13=IKsin(j[0]);
x14=IKcos(j[1]);
x15=IKsin(j[1]);
x16=((1.0)*x6);
x17=((1.0)*x9);
x18=((1.0)*x10);
x19=((1.0)*x2);
x20=((1.0)*x4);
x21=((1.0)*x1);
x22=((1.0)*x12);
x23=((0.0375)*x2);
x24=((0.0375)*x10);
x25=(x11*x3);
x26=((-1.0)*x4);
x27=(x0*x7);
x28=(x11*x7);
x29=(x7*x8);
x30=(x13*x15);
x31=(x14*x5);
x32=(x15*x5);
x33=(x0*x11);
x34=(x0*x8);
x35=(x1*x4);
x36=(x0*x3);
x37=(x13*x14);
x38=(x3*x8);
x39=(x19*x36);
x40=(x21*x28);
x41=(x22*x27);
x42=(x19*x34);
x43=((((-1.0)*x28))+((x1*x38)));
x44=(((x1*x25))+x29);
x45=((((-1.0)*x39))+x35);
x46=((((-1.0)*x38))+x40);
x47=((((-1.0)*x1*x20))+x39);
x48=(((x21*x29))+(((1.0)*x25)));
x49=(((x20*x36))+((x1*x19)));
x50=((-1.0)*x48);
x51=(x45*x6);
x52=((-1.0)*x43);
x53=(x2*x43);
x54=(x12*x49);
x55=(x10*x50);
x56=(((x2*x44))+((x33*x4)));
x57=((((-1.0)*x20*x43))+x42);
x58=((((-1.0)*x20*x44))+((x19*x33)));
x59=(x54+((x10*x27)));
x60=((((-1.0)*x20*x33))+(((-1.0)*x19*x44)));
x61=((((-1.0)*x41))+((x10*x49)));
x62=(x10*x58);
x63=(((x12*x58))+((x10*(((((-1.0)*x40))+x38)))));
x64=(x51+((x59*x9)));
x65=(((x12*x57))+x55);
x66=(((x47*x9))+((x59*x6)));
x67=((((-1.0)*x18*x57))+(((-1.0)*x22*x48)));
x68=(((x16*(((((-1.0)*x34*x4))+(((-1.0)*x53))))))+(((-1.0)*x17*x65)));
x69=(((x17*(((((-1.0)*x2*x52))+(((-1.0)*x26*x34))))))+(((-1.0)*x16*x65)));
eerot[0]=(((x31*x64))+((x32*x68))+((x13*(((((-1.0)*x16*x56))+(((-1.0)*x17*x63)))))));
eerot[1]=(((x31*x66))+((x32*x69))+((x13*(((((-1.0)*x16*x63))+(((-1.0)*x17*x60)))))));
eerot[2]=(((x13*(((((-1.0)*x18*x58))+(((-1.0)*x22*x46))))))+((x31*x61))+((x32*x67)));
eetrans[0]=((0.038)+(((-0.1491)*(IKsin(j[0]))))+(((((((-0.0925)*(IKsin(j[3]))))+(((((((0.0375)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-0.0375)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKsin(j[7]))))+(((((((((((0.0375)*(IKcos(j[3]))*(IKsin(j[5]))))+(((0.0375)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((0.0375)*(IKcos(j[6]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((0.0325)*(IKcos(j[4]))*(IKsin(j[3]))))+(((-0.02)*(IKcos(j[3]))*(IKcos(j[5]))))+(((0.02)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.2888)*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.06)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((0.0325)*(IKcos(j[2]))*(IKsin(j[4]))))+(((-0.2151)*(IKcos(j[2]))))+(((((((0.02)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((0.02)*(IKcos(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.0375)*(IKcos(j[5]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-1.0)*(((((-0.0375)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((-0.0375)*(IKcos(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((-0.0925)*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((-1.0)*(((((0.0375)*(IKsin(j[2]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.0375)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[2]))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(((((0.0375)*(IKcos(j[2]))*(IKcos(j[4]))))+(((-0.0375)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((0.2888)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((0.0325)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((-0.2888)*(IKcos(j[2]))*(IKcos(j[4]))))+(((0.02)*(IKcos(j[5]))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKsin(j[0]))))+(((((((0.2151)*(IKsin(j[2]))))+(((-0.0925)*(IKcos(j[2]))*(IKcos(j[3]))))+(((0.02)*(IKcos(j[2]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((0.2888)*(IKcos(j[4]))*(IKsin(j[2]))))+(((-0.0325)*(IKsin(j[2]))*(IKsin(j[4]))))+(((0.0325)*(IKcos(j[2]))*(IKcos(j[3]))*(IKcos(j[4]))))+(((((((0.02)*(IKcos(j[2]))*(IKcos(j[3]))*(IKcos(j[4]))))+(((-0.02)*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((0.2888)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[4]))))+(((((((-1.0)*(((((0.0375)*(IKcos(j[2]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.0375)*(((((1.0)*(IKsin(j[2]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(((((-0.0375)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[4]))))+(((-0.0375)*(IKcos(j[4]))*(IKsin(j[2]))))))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((((((-1.0)*(((((0.0375)*(IKsin(j[2]))*(IKsin(j[4]))))+(((-0.0375)*(IKcos(j[2]))*(IKcos(j[3]))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((0.0375)*(IKcos(j[2]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[7]))))))*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.04)*(IKcos(j[0])))));
eerot[3]=(((x37*x64))+((x5*((((x56*x6))+((x63*x9))))))+((x30*x68)));
eerot[4]=(((x5*((((x6*x63))+((x60*x9))))))+((x37*x66))+((x30*x69)));
eerot[5]=(((x37*x61))+((x30*x67))+((x5*((x62+((x12*x46)))))));
eetrans[1]=((0.124)+(((((((-0.0925)*(IKsin(j[3]))))+(((((((0.0375)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-0.0375)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKsin(j[7]))))+(((((((((((0.0375)*(IKcos(j[3]))*(IKsin(j[5]))))+(((0.0375)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[6]))))+(((0.0375)*(IKcos(j[6]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[7]))))+(((0.0325)*(IKcos(j[4]))*(IKsin(j[3]))))+(((-0.02)*(IKcos(j[3]))*(IKcos(j[5]))))+(((0.02)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.2888)*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.1491)*(IKcos(j[0]))))+(((((((-0.0325)*(IKcos(j[2]))*(IKsin(j[4]))))+(((((((-0.02)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((-0.02)*(IKcos(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((0.0925)*(IKcos(j[3]))*(IKsin(j[2]))))+(((-0.02)*(IKcos(j[5]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.2888)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((0.2151)*(IKcos(j[2]))))+(((0.2888)*(IKcos(j[2]))*(IKcos(j[4]))))+(((((((((((0.0375)*(IKcos(j[2]))*(IKcos(j[4]))))+(((-0.0375)*(IKcos(j[3]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((0.0375)*(IKsin(j[2]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.0375)*(((((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[2]))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))))*(IKcos(j[7]))))+(((-0.0325)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((((((((((-0.0375)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[2]))))+(((-0.0375)*(IKcos(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((-0.0375)*(IKcos(j[5]))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKsin(j[7]))))))*(IKcos(j[0]))))+(((0.04)*(IKsin(j[0]))))+(((-0.06)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.2151)*(IKsin(j[2]))))+(((-0.0925)*(IKcos(j[2]))*(IKcos(j[3]))))+(((0.02)*(IKcos(j[2]))*(IKcos(j[5]))*(IKsin(j[3]))))+(((0.2888)*(IKcos(j[4]))*(IKsin(j[2]))))+(((-0.0325)*(IKsin(j[2]))*(IKsin(j[4]))))+(((0.0325)*(IKcos(j[2]))*(IKcos(j[3]))*(IKcos(j[4]))))+(((((((0.02)*(IKcos(j[2]))*(IKcos(j[3]))*(IKcos(j[4]))))+(((-0.02)*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((0.2888)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[4]))))+(((((((-1.0)*(((((0.0375)*(IKcos(j[2]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((0.0375)*(((((1.0)*(IKsin(j[2]))*(IKsin(j[4]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(((((-0.0375)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[4]))))+(((-0.0375)*(IKcos(j[4]))*(IKsin(j[2]))))))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((((((-1.0)*(((((0.0375)*(IKsin(j[2]))*(IKsin(j[4]))))+(((-0.0375)*(IKcos(j[2]))*(IKcos(j[3]))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((0.0375)*(IKcos(j[2]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[7]))))))*(IKsin(j[0]))*(IKsin(j[1])))));
eerot[6]=(((x14*x68))+((x15*(((((-1.0)*x16*x45))+(((-1.0)*x17*x59)))))));
eerot[7]=(((x14*x69))+((x15*(((((-1.0)*x17*x47))+(((-1.0)*x16*x59)))))));
eerot[8]=(((x15*(((((-1.0)*x18*x49))+x41))))+((x14*x67)));
IkReal x70=((1.0)*x17);
IkReal x71=(x1*x38);
IkReal x72=((1.0)*x16);
IkReal x73=(x34*x4);
eetrans[2]=((0.3325)+(((0.06)*x15))+((x15*(((((-1.0)*x72*(((((0.0375)*x54))+((x24*x27))))))+(((0.0925)*x0))+(((-1.0)*x70*((((x23*x36))+(((-0.0375)*x35))))))+(((-0.2888)*x27))+(((0.02)*x35))+(((-0.02)*x2*x36))+(((-0.0325)*x36))))))+((x14*(((((0.02)*x73))+(((0.2888)*x25))+(((-1.0)*x70*(((((-0.0375)*x73))+(((-1.0)*x23*x43))))))+(((-1.0)*x19*(((((-0.02)*x71))+(((0.02)*x28))))))+(((-0.0925)*x1*x8))+(((-1.0)*x72*((((x24*x50))+(((0.0375)*x12*((((x26*x43))+x42))))))))+(((-0.0325)*x28))+(((0.0325)*x71))+(((0.2151)*x11))+(((0.2888)*x1*x29)))))));
}

IKFAST_API int GetNumFreeParameters() { return 2; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0, 1}; return freeparams; }
IKFAST_API int GetNumJoints() { return 8; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij0[2], _nj0,_ij1[2], _nj1;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
j1=pfree[1]; cj1=cos(pfree[1]); sj1=sin(pfree[1]), htj1=tan(pfree[1]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

IkReal x74=IKsin(j1);
IkReal x75=((1.0)*x74);
new_r00=((((-1.0)*r10*x75*(IKsin(j0))))+(((-1.0)*r00*x75*(IKcos(j0))))+(((-1.0)*r20*(IKcos(j1)))));
IkReal x76=IKsin(j1);
IkReal x77=((1.0)*x76);
new_r01=((((-1.0)*r11*x77*(IKsin(j0))))+(((-1.0)*r01*x77*(IKcos(j0))))+(((-1.0)*r21*(IKcos(j1)))));
IkReal x78=IKsin(j1);
IkReal x79=((1.0)*x78);
new_r02=((((-1.0)*r22*(IKcos(j1))))+(((-1.0)*r12*x79*(IKsin(j0))))+(((-1.0)*r02*x79*(IKcos(j0)))));
IkReal x80=IKsin(j1);
IkReal x81=IKcos(j1);
IkReal x82=IKcos(j0);
IkReal x83=IKsin(j0);
IkReal x84=(x80*x83);
IkReal x85=(x80*x82);
new_px=((((0.3325)*x81))+(((-1.0)*px*x85))+(((-1.0)*pz*x81))+(((-1.0)*py*x84))+(((0.038)*x85))+(((0.0375)*r11*x84))+(((0.124)*x84))+(((0.0375)*r21*x81))+(((0.0375)*r01*x85))+(((0.04)*x80)));
new_r10=((((-1.0)*r00*(IKsin(j0))))+((r10*(IKcos(j0)))));
new_r11=((((-1.0)*r01*(IKsin(j0))))+((r11*(IKcos(j0)))));
new_r12=((((-1.0)*r02*(IKsin(j0))))+((r12*(IKcos(j0)))));
IkReal x86=IKsin(j0);
IkReal x87=IKcos(j0);
new_py=((-0.1491)+(((-1.0)*px*x86))+(((-0.0375)*r11*x87))+(((-0.124)*x87))+(((0.038)*x86))+((py*x87))+(((0.0375)*r01*x86)));
IkReal x88=IKcos(j1);
new_r20=(((r00*x88*(IKcos(j0))))+((r10*x88*(IKsin(j0))))+(((-1.0)*r20*(IKsin(j1)))));
IkReal x89=IKcos(j1);
new_r21=(((r01*x89*(IKcos(j0))))+((r11*x89*(IKsin(j0))))+(((-1.0)*r21*(IKsin(j1)))));
IkReal x90=IKcos(j1);
new_r22=((((-1.0)*r22*(IKsin(j1))))+((r02*x90*(IKcos(j0))))+((r12*x90*(IKsin(j0)))));
IkReal x91=IKsin(j1);
IkReal x92=IKcos(j1);
IkReal x93=IKcos(j0);
IkReal x94=IKsin(j0);
IkReal x95=(x92*x94);
IkReal x96=(x92*x93);
new_pz=((0.06)+(((-0.0375)*r01*x96))+(((-0.0375)*r11*x95))+(((-0.124)*x95))+(((-1.0)*pz*x91))+((py*x95))+(((-0.04)*x92))+((px*x96))+(((0.0375)*r21*x91))+(((-0.038)*x96))+(((0.3325)*x91)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x97=((1.0)*px);
IkReal x98=((1.0)*pz);
IkReal x99=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x99))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x98)));
rxp0_2=((((-1.0)*r10*x97))+((py*r00)));
rxp1_0=((((-1.0)*r21*x99))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x98)));
rxp1_2=((((-1.0)*r11*x97))+((py*r01)));
rxp2_0=((((-1.0)*r22*x99))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x98)));
rxp2_2=((((-1.0)*r12*x97))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x100=((0.02)*r00);
IkReal x101=((0.0465081081081081)*r10);
IkReal x102=((5.40540540540541)*pp);
IkReal x103=((0.216216216216216)*npx);
IkReal x104=((2.32540540540541)*py);
IkReal x105=((1.0)*px);
IkReal x106=((0.02)*r20);
IkReal x107=((0.0037)*r20);
IkReal x108=((0.185)*pz);
IkReal x109=((0.4302)*py);
IkReal x110=((0.04)*npx);
IkReal x111=((0.0037)*r00);
IkReal x112=((0.008604)*r10);
IkReal x113=((1.0)*pp);
IkReal x114=((0.185)*px);
IkReal x115=((0.0042203854135472)*r10);
IkReal x116=((0.02)*px);
IkReal x117=((0.108108108108108)*pp);
IkReal x118=((0.0440880717975593)*npx);
IkReal x119=((0.02963743)*r00);
IkReal x120=((0.0420067230665569)*py);
IkReal x121=((0.4302)*rxp0_2);
IkReal x122=((0.02963743)*r20);
IkReal x123=((0.4302)*rxp0_0);
IkReal x124=((0.02)*pz);
IkReal x125=((0.185)*rxp0_1);
IkReal x126=((0.8604)*rxp1_0);
IkReal x127=((0.37)*rxp1_1);
IkReal x128=((0.8604)*rxp1_2);
IkReal x129=((0.04)*pz);
IkReal x130=(pp*r20);
IkReal x131=((0.03003743)*r20);
IkReal x132=((0.04)*px);
IkReal x133=(pp*r00);
IkReal x134=((0.00329022325138504)*r10);
IkReal x135=((0.00450138504155125)*py);
IkReal x136=((0.0484123961218837)*npx);
IkReal x137=((0.03003743)*r00);
IkReal x138=((0.04)*r10);
IkReal x139=((4.65081081081081)*px);
IkReal x140=((0.0930162162162162)*r00);
IkReal x141=((2.0)*py);
IkReal x142=((0.0074)*r10);
IkReal x143=((0.017208)*r00);
IkReal x144=((0.37)*py);
IkReal x145=((0.8604)*px);
IkReal x146=((0.04)*py);
IkReal x147=((0.0840134461331137)*px);
IkReal x148=((0.00844077082709441)*r00);
IkReal x149=((0.05927486)*r10);
IkReal x150=((0.37)*rxp0_0);
IkReal x151=((0.8604)*rxp0_1);
IkReal x152=((0.74)*rxp1_0);
IkReal x153=((1.7208)*rxp1_1);
IkReal x154=((0.00900277008310249)*px);
IkReal x155=((0.00658044650277008)*r00);
IkReal x156=((0.08)*py);
IkReal x157=((0.06007486)*r10);
IkReal x158=((0.0930162162162162)*r11);
IkReal x159=((0.04)*r01);
IkReal x160=((0.432432432432432)*npy);
IkReal x161=((((-1.0)*x106))+pz);
IkReal x162=((0.0074)*r21);
IkReal x163=((0.08)*npy);
IkReal x164=((0.017208)*r11);
IkReal x165=((0.0074)*r01);
IkReal x166=((0.0881761435951187)*npy);
IkReal x167=((0.05927486)*r01);
IkReal x168=((0.00844077082709441)*r11);
IkReal x169=((0.05927486)*r21);
IkReal x170=((0.06007486)*r21);
IkReal x171=((0.06007486)*r01);
IkReal x172=((0.00658044650277008)*r11);
IkReal x173=((0.0968247922437673)*npy);
IkReal x174=((2.0)*pp);
IkReal x175=((4.0)*npy);
IkReal x176=(npy*py);
IkReal x177=(npx*px);
IkReal x178=(npx*py);
IkReal x179=(pp*r11);
IkReal x180=((0.112534626038781)*pp*r10);
IkReal x181=((0.225069252077562)*x178);
IkReal x182=((2.0)*x177);
IkReal x183=((2.0)*npx*pz);
IkReal x184=(r20*x113);
IkReal x185=(r00*x113);
IkReal x186=(r21*x174);
IkReal x187=(pz*x175);
IkReal x188=((0.450138504155125)*x176);
IkReal x189=(r01*x174);
IkReal x190=((0.225069252077562)*x179);
IkReal x191=(px*x175);
IkReal x192=(r10*x174);
IkReal x193=((0.450138504155125)*x177);
IkReal x194=((0.225069252077562)*x133);
IkReal x195=((4.0)*x178);
IkReal x196=((0.450138504155125)*pp*r01);
IkReal x197=((4.0)*x179);
IkReal x198=((0.900277008310249)*npy*px);
IkReal x199=((8.0)*x176);
IkReal x200=(x106+pz);
IkReal x201=((-0.04)*r21);
IkReal x202=((((-1.0)*x108))+x107);
IkReal x203=((0.000968247922437673)+x133);
IkReal x204=((-0.158040162162162)+x102);
IkReal x205=((0.02923743)+x110);
IkReal x206=((-0.00412905116568092)+x117);
IkReal x207=(x151+x150);
IkReal x208=((((-1.0)*x108))+(((-1.0)*x107)));
IkReal x209=(x159+x158);
IkReal x210=(x130+x129);
IkReal x211=(x156+x154);
IkReal x212=(x136+x121);
IkReal x213=(x104+x103);
IkReal x214=(x120+x121);
IkReal x215=(x113+x110);
IkReal x216=(x112+x109);
IkReal x217=(x111+x114);
IkReal x218=(x124+x123);
IkReal x219=(x144+x145);
IkReal x220=(x100+x101);
IkReal x221=(x125+x123);
IkReal x222=(x121+x116);
IkReal x223=(x142+x143);
IkReal x224=(x111+x109);
IkReal x225=(x146+x147);
IkReal x226=(x116+x118);
IkReal x227=(x120+x118);
IkReal x228=(x112+x114);
IkReal x229=(x122+x183);
IkReal x230=(x128+x189);
IkReal x231=(x127+x187);
IkReal x232=(x125+x184);
IkReal x233=(x168+x190);
IkReal x234=(x131+x183);
IkReal x235=(x127+x186);
IkReal x236=(x115+x180);
IkReal x237=(x133+x206);
IkReal x238=(x135+x181);
IkReal x239=(x132+x181);
IkReal x240=(x193+x192);
IkReal x241=(x220+x204);
IkReal x242=(x157+x193+x195);
IkReal x243=(x119+x181+x182);
IkReal x244=(x155+x192+x194);
IkReal x245=(x167+x191+x188);
IkReal x246=(x148+x149+x195+x194);
IkReal x247=(x171+x172+x191+x190);
IkReal x248=(x134+x137+x132+x180+x182);
IkReal x249=(x135+x134+x137+x180+x182);
op[0]=((((-1.0)*x105))+(((-1.0)*x104))+x103+x204+(((-1.0)*x220)));
op[1]=x200;
op[2]=((((-1.0)*x160))+x209);
op[3]=x201;
op[4]=((((-1.0)*x105))+x241+(((-1.0)*x213)));
op[5]=x161;
op[6]=x208;
op[7]=((0.02923743)+x216+(((-1.0)*x217))+(((-1.0)*x215)));
op[8]=x162;
op[9]=((((-1.0)*x164))+x163+x165);
op[10]=x202;
op[11]=((((-1.0)*x113))+x224+x205+(((-1.0)*x228)));
op[12]=((((-1.0)*x185))+(((-1.0)*x236))+x222+x206+x243+(((-1.0)*x227)));
op[13]=((((-1.0)*x124))+x130+x221+(((-1.0)*x229)));
op[14]=((((-1.0)*x128))+x166+x189+x233+(((-1.0)*x245)));
op[15]=((((-1.0)*x126))+x169+x187+(((-1.0)*x235)));
op[16]=(x226+x236+x237+(((-1.0)*x243))+(((-1.0)*x214)));
op[17]=((((-1.0)*x232))+x229+(((-1.0)*x218)));
op[18]=((((-1.0)*x184))+(((-1.0)*x123))+x125+x129+x234);
op[19]=((0.000968247922437673)+(((-1.0)*x185))+(((-1.0)*x238))+x212+x248);
op[20]=((((-1.0)*x170))+x126+x186+(((-1.0)*x231)));
op[21]=((((-1.0)*x173))+(((-1.0)*x128))+x188+x189+(((-1.0)*x247)));
op[22]=((((-1.0)*x125))+x123+(((-1.0)*x234))+x210);
op[23]=(x239+x203+(((-1.0)*x249))+(((-1.0)*x212)));
op[24]=((((-1.0)*x141))+x140+x139+(((-1.0)*x138)));
op[25]=0;
op[26]=((((-0.186032432432432)*r01))+(((0.08)*r11)));
op[27]=0;
op[28]=((((-1.0)*x141))+(((-1.0)*x140))+x139+x138);
op[29]=0;
op[30]=0;
op[31]=((((-1.0)*x219))+(((-1.0)*x223)));
op[32]=0;
op[33]=((((0.0148)*r11))+(((0.034416)*r01)));
op[34]=0;
op[35]=(x223+(((-1.0)*x219)));
op[36]=(x225+x246+(((-1.0)*x240)));
op[37]=((((-1.0)*x150))+x151);
op[38]=((((-0.0168815416541888)*r01))+(((-0.11854972)*r11))+(((-1.0)*x199))+(((-1.0)*x196))+x198+x197);
op[39]=((((-1.0)*x153))+x152);
op[40]=(x225+x240+(((-1.0)*x246)));
op[41]=((((-1.0)*x151))+x150);
op[42]=((-1.0)*x207);
op[43]=(x211+x242+(((-1.0)*x244)));
op[44]=(x153+x152);
op[45]=((((-1.0)*x198))+(((-1.0)*x199))+(((-0.12014972)*r11))+x197+x196+(((0.0131608930055402)*r01)));
op[46]=x207;
op[47]=(x211+x244+(((-1.0)*x242)));
op[48]=(x213+x241+px);
op[49]=x200;
op[50]=((((-1.0)*x160))+(((-1.0)*x209)));
op[51]=x201;
op[52]=((((-1.0)*x103))+x104+x204+px+(((-1.0)*x220)));
op[53]=x161;
op[54]=x208;
op[55]=((0.02923743)+x217+(((-1.0)*x216))+(((-1.0)*x215)));
op[56]=x162;
op[57]=((((-1.0)*x165))+x163+x164);
op[58]=x202;
op[59]=((((-1.0)*x113))+x228+x205+(((-1.0)*x224)));
op[60]=(x214+x236+x237+(((-1.0)*x243))+(((-1.0)*x226)));
op[61]=((((-1.0)*x125))+x130+(((-1.0)*x218))+(((-1.0)*x229)));
op[62]=(x166+(((-1.0)*x230))+(((-1.0)*x233))+x245);
op[63]=((((-1.0)*x186))+x169+x126+x231);
op[64]=((((-1.0)*x185))+(((-1.0)*x236))+x227+x206+x243+(((-1.0)*x222)));
op[65]=((((-1.0)*x184))+(((-1.0)*x124))+x229+x221);
op[66]=(x123+x129+(((-1.0)*x232))+x234);
op[67]=(x212+x238+x203+(((-1.0)*x248)));
op[68]=((((-1.0)*x170))+(((-1.0)*x187))+(((-1.0)*x126))+x235);
op[69]=((((-1.0)*x173))+(((-1.0)*x188))+(((-1.0)*x230))+x247);
op[70]=((((-1.0)*x123))+x125+(((-1.0)*x234))+x210);
op[71]=((0.000968247922437673)+(((-1.0)*x185))+(((-1.0)*x239))+x249+(((-1.0)*x212)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j2array[16], cj2array[16], sj2array[16], j7array[16], cj7array[16], sj7array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ij2 += 3)
{
IkReal htj2 = zeror[ij2+0], htj7 = zeror[ij2+1], htj3 = zeror[ij2+2];
if(isnan(htj2)||isnan(htj7)||isnan(htj3)){
continue;
}
j2array[numsolutions]=((2.0)*(atan(htj2)));
j7array[numsolutions]=((2.0)*(atan(htj7)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x250=htj2*htj2;
CheckValue<IkReal> x251=IKPowWithIntegerCheck(((1.0)+x250),-1);
if(!x251.valid){
continue;
}
cj2array[numsolutions]=((x251.value)*(((1.0)+(((-1.0)*x250)))));
CheckValue<IkReal> x252=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x252.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x252.value));
}
if(isinf(htj7)){
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
}
else{
IkReal x253=htj7*htj7;
CheckValue<IkReal> x254=IKPowWithIntegerCheck(((1.0)+x253),-1);
if(!x254.valid){
continue;
}
cj7array[numsolutions]=((x254.value)*(((1.0)+(((-1.0)*x253)))));
CheckValue<IkReal> x255=IKPowWithIntegerCheck(((1.0)+(htj7*htj7)),-1);
if(!x255.valid){
continue;
}
sj7array[numsolutions]=((2.0)*htj7*(x255.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x256=htj3*htj3;
CheckValue<IkReal> x257=IKPowWithIntegerCheck(((1.0)+x256),-1);
if(!x257.valid){
continue;
}
cj3array[numsolutions]=((x257.value)*(((1.0)+(((-1.0)*x256)))));
CheckValue<IkReal> x258=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x258.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x258.value));
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j2valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj2 = 16;
_nj7 = 1;
_nj3 = 1;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
_ij7[0] = 0; _ij7[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( !j2valid[iij2] ) { continue; }
if( IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(cj7array[ij2]-cj7array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij2]-sj7array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij2]-cj3array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij2]-sj3array[iij2]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j2valid[iij2]=false; _ij2[1] = iij2; _ij7[1] = 0; _ij3[1] = 0;  break; 
}
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

    j7 = j7array[ij2]; cj7 = cj7array[ij2]; sj7 = sj7array[ij2];

    j3 = j3array[ij2]; cj3 = cj3array[ij2]; sj3 = sj3array[ij2];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j6eval[1];
IkReal x259=((4.0)*cj3);
IkReal x260=(cj3*r22);
IkReal x261=((4.0)*sj2*sj3);
IkReal x262=(cj2*r02*sj3);
IkReal x263=(r12*sj2*sj3);
IkReal x264=((4.0)*cj2*sj3);
IkReal x265=(((cj7*r01*x264))+((cj7*r11*x261))+((r10*sj7*x261))+((cj7*r21*x259))+((r20*sj7*x259))+((r00*sj7*x264)));
j6eval[0]=((((0.5)*(IKabs(((((-16.0)*x263))+(((-16.0)*x260))+(((-16.0)*x262)))))))+(IKabs(((((-8.0)*x262))+(((-8.0)*x260))+(((-8.0)*x263)))))+(((1.5)*(IKabs(x265)))));
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4, j5, j6]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x266=((4.0)*cj3);
IkReal x267=((16.0)*sj3);
IkReal x268=(cj2*r02);
IkReal x269=(r12*sj2);
IkReal x270=((8.0)*sj3);
IkReal x271=(cj3*r22);
IkReal x272=((4.0)*sj2*sj3);
IkReal x273=((4.0)*cj2*sj3);
IkReal x274=((((-1.0)*x269*x270))+(((-8.0)*x271))+(((-1.0)*x268*x270)));
IkReal x275=((((-1.0)*cj7*r21*x266))+(((-1.0)*r10*sj7*x272))+(((-1.0)*cj7*r01*x273))+(((-1.0)*r20*sj7*x266))+(((-1.0)*cj7*r11*x272))+(((-1.0)*r00*sj7*x273)));
IkReal x276=(((cj7*r11*x272))+((r10*sj7*x272))+((cj7*r21*x266))+((r20*sj7*x266))+((cj7*r01*x273))+((r00*sj7*x273)));
op[0]=x275;
op[1]=x274;
op[2]=x275;
op[3]=((((-16.0)*x271))+(((-1.0)*x267*x269))+(((-1.0)*x267*x268)));
op[4]=x276;
op[5]=x274;
op[6]=x276;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x277=((1.0)*sj6);
IkReal x278=(cj2*cj6);
IkReal x279=((1.0)*cj6*sj2);
if( IKabs((((cj6*cj7*r21))+(((-1.0)*r22*x277))+((cj6*r20*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj2*r12*x277))+(((-1.0)*cj7*r01*x279))+((cj7*r11*x278))+((r10*sj7*x278))+(((-1.0)*r00*sj7*x279))+((r02*sj2*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*cj7*r21))+(((-1.0)*r22*x277))+((cj6*r20*sj7))))+IKsqr(((((-1.0)*cj2*r12*x277))+(((-1.0)*cj7*r01*x279))+((cj7*r11*x278))+((r10*sj7*x278))+(((-1.0)*r00*sj7*x279))+((r02*sj2*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*cj7*r21))+(((-1.0)*r22*x277))+((cj6*r20*sj7))), ((((-1.0)*cj2*r12*x277))+(((-1.0)*cj7*r01*x279))+((cj7*r11*x278))+((r10*sj7*x278))+(((-1.0)*r00*sj7*x279))+((r02*sj2*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x280=(cj6*cj7);
IkReal x281=((1.0)*cj2);
IkReal x282=(cj6*sj7);
evalcond[0]=(((r22*sj6))+(IKsin(j4))+(((-1.0)*r21*x280))+(((-1.0)*r20*x282)));
evalcond[1]=((((-1.0)*r10*x281*x282))+(((-1.0)*r11*x280*x281))+((r01*sj2*x280))+(((-1.0)*r02*sj2*sj6))+(IKcos(j4))+((cj2*r12*sj6))+((r00*sj2*x282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
j5eval[1]=IKsign(cj4);
j5eval[2]=((IKabs(((((-1.0)*cj7*r20))+((r21*sj7)))))+(IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
j5eval[1]=IKsign(cj4);
j5eval[2]=((IKabs(((9.25)+(((-28.88)*sj4))+(((100.0)*pz))+(((-3.25)*cj4))+(((-1.0)*r21*sj7))+((cj7*r20)))))+(IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x283=(cj2*cj7);
IkReal x284=(r01*sj7);
IkReal x285=(cj7*sj2);
IkReal x286=((1.0)*r11*sj7);
if( IKabs((((r10*x283))+(((-1.0)*cj2*x286))+((sj2*x284))+(((-1.0)*r00*x285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj2*x284))+((r00*x283))+(((-1.0)*sj2*x286))+((r10*x285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x283))+(((-1.0)*cj2*x286))+((sj2*x284))+(((-1.0)*r00*x285))))+IKsqr(((((-1.0)*cj2*x284))+((r00*x283))+(((-1.0)*sj2*x286))+((r10*x285))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r10*x283))+(((-1.0)*cj2*x286))+((sj2*x284))+(((-1.0)*r00*x285))), ((((-1.0)*cj2*x284))+((r00*x283))+(((-1.0)*sj2*x286))+((r10*x285))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x287=IKsin(j5);
IkReal x288=IKcos(j5);
IkReal x289=(cj7*r00);
IkReal x290=((0.01)*sj2);
IkReal x291=(r01*sj7);
IkReal x292=((1.0)*cj2);
IkReal x293=((1.0)*sj2);
IkReal x294=(sj2*sj7);
IkReal x295=(r10*sj6);
IkReal x296=(cj2*cj6);
IkReal x297=(r11*sj7);
IkReal x298=(cj2*sj6);
IkReal x299=(cj7*r01);
IkReal x300=((0.01)*cj2);
IkReal x301=(r00*sj7);
IkReal x302=(cj7*r10);
IkReal x303=(cj7*r11);
evalcond[0]=(((cj2*x297))+(((-1.0)*x292*x302))+(((-1.0)*x291*x293))+((sj2*x289))+x287);
evalcond[1]=(((cj2*x291))+(((-1.0)*x289*x292))+x288+(((-1.0)*x293*x302))+((r11*x294)));
evalcond[2]=((0.1826)+((x289*x290))+(((-1.0)*py*x292))+(((-1.0)*x290*x291))+(((-0.01)*x287))+((x297*x300))+((px*sj2))+(((-1.0)*x300*x302)));
evalcond[3]=(((sj2*sj6*x303))+((x298*x301))+(((-1.0)*x287))+((x298*x299))+((x294*x295))+((cj6*r12*sj2))+((r02*x296)));
evalcond[4]=(((x290*x297))+(((-1.0)*py*x293))+((x291*x300))+(((-0.01)*x288))+(((-1.0)*x289*x300))+(((-1.0)*px*x292))+(((-1.0)*x290*x302)));
evalcond[5]=(((r12*x296))+((cj2*sj7*x295))+x288+(((-1.0)*cj6*r02*x293))+((x298*x303))+(((-1.0)*sj6*x293*x301))+(((-1.0)*sj6*x293*x299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x304=((1.0)*cj2);
IkReal x305=(cj7*r10);
IkReal x306=(cj7*r00);
IkReal x307=((1.0)*sj2*sj7);
if( IKabs((((cj2*r11*sj7))+(((-1.0)*r01*x307))+((sj2*x306))+(((-1.0)*x304*x305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x305))+(((-1.0)*r01*sj7*x304))+((cj2*x306))+(((-1.0)*r11*x307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*r11*sj7))+(((-1.0)*r01*x307))+((sj2*x306))+(((-1.0)*x304*x305))))+IKsqr((((sj2*x305))+(((-1.0)*r01*sj7*x304))+((cj2*x306))+(((-1.0)*r11*x307))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj2*r11*sj7))+(((-1.0)*r01*x307))+((sj2*x306))+(((-1.0)*x304*x305))), (((sj2*x305))+(((-1.0)*r01*sj7*x304))+((cj2*x306))+(((-1.0)*r11*x307))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x308=IKsin(j5);
IkReal x309=IKcos(j5);
IkReal x310=(cj7*r00);
IkReal x311=((0.01)*sj2);
IkReal x312=(r01*sj7);
IkReal x313=((1.0)*cj2);
IkReal x314=((1.0)*sj2);
IkReal x315=(sj2*sj7);
IkReal x316=(r10*sj6);
IkReal x317=(cj2*cj6);
IkReal x318=(r11*sj7);
IkReal x319=(cj2*sj6);
IkReal x320=(cj7*r01);
IkReal x321=((0.01)*cj2);
IkReal x322=(r00*sj7);
IkReal x323=(cj7*r10);
IkReal x324=(cj7*r11);
IkReal x325=((1.0)*x308);
evalcond[0]=(((r11*x315))+(((-1.0)*x310*x313))+(((-1.0)*x314*x323))+x309+((cj2*x312)));
evalcond[1]=((((-1.0)*x312*x314))+(((-1.0)*x325))+((cj2*x318))+((sj2*x310))+(((-1.0)*x313*x323)));
evalcond[2]=((0.2476)+((x318*x321))+((x310*x311))+(((-1.0)*x321*x323))+(((-1.0)*py*x313))+((px*sj2))+(((0.01)*x308))+(((-1.0)*x311*x312)));
evalcond[3]=(((r02*x317))+(((-1.0)*x325))+((x315*x316))+((sj2*sj6*x324))+((cj6*r12*sj2))+((x319*x322))+((x319*x320)));
evalcond[4]=(((x312*x321))+(((-1.0)*py*x314))+(((-0.01)*x309))+((x311*x318))+(((-1.0)*x311*x323))+(((-1.0)*x310*x321))+(((-1.0)*px*x313)));
evalcond[5]=((((-1.0)*sj6*x314*x322))+(((-1.0)*sj6*x314*x320))+(((-1.0)*x309))+((cj2*sj7*x316))+((r12*x317))+((x319*x324))+(((-1.0)*cj6*r02*x314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x326=((1.0)*sj7);
CheckValue<IkReal> x327=IKPowWithIntegerCheck(cj4,-1);
if(!x327.valid){
continue;
}
if( IKabs(((x327.value)*(((((-1.0)*cj7*r20))+((r21*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*cj7*r00))+(((-1.0)*cj2*r01*x326))+(((-1.0)*r11*sj2*x326))+((cj7*r10*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x327.value)*(((((-1.0)*cj7*r20))+((r21*sj7))))))+IKsqr((((cj2*cj7*r00))+(((-1.0)*cj2*r01*x326))+(((-1.0)*r11*sj2*x326))+((cj7*r10*sj2))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x327.value)*(((((-1.0)*cj7*r20))+((r21*sj7))))), (((cj2*cj7*r00))+(((-1.0)*cj2*r01*x326))+(((-1.0)*r11*sj2*x326))+((cj7*r10*sj2))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x328=IKcos(j5);
IkReal x329=IKsin(j5);
IkReal x330=((1.0)*cj4);
IkReal x331=(cj7*r00);
IkReal x332=((0.01)*sj2);
IkReal x333=(r01*sj7);
IkReal x334=((1.0)*cj2);
IkReal x335=(r21*sj7);
IkReal x336=((1.0)*sj2);
IkReal x337=(cj7*sj6);
IkReal x338=(cj2*cj6);
IkReal x339=(r11*sj7);
IkReal x340=((0.01)*cj2);
IkReal x341=(cj7*r20);
IkReal x342=(cj7*r10);
IkReal x343=(sj4*x329);
IkReal x344=(r00*sj6*sj7);
IkReal x345=(r10*sj6*sj7);
evalcond[0]=((((-1.0)*x329*x330))+x335+(((-1.0)*x341)));
evalcond[1]=(((r21*x337))+(((-1.0)*x328*x330))+((r20*sj6*sj7))+((cj6*r22)));
evalcond[2]=(((sj2*x339))+(((-1.0)*x336*x342))+((cj2*x333))+x328+(((-1.0)*x331*x334)));
evalcond[3]=(((sj2*x331))+(((-1.0)*x334*x342))+(((-1.0)*x333*x336))+((cj2*x339))+x343);
evalcond[4]=((-0.0925)+(((0.0325)*cj4))+(((0.01)*cj4*x329))+(((-0.01)*x341))+(((-1.0)*pz))+(((0.01)*x335))+(((0.2888)*sj4)));
evalcond[5]=(((r11*sj2*x337))+((cj2*r01*x337))+((sj2*x345))+((r02*x338))+(((-1.0)*x329))+((cj6*r12*sj2))+((cj2*x344)));
evalcond[6]=((((-1.0)*px*x334))+(((-1.0)*x331*x340))+((x332*x339))+(((-1.0)*x332*x342))+(((-1.0)*py*x336))+((x333*x340))+(((-0.01)*x328)));
evalcond[7]=(((sj4*x328))+((r12*x338))+(((-1.0)*x336*x344))+(((-1.0)*cj6*r02*x336))+(((-1.0)*r01*x336*x337))+((cj2*x345))+((cj2*r11*x337)));
evalcond[8]=((0.2151)+(((0.2888)*cj4))+((x331*x332))+(((-1.0)*py*x334))+(((-0.01)*x343))+(((-1.0)*x340*x342))+(((-1.0)*x332*x333))+((px*sj2))+((x339*x340))+(((-0.0325)*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x346 = IKatan2WithCheck(IkReal(((9.25)+(((-28.88)*sj4))+(((100.0)*pz))+(((-3.25)*cj4))+(((-1.0)*r21*sj7))+((cj7*r20)))),IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x346.valid){
continue;
}
CheckValue<IkReal> x347=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x347.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x346.value)+(((1.5707963267949)*(x347.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x348=IKcos(j5);
IkReal x349=IKsin(j5);
IkReal x350=((1.0)*cj4);
IkReal x351=(cj7*r00);
IkReal x352=((0.01)*sj2);
IkReal x353=(r01*sj7);
IkReal x354=((1.0)*cj2);
IkReal x355=(r21*sj7);
IkReal x356=((1.0)*sj2);
IkReal x357=(cj7*sj6);
IkReal x358=(cj2*cj6);
IkReal x359=(r11*sj7);
IkReal x360=((0.01)*cj2);
IkReal x361=(cj7*r20);
IkReal x362=(cj7*r10);
IkReal x363=(sj4*x349);
IkReal x364=(r00*sj6*sj7);
IkReal x365=(r10*sj6*sj7);
evalcond[0]=((((-1.0)*x361))+(((-1.0)*x349*x350))+x355);
evalcond[1]=(((r21*x357))+(((-1.0)*x348*x350))+((r20*sj6*sj7))+((cj6*r22)));
evalcond[2]=((((-1.0)*x356*x362))+((sj2*x359))+x348+(((-1.0)*x351*x354))+((cj2*x353)));
evalcond[3]=((((-1.0)*x354*x362))+((sj2*x351))+x363+(((-1.0)*x353*x356))+((cj2*x359)));
evalcond[4]=((-0.0925)+(((0.0325)*cj4))+(((0.01)*cj4*x349))+(((-0.01)*x361))+(((-1.0)*pz))+(((0.01)*x355))+(((0.2888)*sj4)));
evalcond[5]=(((cj2*r01*x357))+((r11*sj2*x357))+((sj2*x365))+((cj2*x364))+((cj6*r12*sj2))+((r02*x358))+(((-1.0)*x349)));
evalcond[6]=((((-1.0)*px*x354))+(((-1.0)*x352*x362))+((x352*x359))+(((-0.01)*x348))+((x353*x360))+(((-1.0)*py*x356))+(((-1.0)*x351*x360)));
evalcond[7]=(((r12*x358))+((cj2*r11*x357))+(((-1.0)*r01*x356*x357))+(((-1.0)*x356*x364))+(((-1.0)*cj6*r02*x356))+((sj4*x348))+((cj2*x365)));
evalcond[8]=((0.2151)+(((0.2888)*cj4))+(((-1.0)*x360*x362))+(((-0.01)*x363))+((x359*x360))+((x351*x352))+((px*sj2))+(((-0.0325)*sj4))+(((-1.0)*py*x354))+(((-1.0)*x352*x353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x366 = IKatan2WithCheck(IkReal(((((-1.0)*cj7*r20))+((r21*sj7)))),IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x366.valid){
continue;
}
CheckValue<IkReal> x367=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x367.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x366.value)+(((1.5707963267949)*(x367.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x368=IKcos(j5);
IkReal x369=IKsin(j5);
IkReal x370=((1.0)*cj4);
IkReal x371=(cj7*r00);
IkReal x372=((0.01)*sj2);
IkReal x373=(r01*sj7);
IkReal x374=((1.0)*cj2);
IkReal x375=(r21*sj7);
IkReal x376=((1.0)*sj2);
IkReal x377=(cj7*sj6);
IkReal x378=(cj2*cj6);
IkReal x379=(r11*sj7);
IkReal x380=((0.01)*cj2);
IkReal x381=(cj7*r20);
IkReal x382=(cj7*r10);
IkReal x383=(sj4*x369);
IkReal x384=(r00*sj6*sj7);
IkReal x385=(r10*sj6*sj7);
evalcond[0]=(x375+(((-1.0)*x381))+(((-1.0)*x369*x370)));
evalcond[1]=((((-1.0)*x368*x370))+((r20*sj6*sj7))+((cj6*r22))+((r21*x377)));
evalcond[2]=((((-1.0)*x376*x382))+x368+(((-1.0)*x371*x374))+((sj2*x379))+((cj2*x373)));
evalcond[3]=((((-1.0)*x374*x382))+x383+(((-1.0)*x373*x376))+((sj2*x371))+((cj2*x379)));
evalcond[4]=((-0.0925)+(((0.01)*cj4*x369))+(((0.0325)*cj4))+(((0.01)*x375))+(((-1.0)*pz))+(((-0.01)*x381))+(((0.2888)*sj4)));
evalcond[5]=(((r02*x378))+(((-1.0)*x369))+((cj2*x384))+((cj2*r01*x377))+((cj6*r12*sj2))+((r11*sj2*x377))+((sj2*x385)));
evalcond[6]=(((x373*x380))+(((-0.01)*x368))+((x372*x379))+(((-1.0)*py*x376))+(((-1.0)*x371*x380))+(((-1.0)*px*x374))+(((-1.0)*x372*x382)));
evalcond[7]=(((sj4*x368))+(((-1.0)*x376*x384))+((cj2*x385))+(((-1.0)*cj6*r02*x376))+((r12*x378))+(((-1.0)*r01*x376*x377))+((cj2*r11*x377)));
evalcond[8]=((0.2151)+(((0.2888)*cj4))+(((-1.0)*x380*x382))+(((-1.0)*x372*x373))+((x379*x380))+((px*sj2))+(((-0.01)*x383))+(((-1.0)*py*x374))+(((-0.0325)*sj4))+((x371*x372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x386=(cj2*cj6);
IkReal x387=((1.0)*cj6);
IkReal x388=(sj2*x387);
if( IKabs((((r22*sj6))+(((-1.0)*cj7*r21*x387))+(((-1.0)*r20*sj7*x387)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj7*x388))+(((-1.0)*cj7*r01*x388))+((cj7*r11*x386))+(((-1.0)*cj2*r12*sj6))+((r02*sj2*sj6))+((r10*sj7*x386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*sj6))+(((-1.0)*cj7*r21*x387))+(((-1.0)*r20*sj7*x387))))+IKsqr(((((-1.0)*r00*sj7*x388))+(((-1.0)*cj7*r01*x388))+((cj7*r11*x386))+(((-1.0)*cj2*r12*sj6))+((r02*sj2*sj6))+((r10*sj7*x386))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r22*sj6))+(((-1.0)*cj7*r21*x387))+(((-1.0)*r20*sj7*x387))), ((((-1.0)*r00*sj7*x388))+(((-1.0)*cj7*r01*x388))+((cj7*r11*x386))+(((-1.0)*cj2*r12*sj6))+((r02*sj2*sj6))+((r10*sj7*x386))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x389=(cj6*cj7);
IkReal x390=((1.0)*cj2);
IkReal x391=(cj6*sj7);
evalcond[0]=((((-1.0)*(IKsin(j4))))+(((-1.0)*r20*x391))+((r22*sj6))+(((-1.0)*r21*x389)));
evalcond[1]=(((r00*sj2*x391))+(((-1.0)*r11*x389*x390))+(((-1.0)*r02*sj2*sj6))+(IKcos(j4))+(((-1.0)*r10*x390*x391))+((cj2*r12*sj6))+((r01*sj2*x389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x392=((1.0)*r21);
j5eval[0]=cj4;
j5eval[1]=((IKabs(((((-1.0)*cj6*r22))+(((-1.0)*r20*sj6*sj7))+(((-1.0)*cj7*sj6*x392)))))+(IKabs(((((-1.0)*sj7*x392))+((cj7*r20))))));
j5eval[2]=IKsign(cj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x393=((1.0)*r20);
j5eval[0]=cj4;
j5eval[1]=((IKabs(((((-1.0)*cj6*r22))+(((-1.0)*sj6*sj7*x393))+(((-1.0)*cj7*r21*sj6)))))+(IKabs(((9.25)+(((-100.0)*pz))+(((-28.88)*sj4))+((r21*sj7))+(((-3.25)*cj4))+(((-1.0)*cj7*x393))))));
j5eval[2]=IKsign(cj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x394=(r11*sj7);
IkReal x395=((1.0)*cj2);
IkReal x396=(cj7*r10);
IkReal x397=((1.0)*sj2);
IkReal x398=(r01*sj7);
IkReal x399=(cj7*r00);
if( IKabs(((((-1.0)*x394*x395))+((sj2*x398))+(((-1.0)*x397*x399))+((cj2*x396)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x395*x399))+((sj2*x394))+((cj2*x398))+(((-1.0)*x396*x397)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x394*x395))+((sj2*x398))+(((-1.0)*x397*x399))+((cj2*x396))))+IKsqr(((((-1.0)*x395*x399))+((sj2*x394))+((cj2*x398))+(((-1.0)*x396*x397))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*x394*x395))+((sj2*x398))+(((-1.0)*x397*x399))+((cj2*x396))), ((((-1.0)*x395*x399))+((sj2*x394))+((cj2*x398))+(((-1.0)*x396*x397))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x400=IKsin(j5);
IkReal x401=IKcos(j5);
IkReal x402=(cj7*r00);
IkReal x403=((0.01)*sj2);
IkReal x404=(cj2*sj7);
IkReal x405=((1.0)*cj2);
IkReal x406=((1.0)*sj2);
IkReal x407=(r01*sj7);
IkReal x408=(cj2*cj6);
IkReal x409=(r11*sj7);
IkReal x410=(cj7*sj6);
IkReal x411=(r10*sj6);
IkReal x412=((0.01)*cj2);
IkReal x413=(r00*sj6);
IkReal x414=(cj7*r10);
evalcond[0]=(((r11*x404))+(((-1.0)*x406*x407))+((sj2*x402))+x400+(((-1.0)*x405*x414)));
evalcond[1]=((((-1.0)*x406*x414))+((sj2*x409))+(((-1.0)*x402*x405))+((r01*x404))+(((-1.0)*x401)));
evalcond[2]=(((x404*x413))+((sj2*sj7*x411))+((cj2*r01*x410))+x400+((r11*sj2*x410))+((cj6*r12*sj2))+((r02*x408)));
evalcond[3]=((0.1826)+(((-0.01)*x400))+(((0.01)*r11*x404))+(((-1.0)*x412*x414))+(((-1.0)*x403*x407))+((px*sj2))+(((-1.0)*py*x405))+((x402*x403)));
evalcond[4]=((((-1.0)*px*x405))+(((0.01)*r01*x404))+(((-1.0)*x403*x414))+(((-1.0)*x402*x412))+(((0.01)*x401))+(((-1.0)*py*x406))+((x403*x409)));
evalcond[5]=(((x404*x411))+((r12*x408))+(((-1.0)*sj7*x406*x413))+x401+(((-1.0)*r01*x406*x410))+(((-1.0)*cj6*r02*x406))+((cj2*r11*x410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x415=(sj2*sj7);
IkReal x416=(cj2*sj7);
IkReal x417=(cj7*sj2);
IkReal x418=((1.0)*cj2*cj7);
if( IKabs((((r11*x416))+(((-1.0)*r01*x415))+(((-1.0)*r10*x418))+((r00*x417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x417))+((r11*x415))+((r01*x416))+(((-1.0)*r00*x418)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x416))+(((-1.0)*r01*x415))+(((-1.0)*r10*x418))+((r00*x417))))+IKsqr(((((-1.0)*r10*x417))+((r11*x415))+((r01*x416))+(((-1.0)*r00*x418))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r11*x416))+(((-1.0)*r01*x415))+(((-1.0)*r10*x418))+((r00*x417))), ((((-1.0)*r10*x417))+((r11*x415))+((r01*x416))+(((-1.0)*r00*x418))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x419=IKsin(j5);
IkReal x420=IKcos(j5);
IkReal x421=(cj7*r00);
IkReal x422=((0.01)*sj2);
IkReal x423=(cj2*sj7);
IkReal x424=((1.0)*cj2);
IkReal x425=((1.0)*sj2);
IkReal x426=(r01*sj7);
IkReal x427=(cj2*cj6);
IkReal x428=(r11*sj7);
IkReal x429=(cj7*sj6);
IkReal x430=(r10*sj6);
IkReal x431=((0.01)*cj2);
IkReal x432=(r00*sj6);
IkReal x433=(cj7*r10);
IkReal x434=((1.0)*x420);
evalcond[0]=((((-1.0)*x424*x433))+(((-1.0)*x425*x426))+((sj2*x421))+((r11*x423))+(((-1.0)*x419)));
evalcond[1]=((((-1.0)*x421*x424))+(((-1.0)*x434))+((r01*x423))+(((-1.0)*x425*x433))+((sj2*x428)));
evalcond[2]=(((sj2*sj7*x430))+((r02*x427))+((r11*sj2*x429))+x419+((x423*x432))+((cj2*r01*x429))+((cj6*r12*sj2)));
evalcond[3]=((0.2476)+(((-1.0)*x422*x426))+(((0.01)*r11*x423))+(((-1.0)*x431*x433))+(((0.01)*x419))+((px*sj2))+(((-1.0)*py*x424))+((x421*x422)));
evalcond[4]=((((0.01)*r01*x423))+(((-1.0)*px*x424))+(((-1.0)*x421*x431))+(((-1.0)*x422*x433))+((x422*x428))+(((-1.0)*py*x425))+(((0.01)*x420)));
evalcond[5]=((((-1.0)*x434))+((x423*x430))+(((-1.0)*sj7*x425*x432))+(((-1.0)*cj6*r02*x425))+((cj2*r11*x429))+((r12*x427))+(((-1.0)*r01*x425*x429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x435=((1.0)*cj7);
CheckValue<IkReal> x436=IKPowWithIntegerCheck(cj4,-1);
if(!x436.valid){
continue;
}
if( IKabs(((x436.value)*(((((-1.0)*r21*sj7))+((cj7*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*r01*sj7))+(((-1.0)*r10*sj2*x435))+((r11*sj2*sj7))+(((-1.0)*cj2*r00*x435)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x436.value)*(((((-1.0)*r21*sj7))+((cj7*r20))))))+IKsqr((((cj2*r01*sj7))+(((-1.0)*r10*sj2*x435))+((r11*sj2*sj7))+(((-1.0)*cj2*r00*x435))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x436.value)*(((((-1.0)*r21*sj7))+((cj7*r20))))), (((cj2*r01*sj7))+(((-1.0)*r10*sj2*x435))+((r11*sj2*sj7))+(((-1.0)*cj2*r00*x435))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x437=IKsin(j5);
IkReal x438=IKcos(j5);
IkReal x439=(cj7*r00);
IkReal x440=((0.01)*sj2);
IkReal x441=(r01*sj7);
IkReal x442=((1.0)*cj2);
IkReal x443=(r21*sj7);
IkReal x444=((1.0)*sj2);
IkReal x445=(cj7*sj6);
IkReal x446=(cj2*cj6);
IkReal x447=(r11*sj7);
IkReal x448=((0.01)*cj2);
IkReal x449=(cj7*r20);
IkReal x450=(cj7*r10);
IkReal x451=(sj4*x437);
IkReal x452=(r00*sj6*sj7);
IkReal x453=(cj4*x437);
IkReal x454=(r10*sj6*sj7);
evalcond[0]=((((-1.0)*x449))+x443+x453);
evalcond[1]=(((r21*x445))+((cj4*x438))+((r20*sj6*sj7))+((cj6*r22)));
evalcond[2]=((((-1.0)*x442*x450))+x451+((cj2*x447))+((sj2*x439))+(((-1.0)*x441*x444)));
evalcond[3]=((((-1.0)*x438))+(((-1.0)*x439*x442))+((cj2*x441))+((sj2*x447))+(((-1.0)*x444*x450)));
evalcond[4]=((0.0925)+(((-1.0)*pz))+(((-0.2888)*sj4))+(((-0.01)*x453))+(((-0.01)*x449))+(((0.01)*x443))+(((-0.0325)*cj4)));
evalcond[5]=(((sj2*x454))+((r02*x446))+((r11*sj2*x445))+((cj2*x452))+x437+((cj2*r01*x445))+((cj6*r12*sj2)));
evalcond[6]=((((-1.0)*x440*x450))+(((-1.0)*x439*x448))+((x440*x447))+((x441*x448))+(((-1.0)*py*x444))+(((0.01)*x438))+(((-1.0)*px*x442)));
evalcond[7]=(((sj4*x438))+((cj2*x454))+(((-1.0)*cj6*r02*x444))+((cj2*r11*x445))+(((-1.0)*x444*x452))+((r12*x446))+(((-1.0)*r01*x444*x445)));
evalcond[8]=((0.2151)+((x439*x440))+(((0.2888)*cj4))+((x447*x448))+(((-0.01)*x451))+(((-1.0)*py*x442))+((px*sj2))+(((-1.0)*x440*x441))+(((-0.0325)*sj4))+(((-1.0)*x448*x450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x455=((1.0)*r20);
CheckValue<IkReal> x456=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x456.valid){
continue;
}
CheckValue<IkReal> x457 = IKatan2WithCheck(IkReal(((9.25)+(((-100.0)*pz))+(((-28.88)*sj4))+(((-1.0)*cj7*x455))+((r21*sj7))+(((-3.25)*cj4)))),IkReal(((((-1.0)*sj6*sj7*x455))+(((-1.0)*cj6*r22))+(((-1.0)*cj7*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x457.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x456.value)))+(x457.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x458=IKsin(j5);
IkReal x459=IKcos(j5);
IkReal x460=(cj7*r00);
IkReal x461=((0.01)*sj2);
IkReal x462=(r01*sj7);
IkReal x463=((1.0)*cj2);
IkReal x464=(r21*sj7);
IkReal x465=((1.0)*sj2);
IkReal x466=(cj7*sj6);
IkReal x467=(cj2*cj6);
IkReal x468=(r11*sj7);
IkReal x469=((0.01)*cj2);
IkReal x470=(cj7*r20);
IkReal x471=(cj7*r10);
IkReal x472=(sj4*x458);
IkReal x473=(r00*sj6*sj7);
IkReal x474=(cj4*x458);
IkReal x475=(r10*sj6*sj7);
evalcond[0]=((((-1.0)*x470))+x464+x474);
evalcond[1]=(((cj4*x459))+((r20*sj6*sj7))+((cj6*r22))+((r21*x466)));
evalcond[2]=((((-1.0)*x462*x465))+((cj2*x468))+x472+(((-1.0)*x463*x471))+((sj2*x460)));
evalcond[3]=((((-1.0)*x459))+(((-1.0)*x460*x463))+((cj2*x462))+(((-1.0)*x465*x471))+((sj2*x468)));
evalcond[4]=((0.0925)+(((0.01)*x464))+(((-1.0)*pz))+(((-0.01)*x470))+(((-0.01)*x474))+(((-0.2888)*sj4))+(((-0.0325)*cj4)));
evalcond[5]=(((cj2*r01*x466))+((r11*sj2*x466))+((cj2*x473))+x458+((r02*x467))+((cj6*r12*sj2))+((sj2*x475)));
evalcond[6]=(((x461*x468))+(((0.01)*x459))+(((-1.0)*x460*x469))+(((-1.0)*py*x465))+(((-1.0)*x461*x471))+(((-1.0)*px*x463))+((x462*x469)));
evalcond[7]=(((cj2*x475))+((cj2*r11*x466))+((sj4*x459))+((r12*x467))+(((-1.0)*r01*x465*x466))+(((-1.0)*x465*x473))+(((-1.0)*cj6*r02*x465)));
evalcond[8]=((0.2151)+(((0.2888)*cj4))+((x468*x469))+(((-1.0)*x469*x471))+(((-1.0)*py*x463))+(((-0.01)*x472))+((x460*x461))+((px*sj2))+(((-1.0)*x461*x462))+(((-0.0325)*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x476=((1.0)*sj7);
CheckValue<IkReal> x477=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x477.valid){
continue;
}
CheckValue<IkReal> x478 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x476))+((cj7*r20)))),IkReal(((((-1.0)*cj6*r22))+(((-1.0)*r20*sj6*x476))+(((-1.0)*cj7*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x478.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x477.value)))+(x478.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x479=IKsin(j5);
IkReal x480=IKcos(j5);
IkReal x481=(cj7*r00);
IkReal x482=((0.01)*sj2);
IkReal x483=(r01*sj7);
IkReal x484=((1.0)*cj2);
IkReal x485=(r21*sj7);
IkReal x486=((1.0)*sj2);
IkReal x487=(cj7*sj6);
IkReal x488=(cj2*cj6);
IkReal x489=(r11*sj7);
IkReal x490=((0.01)*cj2);
IkReal x491=(cj7*r20);
IkReal x492=(cj7*r10);
IkReal x493=(sj4*x479);
IkReal x494=(r00*sj6*sj7);
IkReal x495=(cj4*x479);
IkReal x496=(r10*sj6*sj7);
evalcond[0]=((((-1.0)*x491))+x485+x495);
evalcond[1]=(((r20*sj6*sj7))+((cj4*x480))+((r21*x487))+((cj6*r22)));
evalcond[2]=(((cj2*x489))+(((-1.0)*x483*x486))+x493+((sj2*x481))+(((-1.0)*x484*x492)));
evalcond[3]=(((cj2*x483))+(((-1.0)*x486*x492))+(((-1.0)*x480))+(((-1.0)*x481*x484))+((sj2*x489)));
evalcond[4]=((0.0925)+(((-0.01)*x495))+(((-0.01)*x491))+(((0.01)*x485))+(((-1.0)*pz))+(((-0.2888)*sj4))+(((-0.0325)*cj4)));
evalcond[5]=(((cj2*r01*x487))+((r02*x488))+x479+((sj2*x496))+((cj6*r12*sj2))+((r11*sj2*x487))+((cj2*x494)));
evalcond[6]=((((-1.0)*x482*x492))+(((0.01)*x480))+((x483*x490))+(((-1.0)*px*x484))+(((-1.0)*x481*x490))+((x482*x489))+(((-1.0)*py*x486)));
evalcond[7]=(((cj2*r11*x487))+(((-1.0)*x486*x494))+((sj4*x480))+((r12*x488))+(((-1.0)*r01*x486*x487))+((cj2*x496))+(((-1.0)*cj6*r02*x486)));
evalcond[8]=((0.2151)+(((0.2888)*cj4))+((x489*x490))+(((-0.01)*x493))+(((-1.0)*x490*x492))+((x481*x482))+((px*sj2))+(((-1.0)*x482*x483))+(((-0.0325)*sj4))+(((-1.0)*py*x484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*sj7))+((cj7*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))))+IKsqr(((((-1.0)*r21*sj7))+((cj7*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))), ((((-1.0)*r21*sj7))+((cj7*r20))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x497=IKcos(j5);
IkReal x498=(r21*sj7);
IkReal x499=(cj7*r20);
evalcond[0]=((((-1.0)*x499))+x498+x497);
evalcond[1]=(((r20*sj6*sj7))+((cj6*r22))+(((-1.0)*(IKsin(j5))))+((cj7*r21*sj6)));
evalcond[2]=((((0.01)*x498))+(((-0.01)*x499))+(((-0.01)*x497))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x500=(cj2*cj7);
IkReal x501=(r01*sj7);
IkReal x502=(cj7*sj2);
IkReal x503=((1.0)*r11*sj7);
j4eval[0]=sj5;
j4eval[1]=((IKabs((((sj2*x501))+((r10*x500))+(((-1.0)*r00*x502))+(((-1.0)*cj2*x503)))))+(IKabs((((r10*x502))+(((-1.0)*sj2*x503))+((r00*x500))+(((-1.0)*cj2*x501))))));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=cj5;
j4eval[1]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x504=(cj2*cj7);
IkReal x505=(r01*sj7);
IkReal x506=(cj7*sj2);
IkReal x507=((1.0)*r11*sj7);
if( IKabs((((sj2*x505))+((r10*x504))+(((-1.0)*r00*x506))+(((-1.0)*cj2*x507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x506))+(((-1.0)*sj2*x507))+((r00*x504))+(((-1.0)*cj2*x505)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x505))+((r10*x504))+(((-1.0)*r00*x506))+(((-1.0)*cj2*x507))))+IKsqr((((r10*x506))+(((-1.0)*sj2*x507))+((r00*x504))+(((-1.0)*cj2*x505))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj2*x505))+((r10*x504))+(((-1.0)*r00*x506))+(((-1.0)*cj2*x507))), (((r10*x506))+(((-1.0)*sj2*x507))+((r00*x504))+(((-1.0)*cj2*x505))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x508=IKcos(j4);
IkReal x509=IKsin(j4);
IkReal x510=(cj2*sj7);
IkReal x511=((1.0)*sj2);
IkReal x512=(cj6*r10);
IkReal x513=(cj2*sj6);
IkReal x514=((0.01)*r11);
IkReal x515=(r01*sj7);
IkReal x516=(cj6*cj7);
IkReal x517=((1.0)*cj2);
IkReal x518=(sj2*sj7);
IkReal x519=((0.01)*cj7);
IkReal x520=(cj6*r00);
IkReal x521=(cj7*r10);
IkReal x522=(cj7*r00*sj2);
evalcond[0]=(((r11*x510))+(((-1.0)*x511*x515))+(((-1.0)*x517*x521))+x509+x522);
evalcond[1]=(((r01*x510))+((r11*x518))+(((-1.0)*x511*x521))+x508+(((-1.0)*cj7*r00*x517)));
evalcond[2]=((((-1.0)*x510*x512))+(((-1.0)*r02*sj6*x511))+((x518*x520))+x508+(((-1.0)*r11*x516*x517))+((r01*sj2*x516))+((r12*x513)));
evalcond[3]=(((r12*sj2*sj6))+(((-1.0)*sj7*x511*x512))+(((-1.0)*x510*x520))+((r02*x513))+(((-1.0)*r11*x511*x516))+(((-1.0)*r01*x516*x517))+(((-1.0)*x509)));
evalcond[4]=((0.2151)+((x510*x514))+(((0.2888)*x508))+(((-0.01)*sj2*x515))+(((-1.0)*cj2*r10*x519))+(((-0.0425)*x509))+((r00*sj2*x519))+((px*sj2))+(((-1.0)*py*x517)));
evalcond[5]=((0.0925)+((x514*x518))+(((-1.0)*px*x517))+(((-1.0)*cj2*r00*x519))+(((-0.0425)*x508))+(((0.01)*r01*x510))+(((-1.0)*py*x511))+(((-0.2888)*x509))+(((-1.0)*r10*sj2*x519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x523=(sj2*sj7);
IkReal x524=(cj2*sj7);
IkReal x525=(cj7*sj2);
IkReal x526=((1.0)*cj2*cj7);
if( IKabs((((r11*x524))+(((-1.0)*r10*x526))+(((-1.0)*r01*x523))+((r00*x525)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x523))+(((-1.0)*r00*x526))+(((-1.0)*r10*x525))+((r01*x524)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x524))+(((-1.0)*r10*x526))+(((-1.0)*r01*x523))+((r00*x525))))+IKsqr((((r11*x523))+(((-1.0)*r00*x526))+(((-1.0)*r10*x525))+((r01*x524))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*x524))+(((-1.0)*r10*x526))+(((-1.0)*r01*x523))+((r00*x525))), (((r11*x523))+(((-1.0)*r00*x526))+(((-1.0)*r10*x525))+((r01*x524))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x527=IKcos(j4);
IkReal x528=IKsin(j4);
IkReal x529=(cj7*r00);
IkReal x530=((0.01)*sj2);
IkReal x531=(cj2*sj7);
IkReal x532=((1.0)*sj2);
IkReal x533=(cj6*r10);
IkReal x534=((1.0)*cj2);
IkReal x535=(r02*sj6);
IkReal x536=(r01*sj7);
IkReal x537=(cj6*cj7);
IkReal x538=(r11*sj7);
IkReal x539=((0.01)*cj2);
IkReal x540=(r12*sj6);
IkReal x541=(cj7*r10);
IkReal x542=(cj6*r00);
IkReal x543=((1.0)*x528);
evalcond[0]=((((-1.0)*x532*x536))+(((-1.0)*x534*x541))+((r11*x531))+((sj2*x529))+(((-1.0)*x543)));
evalcond[1]=((((-1.0)*x532*x541))+((sj2*x538))+(((-1.0)*x527))+(((-1.0)*x529*x534))+((r01*x531)));
evalcond[2]=((((-1.0)*x532*x535))+(((-1.0)*x531*x533))+((sj2*sj7*x542))+((r01*sj2*x537))+x527+(((-1.0)*r11*x534*x537))+((cj2*x540)));
evalcond[3]=((((-1.0)*r11*x532*x537))+((sj2*x540))+(((-1.0)*x531*x542))+(((-1.0)*x543))+(((-1.0)*sj7*x532*x533))+(((-1.0)*r01*x534*x537))+((cj2*x535)));
evalcond[4]=((0.2151)+(((-1.0)*x539*x541))+(((-1.0)*x530*x536))+(((-0.0225)*x528))+(((-1.0)*py*x534))+(((0.2888)*x527))+((px*sj2))+((x529*x530))+(((0.01)*r11*x531)));
evalcond[5]=((0.0925)+(((0.01)*r01*x531))+(((-1.0)*x530*x541))+(((-1.0)*x529*x539))+(((-1.0)*px*x534))+(((-0.0225)*x527))+(((-1.0)*py*x532))+(((-0.2888)*x528))+((x530*x538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x544=((1.0)*cj2);
IkReal x545=(cj6*r12);
IkReal x546=(cj7*sj6);
IkReal x547=((1.0)*sj2);
IkReal x548=(cj6*r02);
IkReal x549=(r00*sj6*sj7);
IkReal x550=(r10*sj6*sj7);
if( IKabs(((((-1.0)*x544*x545))+(((-1.0)*r11*x544*x546))+(((-1.0)*x544*x550))+((sj2*x549))+((sj2*x548))+((r01*sj2*x546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x544*x548))+(((-1.0)*x544*x549))+(((-1.0)*x545*x547))+(((-1.0)*r11*x546*x547))+(((-1.0)*x547*x550))+(((-1.0)*r01*x544*x546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x544*x545))+(((-1.0)*r11*x544*x546))+(((-1.0)*x544*x550))+((sj2*x549))+((sj2*x548))+((r01*sj2*x546))))+IKsqr(((((-1.0)*x544*x548))+(((-1.0)*x544*x549))+(((-1.0)*x545*x547))+(((-1.0)*r11*x546*x547))+(((-1.0)*x547*x550))+(((-1.0)*r01*x544*x546))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x544*x545))+(((-1.0)*r11*x544*x546))+(((-1.0)*x544*x550))+((sj2*x549))+((sj2*x548))+((r01*sj2*x546))), ((((-1.0)*x544*x548))+(((-1.0)*x544*x549))+(((-1.0)*x545*x547))+(((-1.0)*r11*x546*x547))+(((-1.0)*x547*x550))+(((-1.0)*r01*x544*x546))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x551=IKcos(j4);
IkReal x552=IKsin(j4);
IkReal x553=(cj7*sj2);
IkReal x554=((0.01)*r00);
IkReal x555=((1.0)*sj2);
IkReal x556=(r10*sj7);
IkReal x557=(cj2*sj6);
IkReal x558=((1.0)*cj6);
IkReal x559=(cj2*cj6);
IkReal x560=((1.0)*cj2);
IkReal x561=(sj2*sj7);
IkReal x562=((0.01)*r11);
IkReal x563=(cj7*r01);
IkReal x564=(sj2*sj6);
IkReal x565=(cj2*cj7);
IkReal x566=(r00*sj7);
IkReal x567=((0.01)*r10);
IkReal x568=((0.01)*r01);
IkReal x569=(cj2*sj7);
evalcond[0]=(((x556*x564))+((r02*x559))+x551+((r11*sj6*x553))+((cj6*r12*sj2))+((x557*x566))+((x557*x563)));
evalcond[1]=(((r12*x557))+(((-1.0)*r11*x558*x565))+((cj6*r01*x553))+x551+(((-1.0)*cj2*x556*x558))+(((-1.0)*r02*sj6*x555))+((cj6*r00*x561)));
evalcond[2]=(((r12*x559))+(((-1.0)*sj6*x555*x566))+x552+((cj7*r11*x557))+((x556*x557))+(((-1.0)*cj6*r02*x555))+(((-1.0)*r01*sj6*x553)));
evalcond[3]=((((-1.0)*x552))+(((-1.0)*cj6*x555*x556))+((r02*x557))+((r12*x564))+(((-1.0)*r11*x553*x558))+(((-1.0)*cj2*x558*x566))+(((-1.0)*cj2*x558*x563)));
evalcond[4]=((0.2151)+((x562*x569))+(((-1.0)*py*x560))+(((-0.0325)*x552))+((px*sj2))+(((0.2888)*x551))+(((-1.0)*x561*x568))+((x553*x554))+(((-1.0)*x565*x567)));
evalcond[5]=((0.0925)+((x561*x562))+(((-1.0)*x554*x565))+(((-0.2888)*x552))+(((-0.0325)*x551))+(((-1.0)*py*x555))+((x568*x569))+(((-1.0)*x553*x567))+(((-1.0)*px*x560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x570=((1.0)*sj2);
IkReal x571=(cj2*cj6);
IkReal x572=(sj2*sj6);
IkReal x573=(r10*sj7);
IkReal x574=(r00*sj6*sj7);
IkReal x575=(cj2*cj7*sj6);
if( IKabs((((r12*x571))+(((-1.0)*cj6*r02*x570))+(((-1.0)*x570*x574))+(((-1.0)*cj7*r01*sj6*x570))+((cj2*sj6*x573))+((r11*x575)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x575))+((r02*x571))+((cj2*x574))+((cj7*r11*x572))+((cj6*r12*sj2))+((x572*x573)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x571))+(((-1.0)*cj6*r02*x570))+(((-1.0)*x570*x574))+(((-1.0)*cj7*r01*sj6*x570))+((cj2*sj6*x573))+((r11*x575))))+IKsqr((((r01*x575))+((r02*x571))+((cj2*x574))+((cj7*r11*x572))+((cj6*r12*sj2))+((x572*x573))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r12*x571))+(((-1.0)*cj6*r02*x570))+(((-1.0)*x570*x574))+(((-1.0)*cj7*r01*sj6*x570))+((cj2*sj6*x573))+((r11*x575))), (((r01*x575))+((r02*x571))+((cj2*x574))+((cj7*r11*x572))+((cj6*r12*sj2))+((x572*x573))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x576=IKcos(j4);
IkReal x577=IKsin(j4);
IkReal x578=(cj7*sj2);
IkReal x579=((0.01)*r00);
IkReal x580=((1.0)*sj2);
IkReal x581=(r10*sj7);
IkReal x582=(cj2*sj6);
IkReal x583=((1.0)*cj6);
IkReal x584=(cj2*cj6);
IkReal x585=((1.0)*cj2);
IkReal x586=(sj2*sj7);
IkReal x587=((0.01)*r11);
IkReal x588=(cj7*r01);
IkReal x589=(sj2*sj6);
IkReal x590=(r00*sj7);
IkReal x591=((0.01)*r10);
IkReal x592=(cj2*cj7);
IkReal x593=((0.01)*r01);
IkReal x594=(cj2*sj7);
IkReal x595=((1.0)*x577);
evalcond[0]=(((x581*x589))+((x582*x588))+((r02*x584))+(((-1.0)*x576))+((r11*sj6*x578))+((x582*x590))+((cj6*r12*sj2)));
evalcond[1]=(((r12*x582))+(((-1.0)*r02*sj6*x580))+(((-1.0)*cj2*x581*x583))+((cj6*r01*x578))+x576+(((-1.0)*r11*x583*x592))+((cj6*r00*x586)));
evalcond[2]=((((-1.0)*cj6*r02*x580))+((x581*x582))+((r12*x584))+((cj7*r11*x582))+(((-1.0)*sj6*x580*x590))+(((-1.0)*r01*sj6*x578))+(((-1.0)*x595)));
evalcond[3]=(((r12*x589))+((r02*x582))+(((-1.0)*cj2*x583*x590))+(((-1.0)*x595))+(((-1.0)*cj6*x580*x581))+(((-1.0)*r11*x578*x583))+(((-1.0)*cj2*x583*x588)));
evalcond[4]=((0.2151)+(((-1.0)*x586*x593))+(((-1.0)*py*x585))+((x578*x579))+(((0.2888)*x576))+(((-0.0325)*x577))+((px*sj2))+(((-1.0)*x591*x592))+((x587*x594)));
evalcond[5]=((0.0925)+(((-1.0)*py*x580))+(((-1.0)*px*x585))+((x586*x587))+(((-0.0325)*x576))+(((-0.2888)*x577))+(((-1.0)*x578*x591))+(((-1.0)*x579*x592))+((x593*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x596=(sj2*sj7);
IkReal x597=(cj7*sj2);
IkReal x598=((1.0)*cj2);
CheckValue<IkReal> x599=IKPowWithIntegerCheck(cj5,-1);
if(!x599.valid){
continue;
}
CheckValue<IkReal> x600=IKPowWithIntegerCheck(sj5,-1);
if(!x600.valid){
continue;
}
if( IKabs(((x599.value)*(((((-1.0)*r10*sj6*sj7*x598))+(((-1.0)*cj7*r11*sj6*x598))+(((-1.0)*cj6*r12*x598))+((r00*sj6*x596))+((cj6*r02*sj2))+((r01*sj6*x597)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x600.value)*((((cj2*cj7*r00))+(((-1.0)*r01*sj7*x598))+(((-1.0)*r11*x596))+((r10*x597)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x599.value)*(((((-1.0)*r10*sj6*sj7*x598))+(((-1.0)*cj7*r11*sj6*x598))+(((-1.0)*cj6*r12*x598))+((r00*sj6*x596))+((cj6*r02*sj2))+((r01*sj6*x597))))))+IKsqr(((x600.value)*((((cj2*cj7*r00))+(((-1.0)*r01*sj7*x598))+(((-1.0)*r11*x596))+((r10*x597))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x599.value)*(((((-1.0)*r10*sj6*sj7*x598))+(((-1.0)*cj7*r11*sj6*x598))+(((-1.0)*cj6*r12*x598))+((r00*sj6*x596))+((cj6*r02*sj2))+((r01*sj6*x597))))), ((x600.value)*((((cj2*cj7*r00))+(((-1.0)*r01*sj7*x598))+(((-1.0)*r11*x596))+((r10*x597))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x601=IKcos(j4);
IkReal x602=IKsin(j4);
IkReal x603=(r01*sj7);
IkReal x604=((1.0)*sj2);
IkReal x605=(r10*sj7);
IkReal x606=(cj2*sj6);
IkReal x607=(sj2*sj6);
IkReal x608=(cj6*cj7);
IkReal x609=(cj2*cj6);
IkReal x610=((1.0)*cj2);
IkReal x611=(cj7*r01);
IkReal x612=((0.01)*cj7);
IkReal x613=(r00*sj7);
IkReal x614=(cj7*r10);
IkReal x615=(cj6*sj2);
IkReal x616=(cj7*r11);
IkReal x617=((0.01)*cj2);
IkReal x618=(r11*sj7);
IkReal x619=(sj5*x601);
IkReal x620=(cj7*r00*sj2);
IkReal x621=(sj2*x618);
IkReal x622=(sj5*x602);
evalcond[0]=((((-1.0)*x603*x604))+(((-1.0)*x610*x614))+((cj2*x618))+x620+x622);
evalcond[1]=(((cj2*x603))+(((-1.0)*x604*x614))+x619+x621+(((-1.0)*cj7*r00*x610)));
evalcond[2]=(((x605*x607))+((cj5*x601))+((r12*x615))+((x606*x611))+((x606*x613))+((x607*x616))+((r02*x609)));
evalcond[3]=((((-1.0)*x605*x609))+((r12*x606))+((r01*sj2*x608))+(((-1.0)*r02*sj6*x604))+((x613*x615))+x601+(((-1.0)*r11*x608*x610)));
evalcond[4]=(((x605*x606))+((cj5*x602))+((r12*x609))+(((-1.0)*sj6*x604*x613))+(((-1.0)*sj6*x604*x611))+((x606*x616))+(((-1.0)*cj6*r02*x604)));
evalcond[5]=((((-1.0)*cj6*x604*x605))+(((-1.0)*r11*x604*x608))+((r12*x607))+(((-1.0)*r01*x608*x610))+(((-1.0)*x602))+((r02*x606))+(((-1.0)*x609*x613)));
evalcond[6]=((0.2151)+(((-0.0325)*x602))+(((-0.01)*x622))+((x617*x618))+(((0.2888)*x601))+(((-1.0)*py*x610))+((px*sj2))+(((-0.01)*sj2*x603))+((r00*sj2*x612))+(((-1.0)*cj2*r10*x612)));
evalcond[7]=((0.0925)+(((-1.0)*cj2*r00*x612))+(((-0.0325)*x601))+(((0.01)*x621))+((x603*x617))+(((-0.2888)*x602))+(((-1.0)*py*x604))+(((-1.0)*r10*sj2*x612))+(((-0.01)*x619))+(((-1.0)*px*x610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x623=((1.0)*cj2);
IkReal x624=(cj2*cj6);
IkReal x625=((1.0)*cj6*sj2);
CheckValue<IkReal> x626=IKPowWithIntegerCheck(sj5,-1);
if(!x626.valid){
continue;
}
if( IKabs(((x626.value)*(((((-1.0)*cj7*r00*sj2))+((cj2*cj7*r10))+(((-1.0)*r11*sj7*x623))+((r01*sj2*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj7*r11*x624))+((r10*sj7*x624))+(((-1.0)*cj7*r01*x625))+(((-1.0)*r00*sj7*x625))+(((-1.0)*r12*sj6*x623))+((r02*sj2*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x626.value)*(((((-1.0)*cj7*r00*sj2))+((cj2*cj7*r10))+(((-1.0)*r11*sj7*x623))+((r01*sj2*sj7))))))+IKsqr((((cj7*r11*x624))+((r10*sj7*x624))+(((-1.0)*cj7*r01*x625))+(((-1.0)*r00*sj7*x625))+(((-1.0)*r12*sj6*x623))+((r02*sj2*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x626.value)*(((((-1.0)*cj7*r00*sj2))+((cj2*cj7*r10))+(((-1.0)*r11*sj7*x623))+((r01*sj2*sj7))))), (((cj7*r11*x624))+((r10*sj7*x624))+(((-1.0)*cj7*r01*x625))+(((-1.0)*r00*sj7*x625))+(((-1.0)*r12*sj6*x623))+((r02*sj2*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x627=IKcos(j4);
IkReal x628=IKsin(j4);
IkReal x629=(r01*sj7);
IkReal x630=((1.0)*sj2);
IkReal x631=(r10*sj7);
IkReal x632=(cj2*sj6);
IkReal x633=(sj2*sj6);
IkReal x634=(cj6*cj7);
IkReal x635=(cj2*cj6);
IkReal x636=((1.0)*cj2);
IkReal x637=(cj7*r01);
IkReal x638=((0.01)*cj7);
IkReal x639=(r00*sj7);
IkReal x640=(cj7*r10);
IkReal x641=(cj6*sj2);
IkReal x642=(cj7*r11);
IkReal x643=((0.01)*cj2);
IkReal x644=(r11*sj7);
IkReal x645=(sj5*x627);
IkReal x646=(cj7*r00*sj2);
IkReal x647=(sj2*x644);
IkReal x648=(sj5*x628);
evalcond[0]=((((-1.0)*x629*x630))+((cj2*x644))+x646+x648+(((-1.0)*x636*x640)));
evalcond[1]=((((-1.0)*x630*x640))+(((-1.0)*cj7*r00*x636))+x647+x645+((cj2*x629)));
evalcond[2]=(((r02*x635))+((cj5*x627))+((r12*x641))+((x632*x637))+((x632*x639))+((x633*x642))+((x631*x633)));
evalcond[3]=((((-1.0)*r02*sj6*x630))+((x639*x641))+(((-1.0)*r11*x634*x636))+((r01*sj2*x634))+x627+(((-1.0)*x631*x635))+((r12*x632)));
evalcond[4]=(((cj5*x628))+(((-1.0)*sj6*x630*x639))+(((-1.0)*sj6*x630*x637))+((x632*x642))+((r12*x635))+((x631*x632))+(((-1.0)*cj6*r02*x630)));
evalcond[5]=(((r02*x632))+(((-1.0)*r01*x634*x636))+(((-1.0)*cj6*x630*x631))+(((-1.0)*x635*x639))+(((-1.0)*r11*x630*x634))+(((-1.0)*x628))+((r12*x633)));
evalcond[6]=((0.2151)+(((-0.01)*sj2*x629))+(((-0.0325)*x628))+(((-0.01)*x648))+((x643*x644))+(((-1.0)*cj2*r10*x638))+((r00*sj2*x638))+(((0.2888)*x627))+((px*sj2))+(((-1.0)*py*x636)));
evalcond[7]=((0.0925)+(((-0.0325)*x627))+(((-0.2888)*x628))+(((-0.01)*x645))+((x629*x643))+(((-1.0)*r10*sj2*x638))+(((-1.0)*cj2*r00*x638))+(((-1.0)*px*x636))+(((0.01)*x647))+(((-1.0)*py*x630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x649=(cj2*cj7);
IkReal x650=(r01*sj7);
IkReal x651=(cj7*sj2);
IkReal x652=((1.0)*r11*sj7);
CheckValue<IkReal> x653=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x653.valid){
continue;
}
CheckValue<IkReal> x654 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x652))+((sj2*x650))+((r10*x649))+(((-1.0)*r00*x651)))),IkReal(((((-1.0)*cj2*x650))+(((-1.0)*sj2*x652))+((r10*x651))+((r00*x649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x653.value)))+(x654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x655=IKcos(j4);
IkReal x656=IKsin(j4);
IkReal x657=(r01*sj7);
IkReal x658=((1.0)*sj2);
IkReal x659=(r10*sj7);
IkReal x660=(cj2*sj6);
IkReal x661=(sj2*sj6);
IkReal x662=(cj6*cj7);
IkReal x663=(cj2*cj6);
IkReal x664=((1.0)*cj2);
IkReal x665=(cj7*r01);
IkReal x666=((0.01)*cj7);
IkReal x667=(r00*sj7);
IkReal x668=(cj7*r10);
IkReal x669=(cj6*sj2);
IkReal x670=(cj7*r11);
IkReal x671=((0.01)*cj2);
IkReal x672=(r11*sj7);
IkReal x673=(sj5*x655);
IkReal x674=(cj7*r00*sj2);
IkReal x675=(sj2*x672);
IkReal x676=(sj5*x656);
evalcond[0]=(((cj2*x672))+(((-1.0)*x657*x658))+x676+x674+(((-1.0)*x664*x668)));
evalcond[1]=(((cj2*x657))+(((-1.0)*x658*x668))+(((-1.0)*cj7*r00*x664))+x673+x675);
evalcond[2]=(((cj5*x655))+((x661*x670))+((r12*x669))+((r02*x663))+((x660*x665))+((x660*x667))+((x659*x661)));
evalcond[3]=(((x667*x669))+(((-1.0)*r02*sj6*x658))+((r01*sj2*x662))+((r12*x660))+(((-1.0)*x659*x663))+x655+(((-1.0)*r11*x662*x664)));
evalcond[4]=(((cj5*x656))+((x660*x670))+(((-1.0)*cj6*r02*x658))+((r12*x663))+((x659*x660))+(((-1.0)*sj6*x658*x667))+(((-1.0)*sj6*x658*x665)));
evalcond[5]=((((-1.0)*r01*x662*x664))+(((-1.0)*x656))+((r12*x661))+(((-1.0)*x663*x667))+((r02*x660))+(((-1.0)*cj6*x658*x659))+(((-1.0)*r11*x658*x662)));
evalcond[6]=((0.2151)+((x671*x672))+(((-0.01)*x676))+(((-1.0)*py*x664))+((r00*sj2*x666))+((px*sj2))+(((0.2888)*x655))+(((-0.01)*sj2*x657))+(((-0.0325)*x656))+(((-1.0)*cj2*r10*x666)));
evalcond[7]=((0.0925)+(((-1.0)*cj2*r00*x666))+(((0.01)*x675))+(((-0.01)*x673))+(((-1.0)*r10*sj2*x666))+(((-1.0)*px*x664))+(((-1.0)*py*x658))+((x657*x671))+(((-0.0325)*x655))+(((-0.2888)*x656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x677=((1.0)*cj7);
if( IKabs(((((-1.0)*cj6*r22))+(((-1.0)*r20*sj6*sj7))+(((-1.0)*r21*sj6*x677)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj7))+(((-1.0)*r20*x677)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r22))+(((-1.0)*r20*sj6*sj7))+(((-1.0)*r21*sj6*x677))))+IKsqr((((r21*sj7))+(((-1.0)*r20*x677))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj6*r22))+(((-1.0)*r20*sj6*sj7))+(((-1.0)*r21*sj6*x677))), (((r21*sj7))+(((-1.0)*r20*x677))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x678=IKcos(j5);
IkReal x679=(r21*sj7);
IkReal x680=(cj7*r20);
evalcond[0]=(x679+(((-1.0)*x678))+(((-1.0)*x680)));
evalcond[1]=(((r20*sj6*sj7))+(IKsin(j5))+((cj6*r22))+((cj7*r21*sj6)));
evalcond[2]=((((-0.01)*x680))+(((0.01)*x678))+(((0.01)*x679))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x681=(r11*sj7);
IkReal x682=((1.0)*cj2);
IkReal x683=(cj7*r10);
IkReal x684=((1.0)*sj2);
IkReal x685=(r01*sj7);
IkReal x686=(cj7*r00);
j4eval[0]=sj5;
j4eval[1]=((IKabs((((sj2*x681))+(((-1.0)*x682*x686))+(((-1.0)*x683*x684))+((cj2*x685)))))+(IKabs(((((-1.0)*x681*x682))+((sj2*x685))+(((-1.0)*x684*x686))+((cj2*x683))))));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=sj5;
j4eval[1]=cj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x687=(cj2*r02);
IkReal x688=(cj6*sj2);
IkReal x689=(r10*sj7);
IkReal x690=(cj2*sj6);
IkReal x691=(r00*sj7);
IkReal x692=(cj7*r01);
IkReal x693=((1.0)*sj6);
IkReal x694=(cj7*r11);
IkReal x695=(cj2*cj6);
IkReal x696=(sj2*sj6);
if( IKabs(((((-1.0)*x687*x693))+((x688*x694))+((x688*x689))+(((-1.0)*r12*sj2*x693))+((x691*x695))+((x692*x695)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*x687))+((x694*x696))+((x690*x691))+((x690*x692))+((x689*x696))+((r12*x688)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x687*x693))+((x688*x694))+((x688*x689))+(((-1.0)*r12*sj2*x693))+((x691*x695))+((x692*x695))))+IKsqr((((cj6*x687))+((x694*x696))+((x690*x691))+((x690*x692))+((x689*x696))+((r12*x688))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x687*x693))+((x688*x694))+((x688*x689))+(((-1.0)*r12*sj2*x693))+((x691*x695))+((x692*x695))), (((cj6*x687))+((x694*x696))+((x690*x691))+((x690*x692))+((x689*x696))+((r12*x688))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x697=IKcos(j4);
IkReal x698=IKsin(j4);
IkReal x699=(cj7*sj2);
IkReal x700=((0.01)*r00);
IkReal x701=((1.0)*sj2);
IkReal x702=(r10*sj7);
IkReal x703=(cj2*sj6);
IkReal x704=((1.0)*cj6);
IkReal x705=(cj2*cj6);
IkReal x706=((1.0)*cj2);
IkReal x707=(sj2*sj7);
IkReal x708=((0.01)*r11);
IkReal x709=(cj7*r01);
IkReal x710=(sj2*sj6);
IkReal x711=(r00*sj7);
IkReal x712=((0.01)*r10);
IkReal x713=(cj2*cj7);
IkReal x714=((0.01)*r01);
IkReal x715=(cj2*sj7);
evalcond[0]=(((x702*x710))+((x703*x709))+((x703*x711))+((cj6*r12*sj2))+((r02*x705))+((r11*sj6*x699))+(((-1.0)*x697)));
evalcond[1]=(((cj6*r01*x699))+((cj6*r00*x707))+(((-1.0)*cj2*x702*x704))+(((-1.0)*r02*sj6*x701))+(((-1.0)*r11*x704*x713))+x697+((r12*x703)));
evalcond[2]=(((x702*x703))+(((-1.0)*sj6*x701*x711))+((cj7*r11*x703))+x698+((r12*x705))+(((-1.0)*cj6*r02*x701))+(((-1.0)*r01*sj6*x699)));
evalcond[3]=((((-1.0)*cj6*x701*x702))+(((-1.0)*r11*x699*x704))+(((-1.0)*cj2*x704*x711))+(((-1.0)*cj2*x704*x709))+x698+((r12*x710))+((r02*x703)));
evalcond[4]=((0.2151)+(((-1.0)*py*x706))+(((0.2888)*x697))+(((-1.0)*x707*x714))+(((-0.0325)*x698))+((px*sj2))+(((-1.0)*x712*x713))+((x708*x715))+((x699*x700)));
evalcond[5]=((-0.0925)+(((-1.0)*py*x701))+((x714*x715))+(((0.2888)*x698))+(((0.0325)*x697))+((x707*x708))+(((-1.0)*px*x706))+(((-1.0)*x699*x712))+(((-1.0)*x700*x713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x716=(r00*sj7);
IkReal x717=(cj7*r01);
IkReal x718=((1.0)*sj6);
IkReal x719=(r12*sj2);
IkReal x720=((1.0)*cj6);
IkReal x721=(cj2*cj6);
IkReal x722=(cj2*x718);
IkReal x723=(r10*sj2*sj7);
IkReal x724=(cj7*r11*sj2);
if( IKabs(((((-1.0)*r02*x722))+((x717*x721))+(((-1.0)*x718*x719))+((cj6*x723))+((cj6*x724))+((x716*x721)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x717*x722))+(((-1.0)*cj2*r02*x720))+(((-1.0)*x716*x722))+(((-1.0)*x719*x720))+(((-1.0)*x718*x723))+(((-1.0)*x718*x724)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x722))+((x717*x721))+(((-1.0)*x718*x719))+((cj6*x723))+((cj6*x724))+((x716*x721))))+IKsqr(((((-1.0)*x717*x722))+(((-1.0)*cj2*r02*x720))+(((-1.0)*x716*x722))+(((-1.0)*x719*x720))+(((-1.0)*x718*x723))+(((-1.0)*x718*x724))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r02*x722))+((x717*x721))+(((-1.0)*x718*x719))+((cj6*x723))+((cj6*x724))+((x716*x721))), ((((-1.0)*x717*x722))+(((-1.0)*cj2*r02*x720))+(((-1.0)*x716*x722))+(((-1.0)*x719*x720))+(((-1.0)*x718*x723))+(((-1.0)*x718*x724))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x725=IKcos(j4);
IkReal x726=IKsin(j4);
IkReal x727=(cj7*sj2);
IkReal x728=((0.01)*r00);
IkReal x729=((1.0)*sj2);
IkReal x730=(r10*sj7);
IkReal x731=(cj2*sj6);
IkReal x732=((1.0)*cj6);
IkReal x733=(cj2*cj6);
IkReal x734=((1.0)*cj2);
IkReal x735=(sj2*sj7);
IkReal x736=((0.01)*r11);
IkReal x737=(cj7*r01);
IkReal x738=(sj2*sj6);
IkReal x739=(cj2*cj7);
IkReal x740=(r00*sj7);
IkReal x741=((0.01)*r10);
IkReal x742=((0.01)*r01);
IkReal x743=(cj2*sj7);
evalcond[0]=(((x731*x737))+((x731*x740))+((r02*x733))+x725+((cj6*r12*sj2))+((r11*sj6*x727))+((x730*x738)));
evalcond[1]=(((r12*x731))+((cj6*r00*x735))+((cj6*r01*x727))+(((-1.0)*r11*x732*x739))+(((-1.0)*r02*sj6*x729))+(((-1.0)*cj2*x730*x732))+x725);
evalcond[2]=(((r12*x738))+(((-1.0)*cj2*x732*x737))+(((-1.0)*r11*x727*x732))+((r02*x731))+x726+(((-1.0)*cj6*x729*x730))+(((-1.0)*cj2*x732*x740)));
evalcond[3]=(((r12*x733))+(((-1.0)*cj6*r02*x729))+(((-1.0)*r01*sj6*x727))+(((-1.0)*x726))+((cj7*r11*x731))+(((-1.0)*sj6*x729*x740))+((x730*x731)));
evalcond[4]=((0.2151)+((x727*x728))+(((0.2888)*x725))+((px*sj2))+(((-1.0)*x739*x741))+(((-0.0325)*x726))+(((-1.0)*py*x734))+(((-1.0)*x735*x742))+((x736*x743)));
evalcond[5]=((-0.0925)+((x742*x743))+((x735*x736))+(((0.2888)*x726))+(((-1.0)*x727*x741))+(((-1.0)*px*x734))+(((0.0325)*x725))+(((-1.0)*py*x729))+(((-1.0)*x728*x739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x744=(r11*sj7);
IkReal x745=((1.0)*cj2);
IkReal x746=(cj7*r10);
IkReal x747=((1.0)*sj2);
IkReal x748=(r01*sj7);
IkReal x749=(cj7*r00);
if( IKabs(((((-1.0)*x747*x749))+((cj2*x746))+(((-1.0)*x744*x745))+((sj2*x748)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x745*x749))+(((-1.0)*x746*x747))+((cj2*x748))+((sj2*x744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x747*x749))+((cj2*x746))+(((-1.0)*x744*x745))+((sj2*x748))))+IKsqr(((((-1.0)*x745*x749))+(((-1.0)*x746*x747))+((cj2*x748))+((sj2*x744))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x747*x749))+((cj2*x746))+(((-1.0)*x744*x745))+((sj2*x748))), ((((-1.0)*x745*x749))+(((-1.0)*x746*x747))+((cj2*x748))+((sj2*x744))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x750=IKcos(j4);
IkReal x751=IKsin(j4);
IkReal x752=(cj2*sj7);
IkReal x753=((1.0)*sj2);
IkReal x754=(cj6*r10);
IkReal x755=(cj2*sj6);
IkReal x756=((0.01)*r11);
IkReal x757=(r01*sj7);
IkReal x758=(cj6*cj7);
IkReal x759=((1.0)*cj2);
IkReal x760=(sj2*sj7);
IkReal x761=((0.01)*cj7);
IkReal x762=(cj6*r00);
IkReal x763=(cj7*r10);
IkReal x764=(cj7*r00*sj2);
evalcond[0]=((((-1.0)*x753*x757))+((r11*x752))+x751+x764+(((-1.0)*x759*x763)));
evalcond[1]=((((-1.0)*cj7*r00*x759))+(((-1.0)*x753*x763))+((r01*x752))+(((-1.0)*x750))+((r11*x760)));
evalcond[2]=((((-1.0)*x752*x754))+((x760*x762))+((r01*sj2*x758))+(((-1.0)*r11*x758*x759))+((r12*x755))+x750+(((-1.0)*r02*sj6*x753)));
evalcond[3]=(((r02*x755))+(((-1.0)*r11*x753*x758))+((r12*sj2*sj6))+(((-1.0)*x752*x762))+(((-1.0)*sj7*x753*x754))+x751+(((-1.0)*r01*x758*x759)));
evalcond[4]=((0.2151)+((x752*x756))+(((0.2888)*x750))+(((-0.0425)*x751))+(((-1.0)*py*x759))+((px*sj2))+(((-0.01)*sj2*x757))+((r00*sj2*x761))+(((-1.0)*cj2*r10*x761)));
evalcond[5]=((-0.0925)+(((0.01)*r01*x752))+(((-1.0)*px*x759))+(((0.2888)*x751))+((x756*x760))+(((0.0425)*x750))+(((-1.0)*py*x753))+(((-1.0)*cj2*r00*x761))+(((-1.0)*r10*sj2*x761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x765=((1.0)*cj2);
IkReal x766=(cj7*r10);
IkReal x767=(cj7*r00);
IkReal x768=((1.0)*sj2*sj7);
if( IKabs(((((-1.0)*r01*x768))+((cj2*r11*sj7))+((sj2*x767))+(((-1.0)*x765*x766)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*x767))+((sj2*x766))+(((-1.0)*r01*sj7*x765))+(((-1.0)*r11*x768)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x768))+((cj2*r11*sj7))+((sj2*x767))+(((-1.0)*x765*x766))))+IKsqr((((cj2*x767))+((sj2*x766))+(((-1.0)*r01*sj7*x765))+(((-1.0)*r11*x768))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*x768))+((cj2*r11*sj7))+((sj2*x767))+(((-1.0)*x765*x766))), (((cj2*x767))+((sj2*x766))+(((-1.0)*r01*sj7*x765))+(((-1.0)*r11*x768))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x769=IKcos(j4);
IkReal x770=IKsin(j4);
IkReal x771=(cj7*r00);
IkReal x772=((0.01)*sj2);
IkReal x773=(cj2*sj7);
IkReal x774=((1.0)*sj2);
IkReal x775=(cj6*r10);
IkReal x776=((1.0)*cj2);
IkReal x777=(r02*sj6);
IkReal x778=(r01*sj7);
IkReal x779=(cj6*cj7);
IkReal x780=(r11*sj7);
IkReal x781=(r12*sj6);
IkReal x782=((0.01)*cj2);
IkReal x783=(cj7*r10);
IkReal x784=(cj6*r00);
evalcond[0]=(((sj2*x780))+(((-1.0)*x771*x776))+((r01*x773))+x769+(((-1.0)*x774*x783)));
evalcond[1]=((((-1.0)*x774*x778))+(((-1.0)*x776*x783))+((r11*x773))+((sj2*x771))+(((-1.0)*x770)));
evalcond[2]=((((-1.0)*x774*x777))+((r01*sj2*x779))+(((-1.0)*r11*x776*x779))+((sj2*sj7*x784))+x769+((cj2*x781))+(((-1.0)*x773*x775)));
evalcond[3]=(((sj2*x781))+(((-1.0)*sj7*x774*x775))+((cj2*x777))+(((-1.0)*r11*x774*x779))+(((-1.0)*x773*x784))+(((-1.0)*r01*x776*x779))+x770);
evalcond[4]=((0.2151)+((x771*x772))+(((0.2888)*x769))+(((-1.0)*py*x776))+(((-0.0225)*x770))+(((-1.0)*x782*x783))+(((-1.0)*x772*x778))+(((0.01)*r11*x773))+((px*sj2)));
evalcond[5]=((-0.0925)+(((-1.0)*px*x776))+(((0.2888)*x770))+(((0.01)*r01*x773))+(((0.0225)*x769))+(((-1.0)*x771*x782))+(((-1.0)*x772*x783))+(((-1.0)*py*x774))+((x772*x780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x785=(cj2*sj7);
IkReal x786=(cj2*cj7);
IkReal x787=(cj7*sj2);
IkReal x788=(sj2*sj7);
CheckValue<IkReal> x789=IKPowWithIntegerCheck(sj5,-1);
if(!x789.valid){
continue;
}
CheckValue<IkReal> x790=IKPowWithIntegerCheck(cj5,-1);
if(!x790.valid){
continue;
}
if( IKabs(((x789.value)*((((r01*x788))+((r10*x786))+(((-1.0)*r00*x787))+(((-1.0)*r11*x785)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x790.value)*((((r00*sj6*x785))+((r01*sj6*x786))+((r10*sj6*x788))+((cj2*cj6*r02))+((r11*sj6*x787))+((cj6*r12*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x789.value)*((((r01*x788))+((r10*x786))+(((-1.0)*r00*x787))+(((-1.0)*r11*x785))))))+IKsqr(((x790.value)*((((r00*sj6*x785))+((r01*sj6*x786))+((r10*sj6*x788))+((cj2*cj6*r02))+((r11*sj6*x787))+((cj6*r12*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x789.value)*((((r01*x788))+((r10*x786))+(((-1.0)*r00*x787))+(((-1.0)*r11*x785))))), ((x790.value)*((((r00*sj6*x785))+((r01*sj6*x786))+((r10*sj6*x788))+((cj2*cj6*r02))+((r11*sj6*x787))+((cj6*r12*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x791=IKcos(j4);
IkReal x792=IKsin(j4);
IkReal x793=(r01*sj7);
IkReal x794=((1.0)*sj2);
IkReal x795=(r10*sj7);
IkReal x796=(cj2*sj6);
IkReal x797=(sj2*sj6);
IkReal x798=(cj6*cj7);
IkReal x799=(cj2*cj6);
IkReal x800=((1.0)*cj2);
IkReal x801=(cj7*r01);
IkReal x802=((0.01)*cj7);
IkReal x803=(r00*sj7);
IkReal x804=(cj7*r10);
IkReal x805=(cj6*sj2);
IkReal x806=(cj7*r11);
IkReal x807=((0.01)*cj2);
IkReal x808=(r11*sj7);
IkReal x809=(cj7*r00*sj2);
IkReal x810=(sj5*x791);
IkReal x811=(sj2*x808);
IkReal x812=(sj5*x792);
evalcond[0]=((((-1.0)*x793*x794))+((cj2*x808))+(((-1.0)*x800*x804))+x812+x809);
evalcond[1]=((((-1.0)*x810))+(((-1.0)*cj7*r00*x800))+x811+(((-1.0)*x794*x804))+((cj2*x793)));
evalcond[2]=(((r01*sj2*x798))+((x803*x805))+(((-1.0)*x795*x799))+(((-1.0)*r11*x798*x800))+x791+((r12*x796))+(((-1.0)*r02*sj6*x794)));
evalcond[3]=(((r12*x805))+((x797*x806))+((r02*x799))+(((-1.0)*cj5*x791))+((x796*x803))+((x796*x801))+((x795*x797)));
evalcond[4]=((((-1.0)*r01*x798*x800))+(((-1.0)*r11*x794*x798))+(((-1.0)*x799*x803))+((r02*x796))+x792+(((-1.0)*cj6*x794*x795))+((r12*x797)));
evalcond[5]=((((-1.0)*sj6*x794*x801))+(((-1.0)*sj6*x794*x803))+((cj5*x792))+((r12*x799))+((x796*x806))+(((-1.0)*cj6*r02*x794))+((x795*x796)));
evalcond[6]=((0.2151)+((r00*sj2*x802))+(((0.2888)*x791))+(((-0.01)*x812))+(((-1.0)*cj2*r10*x802))+(((-0.01)*sj2*x793))+(((-0.0325)*x792))+((px*sj2))+(((-1.0)*py*x800))+((x807*x808)));
evalcond[7]=((-0.0925)+(((-1.0)*r10*sj2*x802))+((x793*x807))+(((-1.0)*px*x800))+(((0.2888)*x792))+(((-1.0)*cj2*r00*x802))+(((0.0325)*x791))+(((-1.0)*py*x794))+(((0.01)*x810))+(((0.01)*x811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x813=(sj2*sj7);
IkReal x814=(cj2*r01);
IkReal x815=((1.0)*cj2);
IkReal x816=(cj7*sj2);
CheckValue<IkReal> x817=IKPowWithIntegerCheck(sj5,-1);
if(!x817.valid){
continue;
}
if( IKabs((((cj6*cj7*x814))+((cj6*r11*x816))+(((-1.0)*r02*sj6*x815))+((cj6*r10*x813))+(((-1.0)*r12*sj2*sj6))+((cj2*cj6*r00*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x817.value)*((((r11*x813))+(((-1.0)*r10*x816))+((sj7*x814))+(((-1.0)*cj7*r00*x815)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*cj7*x814))+((cj6*r11*x816))+(((-1.0)*r02*sj6*x815))+((cj6*r10*x813))+(((-1.0)*r12*sj2*sj6))+((cj2*cj6*r00*sj7))))+IKsqr(((x817.value)*((((r11*x813))+(((-1.0)*r10*x816))+((sj7*x814))+(((-1.0)*cj7*r00*x815))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*cj7*x814))+((cj6*r11*x816))+(((-1.0)*r02*sj6*x815))+((cj6*r10*x813))+(((-1.0)*r12*sj2*sj6))+((cj2*cj6*r00*sj7))), ((x817.value)*((((r11*x813))+(((-1.0)*r10*x816))+((sj7*x814))+(((-1.0)*cj7*r00*x815))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x818=IKcos(j4);
IkReal x819=IKsin(j4);
IkReal x820=(r01*sj7);
IkReal x821=((1.0)*sj2);
IkReal x822=(r10*sj7);
IkReal x823=(cj2*sj6);
IkReal x824=(sj2*sj6);
IkReal x825=(cj6*cj7);
IkReal x826=(cj2*cj6);
IkReal x827=((1.0)*cj2);
IkReal x828=(cj7*r01);
IkReal x829=((0.01)*cj7);
IkReal x830=(r00*sj7);
IkReal x831=(cj7*r10);
IkReal x832=(cj6*sj2);
IkReal x833=(cj7*r11);
IkReal x834=((0.01)*cj2);
IkReal x835=(r11*sj7);
IkReal x836=(cj7*r00*sj2);
IkReal x837=(sj5*x818);
IkReal x838=(sj2*x835);
IkReal x839=(sj5*x819);
evalcond[0]=((((-1.0)*x827*x831))+(((-1.0)*x820*x821))+x836+x839+((cj2*x835)));
evalcond[1]=((((-1.0)*x821*x831))+(((-1.0)*x837))+x838+(((-1.0)*cj7*r00*x827))+((cj2*x820)));
evalcond[2]=(((r12*x823))+((r01*sj2*x825))+(((-1.0)*x822*x826))+(((-1.0)*r11*x825*x827))+(((-1.0)*r02*sj6*x821))+((x830*x832))+x818);
evalcond[3]=(((x824*x833))+(((-1.0)*cj5*x818))+((x822*x824))+((x823*x830))+((x823*x828))+((r12*x832))+((r02*x826)));
evalcond[4]=(((r12*x824))+(((-1.0)*cj6*x821*x822))+(((-1.0)*r01*x825*x827))+(((-1.0)*x826*x830))+x819+((r02*x823))+(((-1.0)*r11*x821*x825)));
evalcond[5]=(((r12*x826))+(((-1.0)*sj6*x821*x830))+(((-1.0)*sj6*x821*x828))+((x822*x823))+((x823*x833))+((cj5*x819))+(((-1.0)*cj6*r02*x821)));
evalcond[6]=((0.2151)+(((-0.01)*x839))+(((-1.0)*py*x827))+(((-0.01)*sj2*x820))+(((0.2888)*x818))+(((-1.0)*cj2*r10*x829))+((r00*sj2*x829))+((x834*x835))+((px*sj2))+(((-0.0325)*x819)));
evalcond[7]=((-0.0925)+(((0.0325)*x818))+(((0.01)*x838))+(((0.01)*x837))+((x820*x834))+(((-1.0)*py*x821))+(((-1.0)*r10*sj2*x829))+(((0.2888)*x819))+(((-1.0)*cj2*r00*x829))+(((-1.0)*px*x827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x840=(r11*sj7);
IkReal x841=((1.0)*cj2);
IkReal x842=(r01*sj7);
IkReal x843=(cj7*r10);
IkReal x844=((1.0)*sj2);
IkReal x845=(cj7*r00);
CheckValue<IkReal> x846=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x846.valid){
continue;
}
CheckValue<IkReal> x847 = IKatan2WithCheck(IkReal(((((-1.0)*x840*x841))+(((-1.0)*x844*x845))+((sj2*x842))+((cj2*x843)))),IkReal(((((-1.0)*x841*x845))+(((-1.0)*x843*x844))+((sj2*x840))+((cj2*x842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x846.value)))+(x847.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x848=IKcos(j4);
IkReal x849=IKsin(j4);
IkReal x850=(r01*sj7);
IkReal x851=((1.0)*sj2);
IkReal x852=(r10*sj7);
IkReal x853=(cj2*sj6);
IkReal x854=(sj2*sj6);
IkReal x855=(cj6*cj7);
IkReal x856=(cj2*cj6);
IkReal x857=((1.0)*cj2);
IkReal x858=(cj7*r01);
IkReal x859=((0.01)*cj7);
IkReal x860=(r00*sj7);
IkReal x861=(cj7*r10);
IkReal x862=(cj6*sj2);
IkReal x863=(cj7*r11);
IkReal x864=((0.01)*cj2);
IkReal x865=(r11*sj7);
IkReal x866=(cj7*r00*sj2);
IkReal x867=(sj5*x848);
IkReal x868=(sj2*x865);
IkReal x869=(sj5*x849);
evalcond[0]=(((cj2*x865))+(((-1.0)*x850*x851))+x869+x866+(((-1.0)*x857*x861)));
evalcond[1]=(((cj2*x850))+(((-1.0)*x867))+(((-1.0)*cj7*r00*x857))+(((-1.0)*x851*x861))+x868);
evalcond[2]=((((-1.0)*r11*x855*x857))+((r01*sj2*x855))+(((-1.0)*x852*x856))+(((-1.0)*r02*sj6*x851))+((r12*x853))+((x860*x862))+x848);
evalcond[3]=((((-1.0)*cj5*x848))+((r12*x862))+((x853*x860))+((r02*x856))+((x852*x854))+((x853*x858))+((x854*x863)));
evalcond[4]=(((r12*x854))+(((-1.0)*cj6*x851*x852))+(((-1.0)*r11*x851*x855))+(((-1.0)*r01*x855*x857))+(((-1.0)*x856*x860))+((r02*x853))+x849);
evalcond[5]=((((-1.0)*cj6*r02*x851))+((r12*x856))+(((-1.0)*sj6*x851*x858))+(((-1.0)*sj6*x851*x860))+((cj5*x849))+((x853*x863))+((x852*x853)));
evalcond[6]=((0.2151)+(((-1.0)*cj2*r10*x859))+(((-0.0325)*x849))+(((0.2888)*x848))+(((-0.01)*x869))+(((-0.01)*sj2*x850))+(((-1.0)*py*x857))+((px*sj2))+((x864*x865))+((r00*sj2*x859)));
evalcond[7]=((-0.0925)+(((-1.0)*cj2*r00*x859))+((x850*x864))+(((0.2888)*x849))+(((0.01)*x868))+(((0.01)*x867))+(((-1.0)*py*x851))+(((-1.0)*r10*sj2*x859))+(((0.0325)*x848))+(((-1.0)*px*x857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x870=(r12*sj6);
IkReal x871=((1.0)*cj2);
IkReal x872=(r02*sj6);
IkReal x873=((1.0)*sj2);
IkReal x874=(cj6*cj7);
IkReal x875=(cj6*r00*sj7);
IkReal x876=(cj6*r10*sj7);
IkReal x877=(x873*x874);
CheckValue<IkReal> x878=IKPowWithIntegerCheck(cj3,-1);
if(!x878.valid){
continue;
}
if( IKabs(((x878.value)*((((sj2*x870))+((cj2*x872))+(((-1.0)*x871*x875))+(((-1.0)*x873*x876))+(((-1.0)*r01*x871*x874))+(((-1.0)*r11*x877)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x872))+((cj2*x876))+(((-1.0)*r01*x877))+((cj2*r11*x874))+(((-1.0)*x873*x875))+(((-1.0)*x870*x871)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x878.value)*((((sj2*x870))+((cj2*x872))+(((-1.0)*x871*x875))+(((-1.0)*x873*x876))+(((-1.0)*r01*x871*x874))+(((-1.0)*r11*x877))))))+IKsqr((((sj2*x872))+((cj2*x876))+(((-1.0)*r01*x877))+((cj2*r11*x874))+(((-1.0)*x873*x875))+(((-1.0)*x870*x871))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x878.value)*((((sj2*x870))+((cj2*x872))+(((-1.0)*x871*x875))+(((-1.0)*x873*x876))+(((-1.0)*r01*x871*x874))+(((-1.0)*r11*x877))))), (((sj2*x872))+((cj2*x876))+(((-1.0)*r01*x877))+((cj2*r11*x874))+(((-1.0)*x873*x875))+(((-1.0)*x870*x871))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x879=IKsin(j4);
IkReal x880=(sj2*sj6);
IkReal x881=(cj6*sj2);
IkReal x882=(r00*sj7);
IkReal x883=(cj2*sj6);
IkReal x884=(r10*sj7);
IkReal x885=((1.0)*cj6*cj7);
IkReal x886=((1.0)*cj2*cj6);
evalcond[0]=(((sj3*x879))+((r22*sj6))+(((-1.0)*cj6*r20*sj7))+(((-1.0)*r21*x885)));
evalcond[1]=(((x881*x882))+(((-1.0)*cj2*r11*x885))+((cj7*r01*x881))+(IKcos(j4))+(((-1.0)*x884*x886))+((r12*x883))+(((-1.0)*r02*x880)));
evalcond[2]=(((r02*x883))+(((-1.0)*x882*x886))+(((-1.0)*cj3*x879))+(((-1.0)*x881*x884))+(((-1.0)*cj7*r11*x881))+(((-1.0)*cj2*r01*x885))+((r12*x880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
IkReal x887=cj3*cj3;
IkReal x888=cj4*cj4;
IkReal x889=(cj3*r20);
IkReal x890=(cj4*sj3);
IkReal x891=(r21*sj7);
IkReal x892=(sj6*sj7);
IkReal x893=(cj6*r22);
IkReal x894=(cj7*r21*sj6);
IkReal x895=((((-1.0)*x887*x888))+x887+x888);
j5eval[0]=x895;
j5eval[1]=((IKabs((((cj3*x894))+((cj3*x893))+(((-1.0)*cj7*r20*x890))+((x889*x892))+((x890*x891)))))+(IKabs(((((-1.0)*cj3*x891))+((cj7*x889))+((r20*x890*x892))+((x890*x893))+((x890*x894))))));
j5eval[2]=IKsign(x895);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x896=(cj3*r20);
IkReal x897=(sj6*sj7);
IkReal x898=(r21*sj3);
IkReal x899=(cj7*sj6);
IkReal x900=(r20*sj3);
IkReal x901=(cj3*r21);
IkReal x902=(cj6*r22);
if( IKabs((((cj3*x902))+((x896*x897))+(((-1.0)*cj7*x900))+((x899*x901))+((sj7*x898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x898*x899))+((sj3*x902))+((cj7*x896))+((x897*x900))+(((-1.0)*sj7*x901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*x902))+((x896*x897))+(((-1.0)*cj7*x900))+((x899*x901))+((sj7*x898))))+IKsqr((((x898*x899))+((sj3*x902))+((cj7*x896))+((x897*x900))+(((-1.0)*sj7*x901))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*x902))+((x896*x897))+(((-1.0)*cj7*x900))+((x899*x901))+((sj7*x898))), (((x898*x899))+((sj3*x902))+((cj7*x896))+((x897*x900))+(((-1.0)*sj7*x901))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x903=IKsin(j5);
IkReal x904=IKcos(j5);
IkReal x905=(cj2*r01);
IkReal x906=(cj2*r00);
IkReal x907=((1.0)*cj7);
IkReal x908=(r21*sj7);
IkReal x909=((1.0)*sj3);
IkReal x910=((0.01)*sj3);
IkReal x911=(sj2*sj7);
IkReal x912=(cj7*sj6);
IkReal x913=((0.01)*cj7);
IkReal x914=(sj6*sj7);
IkReal x915=(r10*sj2);
IkReal x916=(cj3*x904);
IkReal x917=(cj3*x903);
IkReal x918=(x903*x909);
evalcond[0]=((((-1.0)*r20*x907))+(((-1.0)*x918))+x916+x908);
evalcond[1]=(((r20*x914))+(((-1.0)*x917))+((cj6*r22))+((r21*x912))+(((-1.0)*x904*x909)));
evalcond[2]=((((-1.0)*r20*x913))+((x903*x910))+(((0.01)*x908))+(((-1.0)*pz))+(((-0.06)*sj3))+(((-0.01)*x916)));
evalcond[3]=(((sj3*x904))+((r11*x911))+((sj7*x905))+(((-1.0)*x907*x915))+x917+(((-1.0)*x906*x907)));
evalcond[4]=(((r10*sj6*x911))+((r11*sj2*x912))+(((-1.0)*x918))+((cj2*cj6*r02))+((x906*x914))+((cj6*r12*sj2))+((x905*x912))+x916);
evalcond[5]=((((-1.0)*x913*x915))+(((-1.0)*x906*x913))+(((-1.0)*cj2*px))+(((-0.01)*x917))+(((-1.0)*py*sj2))+(((-1.0)*x904*x910))+(((0.01)*sj7*x905))+(((0.01)*r11*x911))+(((0.06)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x919=(cj7*sj6);
IkReal x920=(cj3*r20);
IkReal x921=(sj6*sj7);
IkReal x922=((1.0)*sj3);
IkReal x923=(cj6*r22);
IkReal x924=(cj3*r21);
IkReal x925=(r21*x922);
if( IKabs((((x919*x924))+((x920*x921))+((cj3*x923))+(((-1.0)*sj7*x925))+((cj7*r20*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj7*x924))+((cj7*x920))+(((-1.0)*r20*x921*x922))+(((-1.0)*x919*x925))+(((-1.0)*x922*x923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x919*x924))+((x920*x921))+((cj3*x923))+(((-1.0)*sj7*x925))+((cj7*r20*sj3))))+IKsqr(((((-1.0)*sj7*x924))+((cj7*x920))+(((-1.0)*r20*x921*x922))+(((-1.0)*x919*x925))+(((-1.0)*x922*x923))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((x919*x924))+((x920*x921))+((cj3*x923))+(((-1.0)*sj7*x925))+((cj7*r20*sj3))), ((((-1.0)*sj7*x924))+((cj7*x920))+(((-1.0)*r20*x921*x922))+(((-1.0)*x919*x925))+(((-1.0)*x922*x923))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x926=IKcos(j5);
IkReal x927=IKsin(j5);
IkReal x928=(cj2*r01);
IkReal x929=(cj2*r00);
IkReal x930=((1.0)*cj7);
IkReal x931=(r21*sj7);
IkReal x932=(cj7*sj6);
IkReal x933=(sj6*sj7);
IkReal x934=(r10*sj2);
IkReal x935=((0.01)*cj7);
IkReal x936=(sj3*x926);
IkReal x937=(sj3*x927);
IkReal x938=(cj3*x926);
IkReal x939=(r11*sj2*sj7);
IkReal x940=(cj3*x927);
IkReal x941=((1.0)*x940);
evalcond[0]=((((-1.0)*r20*x930))+x938+x937+x931);
evalcond[1]=((((-1.0)*x941))+((r21*x932))+((cj6*r22))+((r20*x933))+x936);
evalcond[2]=((((0.01)*x931))+(((-1.0)*r20*x935))+(((-1.0)*pz))+(((-0.01)*x938))+(((-0.01)*x937))+(((-0.125)*sj3)));
evalcond[3]=((((-1.0)*x941))+(((-1.0)*x930*x934))+(((-1.0)*x929*x930))+x939+x936+((sj7*x928)));
evalcond[4]=(((x928*x932))+((r11*sj2*x932))+((cj2*cj6*r02))+(((-1.0)*x937))+(((-1.0)*x938))+((cj6*r12*sj2))+((x929*x933))+((x933*x934)));
evalcond[5]=((((0.01)*x939))+(((-1.0)*x934*x935))+(((-1.0)*cj2*px))+(((0.01)*x940))+(((-1.0)*x929*x935))+(((0.01)*sj7*x928))+(((-1.0)*py*sj2))+(((-0.01)*x936))+(((0.125)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
j5eval[1]=IKsign(cj4);
j5eval[2]=((IKabs(((((-1.0)*cj7*r20))+((r21*sj7)))))+(IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
j5eval[1]=IKsign(cj4);
j5eval[2]=((IKabs(((9.25)+(((-28.88)*sj4))+(((100.0)*pz))+(((-3.25)*cj4))+(((-1.0)*r21*sj7))+((cj7*r20)))))+(IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x942=(cj2*cj7);
IkReal x943=(r01*sj7);
IkReal x944=(cj7*sj2);
IkReal x945=((1.0)*r11*sj7);
if( IKabs((((sj2*x943))+(((-1.0)*cj2*x945))+(((-1.0)*r00*x944))+((r10*x942)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x942))+(((-1.0)*cj2*x943))+(((-1.0)*sj2*x945))+((r10*x944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x943))+(((-1.0)*cj2*x945))+(((-1.0)*r00*x944))+((r10*x942))))+IKsqr((((r00*x942))+(((-1.0)*cj2*x943))+(((-1.0)*sj2*x945))+((r10*x944))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((sj2*x943))+(((-1.0)*cj2*x945))+(((-1.0)*r00*x944))+((r10*x942))), (((r00*x942))+(((-1.0)*cj2*x943))+(((-1.0)*sj2*x945))+((r10*x944))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x946=IKsin(j5);
IkReal x947=IKcos(j5);
IkReal x948=(cj7*r00);
IkReal x949=((0.01)*sj2);
IkReal x950=(r01*sj7);
IkReal x951=((1.0)*cj2);
IkReal x952=((1.0)*sj2);
IkReal x953=(sj2*sj7);
IkReal x954=(r10*sj6);
IkReal x955=(cj2*cj6);
IkReal x956=(r11*sj7);
IkReal x957=(cj2*sj6);
IkReal x958=(cj7*r01);
IkReal x959=((0.01)*cj2);
IkReal x960=(r00*sj7);
IkReal x961=(cj7*r10);
IkReal x962=(cj7*r11);
evalcond[0]=(((sj2*x948))+((cj2*x956))+(((-1.0)*x950*x952))+(((-1.0)*x951*x961))+x946);
evalcond[1]=(((cj2*x950))+((r11*x953))+(((-1.0)*x952*x961))+x947+(((-1.0)*x948*x951)));
evalcond[2]=((0.1826)+(((-1.0)*py*x951))+((x948*x949))+(((-1.0)*x959*x961))+((x956*x959))+(((-0.01)*x946))+((px*sj2))+(((-1.0)*x949*x950)));
evalcond[3]=(((sj2*sj6*x962))+(((-1.0)*x946))+((x957*x960))+((x957*x958))+((r02*x955))+((cj6*r12*sj2))+((x953*x954)));
evalcond[4]=((((-1.0)*py*x952))+((x949*x956))+(((-0.01)*x947))+(((-1.0)*px*x951))+(((-1.0)*x949*x961))+(((-1.0)*x948*x959))+((x950*x959)));
evalcond[5]=((((-1.0)*sj6*x952*x960))+(((-1.0)*sj6*x952*x958))+(((-1.0)*cj6*r02*x952))+((x957*x962))+((cj2*sj7*x954))+((r12*x955))+x947);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x963=((1.0)*cj2);
IkReal x964=(cj7*r10);
IkReal x965=(cj7*r00);
IkReal x966=((1.0)*sj2*sj7);
if( IKabs((((cj2*r11*sj7))+(((-1.0)*x963*x964))+(((-1.0)*r01*x966))+((sj2*x965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj7*x963))+((cj2*x965))+(((-1.0)*r11*x966))+((sj2*x964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*r11*sj7))+(((-1.0)*x963*x964))+(((-1.0)*r01*x966))+((sj2*x965))))+IKsqr(((((-1.0)*r01*sj7*x963))+((cj2*x965))+(((-1.0)*r11*x966))+((sj2*x964))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj2*r11*sj7))+(((-1.0)*x963*x964))+(((-1.0)*r01*x966))+((sj2*x965))), ((((-1.0)*r01*sj7*x963))+((cj2*x965))+(((-1.0)*r11*x966))+((sj2*x964))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x967=IKsin(j5);
IkReal x968=IKcos(j5);
IkReal x969=(cj7*r00);
IkReal x970=((0.01)*sj2);
IkReal x971=(r01*sj7);
IkReal x972=((1.0)*cj2);
IkReal x973=((1.0)*sj2);
IkReal x974=(sj2*sj7);
IkReal x975=(r10*sj6);
IkReal x976=(cj2*cj6);
IkReal x977=(r11*sj7);
IkReal x978=(cj2*sj6);
IkReal x979=(cj7*r01);
IkReal x980=((0.01)*cj2);
IkReal x981=(r00*sj7);
IkReal x982=(cj7*r10);
IkReal x983=(cj7*r11);
IkReal x984=((1.0)*x967);
evalcond[0]=((((-1.0)*x969*x972))+((cj2*x971))+((r11*x974))+x968+(((-1.0)*x973*x982)));
evalcond[1]=((((-1.0)*x984))+(((-1.0)*x971*x973))+(((-1.0)*x972*x982))+((cj2*x977))+((sj2*x969)));
evalcond[2]=((0.2476)+((x969*x970))+(((0.01)*x967))+(((-1.0)*py*x972))+((x977*x980))+(((-1.0)*x970*x971))+((px*sj2))+(((-1.0)*x980*x982)));
evalcond[3]=(((x978*x979))+(((-1.0)*x984))+((sj2*sj6*x983))+((x974*x975))+((cj6*r12*sj2))+((r02*x976))+((x978*x981)));
evalcond[4]=((((-1.0)*px*x972))+(((-1.0)*py*x973))+(((-1.0)*x969*x980))+(((-1.0)*x970*x982))+((x971*x980))+((x970*x977))+(((-0.01)*x968)));
evalcond[5]=((((-1.0)*sj6*x973*x979))+(((-1.0)*sj6*x973*x981))+(((-1.0)*cj6*r02*x973))+(((-1.0)*x968))+((r12*x976))+((cj2*sj7*x975))+((x978*x983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x985=((1.0)*sj7);
CheckValue<IkReal> x986=IKPowWithIntegerCheck(cj4,-1);
if(!x986.valid){
continue;
}
if( IKabs(((x986.value)*(((((-1.0)*cj7*r20))+((r21*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*cj7*r00))+((cj7*r10*sj2))+(((-1.0)*cj2*r01*x985))+(((-1.0)*r11*sj2*x985)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x986.value)*(((((-1.0)*cj7*r20))+((r21*sj7))))))+IKsqr((((cj2*cj7*r00))+((cj7*r10*sj2))+(((-1.0)*cj2*r01*x985))+(((-1.0)*r11*sj2*x985))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x986.value)*(((((-1.0)*cj7*r20))+((r21*sj7))))), (((cj2*cj7*r00))+((cj7*r10*sj2))+(((-1.0)*cj2*r01*x985))+(((-1.0)*r11*sj2*x985))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x987=IKcos(j5);
IkReal x988=IKsin(j5);
IkReal x989=((1.0)*cj4);
IkReal x990=(cj7*r00);
IkReal x991=((0.01)*sj2);
IkReal x992=(r01*sj7);
IkReal x993=((1.0)*cj2);
IkReal x994=(r21*sj7);
IkReal x995=((1.0)*sj2);
IkReal x996=(cj7*sj6);
IkReal x997=(cj2*cj6);
IkReal x998=(r11*sj7);
IkReal x999=((0.01)*cj2);
IkReal x1000=(cj7*r20);
IkReal x1001=(cj7*r10);
IkReal x1002=(sj4*x988);
IkReal x1003=(r00*sj6*sj7);
IkReal x1004=(r10*sj6*sj7);
evalcond[0]=((((-1.0)*x1000))+(((-1.0)*x988*x989))+x994);
evalcond[1]=(((r20*sj6*sj7))+((cj6*r22))+(((-1.0)*x987*x989))+((r21*x996)));
evalcond[2]=((((-1.0)*x990*x993))+((sj2*x998))+(((-1.0)*x1001*x995))+x987+((cj2*x992)));
evalcond[3]=(x1002+(((-1.0)*x992*x995))+((sj2*x990))+(((-1.0)*x1001*x993))+((cj2*x998)));
evalcond[4]=((-0.0925)+(((0.0325)*cj4))+(((0.01)*cj4*x988))+(((-0.01)*x1000))+(((-1.0)*pz))+(((0.2888)*sj4))+(((0.01)*x994)));
evalcond[5]=(((cj2*x1003))+((cj2*r01*x996))+(((-1.0)*x988))+((r02*x997))+((sj2*x1004))+((r11*sj2*x996))+((cj6*r12*sj2)));
evalcond[6]=(((x991*x998))+(((-1.0)*px*x993))+((x992*x999))+(((-1.0)*py*x995))+(((-1.0)*x990*x999))+(((-1.0)*x1001*x991))+(((-0.01)*x987)));
evalcond[7]=(((cj2*r11*x996))+(((-1.0)*cj6*r02*x995))+((r12*x997))+((cj2*x1004))+(((-1.0)*x1003*x995))+((sj4*x987))+(((-1.0)*r01*x995*x996)));
evalcond[8]=((0.2151)+(((0.2888)*cj4))+((x998*x999))+(((-1.0)*x991*x992))+((x990*x991))+(((-1.0)*py*x993))+(((-0.01)*x1002))+(((-1.0)*x1001*x999))+((px*sj2))+(((-0.0325)*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1005 = IKatan2WithCheck(IkReal(((9.25)+(((-28.88)*sj4))+(((100.0)*pz))+(((-3.25)*cj4))+(((-1.0)*r21*sj7))+((cj7*r20)))),IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1005.valid){
continue;
}
CheckValue<IkReal> x1006=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1006.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1005.value)+(((1.5707963267949)*(x1006.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1007=IKcos(j5);
IkReal x1008=IKsin(j5);
IkReal x1009=((1.0)*cj4);
IkReal x1010=(cj7*r00);
IkReal x1011=((0.01)*sj2);
IkReal x1012=(r01*sj7);
IkReal x1013=((1.0)*cj2);
IkReal x1014=(r21*sj7);
IkReal x1015=((1.0)*sj2);
IkReal x1016=(cj7*sj6);
IkReal x1017=(cj2*cj6);
IkReal x1018=(r11*sj7);
IkReal x1019=((0.01)*cj2);
IkReal x1020=(cj7*r20);
IkReal x1021=(cj7*r10);
IkReal x1022=(sj4*x1008);
IkReal x1023=(r00*sj6*sj7);
IkReal x1024=(r10*sj6*sj7);
evalcond[0]=(x1014+(((-1.0)*x1020))+(((-1.0)*x1008*x1009)));
evalcond[1]=(((r21*x1016))+((r20*sj6*sj7))+(((-1.0)*x1007*x1009))+((cj6*r22)));
evalcond[2]=((((-1.0)*x1010*x1013))+x1007+((cj2*x1012))+(((-1.0)*x1015*x1021))+((sj2*x1018)));
evalcond[3]=((((-1.0)*x1012*x1015))+x1022+((cj2*x1018))+((sj2*x1010))+(((-1.0)*x1013*x1021)));
evalcond[4]=((-0.0925)+(((0.0325)*cj4))+(((-0.01)*x1020))+(((0.01)*x1014))+(((-1.0)*pz))+(((0.01)*cj4*x1008))+(((0.2888)*sj4)));
evalcond[5]=(((cj2*x1023))+((cj2*r01*x1016))+(((-1.0)*x1008))+((r02*x1017))+((r11*sj2*x1016))+((cj6*r12*sj2))+((sj2*x1024)));
evalcond[6]=((((-1.0)*px*x1013))+(((-1.0)*x1010*x1019))+(((-1.0)*py*x1015))+(((-0.01)*x1007))+((x1012*x1019))+(((-1.0)*x1011*x1021))+((x1011*x1018)));
evalcond[7]=(((cj2*x1024))+((sj4*x1007))+(((-1.0)*cj6*r02*x1015))+(((-1.0)*r01*x1015*x1016))+(((-1.0)*x1015*x1023))+((cj2*r11*x1016))+((r12*x1017)));
evalcond[8]=((0.2151)+(((0.2888)*cj4))+(((-1.0)*x1011*x1012))+(((-0.01)*x1022))+(((-1.0)*py*x1013))+(((-1.0)*x1019*x1021))+((px*sj2))+(((-0.0325)*sj4))+((x1018*x1019))+((x1010*x1011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1025 = IKatan2WithCheck(IkReal(((((-1.0)*cj7*r20))+((r21*sj7)))),IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1025.valid){
continue;
}
CheckValue<IkReal> x1026=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1026.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1025.value)+(((1.5707963267949)*(x1026.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1027=IKcos(j5);
IkReal x1028=IKsin(j5);
IkReal x1029=((1.0)*cj4);
IkReal x1030=(cj7*r00);
IkReal x1031=((0.01)*sj2);
IkReal x1032=(r01*sj7);
IkReal x1033=((1.0)*cj2);
IkReal x1034=(r21*sj7);
IkReal x1035=((1.0)*sj2);
IkReal x1036=(cj7*sj6);
IkReal x1037=(cj2*cj6);
IkReal x1038=(r11*sj7);
IkReal x1039=((0.01)*cj2);
IkReal x1040=(cj7*r20);
IkReal x1041=(cj7*r10);
IkReal x1042=(sj4*x1028);
IkReal x1043=(r00*sj6*sj7);
IkReal x1044=(r10*sj6*sj7);
evalcond[0]=((((-1.0)*x1028*x1029))+x1034+(((-1.0)*x1040)));
evalcond[1]=(((r20*sj6*sj7))+((r21*x1036))+((cj6*r22))+(((-1.0)*x1027*x1029)));
evalcond[2]=(((cj2*x1032))+x1027+((sj2*x1038))+(((-1.0)*x1030*x1033))+(((-1.0)*x1035*x1041)));
evalcond[3]=(((cj2*x1038))+x1042+(((-1.0)*x1032*x1035))+(((-1.0)*x1033*x1041))+((sj2*x1030)));
evalcond[4]=((-0.0925)+(((0.0325)*cj4))+(((0.01)*x1034))+(((-1.0)*pz))+(((0.01)*cj4*x1028))+(((-0.01)*x1040))+(((0.2888)*sj4)));
evalcond[5]=(((r02*x1037))+(((-1.0)*x1028))+((sj2*x1044))+((cj2*x1043))+((r11*sj2*x1036))+((cj6*r12*sj2))+((cj2*r01*x1036)));
evalcond[6]=(((x1031*x1038))+(((-1.0)*x1031*x1041))+(((-1.0)*py*x1035))+(((-0.01)*x1027))+(((-1.0)*x1030*x1039))+(((-1.0)*px*x1033))+((x1032*x1039)));
evalcond[7]=((((-1.0)*r01*x1035*x1036))+(((-1.0)*cj6*r02*x1035))+((sj4*x1027))+((cj2*x1044))+(((-1.0)*x1035*x1043))+((cj2*r11*x1036))+((r12*x1037)));
evalcond[8]=((0.2151)+((x1038*x1039))+(((0.2888)*cj4))+((x1030*x1031))+(((-1.0)*py*x1033))+(((-1.0)*x1039*x1041))+(((-1.0)*x1031*x1032))+(((-0.01)*x1042))+((px*sj2))+(((-0.0325)*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1045=((1.0)*r21);
j5eval[0]=cj4;
j5eval[1]=((IKabs(((((-1.0)*sj7*x1045))+((cj7*r20)))))+(IKabs(((((-1.0)*cj6*r22))+(((-1.0)*r20*sj6*sj7))+(((-1.0)*cj7*sj6*x1045))))));
j5eval[2]=IKsign(cj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1046=((1.0)*r20);
j5eval[0]=cj4;
j5eval[1]=((IKabs(((9.25)+(((-100.0)*pz))+(((-28.88)*sj4))+((r21*sj7))+(((-3.25)*cj4))+(((-1.0)*cj7*x1046)))))+(IKabs(((((-1.0)*cj6*r22))+(((-1.0)*sj6*sj7*x1046))+(((-1.0)*cj7*r21*sj6))))));
j5eval[2]=IKsign(cj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1047=(r11*sj7);
IkReal x1048=((1.0)*cj2);
IkReal x1049=(cj7*r10);
IkReal x1050=((1.0)*sj2);
IkReal x1051=(r01*sj7);
IkReal x1052=(cj7*r00);
if( IKabs((((sj2*x1051))+((cj2*x1049))+(((-1.0)*x1050*x1052))+(((-1.0)*x1047*x1048)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x1047))+((cj2*x1051))+(((-1.0)*x1048*x1052))+(((-1.0)*x1049*x1050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x1051))+((cj2*x1049))+(((-1.0)*x1050*x1052))+(((-1.0)*x1047*x1048))))+IKsqr((((sj2*x1047))+((cj2*x1051))+(((-1.0)*x1048*x1052))+(((-1.0)*x1049*x1050))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((sj2*x1051))+((cj2*x1049))+(((-1.0)*x1050*x1052))+(((-1.0)*x1047*x1048))), (((sj2*x1047))+((cj2*x1051))+(((-1.0)*x1048*x1052))+(((-1.0)*x1049*x1050))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1053=IKsin(j5);
IkReal x1054=IKcos(j5);
IkReal x1055=(cj7*r00);
IkReal x1056=((0.01)*sj2);
IkReal x1057=(cj2*sj7);
IkReal x1058=((1.0)*cj2);
IkReal x1059=((1.0)*sj2);
IkReal x1060=(r01*sj7);
IkReal x1061=(cj2*cj6);
IkReal x1062=(r11*sj7);
IkReal x1063=(cj7*sj6);
IkReal x1064=(r10*sj6);
IkReal x1065=((0.01)*cj2);
IkReal x1066=(r00*sj6);
IkReal x1067=(cj7*r10);
evalcond[0]=(((r11*x1057))+x1053+(((-1.0)*x1059*x1060))+(((-1.0)*x1058*x1067))+((sj2*x1055)));
evalcond[1]=(((sj2*x1062))+(((-1.0)*x1059*x1067))+(((-1.0)*x1055*x1058))+(((-1.0)*x1054))+((r01*x1057)));
evalcond[2]=(x1053+((sj2*sj7*x1064))+((x1057*x1066))+((cj2*r01*x1063))+((cj6*r12*sj2))+((r11*sj2*x1063))+((r02*x1061)));
evalcond[3]=((0.1826)+((x1055*x1056))+(((-1.0)*x1056*x1060))+(((0.01)*r11*x1057))+(((-1.0)*py*x1058))+(((-0.01)*x1053))+((px*sj2))+(((-1.0)*x1065*x1067)));
evalcond[4]=(((x1056*x1062))+(((-1.0)*px*x1058))+(((-1.0)*x1056*x1067))+(((-1.0)*py*x1059))+(((-1.0)*x1055*x1065))+(((0.01)*r01*x1057))+(((0.01)*x1054)));
evalcond[5]=((((-1.0)*sj7*x1059*x1066))+((r12*x1061))+((cj2*r11*x1063))+(((-1.0)*r01*x1059*x1063))+x1054+((x1057*x1064))+(((-1.0)*cj6*r02*x1059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1068=(sj2*sj7);
IkReal x1069=(cj2*sj7);
IkReal x1070=(cj7*sj2);
IkReal x1071=((1.0)*cj2*cj7);
if( IKabs(((((-1.0)*r01*x1068))+(((-1.0)*r10*x1071))+((r00*x1070))+((r11*x1069)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1071))+(((-1.0)*r10*x1070))+((r01*x1069))+((r11*x1068)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1068))+(((-1.0)*r10*x1071))+((r00*x1070))+((r11*x1069))))+IKsqr(((((-1.0)*r00*x1071))+(((-1.0)*r10*x1070))+((r01*x1069))+((r11*x1068))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r01*x1068))+(((-1.0)*r10*x1071))+((r00*x1070))+((r11*x1069))), ((((-1.0)*r00*x1071))+(((-1.0)*r10*x1070))+((r01*x1069))+((r11*x1068))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1072=IKsin(j5);
IkReal x1073=IKcos(j5);
IkReal x1074=(cj7*r00);
IkReal x1075=((0.01)*sj2);
IkReal x1076=(cj2*sj7);
IkReal x1077=((1.0)*cj2);
IkReal x1078=((1.0)*sj2);
IkReal x1079=(r01*sj7);
IkReal x1080=(cj2*cj6);
IkReal x1081=(r11*sj7);
IkReal x1082=(cj7*sj6);
IkReal x1083=(r10*sj6);
IkReal x1084=((0.01)*cj2);
IkReal x1085=(r00*sj6);
IkReal x1086=(cj7*r10);
IkReal x1087=((1.0)*x1073);
evalcond[0]=((((-1.0)*x1078*x1079))+((sj2*x1074))+(((-1.0)*x1077*x1086))+(((-1.0)*x1072))+((r11*x1076)));
evalcond[1]=((((-1.0)*x1074*x1077))+((sj2*x1081))+(((-1.0)*x1078*x1086))+((r01*x1076))+(((-1.0)*x1087)));
evalcond[2]=(((x1076*x1085))+x1072+((cj2*r01*x1082))+((sj2*sj7*x1083))+((cj6*r12*sj2))+((r02*x1080))+((r11*sj2*x1082)));
evalcond[3]=((0.2476)+(((-1.0)*x1075*x1079))+((x1074*x1075))+(((-1.0)*py*x1077))+(((-1.0)*x1084*x1086))+((px*sj2))+(((0.01)*r11*x1076))+(((0.01)*x1072)));
evalcond[4]=((((-1.0)*x1074*x1084))+(((-1.0)*px*x1077))+((x1075*x1081))+(((-1.0)*py*x1078))+(((0.01)*x1073))+(((-1.0)*x1075*x1086))+(((0.01)*r01*x1076)));
evalcond[5]=(((x1076*x1083))+(((-1.0)*r01*x1078*x1082))+(((-1.0)*sj7*x1078*x1085))+((r12*x1080))+((cj2*r11*x1082))+(((-1.0)*x1087))+(((-1.0)*cj6*r02*x1078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1088=((1.0)*cj7);
CheckValue<IkReal> x1089=IKPowWithIntegerCheck(cj4,-1);
if(!x1089.valid){
continue;
}
if( IKabs(((x1089.value)*(((((-1.0)*r21*sj7))+((cj7*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj2*r00*x1088))+((cj2*r01*sj7))+(((-1.0)*r10*sj2*x1088))+((r11*sj2*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1089.value)*(((((-1.0)*r21*sj7))+((cj7*r20))))))+IKsqr(((((-1.0)*cj2*r00*x1088))+((cj2*r01*sj7))+(((-1.0)*r10*sj2*x1088))+((r11*sj2*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1089.value)*(((((-1.0)*r21*sj7))+((cj7*r20))))), ((((-1.0)*cj2*r00*x1088))+((cj2*r01*sj7))+(((-1.0)*r10*sj2*x1088))+((r11*sj2*sj7))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1090=IKsin(j5);
IkReal x1091=IKcos(j5);
IkReal x1092=(cj7*r00);
IkReal x1093=((0.01)*sj2);
IkReal x1094=(r01*sj7);
IkReal x1095=((1.0)*cj2);
IkReal x1096=(r21*sj7);
IkReal x1097=((1.0)*sj2);
IkReal x1098=(cj7*sj6);
IkReal x1099=(cj2*cj6);
IkReal x1100=(r11*sj7);
IkReal x1101=((0.01)*cj2);
IkReal x1102=(cj7*r20);
IkReal x1103=(cj7*r10);
IkReal x1104=(sj4*x1090);
IkReal x1105=(r00*sj6*sj7);
IkReal x1106=(cj4*x1090);
IkReal x1107=(r10*sj6*sj7);
evalcond[0]=(x1106+x1096+(((-1.0)*x1102)));
evalcond[1]=(((cj4*x1091))+((r21*x1098))+((r20*sj6*sj7))+((cj6*r22)));
evalcond[2]=(x1104+(((-1.0)*x1094*x1097))+((sj2*x1092))+((cj2*x1100))+(((-1.0)*x1095*x1103)));
evalcond[3]=(((sj2*x1100))+(((-1.0)*x1091))+(((-1.0)*x1092*x1095))+((cj2*x1094))+(((-1.0)*x1097*x1103)));
evalcond[4]=((0.0925)+(((-0.01)*x1106))+(((-0.01)*x1102))+(((0.01)*x1096))+(((-1.0)*pz))+(((-0.2888)*sj4))+(((-0.0325)*cj4)));
evalcond[5]=(((sj2*x1107))+((r11*sj2*x1098))+x1090+((r02*x1099))+((cj6*r12*sj2))+((cj2*r01*x1098))+((cj2*x1105)));
evalcond[6]=(((x1094*x1101))+((x1093*x1100))+(((-1.0)*py*x1097))+(((-1.0)*x1093*x1103))+(((-1.0)*x1092*x1101))+(((0.01)*x1091))+(((-1.0)*px*x1095)));
evalcond[7]=(((sj4*x1091))+((r12*x1099))+((cj2*x1107))+((cj2*r11*x1098))+(((-1.0)*r01*x1097*x1098))+(((-1.0)*x1097*x1105))+(((-1.0)*cj6*r02*x1097)));
evalcond[8]=((0.2151)+(((0.2888)*cj4))+(((-1.0)*py*x1095))+(((-0.01)*x1104))+((x1092*x1093))+(((-1.0)*x1093*x1094))+((px*sj2))+((x1100*x1101))+(((-0.0325)*sj4))+(((-1.0)*x1101*x1103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1108=((1.0)*r20);
CheckValue<IkReal> x1109=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1109.valid){
continue;
}
CheckValue<IkReal> x1110 = IKatan2WithCheck(IkReal(((9.25)+(((-100.0)*pz))+(((-1.0)*cj7*x1108))+(((-28.88)*sj4))+((r21*sj7))+(((-3.25)*cj4)))),IkReal(((((-1.0)*cj6*r22))+(((-1.0)*sj6*sj7*x1108))+(((-1.0)*cj7*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1110.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1109.value)))+(x1110.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1111=IKsin(j5);
IkReal x1112=IKcos(j5);
IkReal x1113=(cj7*r00);
IkReal x1114=((0.01)*sj2);
IkReal x1115=(r01*sj7);
IkReal x1116=((1.0)*cj2);
IkReal x1117=(r21*sj7);
IkReal x1118=((1.0)*sj2);
IkReal x1119=(cj7*sj6);
IkReal x1120=(cj2*cj6);
IkReal x1121=(r11*sj7);
IkReal x1122=((0.01)*cj2);
IkReal x1123=(cj7*r20);
IkReal x1124=(cj7*r10);
IkReal x1125=(sj4*x1111);
IkReal x1126=(r00*sj6*sj7);
IkReal x1127=(cj4*x1111);
IkReal x1128=(r10*sj6*sj7);
evalcond[0]=(x1117+x1127+(((-1.0)*x1123)));
evalcond[1]=(((cj4*x1112))+((r20*sj6*sj7))+((cj6*r22))+((r21*x1119)));
evalcond[2]=(((sj2*x1113))+x1125+((cj2*x1121))+(((-1.0)*x1116*x1124))+(((-1.0)*x1115*x1118)));
evalcond[3]=((((-1.0)*x1112))+(((-1.0)*x1113*x1116))+((sj2*x1121))+((cj2*x1115))+(((-1.0)*x1118*x1124)));
evalcond[4]=((0.0925)+(((-0.01)*x1123))+(((-0.01)*x1127))+(((-1.0)*pz))+(((-0.2888)*sj4))+(((0.01)*x1117))+(((-0.0325)*cj4)));
evalcond[5]=(x1111+((cj2*x1126))+((cj2*r01*x1119))+((r11*sj2*x1119))+((sj2*x1128))+((cj6*r12*sj2))+((r02*x1120)));
evalcond[6]=(((x1114*x1121))+(((-1.0)*x1114*x1124))+(((-1.0)*px*x1116))+(((-1.0)*x1113*x1122))+(((-1.0)*py*x1118))+(((0.01)*x1112))+((x1115*x1122)));
evalcond[7]=(((cj2*x1128))+(((-1.0)*cj6*r02*x1118))+((cj2*r11*x1119))+((sj4*x1112))+(((-1.0)*r01*x1118*x1119))+((r12*x1120))+(((-1.0)*x1118*x1126)));
evalcond[8]=((0.2151)+(((-1.0)*x1114*x1115))+(((0.2888)*cj4))+((x1113*x1114))+((x1121*x1122))+(((-1.0)*x1122*x1124))+(((-0.01)*x1125))+(((-1.0)*py*x1116))+((px*sj2))+(((-0.0325)*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1129=((1.0)*sj7);
CheckValue<IkReal> x1130=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1130.valid){
continue;
}
CheckValue<IkReal> x1131 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x1129))+((cj7*r20)))),IkReal(((((-1.0)*cj6*r22))+(((-1.0)*cj7*r21*sj6))+(((-1.0)*r20*sj6*x1129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1131.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1130.value)))+(x1131.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1132=IKsin(j5);
IkReal x1133=IKcos(j5);
IkReal x1134=(cj7*r00);
IkReal x1135=((0.01)*sj2);
IkReal x1136=(r01*sj7);
IkReal x1137=((1.0)*cj2);
IkReal x1138=(r21*sj7);
IkReal x1139=((1.0)*sj2);
IkReal x1140=(cj7*sj6);
IkReal x1141=(cj2*cj6);
IkReal x1142=(r11*sj7);
IkReal x1143=((0.01)*cj2);
IkReal x1144=(cj7*r20);
IkReal x1145=(cj7*r10);
IkReal x1146=(sj4*x1132);
IkReal x1147=(r00*sj6*sj7);
IkReal x1148=(cj4*x1132);
IkReal x1149=(r10*sj6*sj7);
evalcond[0]=(x1148+x1138+(((-1.0)*x1144)));
evalcond[1]=(((r20*sj6*sj7))+((cj4*x1133))+((cj6*r22))+((r21*x1140)));
evalcond[2]=(x1146+(((-1.0)*x1137*x1145))+((cj2*x1142))+((sj2*x1134))+(((-1.0)*x1136*x1139)));
evalcond[3]=(((cj2*x1136))+((sj2*x1142))+(((-1.0)*x1134*x1137))+(((-1.0)*x1133))+(((-1.0)*x1139*x1145)));
evalcond[4]=((0.0925)+(((0.01)*x1138))+(((-1.0)*pz))+(((-0.2888)*sj4))+(((-0.01)*x1148))+(((-0.01)*x1144))+(((-0.0325)*cj4)));
evalcond[5]=(x1132+((cj2*x1147))+((sj2*x1149))+((r02*x1141))+((cj2*r01*x1140))+((cj6*r12*sj2))+((r11*sj2*x1140)));
evalcond[6]=((((-1.0)*x1135*x1145))+(((0.01)*x1133))+(((-1.0)*x1134*x1143))+(((-1.0)*py*x1139))+(((-1.0)*px*x1137))+((x1135*x1142))+((x1136*x1143)));
evalcond[7]=(((cj2*x1149))+((sj4*x1133))+((cj2*r11*x1140))+(((-1.0)*x1139*x1147))+(((-1.0)*r01*x1139*x1140))+(((-1.0)*cj6*r02*x1139))+((r12*x1141)));
evalcond[8]=((0.2151)+(((0.2888)*cj4))+(((-1.0)*x1143*x1145))+((x1142*x1143))+((x1134*x1135))+(((-1.0)*py*x1137))+(((-0.01)*x1146))+((px*sj2))+(((-1.0)*x1135*x1136))+(((-0.0325)*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=cj3;
j5eval[1]=IKsign(cj3);
j5eval[2]=((IKabs(((((-1.0)*r21*sj7))+((cj7*r20)))))+(IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=cj3;
j5eval[1]=IKsign(cj3);
j5eval[2]=((IKabs(((((-100.0)*pz))+(((19.63)*sj3))+(((-1.0)*cj7*r20))+((r21*sj7)))))+(IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1150=((1.0)*sj7);
CheckValue<IkReal> x1151=IKPowWithIntegerCheck(cj3,-1);
if(!x1151.valid){
continue;
}
if( IKabs(((((-1.0)*cj7*r00*sj2))+((cj2*cj7*r10))+(((-1.0)*cj2*r11*x1150))+((r01*sj2*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1151.value)*(((((-1.0)*r21*x1150))+((cj7*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*r00*sj2))+((cj2*cj7*r10))+(((-1.0)*cj2*r11*x1150))+((r01*sj2*sj7))))+IKsqr(((x1151.value)*(((((-1.0)*r21*x1150))+((cj7*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj7*r00*sj2))+((cj2*cj7*r10))+(((-1.0)*cj2*r11*x1150))+((r01*sj2*sj7))), ((x1151.value)*(((((-1.0)*r21*x1150))+((cj7*r20))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1152=IKcos(j5);
IkReal x1153=IKsin(j5);
IkReal x1154=(cj7*r00);
IkReal x1155=((0.01)*sj2);
IkReal x1156=(cj2*sj7);
IkReal x1157=((1.0)*cj2);
IkReal x1158=(r21*sj7);
IkReal x1159=((1.0)*sj2);
IkReal x1160=(r01*sj7);
IkReal x1161=(cj2*cj6);
IkReal x1162=(r11*sj7);
IkReal x1163=(cj7*sj6);
IkReal x1164=((0.01)*cj2);
IkReal x1165=(r00*sj6);
IkReal x1166=(cj7*r20);
IkReal x1167=(cj7*r10);
IkReal x1168=(r10*sj6);
IkReal x1169=(cj3*x1152);
IkReal x1170=(sj3*x1152);
IkReal x1171=((1.0)*x1153);
evalcond[0]=(x1158+x1169+(((-1.0)*x1166)));
evalcond[1]=(((r21*x1163))+((r20*sj6*sj7))+(((-1.0)*cj3*x1171))+((cj6*r22)));
evalcond[2]=((((-0.01)*x1166))+(((-0.01)*x1169))+(((0.1963)*sj3))+(((-1.0)*pz))+(((0.01)*x1158)));
evalcond[3]=(x1153+((r11*x1156))+(((-1.0)*x1159*x1160))+((sj2*x1154))+(((-1.0)*x1157*x1167)));
evalcond[4]=(((sj2*x1162))+(((-1.0)*x1154*x1157))+x1170+(((-1.0)*x1159*x1167))+((r01*x1156)));
evalcond[5]=((0.1826)+(((0.01)*r11*x1156))+(((-0.01)*x1153))+(((-1.0)*py*x1157))+((px*sj2))+(((-1.0)*x1155*x1160))+(((-1.0)*x1164*x1167))+((x1154*x1155)));
evalcond[6]=((((-1.0)*sj7*x1159*x1165))+x1152+((cj2*r11*x1163))+(((-1.0)*r01*x1159*x1163))+((x1156*x1168))+((r12*x1161))+(((-1.0)*cj6*r02*x1159)));
evalcond[7]=(((r02*x1161))+((r11*sj2*x1163))+((sj2*sj7*x1168))+(((-1.0)*sj3*x1171))+((x1156*x1165))+((cj6*r12*sj2))+((cj2*r01*x1163)));
evalcond[8]=((((-0.01)*x1170))+(((-1.0)*px*x1157))+((x1155*x1162))+(((-1.0)*py*x1159))+(((-1.0)*x1155*x1167))+(((-1.0)*x1154*x1164))+(((-0.1963)*cj3))+(((0.01)*r01*x1156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1172=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1172.valid){
continue;
}
CheckValue<IkReal> x1173 = IKatan2WithCheck(IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IkReal(((((-100.0)*pz))+(((19.63)*sj3))+(((-1.0)*cj7*r20))+((r21*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1173.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1172.value)))+(x1173.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1174=IKcos(j5);
IkReal x1175=IKsin(j5);
IkReal x1176=(cj7*r00);
IkReal x1177=((0.01)*sj2);
IkReal x1178=(cj2*sj7);
IkReal x1179=((1.0)*cj2);
IkReal x1180=(r21*sj7);
IkReal x1181=((1.0)*sj2);
IkReal x1182=(r01*sj7);
IkReal x1183=(cj2*cj6);
IkReal x1184=(r11*sj7);
IkReal x1185=(cj7*sj6);
IkReal x1186=((0.01)*cj2);
IkReal x1187=(r00*sj6);
IkReal x1188=(cj7*r20);
IkReal x1189=(cj7*r10);
IkReal x1190=(r10*sj6);
IkReal x1191=(cj3*x1174);
IkReal x1192=(sj3*x1174);
IkReal x1193=((1.0)*x1175);
evalcond[0]=(x1180+x1191+(((-1.0)*x1188)));
evalcond[1]=(((r20*sj6*sj7))+(((-1.0)*cj3*x1193))+((r21*x1185))+((cj6*r22)));
evalcond[2]=((((0.1963)*sj3))+(((-0.01)*x1191))+(((-0.01)*x1188))+(((-1.0)*pz))+(((0.01)*x1180)));
evalcond[3]=((((-1.0)*x1181*x1182))+x1175+(((-1.0)*x1179*x1189))+((r11*x1178))+((sj2*x1176)));
evalcond[4]=((((-1.0)*x1181*x1189))+x1192+((r01*x1178))+((sj2*x1184))+(((-1.0)*x1176*x1179)));
evalcond[5]=((0.1826)+(((-0.01)*x1175))+(((-1.0)*py*x1179))+(((-1.0)*x1186*x1189))+((x1176*x1177))+(((0.01)*r11*x1178))+((px*sj2))+(((-1.0)*x1177*x1182)));
evalcond[6]=(x1174+((x1178*x1190))+(((-1.0)*r01*x1181*x1185))+(((-1.0)*cj6*r02*x1181))+((cj2*r11*x1185))+(((-1.0)*sj7*x1181*x1187))+((r12*x1183)));
evalcond[7]=((((-1.0)*sj3*x1193))+((x1178*x1187))+((r11*sj2*x1185))+((sj2*sj7*x1190))+((cj2*r01*x1185))+((r02*x1183))+((cj6*r12*sj2)));
evalcond[8]=((((-1.0)*x1176*x1186))+(((-0.01)*x1192))+((x1177*x1184))+(((-1.0)*py*x1181))+(((0.01)*r01*x1178))+(((-1.0)*px*x1179))+(((-0.1963)*cj3))+(((-1.0)*x1177*x1189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1194=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1194.valid){
continue;
}
CheckValue<IkReal> x1195 = IKatan2WithCheck(IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IkReal(((((-1.0)*r21*sj7))+((cj7*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1195.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1194.value)))+(x1195.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1196=IKcos(j5);
IkReal x1197=IKsin(j5);
IkReal x1198=(cj7*r00);
IkReal x1199=((0.01)*sj2);
IkReal x1200=(cj2*sj7);
IkReal x1201=((1.0)*cj2);
IkReal x1202=(r21*sj7);
IkReal x1203=((1.0)*sj2);
IkReal x1204=(r01*sj7);
IkReal x1205=(cj2*cj6);
IkReal x1206=(r11*sj7);
IkReal x1207=(cj7*sj6);
IkReal x1208=((0.01)*cj2);
IkReal x1209=(r00*sj6);
IkReal x1210=(cj7*r20);
IkReal x1211=(cj7*r10);
IkReal x1212=(r10*sj6);
IkReal x1213=(cj3*x1196);
IkReal x1214=(sj3*x1196);
IkReal x1215=((1.0)*x1197);
evalcond[0]=(x1202+x1213+(((-1.0)*x1210)));
evalcond[1]=((((-1.0)*cj3*x1215))+((r20*sj6*sj7))+((r21*x1207))+((cj6*r22)));
evalcond[2]=((((0.1963)*sj3))+(((-0.01)*x1213))+(((-0.01)*x1210))+(((0.01)*x1202))+(((-1.0)*pz)));
evalcond[3]=(x1197+(((-1.0)*x1201*x1211))+((r11*x1200))+((sj2*x1198))+(((-1.0)*x1203*x1204)));
evalcond[4]=(x1214+(((-1.0)*x1203*x1211))+((sj2*x1206))+((r01*x1200))+(((-1.0)*x1198*x1201)));
evalcond[5]=((0.1826)+(((-1.0)*x1199*x1204))+(((-1.0)*x1208*x1211))+(((-0.01)*x1197))+(((0.01)*r11*x1200))+((x1198*x1199))+((px*sj2))+(((-1.0)*py*x1201)));
evalcond[6]=(x1196+(((-1.0)*r01*x1203*x1207))+(((-1.0)*cj6*r02*x1203))+((r12*x1205))+((cj2*r11*x1207))+(((-1.0)*sj7*x1203*x1209))+((x1200*x1212)));
evalcond[7]=(((r11*sj2*x1207))+((sj2*sj7*x1212))+((x1200*x1209))+(((-1.0)*sj3*x1215))+((cj6*r12*sj2))+((cj2*r01*x1207))+((r02*x1205)));
evalcond[8]=((((-0.01)*x1214))+(((0.01)*r01*x1200))+((x1199*x1206))+(((-1.0)*px*x1201))+(((-1.0)*x1199*x1211))+(((-1.0)*py*x1203))+(((-0.1963)*cj3))+(((-1.0)*x1198*x1208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=cj3;
j5eval[1]=IKsign(cj3);
j5eval[2]=((IKabs(((((-1.0)*r21*sj7))+((cj7*r20)))))+(IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=cj3;
j5eval[1]=IKsign(cj3);
j5eval[2]=((IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))))+(IKabs(((((-100.0)*pz))+(((-1.0)*cj7*r20))+((r21*sj7))+(((-38.13)*sj3))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1216=((1.0)*sj7);
CheckValue<IkReal> x1217=IKPowWithIntegerCheck(cj3,-1);
if(!x1217.valid){
continue;
}
if( IKabs(((((-1.0)*cj2*cj7*r10))+((cj2*r11*sj7))+((cj7*r00*sj2))+(((-1.0)*r01*sj2*x1216)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1217.value)*(((((-1.0)*r21*x1216))+((cj7*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj2*cj7*r10))+((cj2*r11*sj7))+((cj7*r00*sj2))+(((-1.0)*r01*sj2*x1216))))+IKsqr(((x1217.value)*(((((-1.0)*r21*x1216))+((cj7*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj2*cj7*r10))+((cj2*r11*sj7))+((cj7*r00*sj2))+(((-1.0)*r01*sj2*x1216))), ((x1217.value)*(((((-1.0)*r21*x1216))+((cj7*r20))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1218=IKcos(j5);
IkReal x1219=IKsin(j5);
IkReal x1220=(cj7*r00);
IkReal x1221=((0.01)*sj2);
IkReal x1222=(r01*sj7);
IkReal x1223=((1.0)*cj2);
IkReal x1224=(r21*sj7);
IkReal x1225=((1.0)*sj2);
IkReal x1226=(cj2*cj6);
IkReal x1227=(r11*sj7);
IkReal x1228=((0.01)*cj2);
IkReal x1229=(cj7*sj6);
IkReal x1230=(cj7*r20);
IkReal x1231=(cj7*r10);
IkReal x1232=(cj3*x1218);
IkReal x1233=(r00*sj6*sj7);
IkReal x1234=((1.0)*x1219);
IkReal x1235=(sj3*x1218);
IkReal x1236=(r10*sj6*sj7);
evalcond[0]=((((-1.0)*x1230))+x1232+x1224);
evalcond[1]=(((r20*sj6*sj7))+((cj6*r22))+((r21*x1229))+(((-1.0)*cj3*x1234)));
evalcond[2]=((((-1.0)*pz))+(((-0.01)*x1230))+(((-0.01)*x1232))+(((0.01)*x1224))+(((-0.3813)*sj3)));
evalcond[3]=(((cj2*x1227))+(((-1.0)*x1223*x1231))+((sj2*x1220))+(((-1.0)*x1234))+(((-1.0)*x1222*x1225)));
evalcond[4]=(((cj2*x1222))+x1235+(((-1.0)*x1225*x1231))+((sj2*x1227))+(((-1.0)*x1220*x1223)));
evalcond[5]=((0.2476)+(((0.01)*x1219))+(((-1.0)*x1221*x1222))+(((-1.0)*py*x1223))+(((-1.0)*x1228*x1231))+((x1220*x1221))+((px*sj2))+((x1227*x1228)));
evalcond[6]=(((cj2*x1233))+((sj2*x1236))+((cj2*r01*x1229))+((r02*x1226))+((r11*sj2*x1229))+(((-1.0)*sj3*x1234))+((cj6*r12*sj2)));
evalcond[7]=((((-1.0)*x1225*x1233))+((cj2*x1236))+((cj2*r11*x1229))+(((-1.0)*cj6*r02*x1225))+(((-1.0)*r01*x1225*x1229))+((r12*x1226))+(((-1.0)*x1218)));
evalcond[8]=((((-1.0)*px*x1223))+(((-1.0)*x1220*x1228))+(((-1.0)*x1221*x1231))+(((-1.0)*py*x1225))+(((0.3813)*cj3))+((x1221*x1227))+((x1222*x1228))+(((-0.01)*x1235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1237=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1237.valid){
continue;
}
CheckValue<IkReal> x1238 = IKatan2WithCheck(IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IkReal(((((-100.0)*pz))+(((-1.0)*cj7*r20))+((r21*sj7))+(((-38.13)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1238.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1237.value)))+(x1238.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1239=IKcos(j5);
IkReal x1240=IKsin(j5);
IkReal x1241=(cj7*r00);
IkReal x1242=((0.01)*sj2);
IkReal x1243=(r01*sj7);
IkReal x1244=((1.0)*cj2);
IkReal x1245=(r21*sj7);
IkReal x1246=((1.0)*sj2);
IkReal x1247=(cj2*cj6);
IkReal x1248=(r11*sj7);
IkReal x1249=((0.01)*cj2);
IkReal x1250=(cj7*sj6);
IkReal x1251=(cj7*r20);
IkReal x1252=(cj7*r10);
IkReal x1253=(cj3*x1239);
IkReal x1254=(r00*sj6*sj7);
IkReal x1255=((1.0)*x1240);
IkReal x1256=(sj3*x1239);
IkReal x1257=(r10*sj6*sj7);
evalcond[0]=(x1245+x1253+(((-1.0)*x1251)));
evalcond[1]=((((-1.0)*cj3*x1255))+((r21*x1250))+((r20*sj6*sj7))+((cj6*r22)));
evalcond[2]=((((0.01)*x1245))+(((-0.01)*x1251))+(((-0.01)*x1253))+(((-1.0)*pz))+(((-0.3813)*sj3)));
evalcond[3]=((((-1.0)*x1255))+((sj2*x1241))+(((-1.0)*x1243*x1246))+(((-1.0)*x1244*x1252))+((cj2*x1248)));
evalcond[4]=(x1256+((sj2*x1248))+(((-1.0)*x1246*x1252))+(((-1.0)*x1241*x1244))+((cj2*x1243)));
evalcond[5]=((0.2476)+(((-1.0)*x1249*x1252))+(((0.01)*x1240))+(((-1.0)*py*x1244))+((x1248*x1249))+(((-1.0)*x1242*x1243))+((x1241*x1242))+((px*sj2)));
evalcond[6]=(((cj2*x1254))+(((-1.0)*sj3*x1255))+((r02*x1247))+((cj6*r12*sj2))+((cj2*r01*x1250))+((r11*sj2*x1250))+((sj2*x1257)));
evalcond[7]=((((-1.0)*x1239))+(((-1.0)*cj6*r02*x1246))+(((-1.0)*r01*x1246*x1250))+((cj2*x1257))+(((-1.0)*x1246*x1254))+((cj2*r11*x1250))+((r12*x1247)));
evalcond[8]=((((-1.0)*px*x1244))+(((-1.0)*x1242*x1252))+(((-0.01)*x1256))+(((-1.0)*py*x1246))+(((0.3813)*cj3))+((x1242*x1248))+((x1243*x1249))+(((-1.0)*x1241*x1249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1258=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1258.valid){
continue;
}
CheckValue<IkReal> x1259 = IKatan2WithCheck(IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IkReal(((((-1.0)*r21*sj7))+((cj7*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1259.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1258.value)))+(x1259.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1260=IKcos(j5);
IkReal x1261=IKsin(j5);
IkReal x1262=(cj7*r00);
IkReal x1263=((0.01)*sj2);
IkReal x1264=(r01*sj7);
IkReal x1265=((1.0)*cj2);
IkReal x1266=(r21*sj7);
IkReal x1267=((1.0)*sj2);
IkReal x1268=(cj2*cj6);
IkReal x1269=(r11*sj7);
IkReal x1270=((0.01)*cj2);
IkReal x1271=(cj7*sj6);
IkReal x1272=(cj7*r20);
IkReal x1273=(cj7*r10);
IkReal x1274=(cj3*x1260);
IkReal x1275=(r00*sj6*sj7);
IkReal x1276=((1.0)*x1261);
IkReal x1277=(sj3*x1260);
IkReal x1278=(r10*sj6*sj7);
evalcond[0]=(x1274+x1266+(((-1.0)*x1272)));
evalcond[1]=(((r21*x1271))+((r20*sj6*sj7))+(((-1.0)*cj3*x1276))+((cj6*r22)));
evalcond[2]=((((-0.01)*x1272))+(((-0.01)*x1274))+(((-1.0)*pz))+(((0.01)*x1266))+(((-0.3813)*sj3)));
evalcond[3]=((((-1.0)*x1264*x1267))+(((-1.0)*x1276))+((cj2*x1269))+(((-1.0)*x1265*x1273))+((sj2*x1262)));
evalcond[4]=(x1277+(((-1.0)*x1267*x1273))+((cj2*x1264))+(((-1.0)*x1262*x1265))+((sj2*x1269)));
evalcond[5]=((0.2476)+((x1269*x1270))+(((-1.0)*x1270*x1273))+(((-1.0)*x1263*x1264))+(((0.01)*x1261))+((x1262*x1263))+((px*sj2))+(((-1.0)*py*x1265)));
evalcond[6]=(((r11*sj2*x1271))+((sj2*x1278))+((r02*x1268))+((cj2*x1275))+(((-1.0)*sj3*x1276))+((cj6*r12*sj2))+((cj2*r01*x1271)));
evalcond[7]=((((-1.0)*x1267*x1275))+((r12*x1268))+(((-1.0)*r01*x1267*x1271))+((cj2*r11*x1271))+((cj2*x1278))+(((-1.0)*cj6*r02*x1267))+(((-1.0)*x1260)));
evalcond[8]=(((x1264*x1270))+(((-0.01)*x1277))+(((-1.0)*x1263*x1273))+(((-1.0)*px*x1265))+(((0.3813)*cj3))+(((-1.0)*x1262*x1270))+((x1263*x1269))+(((-1.0)*py*x1267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1287=IKPowWithIntegerCheck(sj4,-1);
if(!x1287.valid){
continue;
}
IkReal x1279=x1287.value;
IkReal x1280=((1.0)*sj7);
IkReal x1281=(cj2*r11);
IkReal x1282=(cj2*r10);
IkReal x1283=(cj4*sj3);
IkReal x1284=(cj7*x1283);
IkReal x1285=((1.0)*r00*sj2);
IkReal x1286=(r01*sj2*sj7);
CheckValue<IkReal> x1288=IKPowWithIntegerCheck(cj3,-1);
if(!x1288.valid){
continue;
}
if( IKabs((x1279*((x1286+((cj7*x1282))+(((-1.0)*cj7*x1285))+(((-1.0)*x1280*x1281)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1279*(x1288.value)*(((((-1.0)*x1280*x1281*x1283))+(((-1.0)*x1284*x1285))+((x1283*x1286))+(((-1.0)*r21*sj4*x1280))+((x1282*x1284))+((cj7*r20*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1279*((x1286+((cj7*x1282))+(((-1.0)*cj7*x1285))+(((-1.0)*x1280*x1281))))))+IKsqr((x1279*(x1288.value)*(((((-1.0)*x1280*x1281*x1283))+(((-1.0)*x1284*x1285))+((x1283*x1286))+(((-1.0)*r21*sj4*x1280))+((x1282*x1284))+((cj7*r20*sj4))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1279*((x1286+((cj7*x1282))+(((-1.0)*cj7*x1285))+(((-1.0)*x1280*x1281))))), (x1279*(x1288.value)*(((((-1.0)*x1280*x1281*x1283))+(((-1.0)*x1284*x1285))+((x1283*x1286))+(((-1.0)*r21*sj4*x1280))+((x1282*x1284))+((cj7*r20*sj4))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1289=IKsin(j5);
IkReal x1290=IKcos(j5);
IkReal x1291=(cj7*r00);
IkReal x1292=((0.01)*sj2);
IkReal x1293=(r01*sj7);
IkReal x1294=((1.0)*cj2);
IkReal x1295=(r21*sj7);
IkReal x1296=((0.2888)*sj4);
IkReal x1297=((1.0)*sj2);
IkReal x1298=(cj3*cj4);
IkReal x1299=(cj7*sj6);
IkReal x1300=(cj2*cj6);
IkReal x1301=(r11*sj7);
IkReal x1302=((0.01)*cj2);
IkReal x1303=(cj7*r10);
IkReal x1304=(cj7*r20);
IkReal x1305=(sj4*x1289);
IkReal x1306=(cj3*x1290);
IkReal x1307=(r00*sj6*sj7);
IkReal x1308=(sj3*x1290);
IkReal x1309=(r10*sj6*sj7);
IkReal x1310=((1.0)*x1289);
IkReal x1311=(cj4*sj3*x1289);
evalcond[0]=(x1306+x1295+(((-1.0)*x1304))+(((-1.0)*cj4*sj3*x1310)));
evalcond[1]=(x1305+((sj2*x1291))+(((-1.0)*x1294*x1303))+(((-1.0)*x1293*x1297))+((cj2*x1301)));
evalcond[2]=((((-1.0)*cj4*x1308))+((r21*x1299))+((r20*sj6*sj7))+((cj6*r22))+(((-1.0)*cj3*x1310)));
evalcond[3]=(x1308+((cj2*x1293))+((sj2*x1301))+(((-1.0)*x1297*x1303))+(((-1.0)*x1291*x1294))+((x1289*x1298)));
evalcond[4]=((((0.0325)*cj4*sj3))+((sj3*x1296))+(((0.01)*x1311))+(((-0.01)*x1304))+(((-0.01)*x1306))+(((-0.0925)*sj3))+(((-1.0)*pz))+(((0.01)*x1295)));
evalcond[5]=(((cj2*r11*x1299))+((r12*x1300))+(((-1.0)*x1297*x1307))+(((-1.0)*cj6*r02*x1297))+((cj2*x1309))+((sj4*x1290))+(((-1.0)*r01*x1297*x1299)));
evalcond[6]=((0.2151)+(((0.2888)*cj4))+(((-0.01)*x1305))+((x1291*x1292))+(((-1.0)*py*x1294))+(((-1.0)*x1292*x1293))+((px*sj2))+(((-1.0)*x1302*x1303))+(((-0.0325)*sj4))+((x1301*x1302)));
evalcond[7]=(((sj2*x1309))+((x1290*x1298))+((r11*sj2*x1299))+(((-1.0)*sj3*x1310))+((cj2*x1307))+((cj2*r01*x1299))+((r02*x1300))+((cj6*r12*sj2)));
evalcond[8]=(((x1292*x1301))+(((-0.01)*x1308))+(((-1.0)*x1291*x1302))+(((-0.0325)*x1298))+(((-1.0)*py*x1297))+((x1293*x1302))+(((-1.0)*x1292*x1303))+(((-1.0)*px*x1294))+(((-1.0)*cj3*x1296))+(((0.0925)*cj3))+(((-0.01)*x1289*x1298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1312=(cj7*r20);
IkReal x1313=(cj7*sj3);
IkReal x1314=(cj2*r00);
IkReal x1315=(r21*sj7);
IkReal x1316=((1.0)*sj3);
IkReal x1317=(r10*sj2);
IkReal x1318=(cj3*cj7);
IkReal x1319=((1.0)*cj3);
IkReal x1320=(r11*sj2*sj7);
IkReal x1321=((1.0)*cj2*r01*sj7);
CheckValue<IkReal> x1322=IKPowWithIntegerCheck(cj4,-1);
if(!x1322.valid){
continue;
}
if( IKabs(((x1322.value)*((((x1317*x1318))+((sj3*x1315))+(((-1.0)*x1319*x1320))+((x1314*x1318))+(((-1.0)*cj2*r01*sj7*x1319))+(((-1.0)*x1312*x1316)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1315*x1319))+((x1313*x1314))+((x1313*x1317))+((cj3*x1312))+(((-1.0)*x1316*x1320))+(((-1.0)*cj2*r01*sj7*x1316)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1322.value)*((((x1317*x1318))+((sj3*x1315))+(((-1.0)*x1319*x1320))+((x1314*x1318))+(((-1.0)*cj2*r01*sj7*x1319))+(((-1.0)*x1312*x1316))))))+IKsqr(((((-1.0)*x1315*x1319))+((x1313*x1314))+((x1313*x1317))+((cj3*x1312))+(((-1.0)*x1316*x1320))+(((-1.0)*cj2*r01*sj7*x1316))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1322.value)*((((x1317*x1318))+((sj3*x1315))+(((-1.0)*x1319*x1320))+((x1314*x1318))+(((-1.0)*cj2*r01*sj7*x1319))+(((-1.0)*x1312*x1316))))), ((((-1.0)*x1315*x1319))+((x1313*x1314))+((x1313*x1317))+((cj3*x1312))+(((-1.0)*x1316*x1320))+(((-1.0)*cj2*r01*sj7*x1316))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1323=IKsin(j5);
IkReal x1324=IKcos(j5);
IkReal x1325=(cj7*r00);
IkReal x1326=((0.01)*sj2);
IkReal x1327=(r01*sj7);
IkReal x1328=((1.0)*cj2);
IkReal x1329=(r21*sj7);
IkReal x1330=((0.2888)*sj4);
IkReal x1331=((1.0)*sj2);
IkReal x1332=(cj3*cj4);
IkReal x1333=(cj7*sj6);
IkReal x1334=(cj2*cj6);
IkReal x1335=(r11*sj7);
IkReal x1336=((0.01)*cj2);
IkReal x1337=(cj7*r10);
IkReal x1338=(cj7*r20);
IkReal x1339=(sj4*x1323);
IkReal x1340=(cj3*x1324);
IkReal x1341=(r00*sj6*sj7);
IkReal x1342=(sj3*x1324);
IkReal x1343=(r10*sj6*sj7);
IkReal x1344=((1.0)*x1323);
IkReal x1345=(cj4*sj3*x1323);
evalcond[0]=(x1340+x1329+(((-1.0)*x1338))+(((-1.0)*cj4*sj3*x1344)));
evalcond[1]=(x1339+((sj2*x1325))+(((-1.0)*x1327*x1331))+(((-1.0)*x1328*x1337))+((cj2*x1335)));
evalcond[2]=(((r20*sj6*sj7))+(((-1.0)*cj4*x1342))+(((-1.0)*cj3*x1344))+((r21*x1333))+((cj6*r22)));
evalcond[3]=(x1342+((cj2*x1327))+((sj2*x1335))+(((-1.0)*x1325*x1328))+(((-1.0)*x1331*x1337))+((x1323*x1332)));
evalcond[4]=((((0.01)*x1345))+(((-0.01)*x1338))+(((0.0325)*cj4*sj3))+(((0.01)*x1329))+((sj3*x1330))+(((-0.0925)*sj3))+(((-1.0)*pz))+(((-0.01)*x1340)));
evalcond[5]=((((-1.0)*x1331*x1341))+((r12*x1334))+((sj4*x1324))+(((-1.0)*r01*x1331*x1333))+(((-1.0)*cj6*r02*x1331))+((cj2*x1343))+((cj2*r11*x1333)));
evalcond[6]=((0.2151)+(((0.2888)*cj4))+(((-0.01)*x1339))+((x1335*x1336))+(((-1.0)*x1326*x1327))+(((-1.0)*x1336*x1337))+(((-1.0)*py*x1328))+((x1325*x1326))+((px*sj2))+(((-0.0325)*sj4)));
evalcond[7]=(((sj2*x1343))+((r11*sj2*x1333))+(((-1.0)*sj3*x1344))+((x1324*x1332))+((cj6*r12*sj2))+((r02*x1334))+((cj2*r01*x1333))+((cj2*x1341)));
evalcond[8]=((((-1.0)*x1326*x1337))+(((-1.0)*cj3*x1330))+(((-1.0)*x1325*x1336))+(((-1.0)*py*x1331))+(((-0.01)*x1323*x1332))+(((-0.0325)*x1332))+((x1326*x1335))+((x1327*x1336))+(((-0.01)*x1342))+(((-1.0)*px*x1328))+(((0.0925)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1346=cj3*cj3;
IkReal x1347=cj4*cj4;
IkReal x1348=(cj3*r20);
IkReal x1349=(cj3*r21);
IkReal x1350=(sj6*sj7);
IkReal x1351=(cj6*r22);
IkReal x1352=(cj4*sj3);
IkReal x1353=(cj7*x1352);
CheckValue<IkReal> x1354 = IKatan2WithCheck(IkReal((((cj7*sj6*x1349))+(((-1.0)*r20*x1353))+((x1348*x1350))+((cj3*x1351))+((r21*sj7*x1352)))),IkReal((((r21*sj6*x1353))+(((-1.0)*sj7*x1349))+((cj7*x1348))+((x1351*x1352))+((r20*x1350*x1352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1354.valid){
continue;
}
CheckValue<IkReal> x1355=IKPowWithIntegerCheck(IKsign((x1346+x1347+(((-1.0)*x1346*x1347)))),-1);
if(!x1355.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1354.value)+(((1.5707963267949)*(x1355.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1356=IKsin(j5);
IkReal x1357=IKcos(j5);
IkReal x1358=(cj7*r00);
IkReal x1359=((0.01)*sj2);
IkReal x1360=(r01*sj7);
IkReal x1361=((1.0)*cj2);
IkReal x1362=(r21*sj7);
IkReal x1363=((0.2888)*sj4);
IkReal x1364=((1.0)*sj2);
IkReal x1365=(cj3*cj4);
IkReal x1366=(cj7*sj6);
IkReal x1367=(cj2*cj6);
IkReal x1368=(r11*sj7);
IkReal x1369=((0.01)*cj2);
IkReal x1370=(cj7*r10);
IkReal x1371=(cj7*r20);
IkReal x1372=(sj4*x1356);
IkReal x1373=(cj3*x1357);
IkReal x1374=(r00*sj6*sj7);
IkReal x1375=(sj3*x1357);
IkReal x1376=(r10*sj6*sj7);
IkReal x1377=((1.0)*x1356);
IkReal x1378=(cj4*sj3*x1356);
evalcond[0]=(x1362+x1373+(((-1.0)*x1371))+(((-1.0)*cj4*sj3*x1377)));
evalcond[1]=(x1372+(((-1.0)*x1361*x1370))+((cj2*x1368))+((sj2*x1358))+(((-1.0)*x1360*x1364)));
evalcond[2]=((((-1.0)*cj4*x1375))+(((-1.0)*cj3*x1377))+((r20*sj6*sj7))+((cj6*r22))+((r21*x1366)));
evalcond[3]=(((x1356*x1365))+x1375+(((-1.0)*x1364*x1370))+((sj2*x1368))+((cj2*x1360))+(((-1.0)*x1358*x1361)));
evalcond[4]=((((0.01)*x1362))+(((0.0325)*cj4*sj3))+(((0.01)*x1378))+(((-0.01)*x1371))+(((-0.01)*x1373))+(((-0.0925)*sj3))+(((-1.0)*pz))+((sj3*x1363)));
evalcond[5]=((((-1.0)*cj6*r02*x1364))+(((-1.0)*r01*x1364*x1366))+((sj4*x1357))+(((-1.0)*x1364*x1374))+((cj2*x1376))+((r12*x1367))+((cj2*r11*x1366)));
evalcond[6]=((0.2151)+(((0.2888)*cj4))+((x1358*x1359))+(((-1.0)*x1359*x1360))+(((-0.01)*x1372))+((px*sj2))+((x1368*x1369))+(((-0.0325)*sj4))+(((-1.0)*x1369*x1370))+(((-1.0)*py*x1361)));
evalcond[7]=(((x1357*x1365))+((sj2*x1376))+((r02*x1367))+((r11*sj2*x1366))+((cj2*r01*x1366))+(((-1.0)*sj3*x1377))+((cj2*x1374))+((cj6*r12*sj2)));
evalcond[8]=((((-1.0)*px*x1361))+((x1360*x1369))+((x1359*x1368))+(((-1.0)*cj3*x1363))+(((-0.01)*x1375))+(((-0.01)*x1356*x1365))+(((-1.0)*x1359*x1370))+(((-0.0325)*x1365))+(((-1.0)*py*x1364))+(((0.0925)*cj3))+(((-1.0)*x1358*x1369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1379=((1.0)*sj6);
IkReal x1380=(cj2*cj6);
IkReal x1381=((1.0)*cj6*sj2);
CheckValue<IkReal> x1382=IKPowWithIntegerCheck(sj3,-1);
if(!x1382.valid){
continue;
}
if( IKabs(((x1382.value)*((((cj6*cj7*r21))+(((-1.0)*r22*x1379))+((cj6*r20*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj7*x1381))+((cj7*r11*x1380))+(((-1.0)*cj2*r12*x1379))+((r10*sj7*x1380))+((r02*sj2*sj6))+(((-1.0)*cj7*r01*x1381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1382.value)*((((cj6*cj7*r21))+(((-1.0)*r22*x1379))+((cj6*r20*sj7))))))+IKsqr(((((-1.0)*r00*sj7*x1381))+((cj7*r11*x1380))+(((-1.0)*cj2*r12*x1379))+((r10*sj7*x1380))+((r02*sj2*sj6))+(((-1.0)*cj7*r01*x1381))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1382.value)*((((cj6*cj7*r21))+(((-1.0)*r22*x1379))+((cj6*r20*sj7))))), ((((-1.0)*r00*sj7*x1381))+((cj7*r11*x1380))+(((-1.0)*cj2*r12*x1379))+((r10*sj7*x1380))+((r02*sj2*sj6))+(((-1.0)*cj7*r01*x1381))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1383=IKsin(j4);
IkReal x1384=(sj2*sj6);
IkReal x1385=(cj6*sj2);
IkReal x1386=(r00*sj7);
IkReal x1387=(cj2*sj6);
IkReal x1388=(r10*sj7);
IkReal x1389=((1.0)*cj6*cj7);
IkReal x1390=((1.0)*cj2*cj6);
evalcond[0]=((((-1.0)*r21*x1389))+((r22*sj6))+((sj3*x1383))+(((-1.0)*cj6*r20*sj7)));
evalcond[1]=((((-1.0)*r02*x1384))+(((-1.0)*cj2*r11*x1389))+((cj7*r01*x1385))+(IKcos(j4))+(((-1.0)*x1388*x1390))+((x1385*x1386))+((r12*x1387)));
evalcond[2]=((((-1.0)*cj3*x1383))+(((-1.0)*cj7*r11*x1385))+(((-1.0)*x1385*x1388))+(((-1.0)*cj2*r01*x1389))+((r12*x1384))+(((-1.0)*x1386*x1390))+((r02*x1387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
IkReal x1391=cj3*cj3;
IkReal x1392=cj4*cj4;
IkReal x1393=(cj3*r20);
IkReal x1394=(cj4*sj3);
IkReal x1395=(r21*sj7);
IkReal x1396=(sj6*sj7);
IkReal x1397=(cj6*r22);
IkReal x1398=(cj7*r21*sj6);
IkReal x1399=(x1392+x1391+(((-1.0)*x1391*x1392)));
j5eval[0]=x1399;
j5eval[1]=((IKabs(((((-1.0)*cj3*x1395))+((x1394*x1397))+((x1394*x1398))+((r20*x1394*x1396))+((cj7*x1393)))))+(IKabs((((x1393*x1396))+((cj3*x1398))+((cj3*x1397))+(((-1.0)*cj7*r20*x1394))+((x1394*x1395))))));
j5eval[2]=IKsign(x1399);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1400=(cj3*r20);
IkReal x1401=(sj6*sj7);
IkReal x1402=(r21*sj3);
IkReal x1403=(cj7*sj6);
IkReal x1404=(r20*sj3);
IkReal x1405=(cj3*r21);
IkReal x1406=(cj6*r22);
if( IKabs((((sj7*x1402))+((x1403*x1405))+(((-1.0)*cj7*x1404))+((cj3*x1406))+((x1400*x1401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj7*x1405))+((sj3*x1406))+((cj7*x1400))+((x1402*x1403))+((x1401*x1404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj7*x1402))+((x1403*x1405))+(((-1.0)*cj7*x1404))+((cj3*x1406))+((x1400*x1401))))+IKsqr(((((-1.0)*sj7*x1405))+((sj3*x1406))+((cj7*x1400))+((x1402*x1403))+((x1401*x1404))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((sj7*x1402))+((x1403*x1405))+(((-1.0)*cj7*x1404))+((cj3*x1406))+((x1400*x1401))), ((((-1.0)*sj7*x1405))+((sj3*x1406))+((cj7*x1400))+((x1402*x1403))+((x1401*x1404))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1407=IKsin(j5);
IkReal x1408=IKcos(j5);
IkReal x1409=(cj2*r01);
IkReal x1410=(cj2*r00);
IkReal x1411=((1.0)*cj7);
IkReal x1412=(r21*sj7);
IkReal x1413=((1.0)*sj3);
IkReal x1414=((0.01)*sj3);
IkReal x1415=(sj2*sj7);
IkReal x1416=(cj7*sj6);
IkReal x1417=((0.01)*cj7);
IkReal x1418=(sj6*sj7);
IkReal x1419=(r10*sj2);
IkReal x1420=(cj3*x1408);
IkReal x1421=(cj3*x1407);
IkReal x1422=(x1407*x1413);
evalcond[0]=(x1420+x1412+(((-1.0)*r20*x1411))+(((-1.0)*x1422)));
evalcond[1]=(((r21*x1416))+((r20*x1418))+(((-1.0)*x1408*x1413))+(((-1.0)*x1421))+((cj6*r22)));
evalcond[2]=(((x1407*x1414))+(((0.01)*x1412))+(((-0.01)*x1420))+(((-1.0)*pz))+(((-0.06)*sj3))+(((-1.0)*r20*x1417)));
evalcond[3]=(((sj7*x1409))+((sj3*x1408))+(((-1.0)*x1411*x1419))+((r11*x1415))+(((-1.0)*x1410*x1411))+x1421);
evalcond[4]=(((r10*sj6*x1415))+((cj2*cj6*r02))+((x1410*x1418))+x1420+((cj6*r12*sj2))+((x1409*x1416))+((r11*sj2*x1416))+(((-1.0)*x1422)));
evalcond[5]=((((0.01)*sj7*x1409))+(((-1.0)*x1417*x1419))+(((-0.01)*x1421))+(((-1.0)*x1408*x1414))+(((-1.0)*cj2*px))+(((-1.0)*x1410*x1417))+(((-1.0)*py*sj2))+(((0.06)*cj3))+(((0.01)*r11*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1423=(cj7*sj6);
IkReal x1424=(cj3*r20);
IkReal x1425=(sj6*sj7);
IkReal x1426=((1.0)*sj3);
IkReal x1427=(cj6*r22);
IkReal x1428=(cj3*r21);
IkReal x1429=(r21*x1426);
if( IKabs((((x1424*x1425))+(((-1.0)*sj7*x1429))+((x1423*x1428))+((cj3*x1427))+((cj7*r20*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1426*x1427))+((cj7*x1424))+(((-1.0)*x1423*x1429))+(((-1.0)*r20*x1425*x1426))+(((-1.0)*sj7*x1428)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1424*x1425))+(((-1.0)*sj7*x1429))+((x1423*x1428))+((cj3*x1427))+((cj7*r20*sj3))))+IKsqr(((((-1.0)*x1426*x1427))+((cj7*x1424))+(((-1.0)*x1423*x1429))+(((-1.0)*r20*x1425*x1426))+(((-1.0)*sj7*x1428))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((x1424*x1425))+(((-1.0)*sj7*x1429))+((x1423*x1428))+((cj3*x1427))+((cj7*r20*sj3))), ((((-1.0)*x1426*x1427))+((cj7*x1424))+(((-1.0)*x1423*x1429))+(((-1.0)*r20*x1425*x1426))+(((-1.0)*sj7*x1428))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1430=IKcos(j5);
IkReal x1431=IKsin(j5);
IkReal x1432=(cj2*r01);
IkReal x1433=(cj2*r00);
IkReal x1434=((1.0)*cj7);
IkReal x1435=(r21*sj7);
IkReal x1436=(cj7*sj6);
IkReal x1437=(sj6*sj7);
IkReal x1438=(r10*sj2);
IkReal x1439=((0.01)*cj7);
IkReal x1440=(sj3*x1430);
IkReal x1441=(sj3*x1431);
IkReal x1442=(cj3*x1430);
IkReal x1443=(r11*sj2*sj7);
IkReal x1444=(cj3*x1431);
IkReal x1445=((1.0)*x1444);
evalcond[0]=(x1435+x1442+x1441+(((-1.0)*r20*x1434)));
evalcond[1]=(((r20*x1437))+((r21*x1436))+x1440+((cj6*r22))+(((-1.0)*x1445)));
evalcond[2]=((((-1.0)*pz))+(((-0.01)*x1441))+(((-0.01)*x1442))+(((-0.125)*sj3))+(((-1.0)*r20*x1439))+(((0.01)*x1435)));
evalcond[3]=((((-1.0)*x1434*x1438))+((sj7*x1432))+x1443+x1440+(((-1.0)*x1445))+(((-1.0)*x1433*x1434)));
evalcond[4]=(((x1432*x1436))+((x1437*x1438))+((x1433*x1437))+(((-1.0)*x1442))+(((-1.0)*x1441))+((cj2*cj6*r02))+((cj6*r12*sj2))+((r11*sj2*x1436)));
evalcond[5]=((((-1.0)*x1438*x1439))+(((0.01)*sj7*x1432))+(((0.01)*x1444))+(((0.01)*x1443))+(((-1.0)*cj2*px))+(((-0.01)*x1440))+(((-1.0)*py*sj2))+(((-1.0)*x1433*x1439))+(((0.125)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
j5eval[1]=IKsign(cj4);
j5eval[2]=((IKabs(((((-1.0)*cj7*r20))+((r21*sj7)))))+(IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
j5eval[1]=IKsign(cj4);
j5eval[2]=((IKabs(((9.25)+(((-28.88)*sj4))+(((100.0)*pz))+(((-3.25)*cj4))+(((-1.0)*r21*sj7))+((cj7*r20)))))+(IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1446=(cj2*cj7);
IkReal x1447=(r01*sj7);
IkReal x1448=(cj7*sj2);
IkReal x1449=((1.0)*r11*sj7);
if( IKabs(((((-1.0)*cj2*x1449))+((r10*x1446))+((sj2*x1447))+(((-1.0)*r00*x1448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1448))+(((-1.0)*sj2*x1449))+(((-1.0)*cj2*x1447))+((r00*x1446)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj2*x1449))+((r10*x1446))+((sj2*x1447))+(((-1.0)*r00*x1448))))+IKsqr((((r10*x1448))+(((-1.0)*sj2*x1449))+(((-1.0)*cj2*x1447))+((r00*x1446))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj2*x1449))+((r10*x1446))+((sj2*x1447))+(((-1.0)*r00*x1448))), (((r10*x1448))+(((-1.0)*sj2*x1449))+(((-1.0)*cj2*x1447))+((r00*x1446))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1450=IKsin(j5);
IkReal x1451=IKcos(j5);
IkReal x1452=(cj7*r00);
IkReal x1453=((0.01)*sj2);
IkReal x1454=(r01*sj7);
IkReal x1455=((1.0)*cj2);
IkReal x1456=((1.0)*sj2);
IkReal x1457=(sj2*sj7);
IkReal x1458=(r10*sj6);
IkReal x1459=(cj2*cj6);
IkReal x1460=(r11*sj7);
IkReal x1461=(cj2*sj6);
IkReal x1462=(cj7*r01);
IkReal x1463=((0.01)*cj2);
IkReal x1464=(r00*sj7);
IkReal x1465=(cj7*r10);
IkReal x1466=(cj7*r11);
evalcond[0]=(((cj2*x1460))+((sj2*x1452))+(((-1.0)*x1454*x1456))+(((-1.0)*x1455*x1465))+x1450);
evalcond[1]=((((-1.0)*x1456*x1465))+((r11*x1457))+x1451+((cj2*x1454))+(((-1.0)*x1452*x1455)));
evalcond[2]=((0.1826)+(((-1.0)*x1463*x1465))+((x1460*x1463))+(((-1.0)*x1453*x1454))+((px*sj2))+(((-1.0)*py*x1455))+(((-0.01)*x1450))+((x1452*x1453)));
evalcond[3]=(((sj2*sj6*x1466))+(((-1.0)*x1450))+((x1461*x1462))+((x1461*x1464))+((cj6*r12*sj2))+((x1457*x1458))+((r02*x1459)));
evalcond[4]=(((x1453*x1460))+(((-1.0)*x1453*x1465))+(((-1.0)*px*x1455))+((x1454*x1463))+(((-1.0)*py*x1456))+(((-0.01)*x1451))+(((-1.0)*x1452*x1463)));
evalcond[5]=(((cj2*sj7*x1458))+((x1461*x1466))+((r12*x1459))+(((-1.0)*sj6*x1456*x1464))+(((-1.0)*sj6*x1456*x1462))+(((-1.0)*cj6*r02*x1456))+x1451);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1467=((1.0)*cj2);
IkReal x1468=(cj7*r10);
IkReal x1469=(cj7*r00);
IkReal x1470=((1.0)*sj2*sj7);
if( IKabs((((cj2*r11*sj7))+((sj2*x1469))+(((-1.0)*r01*x1470))+(((-1.0)*x1467*x1468)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*x1469))+((sj2*x1468))+(((-1.0)*r11*x1470))+(((-1.0)*r01*sj7*x1467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*r11*sj7))+((sj2*x1469))+(((-1.0)*r01*x1470))+(((-1.0)*x1467*x1468))))+IKsqr((((cj2*x1469))+((sj2*x1468))+(((-1.0)*r11*x1470))+(((-1.0)*r01*sj7*x1467))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj2*r11*sj7))+((sj2*x1469))+(((-1.0)*r01*x1470))+(((-1.0)*x1467*x1468))), (((cj2*x1469))+((sj2*x1468))+(((-1.0)*r11*x1470))+(((-1.0)*r01*sj7*x1467))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1471=IKsin(j5);
IkReal x1472=IKcos(j5);
IkReal x1473=(cj7*r00);
IkReal x1474=((0.01)*sj2);
IkReal x1475=(r01*sj7);
IkReal x1476=((1.0)*cj2);
IkReal x1477=((1.0)*sj2);
IkReal x1478=(sj2*sj7);
IkReal x1479=(r10*sj6);
IkReal x1480=(cj2*cj6);
IkReal x1481=(r11*sj7);
IkReal x1482=(cj2*sj6);
IkReal x1483=(cj7*r01);
IkReal x1484=((0.01)*cj2);
IkReal x1485=(r00*sj7);
IkReal x1486=(cj7*r10);
IkReal x1487=(cj7*r11);
IkReal x1488=((1.0)*x1471);
evalcond[0]=(((r11*x1478))+((cj2*x1475))+x1472+(((-1.0)*x1477*x1486))+(((-1.0)*x1473*x1476)));
evalcond[1]=(((cj2*x1481))+(((-1.0)*x1488))+(((-1.0)*x1475*x1477))+((sj2*x1473))+(((-1.0)*x1476*x1486)));
evalcond[2]=((0.2476)+(((0.01)*x1471))+(((-1.0)*x1484*x1486))+((x1481*x1484))+(((-1.0)*x1474*x1475))+((x1473*x1474))+(((-1.0)*py*x1476))+((px*sj2)));
evalcond[3]=(((x1478*x1479))+((x1482*x1483))+((x1482*x1485))+(((-1.0)*x1488))+((cj6*r12*sj2))+((sj2*sj6*x1487))+((r02*x1480)));
evalcond[4]=((((-1.0)*px*x1476))+(((-1.0)*x1474*x1486))+(((-1.0)*py*x1477))+(((-0.01)*x1472))+((x1474*x1481))+((x1475*x1484))+(((-1.0)*x1473*x1484)));
evalcond[5]=(((cj2*sj7*x1479))+((x1482*x1487))+(((-1.0)*sj6*x1477*x1485))+(((-1.0)*sj6*x1477*x1483))+((r12*x1480))+(((-1.0)*x1472))+(((-1.0)*cj6*r02*x1477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1489=((1.0)*sj7);
CheckValue<IkReal> x1490=IKPowWithIntegerCheck(cj4,-1);
if(!x1490.valid){
continue;
}
if( IKabs(((x1490.value)*(((((-1.0)*cj7*r20))+((r21*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj2*r01*x1489))+((cj2*cj7*r00))+((cj7*r10*sj2))+(((-1.0)*r11*sj2*x1489)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1490.value)*(((((-1.0)*cj7*r20))+((r21*sj7))))))+IKsqr(((((-1.0)*cj2*r01*x1489))+((cj2*cj7*r00))+((cj7*r10*sj2))+(((-1.0)*r11*sj2*x1489))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1490.value)*(((((-1.0)*cj7*r20))+((r21*sj7))))), ((((-1.0)*cj2*r01*x1489))+((cj2*cj7*r00))+((cj7*r10*sj2))+(((-1.0)*r11*sj2*x1489))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1491=IKcos(j5);
IkReal x1492=IKsin(j5);
IkReal x1493=((1.0)*cj4);
IkReal x1494=(cj7*r00);
IkReal x1495=((0.01)*sj2);
IkReal x1496=(r01*sj7);
IkReal x1497=((1.0)*cj2);
IkReal x1498=(r21*sj7);
IkReal x1499=((1.0)*sj2);
IkReal x1500=(cj7*sj6);
IkReal x1501=(cj2*cj6);
IkReal x1502=(r11*sj7);
IkReal x1503=((0.01)*cj2);
IkReal x1504=(cj7*r20);
IkReal x1505=(cj7*r10);
IkReal x1506=(sj4*x1492);
IkReal x1507=(r00*sj6*sj7);
IkReal x1508=(r10*sj6*sj7);
evalcond[0]=((((-1.0)*x1504))+(((-1.0)*x1492*x1493))+x1498);
evalcond[1]=(((r20*sj6*sj7))+(((-1.0)*x1491*x1493))+((r21*x1500))+((cj6*r22)));
evalcond[2]=((((-1.0)*x1499*x1505))+((cj2*x1496))+(((-1.0)*x1494*x1497))+x1491+((sj2*x1502)));
evalcond[3]=(((sj2*x1494))+((cj2*x1502))+(((-1.0)*x1496*x1499))+x1506+(((-1.0)*x1497*x1505)));
evalcond[4]=((-0.0925)+(((0.0325)*cj4))+(((0.01)*x1498))+(((0.01)*cj4*x1492))+(((-1.0)*pz))+(((-0.01)*x1504))+(((0.2888)*sj4)));
evalcond[5]=(((cj2*x1507))+((cj2*r01*x1500))+(((-1.0)*x1492))+((r02*x1501))+((r11*sj2*x1500))+((cj6*r12*sj2))+((sj2*x1508)));
evalcond[6]=((((-1.0)*x1494*x1503))+(((-1.0)*px*x1497))+((x1496*x1503))+((x1495*x1502))+(((-1.0)*x1495*x1505))+(((-1.0)*py*x1499))+(((-0.01)*x1491)));
evalcond[7]=((((-1.0)*x1499*x1507))+((cj2*x1508))+((r12*x1501))+(((-1.0)*r01*x1499*x1500))+(((-1.0)*cj6*r02*x1499))+((sj4*x1491))+((cj2*r11*x1500)));
evalcond[8]=((0.2151)+(((0.2888)*cj4))+((x1494*x1495))+(((-1.0)*x1495*x1496))+(((-0.01)*x1506))+((px*sj2))+(((-1.0)*x1503*x1505))+((x1502*x1503))+(((-0.0325)*sj4))+(((-1.0)*py*x1497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1509 = IKatan2WithCheck(IkReal(((9.25)+(((-28.88)*sj4))+(((100.0)*pz))+(((-3.25)*cj4))+(((-1.0)*r21*sj7))+((cj7*r20)))),IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1509.valid){
continue;
}
CheckValue<IkReal> x1510=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1510.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1509.value)+(((1.5707963267949)*(x1510.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1511=IKcos(j5);
IkReal x1512=IKsin(j5);
IkReal x1513=((1.0)*cj4);
IkReal x1514=(cj7*r00);
IkReal x1515=((0.01)*sj2);
IkReal x1516=(r01*sj7);
IkReal x1517=((1.0)*cj2);
IkReal x1518=(r21*sj7);
IkReal x1519=((1.0)*sj2);
IkReal x1520=(cj7*sj6);
IkReal x1521=(cj2*cj6);
IkReal x1522=(r11*sj7);
IkReal x1523=((0.01)*cj2);
IkReal x1524=(cj7*r20);
IkReal x1525=(cj7*r10);
IkReal x1526=(sj4*x1512);
IkReal x1527=(r00*sj6*sj7);
IkReal x1528=(r10*sj6*sj7);
evalcond[0]=(x1518+(((-1.0)*x1512*x1513))+(((-1.0)*x1524)));
evalcond[1]=(((r20*sj6*sj7))+((r21*x1520))+((cj6*r22))+(((-1.0)*x1511*x1513)));
evalcond[2]=(((cj2*x1516))+((sj2*x1522))+(((-1.0)*x1519*x1525))+x1511+(((-1.0)*x1514*x1517)));
evalcond[3]=((((-1.0)*x1516*x1519))+((sj2*x1514))+((cj2*x1522))+x1526+(((-1.0)*x1517*x1525)));
evalcond[4]=((-0.0925)+(((0.0325)*cj4))+(((0.01)*x1518))+(((0.01)*cj4*x1512))+(((-1.0)*pz))+(((0.2888)*sj4))+(((-0.01)*x1524)));
evalcond[5]=((((-1.0)*x1512))+((sj2*x1528))+((cj2*r01*x1520))+((cj2*x1527))+((r11*sj2*x1520))+((cj6*r12*sj2))+((r02*x1521)));
evalcond[6]=((((-1.0)*x1515*x1525))+(((-1.0)*x1514*x1523))+(((-1.0)*px*x1517))+((x1516*x1523))+(((-0.01)*x1511))+(((-1.0)*py*x1519))+((x1515*x1522)));
evalcond[7]=((((-1.0)*cj6*r02*x1519))+((r12*x1521))+(((-1.0)*x1519*x1527))+(((-1.0)*r01*x1519*x1520))+((cj2*x1528))+((sj4*x1511))+((cj2*r11*x1520)));
evalcond[8]=((0.2151)+(((-1.0)*x1515*x1516))+((x1514*x1515))+(((0.2888)*cj4))+((x1522*x1523))+(((-1.0)*py*x1517))+((px*sj2))+(((-1.0)*x1523*x1525))+(((-0.01)*x1526))+(((-0.0325)*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1529 = IKatan2WithCheck(IkReal(((((-1.0)*cj7*r20))+((r21*sj7)))),IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1529.valid){
continue;
}
CheckValue<IkReal> x1530=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1530.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1529.value)+(((1.5707963267949)*(x1530.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1531=IKcos(j5);
IkReal x1532=IKsin(j5);
IkReal x1533=((1.0)*cj4);
IkReal x1534=(cj7*r00);
IkReal x1535=((0.01)*sj2);
IkReal x1536=(r01*sj7);
IkReal x1537=((1.0)*cj2);
IkReal x1538=(r21*sj7);
IkReal x1539=((1.0)*sj2);
IkReal x1540=(cj7*sj6);
IkReal x1541=(cj2*cj6);
IkReal x1542=(r11*sj7);
IkReal x1543=((0.01)*cj2);
IkReal x1544=(cj7*r20);
IkReal x1545=(cj7*r10);
IkReal x1546=(sj4*x1532);
IkReal x1547=(r00*sj6*sj7);
IkReal x1548=(r10*sj6*sj7);
evalcond[0]=((((-1.0)*x1544))+(((-1.0)*x1532*x1533))+x1538);
evalcond[1]=((((-1.0)*x1531*x1533))+((r20*sj6*sj7))+((r21*x1540))+((cj6*r22)));
evalcond[2]=(((cj2*x1536))+x1531+(((-1.0)*x1539*x1545))+(((-1.0)*x1534*x1537))+((sj2*x1542)));
evalcond[3]=(((sj2*x1534))+((cj2*x1542))+x1546+(((-1.0)*x1537*x1545))+(((-1.0)*x1536*x1539)));
evalcond[4]=((-0.0925)+(((0.0325)*cj4))+(((-0.01)*x1544))+(((-1.0)*pz))+(((0.01)*x1538))+(((0.01)*cj4*x1532))+(((0.2888)*sj4)));
evalcond[5]=((((-1.0)*x1532))+((cj2*r01*x1540))+((cj2*x1547))+((r02*x1541))+((r11*sj2*x1540))+((cj6*r12*sj2))+((sj2*x1548)));
evalcond[6]=((((-1.0)*x1535*x1545))+((x1536*x1543))+(((-1.0)*px*x1537))+(((-1.0)*x1534*x1543))+((x1535*x1542))+(((-0.01)*x1531))+(((-1.0)*py*x1539)));
evalcond[7]=(((cj2*r11*x1540))+((r12*x1541))+((cj2*x1548))+(((-1.0)*r01*x1539*x1540))+(((-1.0)*x1539*x1547))+((sj4*x1531))+(((-1.0)*cj6*r02*x1539)));
evalcond[8]=((0.2151)+(((-1.0)*x1543*x1545))+(((0.2888)*cj4))+(((-0.01)*x1546))+(((-1.0)*x1535*x1536))+((px*sj2))+(((-1.0)*py*x1537))+((x1534*x1535))+(((-0.0325)*sj4))+((x1542*x1543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1549=((1.0)*r21);
j5eval[0]=cj4;
j5eval[1]=((IKabs(((((-1.0)*sj7*x1549))+((cj7*r20)))))+(IKabs(((((-1.0)*cj6*r22))+(((-1.0)*cj7*sj6*x1549))+(((-1.0)*r20*sj6*sj7))))));
j5eval[2]=IKsign(cj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1550=((1.0)*r20);
j5eval[0]=cj4;
j5eval[1]=((IKabs(((9.25)+(((-100.0)*pz))+(((-1.0)*cj7*x1550))+(((-28.88)*sj4))+((r21*sj7))+(((-3.25)*cj4)))))+(IKabs(((((-1.0)*cj6*r22))+(((-1.0)*sj6*sj7*x1550))+(((-1.0)*cj7*r21*sj6))))));
j5eval[2]=IKsign(cj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1551=(r11*sj7);
IkReal x1552=((1.0)*cj2);
IkReal x1553=(cj7*r10);
IkReal x1554=((1.0)*sj2);
IkReal x1555=(r01*sj7);
IkReal x1556=(cj7*r00);
if( IKabs((((cj2*x1553))+(((-1.0)*x1551*x1552))+((sj2*x1555))+(((-1.0)*x1554*x1556)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1552*x1556))+((cj2*x1555))+(((-1.0)*x1553*x1554))+((sj2*x1551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*x1553))+(((-1.0)*x1551*x1552))+((sj2*x1555))+(((-1.0)*x1554*x1556))))+IKsqr(((((-1.0)*x1552*x1556))+((cj2*x1555))+(((-1.0)*x1553*x1554))+((sj2*x1551))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj2*x1553))+(((-1.0)*x1551*x1552))+((sj2*x1555))+(((-1.0)*x1554*x1556))), ((((-1.0)*x1552*x1556))+((cj2*x1555))+(((-1.0)*x1553*x1554))+((sj2*x1551))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1557=IKsin(j5);
IkReal x1558=IKcos(j5);
IkReal x1559=(cj7*r00);
IkReal x1560=((0.01)*sj2);
IkReal x1561=(cj2*sj7);
IkReal x1562=((1.0)*cj2);
IkReal x1563=((1.0)*sj2);
IkReal x1564=(r01*sj7);
IkReal x1565=(cj2*cj6);
IkReal x1566=(r11*sj7);
IkReal x1567=(cj7*sj6);
IkReal x1568=(r10*sj6);
IkReal x1569=((0.01)*cj2);
IkReal x1570=(r00*sj6);
IkReal x1571=(cj7*r10);
evalcond[0]=((((-1.0)*x1562*x1571))+((r11*x1561))+(((-1.0)*x1563*x1564))+x1557+((sj2*x1559)));
evalcond[1]=((((-1.0)*x1558))+(((-1.0)*x1559*x1562))+(((-1.0)*x1563*x1571))+((sj2*x1566))+((r01*x1561)));
evalcond[2]=(((sj2*sj7*x1568))+((cj2*r01*x1567))+x1557+((x1561*x1570))+((r11*sj2*x1567))+((cj6*r12*sj2))+((r02*x1565)));
evalcond[3]=((0.1826)+(((-0.01)*x1557))+(((-1.0)*py*x1562))+(((-1.0)*x1560*x1564))+(((-1.0)*x1569*x1571))+((px*sj2))+(((0.01)*r11*x1561))+((x1559*x1560)));
evalcond[4]=(((x1560*x1566))+(((-1.0)*x1559*x1569))+(((0.01)*r01*x1561))+(((0.01)*x1558))+(((-1.0)*py*x1563))+(((-1.0)*x1560*x1571))+(((-1.0)*px*x1562)));
evalcond[5]=((((-1.0)*r01*x1563*x1567))+(((-1.0)*sj7*x1563*x1570))+((cj2*r11*x1567))+(((-1.0)*cj6*r02*x1563))+((r12*x1565))+((x1561*x1568))+x1558);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1572=(sj2*sj7);
IkReal x1573=(cj2*sj7);
IkReal x1574=(cj7*sj2);
IkReal x1575=((1.0)*cj2*cj7);
if( IKabs(((((-1.0)*r01*x1572))+((r11*x1573))+(((-1.0)*r10*x1575))+((r00*x1574)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1574))+((r11*x1572))+(((-1.0)*r00*x1575))+((r01*x1573)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1572))+((r11*x1573))+(((-1.0)*r10*x1575))+((r00*x1574))))+IKsqr(((((-1.0)*r10*x1574))+((r11*x1572))+(((-1.0)*r00*x1575))+((r01*x1573))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r01*x1572))+((r11*x1573))+(((-1.0)*r10*x1575))+((r00*x1574))), ((((-1.0)*r10*x1574))+((r11*x1572))+(((-1.0)*r00*x1575))+((r01*x1573))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1576=IKsin(j5);
IkReal x1577=IKcos(j5);
IkReal x1578=(cj7*r00);
IkReal x1579=((0.01)*sj2);
IkReal x1580=(cj2*sj7);
IkReal x1581=((1.0)*cj2);
IkReal x1582=((1.0)*sj2);
IkReal x1583=(r01*sj7);
IkReal x1584=(cj2*cj6);
IkReal x1585=(r11*sj7);
IkReal x1586=(cj7*sj6);
IkReal x1587=(r10*sj6);
IkReal x1588=((0.01)*cj2);
IkReal x1589=(r00*sj6);
IkReal x1590=(cj7*r10);
IkReal x1591=((1.0)*x1577);
evalcond[0]=(((r11*x1580))+(((-1.0)*x1581*x1590))+((sj2*x1578))+(((-1.0)*x1582*x1583))+(((-1.0)*x1576)));
evalcond[1]=((((-1.0)*x1591))+((sj2*x1585))+((r01*x1580))+(((-1.0)*x1578*x1581))+(((-1.0)*x1582*x1590)));
evalcond[2]=(((cj2*r01*x1586))+((sj2*sj7*x1587))+x1576+((x1580*x1589))+((r02*x1584))+((cj6*r12*sj2))+((r11*sj2*x1586)));
evalcond[3]=((0.2476)+(((-1.0)*py*x1581))+(((-1.0)*x1588*x1590))+(((0.01)*x1576))+(((0.01)*r11*x1580))+(((-1.0)*x1579*x1583))+((px*sj2))+((x1578*x1579)));
evalcond[4]=((((-1.0)*x1578*x1588))+(((-1.0)*py*x1582))+(((0.01)*r01*x1580))+(((0.01)*x1577))+(((-1.0)*x1579*x1590))+((x1579*x1585))+(((-1.0)*px*x1581)));
evalcond[5]=((((-1.0)*x1591))+((cj2*r11*x1586))+(((-1.0)*sj7*x1582*x1589))+((r12*x1584))+(((-1.0)*r01*x1582*x1586))+((x1580*x1587))+(((-1.0)*cj6*r02*x1582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1592=((1.0)*cj7);
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(cj4,-1);
if(!x1593.valid){
continue;
}
if( IKabs(((x1593.value)*(((((-1.0)*r21*sj7))+((cj7*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj2*x1592))+((cj2*r01*sj7))+((r11*sj2*sj7))+(((-1.0)*cj2*r00*x1592)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1593.value)*(((((-1.0)*r21*sj7))+((cj7*r20))))))+IKsqr(((((-1.0)*r10*sj2*x1592))+((cj2*r01*sj7))+((r11*sj2*sj7))+(((-1.0)*cj2*r00*x1592))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1593.value)*(((((-1.0)*r21*sj7))+((cj7*r20))))), ((((-1.0)*r10*sj2*x1592))+((cj2*r01*sj7))+((r11*sj2*sj7))+(((-1.0)*cj2*r00*x1592))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1594=IKsin(j5);
IkReal x1595=IKcos(j5);
IkReal x1596=(cj7*r00);
IkReal x1597=((0.01)*sj2);
IkReal x1598=(r01*sj7);
IkReal x1599=((1.0)*cj2);
IkReal x1600=(r21*sj7);
IkReal x1601=((1.0)*sj2);
IkReal x1602=(cj7*sj6);
IkReal x1603=(cj2*cj6);
IkReal x1604=(r11*sj7);
IkReal x1605=((0.01)*cj2);
IkReal x1606=(cj7*r20);
IkReal x1607=(cj7*r10);
IkReal x1608=(sj4*x1594);
IkReal x1609=(r00*sj6*sj7);
IkReal x1610=(cj4*x1594);
IkReal x1611=(r10*sj6*sj7);
evalcond[0]=((((-1.0)*x1606))+x1610+x1600);
evalcond[1]=(((cj4*x1595))+((r20*sj6*sj7))+((r21*x1602))+((cj6*r22)));
evalcond[2]=(((sj2*x1596))+x1608+(((-1.0)*x1599*x1607))+((cj2*x1604))+(((-1.0)*x1598*x1601)));
evalcond[3]=(((sj2*x1604))+(((-1.0)*x1601*x1607))+((cj2*x1598))+(((-1.0)*x1595))+(((-1.0)*x1596*x1599)));
evalcond[4]=((0.0925)+(((-0.01)*x1610))+(((0.01)*x1600))+(((-1.0)*pz))+(((-0.2888)*sj4))+(((-0.0325)*cj4))+(((-0.01)*x1606)));
evalcond[5]=(((sj2*x1611))+((cj2*r01*x1602))+x1594+((cj2*x1609))+((cj6*r12*sj2))+((r02*x1603))+((r11*sj2*x1602)));
evalcond[6]=((((-1.0)*py*x1601))+(((0.01)*x1595))+(((-1.0)*x1597*x1607))+((x1598*x1605))+(((-1.0)*x1596*x1605))+(((-1.0)*px*x1599))+((x1597*x1604)));
evalcond[7]=((((-1.0)*x1601*x1609))+((sj4*x1595))+((r12*x1603))+((cj2*x1611))+((cj2*r11*x1602))+(((-1.0)*r01*x1601*x1602))+(((-1.0)*cj6*r02*x1601)));
evalcond[8]=((0.2151)+((x1596*x1597))+(((0.2888)*cj4))+(((-1.0)*py*x1599))+(((-1.0)*x1605*x1607))+((px*sj2))+(((-0.0325)*sj4))+((x1604*x1605))+(((-1.0)*x1597*x1598))+(((-0.01)*x1608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1612=((1.0)*r20);
CheckValue<IkReal> x1613=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1613.valid){
continue;
}
CheckValue<IkReal> x1614 = IKatan2WithCheck(IkReal(((9.25)+(((-100.0)*pz))+(((-28.88)*sj4))+((r21*sj7))+(((-3.25)*cj4))+(((-1.0)*cj7*x1612)))),IkReal(((((-1.0)*cj6*r22))+(((-1.0)*sj6*sj7*x1612))+(((-1.0)*cj7*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1614.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1613.value)))+(x1614.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1615=IKsin(j5);
IkReal x1616=IKcos(j5);
IkReal x1617=(cj7*r00);
IkReal x1618=((0.01)*sj2);
IkReal x1619=(r01*sj7);
IkReal x1620=((1.0)*cj2);
IkReal x1621=(r21*sj7);
IkReal x1622=((1.0)*sj2);
IkReal x1623=(cj7*sj6);
IkReal x1624=(cj2*cj6);
IkReal x1625=(r11*sj7);
IkReal x1626=((0.01)*cj2);
IkReal x1627=(cj7*r20);
IkReal x1628=(cj7*r10);
IkReal x1629=(sj4*x1615);
IkReal x1630=(r00*sj6*sj7);
IkReal x1631=(cj4*x1615);
IkReal x1632=(r10*sj6*sj7);
evalcond[0]=((((-1.0)*x1627))+x1621+x1631);
evalcond[1]=(((r21*x1623))+((cj4*x1616))+((r20*sj6*sj7))+((cj6*r22)));
evalcond[2]=((((-1.0)*x1619*x1622))+((sj2*x1617))+x1629+(((-1.0)*x1620*x1628))+((cj2*x1625)));
evalcond[3]=((((-1.0)*x1616))+((sj2*x1625))+(((-1.0)*x1617*x1620))+(((-1.0)*x1622*x1628))+((cj2*x1619)));
evalcond[4]=((0.0925)+(((-0.01)*x1627))+(((-1.0)*pz))+(((0.01)*x1621))+(((-0.2888)*sj4))+(((-0.01)*x1631))+(((-0.0325)*cj4)));
evalcond[5]=(((r02*x1624))+((r11*sj2*x1623))+x1615+((cj2*x1630))+((sj2*x1632))+((cj2*r01*x1623))+((cj6*r12*sj2)));
evalcond[6]=((((-1.0)*x1617*x1626))+(((-1.0)*py*x1622))+(((0.01)*x1616))+((x1618*x1625))+(((-1.0)*px*x1620))+((x1619*x1626))+(((-1.0)*x1618*x1628)));
evalcond[7]=((((-1.0)*x1622*x1630))+((cj2*x1632))+((r12*x1624))+(((-1.0)*r01*x1622*x1623))+((cj2*r11*x1623))+((sj4*x1616))+(((-1.0)*cj6*r02*x1622)));
evalcond[8]=((0.2151)+(((-1.0)*x1618*x1619))+(((0.2888)*cj4))+(((-0.01)*x1629))+((x1617*x1618))+(((-1.0)*py*x1620))+((px*sj2))+(((-0.0325)*sj4))+(((-1.0)*x1626*x1628))+((x1625*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1633=((1.0)*sj7);
CheckValue<IkReal> x1634 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x1633))+((cj7*r20)))),IkReal(((((-1.0)*cj6*r22))+(((-1.0)*r20*sj6*x1633))+(((-1.0)*cj7*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1634.valid){
continue;
}
CheckValue<IkReal> x1635=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1635.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1634.value)+(((1.5707963267949)*(x1635.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1636=IKsin(j5);
IkReal x1637=IKcos(j5);
IkReal x1638=(cj7*r00);
IkReal x1639=((0.01)*sj2);
IkReal x1640=(r01*sj7);
IkReal x1641=((1.0)*cj2);
IkReal x1642=(r21*sj7);
IkReal x1643=((1.0)*sj2);
IkReal x1644=(cj7*sj6);
IkReal x1645=(cj2*cj6);
IkReal x1646=(r11*sj7);
IkReal x1647=((0.01)*cj2);
IkReal x1648=(cj7*r20);
IkReal x1649=(cj7*r10);
IkReal x1650=(sj4*x1636);
IkReal x1651=(r00*sj6*sj7);
IkReal x1652=(cj4*x1636);
IkReal x1653=(r10*sj6*sj7);
evalcond[0]=(x1652+x1642+(((-1.0)*x1648)));
evalcond[1]=(((r21*x1644))+((r20*sj6*sj7))+((cj6*r22))+((cj4*x1637)));
evalcond[2]=((((-1.0)*x1641*x1649))+x1650+((sj2*x1638))+((cj2*x1646))+(((-1.0)*x1640*x1643)));
evalcond[3]=(((cj2*x1640))+(((-1.0)*x1638*x1641))+((sj2*x1646))+(((-1.0)*x1637))+(((-1.0)*x1643*x1649)));
evalcond[4]=((0.0925)+(((-1.0)*pz))+(((-0.2888)*sj4))+(((0.01)*x1642))+(((-0.01)*x1648))+(((-0.01)*x1652))+(((-0.0325)*cj4)));
evalcond[5]=(((r02*x1645))+x1636+((cj2*x1651))+((sj2*x1653))+((cj2*r01*x1644))+((r11*sj2*x1644))+((cj6*r12*sj2)));
evalcond[6]=((((-1.0)*py*x1643))+((x1640*x1647))+(((-1.0)*px*x1641))+(((-1.0)*x1638*x1647))+(((-1.0)*x1639*x1649))+(((0.01)*x1637))+((x1639*x1646)));
evalcond[7]=((((-1.0)*cj6*r02*x1643))+((r12*x1645))+(((-1.0)*x1643*x1651))+((cj2*x1653))+((cj2*r11*x1644))+((sj4*x1637))+(((-1.0)*r01*x1643*x1644)));
evalcond[8]=((0.2151)+(((-1.0)*py*x1641))+(((-1.0)*x1647*x1649))+(((0.2888)*cj4))+(((-1.0)*x1639*x1640))+((x1646*x1647))+((px*sj2))+(((-0.01)*x1650))+(((-0.0325)*sj4))+((x1638*x1639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=cj3;
j5eval[1]=IKsign(cj3);
j5eval[2]=((IKabs(((((-1.0)*r21*sj7))+((cj7*r20)))))+(IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=cj3;
j5eval[1]=IKsign(cj3);
j5eval[2]=((IKabs(((((-100.0)*pz))+(((19.63)*sj3))+(((-1.0)*cj7*r20))+((r21*sj7)))))+(IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1654=((1.0)*sj7);
CheckValue<IkReal> x1655=IKPowWithIntegerCheck(cj3,-1);
if(!x1655.valid){
continue;
}
if( IKabs(((((-1.0)*cj2*r11*x1654))+(((-1.0)*cj7*r00*sj2))+((cj2*cj7*r10))+((r01*sj2*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1655.value)*(((((-1.0)*r21*x1654))+((cj7*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj2*r11*x1654))+(((-1.0)*cj7*r00*sj2))+((cj2*cj7*r10))+((r01*sj2*sj7))))+IKsqr(((x1655.value)*(((((-1.0)*r21*x1654))+((cj7*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj2*r11*x1654))+(((-1.0)*cj7*r00*sj2))+((cj2*cj7*r10))+((r01*sj2*sj7))), ((x1655.value)*(((((-1.0)*r21*x1654))+((cj7*r20))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1656=IKcos(j5);
IkReal x1657=IKsin(j5);
IkReal x1658=(cj7*r00);
IkReal x1659=((0.01)*sj2);
IkReal x1660=(cj2*sj7);
IkReal x1661=((1.0)*cj2);
IkReal x1662=(r21*sj7);
IkReal x1663=((1.0)*sj2);
IkReal x1664=(r01*sj7);
IkReal x1665=(cj2*cj6);
IkReal x1666=(r11*sj7);
IkReal x1667=(cj7*sj6);
IkReal x1668=((0.01)*cj2);
IkReal x1669=(r00*sj6);
IkReal x1670=(cj7*r20);
IkReal x1671=(cj7*r10);
IkReal x1672=(r10*sj6);
IkReal x1673=(cj3*x1656);
IkReal x1674=(sj3*x1656);
IkReal x1675=((1.0)*x1657);
evalcond[0]=(x1662+x1673+(((-1.0)*x1670)));
evalcond[1]=(((r20*sj6*sj7))+(((-1.0)*cj3*x1675))+((cj6*r22))+((r21*x1667)));
evalcond[2]=((((0.1963)*sj3))+(((-0.01)*x1670))+(((-0.01)*x1673))+(((-1.0)*pz))+(((0.01)*x1662)));
evalcond[3]=(x1657+((r11*x1660))+((sj2*x1658))+(((-1.0)*x1661*x1671))+(((-1.0)*x1663*x1664)));
evalcond[4]=((((-1.0)*x1663*x1671))+x1674+((r01*x1660))+((sj2*x1666))+(((-1.0)*x1658*x1661)));
evalcond[5]=((0.1826)+(((-1.0)*py*x1661))+(((-1.0)*x1668*x1671))+((x1658*x1659))+((px*sj2))+(((-0.01)*x1657))+(((0.01)*r11*x1660))+(((-1.0)*x1659*x1664)));
evalcond[6]=((((-1.0)*cj6*r02*x1663))+(((-1.0)*r01*x1663*x1667))+((r12*x1665))+x1656+((cj2*r11*x1667))+(((-1.0)*sj7*x1663*x1669))+((x1660*x1672)));
evalcond[7]=(((x1660*x1669))+(((-1.0)*sj3*x1675))+((r02*x1665))+((sj2*sj7*x1672))+((cj2*r01*x1667))+((cj6*r12*sj2))+((r11*sj2*x1667)));
evalcond[8]=((((-1.0)*py*x1663))+(((-1.0)*x1659*x1671))+(((-0.01)*x1674))+(((-1.0)*px*x1661))+(((0.01)*r01*x1660))+((x1659*x1666))+(((-1.0)*x1658*x1668))+(((-0.1963)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1676=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1676.valid){
continue;
}
CheckValue<IkReal> x1677 = IKatan2WithCheck(IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IkReal(((((-100.0)*pz))+(((19.63)*sj3))+(((-1.0)*cj7*r20))+((r21*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1677.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1676.value)))+(x1677.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1678=IKcos(j5);
IkReal x1679=IKsin(j5);
IkReal x1680=(cj7*r00);
IkReal x1681=((0.01)*sj2);
IkReal x1682=(cj2*sj7);
IkReal x1683=((1.0)*cj2);
IkReal x1684=(r21*sj7);
IkReal x1685=((1.0)*sj2);
IkReal x1686=(r01*sj7);
IkReal x1687=(cj2*cj6);
IkReal x1688=(r11*sj7);
IkReal x1689=(cj7*sj6);
IkReal x1690=((0.01)*cj2);
IkReal x1691=(r00*sj6);
IkReal x1692=(cj7*r20);
IkReal x1693=(cj7*r10);
IkReal x1694=(r10*sj6);
IkReal x1695=(cj3*x1678);
IkReal x1696=(sj3*x1678);
IkReal x1697=((1.0)*x1679);
evalcond[0]=(x1695+x1684+(((-1.0)*x1692)));
evalcond[1]=(((r21*x1689))+((r20*sj6*sj7))+((cj6*r22))+(((-1.0)*cj3*x1697)));
evalcond[2]=((((0.1963)*sj3))+(((0.01)*x1684))+(((-1.0)*pz))+(((-0.01)*x1695))+(((-0.01)*x1692)));
evalcond[3]=(((r11*x1682))+(((-1.0)*x1685*x1686))+x1679+(((-1.0)*x1683*x1693))+((sj2*x1680)));
evalcond[4]=(((r01*x1682))+x1696+(((-1.0)*x1680*x1683))+((sj2*x1688))+(((-1.0)*x1685*x1693)));
evalcond[5]=((0.1826)+(((-1.0)*py*x1683))+((x1680*x1681))+(((-1.0)*x1681*x1686))+(((-1.0)*x1690*x1693))+(((-0.01)*x1679))+((px*sj2))+(((0.01)*r11*x1682)));
evalcond[6]=((((-1.0)*r01*x1685*x1689))+((cj2*r11*x1689))+x1678+((r12*x1687))+(((-1.0)*sj7*x1685*x1691))+((x1682*x1694))+(((-1.0)*cj6*r02*x1685)));
evalcond[7]=(((r11*sj2*x1689))+(((-1.0)*sj3*x1697))+((cj2*r01*x1689))+((r02*x1687))+((sj2*sj7*x1694))+((x1682*x1691))+((cj6*r12*sj2)));
evalcond[8]=(((x1681*x1688))+(((-1.0)*py*x1685))+(((-1.0)*x1681*x1693))+(((-1.0)*x1680*x1690))+(((0.01)*r01*x1682))+(((-0.01)*x1696))+(((-1.0)*px*x1683))+(((-0.1963)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1698=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1698.valid){
continue;
}
CheckValue<IkReal> x1699 = IKatan2WithCheck(IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IkReal(((((-1.0)*r21*sj7))+((cj7*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1699.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1698.value)))+(x1699.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1700=IKcos(j5);
IkReal x1701=IKsin(j5);
IkReal x1702=(cj7*r00);
IkReal x1703=((0.01)*sj2);
IkReal x1704=(cj2*sj7);
IkReal x1705=((1.0)*cj2);
IkReal x1706=(r21*sj7);
IkReal x1707=((1.0)*sj2);
IkReal x1708=(r01*sj7);
IkReal x1709=(cj2*cj6);
IkReal x1710=(r11*sj7);
IkReal x1711=(cj7*sj6);
IkReal x1712=((0.01)*cj2);
IkReal x1713=(r00*sj6);
IkReal x1714=(cj7*r20);
IkReal x1715=(cj7*r10);
IkReal x1716=(r10*sj6);
IkReal x1717=(cj3*x1700);
IkReal x1718=(sj3*x1700);
IkReal x1719=((1.0)*x1701);
evalcond[0]=(x1706+x1717+(((-1.0)*x1714)));
evalcond[1]=((((-1.0)*cj3*x1719))+((r20*sj6*sj7))+((cj6*r22))+((r21*x1711)));
evalcond[2]=((((0.1963)*sj3))+(((0.01)*x1706))+(((-1.0)*pz))+(((-0.01)*x1714))+(((-0.01)*x1717)));
evalcond[3]=(x1701+(((-1.0)*x1707*x1708))+((r11*x1704))+(((-1.0)*x1705*x1715))+((sj2*x1702)));
evalcond[4]=((((-1.0)*x1702*x1705))+x1718+(((-1.0)*x1707*x1715))+((r01*x1704))+((sj2*x1710)));
evalcond[5]=((0.1826)+(((0.01)*r11*x1704))+(((-1.0)*py*x1705))+(((-0.01)*x1701))+(((-1.0)*x1712*x1715))+(((-1.0)*x1703*x1708))+((px*sj2))+((x1702*x1703)));
evalcond[6]=(((r12*x1709))+x1700+(((-1.0)*r01*x1707*x1711))+(((-1.0)*cj6*r02*x1707))+((cj2*r11*x1711))+(((-1.0)*sj7*x1707*x1713))+((x1704*x1716)));
evalcond[7]=(((r02*x1709))+(((-1.0)*sj3*x1719))+((cj2*r01*x1711))+((x1704*x1713))+((r11*sj2*x1711))+((cj6*r12*sj2))+((sj2*sj7*x1716)));
evalcond[8]=((((-1.0)*py*x1707))+(((0.01)*r01*x1704))+((x1703*x1710))+(((-1.0)*px*x1705))+(((-1.0)*x1703*x1715))+(((-1.0)*x1702*x1712))+(((-0.01)*x1718))+(((-0.1963)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=cj3;
j5eval[1]=IKsign(cj3);
j5eval[2]=((IKabs(((((-1.0)*r21*sj7))+((cj7*r20)))))+(IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=cj3;
j5eval[1]=IKsign(cj3);
j5eval[2]=((IKabs((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))))+(IKabs(((((-100.0)*pz))+(((-1.0)*cj7*r20))+((r21*sj7))+(((-38.13)*sj3))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1720=((1.0)*sj7);
CheckValue<IkReal> x1721=IKPowWithIntegerCheck(cj3,-1);
if(!x1721.valid){
continue;
}
if( IKabs(((((-1.0)*cj2*cj7*r10))+((cj2*r11*sj7))+((cj7*r00*sj2))+(((-1.0)*r01*sj2*x1720)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1721.value)*(((((-1.0)*r21*x1720))+((cj7*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj2*cj7*r10))+((cj2*r11*sj7))+((cj7*r00*sj2))+(((-1.0)*r01*sj2*x1720))))+IKsqr(((x1721.value)*(((((-1.0)*r21*x1720))+((cj7*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj2*cj7*r10))+((cj2*r11*sj7))+((cj7*r00*sj2))+(((-1.0)*r01*sj2*x1720))), ((x1721.value)*(((((-1.0)*r21*x1720))+((cj7*r20))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1722=IKcos(j5);
IkReal x1723=IKsin(j5);
IkReal x1724=(cj7*r00);
IkReal x1725=((0.01)*sj2);
IkReal x1726=(r01*sj7);
IkReal x1727=((1.0)*cj2);
IkReal x1728=(r21*sj7);
IkReal x1729=((1.0)*sj2);
IkReal x1730=(cj2*cj6);
IkReal x1731=(r11*sj7);
IkReal x1732=((0.01)*cj2);
IkReal x1733=(cj7*sj6);
IkReal x1734=(cj7*r20);
IkReal x1735=(cj7*r10);
IkReal x1736=(cj3*x1722);
IkReal x1737=(r00*sj6*sj7);
IkReal x1738=((1.0)*x1723);
IkReal x1739=(sj3*x1722);
IkReal x1740=(r10*sj6*sj7);
evalcond[0]=(x1728+x1736+(((-1.0)*x1734)));
evalcond[1]=(((r21*x1733))+((r20*sj6*sj7))+(((-1.0)*cj3*x1738))+((cj6*r22)));
evalcond[2]=((((-0.01)*x1734))+(((-0.01)*x1736))+(((-1.0)*pz))+(((0.01)*x1728))+(((-0.3813)*sj3)));
evalcond[3]=(((cj2*x1731))+(((-1.0)*x1726*x1729))+(((-1.0)*x1727*x1735))+(((-1.0)*x1738))+((sj2*x1724)));
evalcond[4]=(((cj2*x1726))+x1739+(((-1.0)*x1729*x1735))+(((-1.0)*x1724*x1727))+((sj2*x1731)));
evalcond[5]=((0.2476)+((x1724*x1725))+((x1731*x1732))+(((-1.0)*py*x1727))+(((-1.0)*x1725*x1726))+((px*sj2))+(((0.01)*x1723))+(((-1.0)*x1732*x1735)));
evalcond[6]=(((cj2*r01*x1733))+((cj2*x1737))+((r11*sj2*x1733))+((r02*x1730))+((cj6*r12*sj2))+((sj2*x1740))+(((-1.0)*sj3*x1738)));
evalcond[7]=((((-1.0)*r01*x1729*x1733))+(((-1.0)*cj6*r02*x1729))+(((-1.0)*x1729*x1737))+((cj2*x1740))+((r12*x1730))+(((-1.0)*x1722))+((cj2*r11*x1733)));
evalcond[8]=(((x1725*x1731))+(((-1.0)*py*x1729))+((x1726*x1732))+(((-0.01)*x1739))+(((0.3813)*cj3))+(((-1.0)*px*x1727))+(((-1.0)*x1724*x1732))+(((-1.0)*x1725*x1735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1741=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1741.valid){
continue;
}
CheckValue<IkReal> x1742 = IKatan2WithCheck(IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IkReal(((((-100.0)*pz))+(((-1.0)*cj7*r20))+((r21*sj7))+(((-38.13)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1742.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1741.value)))+(x1742.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1743=IKcos(j5);
IkReal x1744=IKsin(j5);
IkReal x1745=(cj7*r00);
IkReal x1746=((0.01)*sj2);
IkReal x1747=(r01*sj7);
IkReal x1748=((1.0)*cj2);
IkReal x1749=(r21*sj7);
IkReal x1750=((1.0)*sj2);
IkReal x1751=(cj2*cj6);
IkReal x1752=(r11*sj7);
IkReal x1753=((0.01)*cj2);
IkReal x1754=(cj7*sj6);
IkReal x1755=(cj7*r20);
IkReal x1756=(cj7*r10);
IkReal x1757=(cj3*x1743);
IkReal x1758=(r00*sj6*sj7);
IkReal x1759=((1.0)*x1744);
IkReal x1760=(sj3*x1743);
IkReal x1761=(r10*sj6*sj7);
evalcond[0]=(x1749+x1757+(((-1.0)*x1755)));
evalcond[1]=(((r20*sj6*sj7))+((r21*x1754))+((cj6*r22))+(((-1.0)*cj3*x1759)));
evalcond[2]=((((-1.0)*pz))+(((0.01)*x1749))+(((-0.01)*x1757))+(((-0.01)*x1755))+(((-0.3813)*sj3)));
evalcond[3]=((((-1.0)*x1748*x1756))+((cj2*x1752))+(((-1.0)*x1747*x1750))+(((-1.0)*x1759))+((sj2*x1745)));
evalcond[4]=(x1760+((cj2*x1747))+(((-1.0)*x1745*x1748))+(((-1.0)*x1750*x1756))+((sj2*x1752)));
evalcond[5]=((0.2476)+((x1752*x1753))+((x1745*x1746))+(((0.01)*x1744))+(((-1.0)*x1746*x1747))+(((-1.0)*py*x1748))+(((-1.0)*x1753*x1756))+((px*sj2)));
evalcond[6]=(((sj2*x1761))+((r02*x1751))+((cj2*x1758))+((r11*sj2*x1754))+(((-1.0)*sj3*x1759))+((cj2*r01*x1754))+((cj6*r12*sj2)));
evalcond[7]=(((cj2*r11*x1754))+(((-1.0)*x1750*x1758))+(((-1.0)*x1743))+((cj2*x1761))+(((-1.0)*cj6*r02*x1750))+(((-1.0)*r01*x1750*x1754))+((r12*x1751)));
evalcond[8]=((((-0.01)*x1760))+((x1746*x1752))+((x1747*x1753))+(((-1.0)*x1746*x1756))+(((-1.0)*py*x1750))+(((-1.0)*x1745*x1753))+(((0.3813)*cj3))+(((-1.0)*px*x1748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1762=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1762.valid){
continue;
}
CheckValue<IkReal> x1763 = IKatan2WithCheck(IkReal((((r20*sj6*sj7))+((cj6*r22))+((cj7*r21*sj6)))),IkReal(((((-1.0)*r21*sj7))+((cj7*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1763.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1762.value)))+(x1763.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1764=IKcos(j5);
IkReal x1765=IKsin(j5);
IkReal x1766=(cj7*r00);
IkReal x1767=((0.01)*sj2);
IkReal x1768=(r01*sj7);
IkReal x1769=((1.0)*cj2);
IkReal x1770=(r21*sj7);
IkReal x1771=((1.0)*sj2);
IkReal x1772=(cj2*cj6);
IkReal x1773=(r11*sj7);
IkReal x1774=((0.01)*cj2);
IkReal x1775=(cj7*sj6);
IkReal x1776=(cj7*r20);
IkReal x1777=(cj7*r10);
IkReal x1778=(cj3*x1764);
IkReal x1779=(r00*sj6*sj7);
IkReal x1780=((1.0)*x1765);
IkReal x1781=(sj3*x1764);
IkReal x1782=(r10*sj6*sj7);
evalcond[0]=((((-1.0)*x1776))+x1770+x1778);
evalcond[1]=(((r20*sj6*sj7))+(((-1.0)*cj3*x1780))+((r21*x1775))+((cj6*r22)));
evalcond[2]=((((-0.01)*x1778))+(((-0.01)*x1776))+(((0.01)*x1770))+(((-1.0)*pz))+(((-0.3813)*sj3)));
evalcond[3]=((((-1.0)*x1780))+((sj2*x1766))+((cj2*x1773))+(((-1.0)*x1768*x1771))+(((-1.0)*x1769*x1777)));
evalcond[4]=(x1781+(((-1.0)*x1766*x1769))+(((-1.0)*x1771*x1777))+((sj2*x1773))+((cj2*x1768)));
evalcond[5]=((0.2476)+(((0.01)*x1765))+((x1773*x1774))+((px*sj2))+((x1766*x1767))+(((-1.0)*x1767*x1768))+(((-1.0)*x1774*x1777))+(((-1.0)*py*x1769)));
evalcond[6]=(((sj2*x1782))+((r02*x1772))+((cj2*r01*x1775))+((cj6*r12*sj2))+((cj2*x1779))+((r11*sj2*x1775))+(((-1.0)*sj3*x1780)));
evalcond[7]=((((-1.0)*x1764))+((r12*x1772))+((cj2*x1782))+((cj2*r11*x1775))+(((-1.0)*cj6*r02*x1771))+(((-1.0)*x1771*x1779))+(((-1.0)*r01*x1771*x1775)));
evalcond[8]=(((x1767*x1773))+(((-1.0)*py*x1771))+(((-1.0)*x1767*x1777))+(((-1.0)*px*x1769))+(((0.3813)*cj3))+(((-0.01)*x1781))+(((-1.0)*x1766*x1774))+((x1768*x1774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1791=IKPowWithIntegerCheck(sj4,-1);
if(!x1791.valid){
continue;
}
IkReal x1783=x1791.value;
IkReal x1784=((1.0)*sj7);
IkReal x1785=(cj2*r11);
IkReal x1786=(cj2*r10);
IkReal x1787=(cj4*sj3);
IkReal x1788=(cj7*x1787);
IkReal x1789=((1.0)*r00*sj2);
IkReal x1790=(r01*sj2*sj7);
CheckValue<IkReal> x1792=IKPowWithIntegerCheck(cj3,-1);
if(!x1792.valid){
continue;
}
if( IKabs((x1783*((((cj7*x1786))+x1790+(((-1.0)*cj7*x1789))+(((-1.0)*x1784*x1785)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1783*(x1792.value)*(((((-1.0)*x1784*x1785*x1787))+((x1787*x1790))+(((-1.0)*x1788*x1789))+(((-1.0)*r21*sj4*x1784))+((x1786*x1788))+((cj7*r20*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1783*((((cj7*x1786))+x1790+(((-1.0)*cj7*x1789))+(((-1.0)*x1784*x1785))))))+IKsqr((x1783*(x1792.value)*(((((-1.0)*x1784*x1785*x1787))+((x1787*x1790))+(((-1.0)*x1788*x1789))+(((-1.0)*r21*sj4*x1784))+((x1786*x1788))+((cj7*r20*sj4))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1783*((((cj7*x1786))+x1790+(((-1.0)*cj7*x1789))+(((-1.0)*x1784*x1785))))), (x1783*(x1792.value)*(((((-1.0)*x1784*x1785*x1787))+((x1787*x1790))+(((-1.0)*x1788*x1789))+(((-1.0)*r21*sj4*x1784))+((x1786*x1788))+((cj7*r20*sj4))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1793=IKsin(j5);
IkReal x1794=IKcos(j5);
IkReal x1795=(cj7*r00);
IkReal x1796=((0.01)*sj2);
IkReal x1797=(r01*sj7);
IkReal x1798=((1.0)*cj2);
IkReal x1799=(r21*sj7);
IkReal x1800=((0.2888)*sj4);
IkReal x1801=((1.0)*sj2);
IkReal x1802=(cj3*cj4);
IkReal x1803=(cj7*sj6);
IkReal x1804=(cj2*cj6);
IkReal x1805=(r11*sj7);
IkReal x1806=((0.01)*cj2);
IkReal x1807=(cj7*r10);
IkReal x1808=(cj7*r20);
IkReal x1809=(sj4*x1793);
IkReal x1810=(cj3*x1794);
IkReal x1811=(r00*sj6*sj7);
IkReal x1812=(sj3*x1794);
IkReal x1813=(r10*sj6*sj7);
IkReal x1814=((1.0)*x1793);
IkReal x1815=(cj4*sj3*x1793);
evalcond[0]=(x1799+(((-1.0)*cj4*sj3*x1814))+x1810+(((-1.0)*x1808)));
evalcond[1]=(((sj2*x1795))+((cj2*x1805))+(((-1.0)*x1797*x1801))+(((-1.0)*x1798*x1807))+x1809);
evalcond[2]=((((-1.0)*cj3*x1814))+((r20*sj6*sj7))+((r21*x1803))+(((-1.0)*cj4*x1812))+((cj6*r22)));
evalcond[3]=((((-1.0)*x1795*x1798))+((cj2*x1797))+(((-1.0)*x1801*x1807))+x1812+((sj2*x1805))+((x1793*x1802)));
evalcond[4]=((((0.0325)*cj4*sj3))+(((0.01)*x1815))+(((-0.01)*x1808))+(((-0.0925)*sj3))+(((-1.0)*pz))+((sj3*x1800))+(((-0.01)*x1810))+(((0.01)*x1799)));
evalcond[5]=(((cj2*r11*x1803))+((cj2*x1813))+(((-1.0)*cj6*r02*x1801))+((r12*x1804))+((sj4*x1794))+(((-1.0)*x1801*x1811))+(((-1.0)*r01*x1801*x1803)));
evalcond[6]=((0.2151)+(((0.2888)*cj4))+(((-1.0)*x1796*x1797))+(((-1.0)*py*x1798))+(((-0.01)*x1809))+(((-1.0)*x1806*x1807))+((x1795*x1796))+((px*sj2))+((x1805*x1806))+(((-0.0325)*sj4)));
evalcond[7]=(((sj2*x1813))+((cj2*x1811))+(((-1.0)*sj3*x1814))+((x1794*x1802))+((r11*sj2*x1803))+((r02*x1804))+((cj6*r12*sj2))+((cj2*r01*x1803)));
evalcond[8]=((((-1.0)*cj3*x1800))+(((-0.01)*x1793*x1802))+(((-0.0325)*x1802))+(((-1.0)*x1795*x1806))+(((-1.0)*x1796*x1807))+(((-1.0)*py*x1801))+((x1797*x1806))+(((-0.01)*x1812))+((x1796*x1805))+(((-1.0)*px*x1798))+(((0.0925)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1816=(cj7*r20);
IkReal x1817=(cj7*sj3);
IkReal x1818=(cj2*r00);
IkReal x1819=(r21*sj7);
IkReal x1820=((1.0)*sj3);
IkReal x1821=(r10*sj2);
IkReal x1822=(cj3*cj7);
IkReal x1823=((1.0)*cj3);
IkReal x1824=(r11*sj2*sj7);
IkReal x1825=((1.0)*cj2*r01*sj7);
CheckValue<IkReal> x1826=IKPowWithIntegerCheck(cj4,-1);
if(!x1826.valid){
continue;
}
if( IKabs(((x1826.value)*((((sj3*x1819))+((x1818*x1822))+((x1821*x1822))+(((-1.0)*x1823*x1824))+(((-1.0)*x1816*x1820))+(((-1.0)*cj2*r01*sj7*x1823)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*x1816))+(((-1.0)*x1819*x1823))+((x1817*x1818))+(((-1.0)*cj2*r01*sj7*x1820))+(((-1.0)*x1820*x1824))+((x1817*x1821)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1826.value)*((((sj3*x1819))+((x1818*x1822))+((x1821*x1822))+(((-1.0)*x1823*x1824))+(((-1.0)*x1816*x1820))+(((-1.0)*cj2*r01*sj7*x1823))))))+IKsqr((((cj3*x1816))+(((-1.0)*x1819*x1823))+((x1817*x1818))+(((-1.0)*cj2*r01*sj7*x1820))+(((-1.0)*x1820*x1824))+((x1817*x1821))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1826.value)*((((sj3*x1819))+((x1818*x1822))+((x1821*x1822))+(((-1.0)*x1823*x1824))+(((-1.0)*x1816*x1820))+(((-1.0)*cj2*r01*sj7*x1823))))), (((cj3*x1816))+(((-1.0)*x1819*x1823))+((x1817*x1818))+(((-1.0)*cj2*r01*sj7*x1820))+(((-1.0)*x1820*x1824))+((x1817*x1821))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1827=IKsin(j5);
IkReal x1828=IKcos(j5);
IkReal x1829=(cj7*r00);
IkReal x1830=((0.01)*sj2);
IkReal x1831=(r01*sj7);
IkReal x1832=((1.0)*cj2);
IkReal x1833=(r21*sj7);
IkReal x1834=((0.2888)*sj4);
IkReal x1835=((1.0)*sj2);
IkReal x1836=(cj3*cj4);
IkReal x1837=(cj7*sj6);
IkReal x1838=(cj2*cj6);
IkReal x1839=(r11*sj7);
IkReal x1840=((0.01)*cj2);
IkReal x1841=(cj7*r10);
IkReal x1842=(cj7*r20);
IkReal x1843=(sj4*x1827);
IkReal x1844=(cj3*x1828);
IkReal x1845=(r00*sj6*sj7);
IkReal x1846=(sj3*x1828);
IkReal x1847=(r10*sj6*sj7);
IkReal x1848=((1.0)*x1827);
IkReal x1849=(cj4*sj3*x1827);
evalcond[0]=((((-1.0)*cj4*sj3*x1848))+x1844+x1833+(((-1.0)*x1842)));
evalcond[1]=(((cj2*x1839))+x1843+(((-1.0)*x1831*x1835))+((sj2*x1829))+(((-1.0)*x1832*x1841)));
evalcond[2]=(((r20*sj6*sj7))+(((-1.0)*cj3*x1848))+((r21*x1837))+((cj6*r22))+(((-1.0)*cj4*x1846)));
evalcond[3]=(((cj2*x1831))+((x1827*x1836))+((sj2*x1839))+x1846+(((-1.0)*x1835*x1841))+(((-1.0)*x1829*x1832)));
evalcond[4]=((((0.0325)*cj4*sj3))+(((0.01)*x1849))+((sj3*x1834))+(((0.01)*x1833))+(((-0.0925)*sj3))+(((-1.0)*pz))+(((-0.01)*x1844))+(((-0.01)*x1842)));
evalcond[5]=(((sj4*x1828))+((cj2*r11*x1837))+((cj2*x1847))+(((-1.0)*cj6*r02*x1835))+(((-1.0)*x1835*x1845))+((r12*x1838))+(((-1.0)*r01*x1835*x1837)));
evalcond[6]=((0.2151)+(((0.2888)*cj4))+(((-1.0)*py*x1832))+((x1829*x1830))+((x1839*x1840))+(((-1.0)*x1840*x1841))+((px*sj2))+(((-0.01)*x1843))+(((-0.0325)*sj4))+(((-1.0)*x1830*x1831)));
evalcond[7]=(((r11*sj2*x1837))+(((-1.0)*sj3*x1848))+((sj2*x1847))+((r02*x1838))+((cj2*x1845))+((cj6*r12*sj2))+((x1828*x1836))+((cj2*r01*x1837)));
evalcond[8]=((((-1.0)*x1830*x1841))+(((-0.0325)*x1836))+(((-1.0)*py*x1835))+(((-0.01)*x1827*x1836))+((x1831*x1840))+((x1830*x1839))+(((-0.01)*x1846))+(((-1.0)*px*x1832))+(((-1.0)*cj3*x1834))+(((0.0925)*cj3))+(((-1.0)*x1829*x1840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1850=cj3*cj3;
IkReal x1851=cj4*cj4;
IkReal x1852=(cj3*r20);
IkReal x1853=(cj3*r21);
IkReal x1854=(sj6*sj7);
IkReal x1855=(cj6*r22);
IkReal x1856=(cj4*sj3);
IkReal x1857=(cj7*x1856);
CheckValue<IkReal> x1858 = IKatan2WithCheck(IkReal((((cj7*sj6*x1853))+((x1852*x1854))+(((-1.0)*r20*x1857))+((cj3*x1855))+((r21*sj7*x1856)))),IkReal((((r21*sj6*x1857))+((r20*x1854*x1856))+((x1855*x1856))+(((-1.0)*sj7*x1853))+((cj7*x1852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1858.valid){
continue;
}
CheckValue<IkReal> x1859=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1850*x1851))+x1850+x1851)),-1);
if(!x1859.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1858.value)+(((1.5707963267949)*(x1859.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1860=IKsin(j5);
IkReal x1861=IKcos(j5);
IkReal x1862=(cj7*r00);
IkReal x1863=((0.01)*sj2);
IkReal x1864=(r01*sj7);
IkReal x1865=((1.0)*cj2);
IkReal x1866=(r21*sj7);
IkReal x1867=((0.2888)*sj4);
IkReal x1868=((1.0)*sj2);
IkReal x1869=(cj3*cj4);
IkReal x1870=(cj7*sj6);
IkReal x1871=(cj2*cj6);
IkReal x1872=(r11*sj7);
IkReal x1873=((0.01)*cj2);
IkReal x1874=(cj7*r10);
IkReal x1875=(cj7*r20);
IkReal x1876=(sj4*x1860);
IkReal x1877=(cj3*x1861);
IkReal x1878=(r00*sj6*sj7);
IkReal x1879=(sj3*x1861);
IkReal x1880=(r10*sj6*sj7);
IkReal x1881=((1.0)*x1860);
IkReal x1882=(cj4*sj3*x1860);
evalcond[0]=(x1866+x1877+(((-1.0)*x1875))+(((-1.0)*cj4*sj3*x1881)));
evalcond[1]=((((-1.0)*x1864*x1868))+((cj2*x1872))+x1876+((sj2*x1862))+(((-1.0)*x1865*x1874)));
evalcond[2]=(((r20*sj6*sj7))+(((-1.0)*cj3*x1881))+(((-1.0)*cj4*x1879))+((cj6*r22))+((r21*x1870)));
evalcond[3]=((((-1.0)*x1868*x1874))+((x1860*x1869))+((sj2*x1872))+(((-1.0)*x1862*x1865))+x1879+((cj2*x1864)));
evalcond[4]=((((0.0325)*cj4*sj3))+(((0.01)*x1866))+(((-0.0925)*sj3))+(((-1.0)*pz))+((sj3*x1867))+(((-0.01)*x1877))+(((-0.01)*x1875))+(((0.01)*x1882)));
evalcond[5]=(((sj4*x1861))+(((-1.0)*x1868*x1878))+((cj2*r11*x1870))+(((-1.0)*cj6*r02*x1868))+((cj2*x1880))+((r12*x1871))+(((-1.0)*r01*x1868*x1870)));
evalcond[6]=((0.2151)+(((0.2888)*cj4))+(((-1.0)*x1873*x1874))+((x1862*x1863))+(((-1.0)*x1863*x1864))+(((-0.01)*x1876))+((x1872*x1873))+(((-1.0)*py*x1865))+((px*sj2))+(((-0.0325)*sj4)));
evalcond[7]=(((sj2*x1880))+((r02*x1871))+((cj2*x1878))+((cj2*r01*x1870))+((cj6*r12*sj2))+((r11*sj2*x1870))+(((-1.0)*sj3*x1881))+((x1861*x1869)));
evalcond[8]=(((x1863*x1872))+(((-0.0325)*x1869))+(((-1.0)*px*x1865))+(((-1.0)*x1863*x1874))+(((-1.0)*cj3*x1867))+(((-0.01)*x1879))+(((-1.0)*py*x1868))+(((-1.0)*x1862*x1873))+(((0.0925)*cj3))+((x1864*x1873))+(((-0.01)*x1860*x1869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "971b46d4e8bdf8f09539f329c3a721b0"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
