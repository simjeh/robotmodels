/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2023-04-13 01:27:48.159676
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[1]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=IKcos(j[7]);
x13=IKsin(j[6]);
x14=IKsin(j[7]);
x15=IKcos(j[6]);
x16=((0.2688)*x1);
x17=((1.0)*x11);
x18=((0.0375)*x13);
x19=((1.0)*x9);
x20=((1.0)*x1);
x21=((1.0)*x10);
x22=((1.0)*x6);
x23=((0.0925)*x1);
x24=((1.0)*x3);
x25=((0.0325)*x1);
x26=((0.0375)*x15);
x27=(x2*x4);
x28=(x4*x7);
x29=(x5*x6);
x30=(x0*x3);
x31=((-1.0)*x10);
x32=(x5*x7);
x33=((-1.0)*x0);
x34=((-1.0)*x11);
x35=(x2*x5);
x36=(x0*x2);
x37=((-1.0)*x6);
x38=(x3*x4);
x39=((-1.0)*x7);
x40=((-1.0)*x1);
x41=((1.0)*x0*x32);
x42=(x20*x32);
x43=(x22*x3*x5);
x44=(((x0*x27))+(((-1.0)*x20*x3)));
x45=((((-1.0)*x20*x38))+x36);
x46=(((x1*x27))+x30);
x47=((((-1.0)*x28))+x43);
x48=((1.0)*x45);
x49=((((-1.0)*x2*x20))+(((-1.0)*x0*x24*x4)));
x50=(x44*x9);
x51=(x46*x9);
x52=(x45*x6);
x53=(x46*x8);
x54=(((x22*x4))+((x24*x32)));
x55=((-1.0)*x54);
x56=(x44*x8);
x57=(x45*x7);
x58=(x49*x6);
x59=((-1.0)*x49);
x60=(x10*x55);
x61=(((x1*x29))+x57);
x62=(((x35*x9))+((x8*(((((-1.0)*x43))+x28)))));
x63=((((-1.0)*x22*x45))+x42);
x64=(((x47*x9))+((x35*x8)));
x65=(((x0*x29))+((x49*x7)));
x66=(x10*x61);
x67=(x11*x62);
x68=(x15*x64);
x69=(x63*x9);
x70=(((x37*x49))+x41);
x71=(x10*x65);
x72=(((x29*x33))+((x39*x49)));
x73=(x70*x9);
x74=(x34*((((x29*x40))+((x39*x45)))));
x75=(((x8*(((((-1.0)*x42))+x52))))+x51);
x76=(((x8*((x52+((x32*x40))))))+x51);
x77=(x50+((x8*(((((-1.0)*x41))+x58)))));
x78=(((x8*((x58+((x32*x33))))))+x50);
x79=(x15*((((x9*((((x37*x45))+x42))))+x53)));
x80=((((-1.0)*x21*x62))+(((-1.0)*x17*x54)));
x81=(((x34*x54))+((x31*x62)));
x82=(x15*((x73+x56)));
x83=(x13*x81);
x84=(x74+((x31*x76)));
x85=((((-1.0)*x21*x77))+(((-1.0)*x17*x72)));
eerot[0]=(((x14*((((x13*((((x34*x72))+((x31*x78))))))+x82))))+((x12*((x71+((x11*x78)))))));
eerot[1]=(((x14*((((x31*x65))+((x34*x77))))))+((x12*((((x13*x85))+x82)))));
eerot[2]=(((x13*(((((-1.0)*x73))+(((-1.0)*x56))))))+((x15*x85)));
eetrans[0]=((0.038)+(((-0.1491)*(IKsin(j[0]))))+(((0.2151)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((((((((((-0.0375)*(((((-1.0)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-0.0375)*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((-0.0375)*(((((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))))+(((IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((-0.0375)*(((((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[3]))))+(((((((-1.0)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))))*(IKsin(j[7]))))+(((-0.0925)*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[3]))))+(((-0.06)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.2151)*(IKcos(j[2]))*(IKsin(j[0]))))+(((((((0.2688)*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[3]))))+(((((((0.2688)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.2688)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((((((0.0375)*(((((-1.0)*(((((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))))+(((IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((-1.0)*(((((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[3]))))+(((((((-1.0)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((0.0375)*(((((-1.0)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[2]))))+(((1.0)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((1.0)*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((0.0375)*(((((1.0)*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[3]))))+(((((((1.0)*(IKsin(j[0]))*(IKsin(j[2]))))+(((1.0)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.0375)*(((((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))))+(((IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((0.04)*(IKcos(j[0]))))+(((((((((((0.0325)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.0325)*(IKsin(j[0]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.0325)*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.2688)*(IKcos(j[2]))*(IKsin(j[0]))))+(((0.2688)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((-0.0325)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.0325)*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[4]))))+(((((((-0.0925)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.0925)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[3])))));
eerot[3]=(((x12*((x66+((x11*x75))))))+((x14*((((x13*((x74+((x31*x75))))))+x79)))));
eerot[4]=(((x12*(((((-1.0)*x13*((((x21*x76))+((x17*(((((-1.0)*x48*x7))+(((-1.0)*x20*x29))))))))))+x79))))+((x14*((((x31*x61))+((x34*x76)))))));
eerot[5]=(((x13*(((((-1.0)*x19*x63))+(((-1.0)*x53))))))+((x15*x84)));
IkReal x86=((1.0)*x23);
eetrans[1]=((0.124)+(((0.2151)*x1*x27))+((x9*(((((-1.0)*x25*x27))+(((-0.0325)*x30))))))+(((-0.06)*x1*x5))+(((0.1491)*x0))+(((0.04)*x1))+((x9*(((((-0.2688)*x52))+((x16*x32))))))+(((-1.0)*x32*x86))+(((0.2151)*x30))+((x14*(((((-0.0375)*x11*x76))+(((-0.0375)*x66))))))+((x8*(((((-0.0325)*x52))+((x25*x32))))))+((x8*(((((0.2688)*x30))+((x16*x27))))))+((x6*(((((0.0925)*x36))+(((-1.0)*x38*x86))))))+((x12*((((x18*x84))+((x26*((x53+x69)))))))));
eerot[6]=(((x12*((x60+x67))))+((x14*((x68+x83)))));
eerot[7]=(((x14*((((x34*x62))+((x31*x55))))))+((x12*((((x13*x80))+x68)))));
eerot[8]=(((x15*x80))+((x13*(((((-1.0)*x35*x8))+(((-1.0)*x19*x47)))))));
IkReal x87=(x29*x3);
eetrans[2]=((0.3325)+((x8*(((((0.0325)*x87))+(((-0.0325)*x28))))))+((x14*(((((-0.0375)*x67))+(((-0.0375)*x60))))))+(((0.06)*x4))+(((-0.0925)*x87))+(((0.2151)*x35))+(((-0.0325)*x35*x9))+(((0.2688)*x35*x8))+((x12*((((x26*x64))+((x18*x81))))))+(((0.0925)*x28))+((x9*(((((0.2688)*x87))+(((-0.2688)*x28)))))));
}

IKFAST_API int GetNumFreeParameters() { return 2; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2, 3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 8; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij2[2], _nj2,_ij3[2], _nj3;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
j3=pfree[1]; cj3=cos(pfree[1]); sj3=sin(pfree[1]), htj3=tan(pfree[1]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.038)+px+(((-0.0375)*r01)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.124)+py+(((-0.0375)*r11)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.3325)+(((-0.0375)*r21))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x88=((1.0)*px);
IkReal x89=((1.0)*pz);
IkReal x90=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x90))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x89)));
rxp0_2=((((-1.0)*r10*x88))+((py*r00)));
rxp1_0=((((-1.0)*r21*x90))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x89)));
rxp1_2=((((-1.0)*r11*x88))+((py*r01)));
rxp2_0=((((-1.0)*r22*x90))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x89))+((px*r22)));
rxp2_2=((((-1.0)*r12*x88))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x91=((1.0)*py);
IkReal x92=((0.2982)*py);
IkReal x93=((0.08)*px);
IkReal x94=((1.0)*pp);
IkReal x95=((0.4839)*cj2);
IkReal x96=((0.0537)*cj2);
IkReal x97=((0.0072)*sj3);
IkReal x98=((0.015)*sj3);
IkReal x99=((0.1491)+py);
IkReal x100=(cj3*sj2);
IkReal x101=((((0.16)*py))+(((-0.5964)*px)));
IkReal x102=((0.06)*x100);
IkReal x103=((0.125)*x100);
IkReal x104=((-0.00172212)+x98);
IkReal x105=((0.2175284)+x97);
IkReal x106=(x93+x92);
IkReal x107=((((-0.5376)*x100))+(((-0.065)*cj2)));
IkReal x108=(x102+x95);
IkReal x109=(x106+x94);
IkReal x110=(x103+x99+(((-1.0)*x96)));
IkReal x111=((0.1491)+x108+(((-1.0)*x91)));
IkReal x112=((0.1491)+x103+(((-1.0)*x91))+(((-1.0)*x96)));
IkReal x113=(x108+x99);
IkReal x114=(x105+x106+(((-1.0)*x94)));
IkReal x115=(x104+x106+(((-1.0)*x94)));
IkReal x116=((((-1.0)*x109))+x105);
IkReal x117=((((-1.0)*x109))+x104);
IkReal gconst0=x111;
IkReal gconst1=x107;
IkReal gconst2=x112;
IkReal gconst3=x114;
IkReal gconst4=x115;
IkReal gconst5=x111;
IkReal gconst6=x107;
IkReal gconst7=x112;
IkReal gconst8=x114;
IkReal gconst9=x115;
IkReal gconst10=x101;
IkReal gconst11=x101;
IkReal gconst12=x101;
IkReal gconst13=x101;
IkReal gconst14=x113;
IkReal gconst15=x107;
IkReal gconst16=x110;
IkReal gconst17=x116;
IkReal gconst18=x117;
IkReal gconst19=x113;
IkReal gconst20=x107;
IkReal gconst21=x110;
IkReal gconst22=x116;
IkReal gconst23=x117;
IkReal x118=sj3*sj3;
IkReal x119=((1.0)*gconst12);
IkReal x120=(gconst1*gconst4);
IkReal x121=(px*sj3);
IkReal x122=(gconst20*gconst22);
IkReal x123=(gconst2*px);
IkReal x124=((0.064512)*sj3);
IkReal x125=(gconst14*gconst21);
IkReal x126=(gconst19*gconst23);
IkReal x127=(gconst10*gconst16);
IkReal x128=((2.0)*px);
IkReal x129=(gconst21*gconst22);
IkReal x130=(gconst15*gconst18);
IkReal x131=(gconst5*px);
IkReal x132=((0.127419)*gconst16);
IkReal x133=(gconst12*gconst20);
IkReal x134=(gconst6*gconst8);
IkReal x135=((0.127419)*gconst2);
IkReal x136=(gconst18*gconst22);
IkReal x137=((0.254838)*px);
IkReal x138=((0.127419)*gconst19);
IkReal x139=((1.0)*gconst11);
IkReal x140=(gconst16*gconst17);
IkReal x141=(gconst16*px);
IkReal x142=(gconst3*gconst8);
IkReal x143=(gconst12*gconst6);
IkReal x144=(gconst16*gconst19);
IkReal x145=(gconst13*gconst5);
IkReal x146=((1.0)*gconst8);
IkReal x147=(gconst2*gconst5);
IkReal x148=(gconst7*gconst8);
IkReal x149=(gconst5*gconst9);
IkReal x150=(gconst11*gconst15);
IkReal x151=(gconst19*px);
IkReal x152=((0.016440109056)*sj3);
IkReal x153=(gconst13*gconst19);
IkReal x154=(gconst0*gconst4);
IkReal x155=(gconst1*gconst11*gconst5);
IkReal x156=((2.0)*gconst3*gconst9);
IkReal x157=((0.008323596288)*x118);
IkReal x158=(gconst2*gconst3*gconst7);
IkReal x159=(gconst8*x154);
IkReal x160=((1.0)*x154);
IkReal x161=((0.004161798144)*x118);
IkReal x162=((1.0)*gconst14*gconst18);
op[0]=((((-1.0)*x122*x132))+(((-1.0)*gconst16*x122*x124))+(((-1.0)*x122*x130))+(((-1.0)*x144*x161))+((x126*x140))+(((-1.0)*x144*x152))+(((-1.0)*gconst19*x124*x130))+(((-1.0)*x129*x140))+((x125*x136))+(((-1.0)*x126*x162))+(((-0.016235601561)*x144))+(((-1.0)*x130*x138)));
op[1]=((((-1.0)*x122*x137))+(((-0.032471203122)*x141))+(((-1.0)*gconst14*x126*x139))+(((-1.0)*gconst21*x119*x140))+(((-0.032471203122)*x151))+((x140*x153))+(((-1.0)*gconst19*x124*x150))+(((-1.0)*x138*x150))+(((-1.0)*gconst16*x124*x133))+((gconst11*gconst22*x125))+(((-1.0)*gconst18*x126*x128))+(((-1.0)*x151*x157))+(((-1.0)*x127*x129))+(((-1.0)*gconst20*x119*x130))+(((-1.0)*gconst14*gconst18*gconst23*x128))+((gconst12*gconst18*x125))+(((-1.0)*gconst15*x122*x139))+(((-1.0)*gconst22*x128*x140))+(((-1.0)*x141*x157))+(((-1.0)*x132*x133))+(((-0.032880218112)*gconst16*x121))+((x126*x127))+(((-0.032880218112)*gconst19*x121))+((gconst18*x128*x129))+(((-0.129024)*x121*x122))+(((-0.129024)*x121*x130))+((gconst17*x126*x128))+(((-1.0)*gconst17*x128*x129))+(((-1.0)*x130*x137))+(((-1.0)*x153*x162))+((gconst23*x128*x140))+((gconst14*x128*x136)));
op[2]=((((-1.0)*gconst17*gconst2*gconst21*gconst22))+((gconst11*gconst12*gconst14*gconst21))+(((-2.0)*gconst11*gconst19*gconst23*px))+(((-1.0)*gconst10*gconst12*gconst16*gconst21))+(((-0.064512)*gconst1*gconst18*gconst19*sj3))+(((-1.0)*gconst1*gconst18*gconst20*gconst22))+(((-2.0)*gconst10*gconst21*gconst22*px))+(((-0.008323596288)*gconst16*gconst19*(sj3*sj3)))+(((-0.016235601561)*gconst19*gconst2))+((gconst16*gconst17*gconst19*gconst9))+((gconst0*gconst18*gconst21*gconst22))+(((-0.064512)*gconst16*gconst22*gconst6*sj3))+(((2.0)*gconst12*gconst14*gconst18*px))+(((-0.127419)*gconst16*gconst20*gconst22))+(((-1.0)*gconst15*gconst18*gconst22*gconst6))+(((4.0)*gconst17*gconst23*(px*px)))+(((2.0)*gconst13*gconst17*gconst19*px))+(((-2.0)*gconst11*gconst14*gconst23*px))+((gconst17*gconst19*gconst2*gconst23))+(((-2.0)*gconst12*gconst17*gconst21*px))+(((2.0)*gconst13*gconst16*gconst17*px))+((gconst14*gconst21*gconst22*gconst4))+(((-0.127419)*gconst2*gconst20*gconst22))+(((-0.064512)*gconst16*gconst20*gconst8*sj3))+(((-0.004161798144)*gconst16*gconst5*(sj3*sj3)))+(((-0.064512)*gconst15*gconst18*gconst19*sj3))+(((-0.064512)*gconst2*gconst20*gconst22*sj3))+(((-0.064512)*gconst15*gconst19*gconst4*sj3))+(((-1.0)*gconst15*gconst18*gconst20*gconst8))+(((-2.0)*gconst13*gconst18*gconst19*px))+(((-1.0)*gconst11*gconst13*gconst14*gconst19))+(((-1.0)*gconst14*gconst19*gconst23*gconst4))+(((4.0)*gconst18*gconst22*(px*px)))+(((-0.016440109056)*gconst16*gconst5*sj3))+(((-0.064512)*gconst15*gconst18*gconst5*sj3))+(((-0.032471203122)*gconst16*gconst19))+(((-2.0)*gconst10*gconst16*gconst22*px))+(((-0.127419)*gconst1*gconst18*gconst19))+(((-1.0)*gconst11*gconst12*gconst15*gconst20))+(((-0.016647192576)*(px*px)*(sj3*sj3)))+(((-1.0)*gconst14*gconst18*gconst23*gconst5))+(((2.0)*gconst11*gconst21*gconst22*px))+(((-2.0)*gconst13*gconst14*gconst18*px))+(((-0.004161798144)*gconst19*gconst2*(sj3*sj3)))+(((-0.129024)*gconst12*gconst20*px*sj3))+(((-0.065760436224)*sj3*(px*px)))+(((-1.0)*gconst16*gconst17*gconst21*gconst8))+(((-0.064942406244)*(px*px)))+(((2.0)*gconst10*gconst19*gconst23*px))+(((-0.127419)*gconst15*gconst18*gconst19))+(((-0.032880218112)*gconst16*gconst19*sj3))+(((-4.0)*gconst18*gconst23*(px*px)))+(((2.0)*gconst12*gconst18*gconst21*px))+(((-0.254838)*gconst11*gconst15*px))+(((-1.0)*gconst0*gconst18*gconst19*gconst23))+(((2.0)*gconst11*gconst14*gconst22*px))+(((-0.127419)*gconst16*gconst22*gconst6))+(((-0.127419)*gconst15*gconst19*gconst4))+((gconst14*gconst18*gconst21*gconst8))+(((-0.129024)*gconst11*gconst15*px*sj3))+(((-0.064512)*gconst16*gconst20*gconst22*sj3))+(((-1.0)*gconst16*gconst17*gconst22*gconst7))+(((-0.016440109056)*gconst19*gconst2*sj3))+(((-4.0)*gconst17*gconst22*(px*px)))+(((-1.0)*gconst15*gconst20*gconst22*gconst4))+((gconst14*gconst18*gconst22*gconst7))+(((-0.254838)*gconst12*gconst20*px))+(((-0.127419)*gconst15*gconst18*gconst5))+((gconst16*gconst19*gconst23*gconst3))+(((2.0)*gconst10*gconst16*gconst23*px))+(((-1.0)*gconst16*gconst21*gconst22*gconst3))+((gconst10*gconst13*gconst16*gconst19))+(((-0.016235601561)*gconst16*gconst5))+(((-0.127419)*gconst16*gconst20*gconst8))+(((-2.0)*gconst12*gconst16*gconst17*px))+(((-1.0)*gconst14*gconst18*gconst19*gconst9))+((gconst16*gconst17*gconst23*gconst5)));
op[3]=((((-4.0)*gconst11*gconst23*(px*px)))+(((4.0)*gconst10*gconst23*(px*px)))+(((-0.129024)*gconst20*gconst8*px*sj3))+(((-1.0)*gconst12*gconst16*gconst17*gconst7))+(((-2.0)*gconst17*gconst21*gconst8*px))+(((-0.127419)*gconst1*gconst11*gconst19))+(((-0.129024)*gconst15*gconst18*px*sj3))+(((-0.008323596288)*gconst5*px*(sj3*sj3)))+(((4.0)*gconst11*gconst22*(px*px)))+(((2.0)*gconst19*gconst23*gconst3*px))+(((-0.064512)*gconst11*gconst15*gconst19*sj3))+(((2.0)*gconst17*gconst19*gconst9*px))+(((-0.254838)*gconst15*gconst18*px))+((gconst11*gconst14*gconst22*gconst7))+(((4.0)*gconst12*gconst18*(px*px)))+(((-0.129024)*gconst20*gconst22*px*sj3))+(((-0.065760436224)*gconst16*px*sj3))+((gconst0*gconst11*gconst21*gconst22))+(((4.0)*gconst13*gconst17*(px*px)))+(((-0.016647192576)*gconst16*px*(sj3*sj3)))+(((2.0)*gconst11*gconst12*gconst21*px))+(((-0.032880218112)*gconst2*px*sj3))+(((2.0)*gconst18*gconst22*gconst7*px))+(((-1.0)*gconst0*gconst11*gconst19*gconst23))+(((-2.0)*gconst10*gconst12*gconst21*px))+((gconst13*gconst16*gconst17*gconst5))+(((-2.0)*gconst14*gconst23*gconst4*px))+(((-2.0)*gconst0*gconst18*gconst23*px))+(((-1.0)*gconst13*gconst14*gconst18*gconst5))+((gconst10*gconst16*gconst23*gconst5))+(((-2.0)*gconst11*gconst13*gconst14*px))+(((-1.0)*gconst13*gconst14*gconst19*gconst4))+(((2.0)*gconst10*gconst13*gconst16*px))+((gconst13*gconst17*gconst19*gconst2))+(((-0.254838)*gconst20*gconst8*px))+(((-2.0)*gconst11*gconst13*gconst19*px))+((gconst12*gconst14*gconst21*gconst4))+(((-1.0)*gconst12*gconst15*gconst20*gconst4))+(((-1.0)*gconst0*gconst13*gconst18*gconst19))+(((2.0)*gconst17*gconst23*gconst5*px))+(((-0.129024)*gconst1*gconst18*px*sj3))+(((-0.127419)*gconst11*gconst15*gconst19))+(((-0.064942406244)*gconst19*px))+(((-1.0)*gconst11*gconst15*gconst20*gconst8))+(((2.0)*gconst18*gconst21*gconst8*px))+(((-0.064512)*gconst1*gconst11*gconst19*sj3))+((gconst13*gconst16*gconst19*gconst3))+((gconst0*gconst12*gconst18*gconst21))+(((-0.129024)*gconst15*gconst4*px*sj3))+((gconst12*gconst14*gconst18*gconst7))+(((2.0)*gconst14*gconst18*gconst8*px))+(((-1.0)*gconst1*gconst12*gconst18*gconst20))+(((-2.0)*gconst16*gconst17*gconst8*px))+(((2.0)*gconst17*gconst2*gconst23*px))+(((-0.064942406244)*gconst16*px))+(((-0.065760436224)*gconst19*px*sj3))+(((-0.127419)*gconst12*gconst2*gconst20))+(((-2.0)*gconst18*gconst19*gconst9*px))+(((-1.0)*gconst12*gconst16*gconst21*gconst3))+(((2.0)*gconst10*gconst13*gconst19*px))+(((-2.0)*gconst17*gconst22*gconst7*px))+(((-2.0)*gconst16*gconst22*gconst3*px))+(((-0.064512)*gconst12*gconst2*gconst20*sj3))+(((-2.0)*gconst18*gconst23*gconst5*px))+(((-0.008323596288)*gconst2*px*(sj3*sj3)))+(((-0.064512)*gconst11*gconst15*gconst5*sj3))+(((-1.0)*gconst11*gconst15*gconst22*gconst6))+(((-1.0)*gconst12*gconst17*gconst2*gconst21))+(((-2.0)*gconst10*gconst12*gconst16*px))+(((-0.127419)*gconst12*gconst16*gconst20))+(((-1.0)*gconst10*gconst2*gconst21*gconst22))+(((2.0)*gconst11*gconst12*gconst14*px))+(((-0.254838)*gconst20*gconst22*px))+(((-1.0)*gconst11*gconst14*gconst23*gconst5))+(((2.0)*gconst21*gconst22*gconst4*px))+(((-0.129024)*gconst22*gconst6*px*sj3))+(((-1.0)*gconst11*gconst14*gconst19*gconst9))+(((-0.254838)*gconst22*gconst6*px))+(((2.0)*gconst14*gconst22*gconst4*px))+(((-2.0)*gconst21*gconst22*gconst3*px))+(((-0.064512)*gconst12*gconst16*gconst6*sj3))+(((-0.016647192576)*gconst19*px*(sj3*sj3)))+(((-0.127419)*gconst12*gconst16*gconst6))+(((-0.254838)*gconst15*gconst4*px))+(((-0.032471203122)*gconst2*px))+(((-4.0)*gconst10*gconst22*(px*px)))+(((2.0)*gconst16*gconst17*gconst9*px))+(((-1.0)*gconst10*gconst16*gconst22*gconst7))+(((-0.127419)*gconst11*gconst15*gconst5))+(((-2.0)*gconst14*gconst18*gconst9*px))+(((-1.0)*gconst10*gconst16*gconst21*gconst8))+(((-1.0)*gconst1*gconst11*gconst20*gconst22))+((gconst11*gconst14*gconst21*gconst8))+(((2.0)*gconst16*gconst23*gconst3*px))+(((-0.064512)*gconst12*gconst16*gconst20*sj3))+(((-1.0)*gconst12*gconst15*gconst18*gconst6))+(((-0.032471203122)*gconst5*px))+((gconst10*gconst19*gconst2*gconst23))+(((-4.0)*gconst12*gconst17*(px*px)))+(((-4.0)*gconst13*gconst18*(px*px)))+(((-0.032880218112)*gconst5*px*sj3))+(((2.0)*gconst0*gconst18*gconst22*px))+(((-2.0)*gconst17*gconst2*gconst22*px))+((gconst10*gconst16*gconst19*gconst9))+(((-2.0)*gconst19*gconst23*gconst4*px))+(((-0.254838)*gconst1*gconst18*px)));
op[4]=((((-0.016440109056)*gconst2*gconst5*sj3))+(((-1.0)*gconst0*gconst19*gconst23*gconst4))+(((-1.0)*gconst17*gconst2*gconst21*gconst8))+(((4.0)*gconst18*gconst8*(px*px)))+((gconst14*gconst18*gconst7*gconst8))+(((-0.131520872448)*sj3*(px*px)))+((gconst14*gconst21*gconst4*gconst8))+(((-1.0)*gconst15*gconst18*gconst6*gconst8))+(((-0.008323596288)*gconst16*gconst5*(sj3*sj3)))+(((-1.0)*gconst14*gconst19*gconst4*gconst9))+(((-0.064512)*gconst1*gconst18*gconst19*sj3))+(((-0.032471203122)*gconst16*gconst5))+(((-0.004161798144)*gconst2*gconst5*(sj3*sj3)))+((gconst0*gconst18*gconst22*gconst7))+(((2.0)*gconst13*gconst17*gconst5*px))+(((-2.0)*gconst13*gconst19*gconst4*px))+(((-4.0)*gconst11*gconst13*(px*px)))+(((-0.127419)*gconst2*gconst20*gconst8))+(((-1.0)*gconst14*gconst18*gconst5*gconst9))+(((-0.129884812488)*(px*px)))+(((-1.0)*gconst17*gconst2*gconst22*gconst7))+(((2.0)*gconst12*gconst18*gconst7*px))+(((-0.032471203122)*gconst19*gconst2))+(((-0.064512)*gconst15*gconst4*gconst5*sj3))+(((-0.064512)*gconst16*gconst22*gconst6*sj3))+(((-2.0)*gconst12*gconst21*gconst3*px))+(((2.0)*gconst13*gconst19*gconst3*px))+(((-0.129024)*gconst1*gconst11*px*sj3))+(((-0.032880218112)*gconst16*gconst5*sj3))+(((-2.0)*gconst0*gconst11*gconst23*px))+(((-0.033294385152)*(px*px)*(sj3*sj3)))+((gconst0*gconst18*gconst21*gconst8))+(((2.0)*gconst10*gconst16*gconst9*px))+(((2.0)*gconst11*gconst21*gconst8*px))+(((-1.0)*gconst16*gconst22*gconst3*gconst7))+(((4.0)*gconst22*gconst4*(px*px)))+(((-2.0)*gconst12*gconst17*gconst7*px))+(((-0.127419)*gconst2*gconst20*gconst22))+(((-0.064512)*gconst16*gconst20*gconst8*sj3))+(((-0.064512)*gconst1*gconst18*gconst5*sj3))+(((4.0)*gconst10*gconst13*(px*px)))+(((-0.064512)*gconst2*gconst20*gconst22*sj3))+(((2.0)*gconst10*gconst23*gconst5*px))+(((-0.064512)*gconst15*gconst19*gconst4*sj3))+(((-0.064512)*gconst16*gconst6*gconst8*sj3))+(((-2.0)*gconst10*gconst22*gconst7*px))+((gconst17*gconst2*gconst23*gconst5))+(((-0.016440109056)*gconst16*gconst19*sj3))+((gconst19*gconst2*gconst23*gconst3))+(((-0.032880218112)*gconst19*gconst2*sj3))+(((2.0)*gconst0*gconst12*gconst18*px))+(((-4.0)*gconst22*gconst3*(px*px)))+(((2.0)*gconst10*gconst2*gconst23*px))+(((-1.0)*gconst11*gconst12*gconst15*gconst6))+(((-0.064512)*gconst15*gconst18*gconst5*sj3))+((gconst16*gconst17*gconst5*gconst9))+(((-0.129024)*gconst12*gconst6*px*sj3))+(((-4.0)*gconst10*gconst12*(px*px)))+(((-2.0)*gconst0*gconst13*gconst18*px))+(((4.0)*gconst17*gconst9*(px*px)))+(((-2.0)*gconst13*gconst18*gconst5*px))+(((-1.0)*gconst1*gconst11*gconst12*gconst20))+(((-0.127419)*gconst1*gconst18*gconst19))+(((-1.0)*gconst10*gconst12*gconst16*gconst7))+(((-2.0)*gconst12*gconst17*gconst2*px))+(((-0.254838)*gconst12*gconst6*px))+(((-1.0)*gconst1*gconst20*gconst22*gconst4))+(((-1.0)*gconst15*gconst20*gconst4*gconst8))+(((4.0)*gconst23*gconst3*(px*px)))+((gconst10*gconst13*gconst16*gconst5))+(((-2.0)*gconst11*gconst19*gconst9*px))+(((-0.129024)*gconst12*gconst20*px*sj3))+(((2.0)*gconst12*gconst14*gconst4*px))+((gconst16*gconst19*gconst3*gconst9))+(((-0.064512)*gconst2*gconst20*gconst8*sj3))+(((-1.0)*gconst1*gconst18*gconst20*gconst8))+(((2.0)*gconst11*gconst22*gconst7*px))+(((2.0)*gconst10*gconst19*gconst9*px))+(((-0.127419)*gconst1*gconst19*gconst4))+(((-4.0)*gconst17*gconst8*(px*px)))+(((-0.127419)*gconst2*gconst22*gconst6))+((gconst10*gconst13*gconst19*gconst2))+(((-2.0)*gconst10*gconst21*gconst8*px))+(((2.0)*gconst13*gconst17*gconst2*px))+(((2.0)*gconst11*gconst14*gconst8*px))+((gconst0*gconst21*gconst22*gconst4))+(((-1.0)*gconst16*gconst21*gconst3*gconst8))+((gconst0*gconst11*gconst12*gconst21))+(((-4.0)*gconst23*gconst4*(px*px)))+(((-0.254838)*gconst1*gconst11*px))+((gconst17*gconst19*gconst2*gconst9))+(((-0.254838)*gconst11*gconst15*px))+(((-0.127419)*gconst1*gconst18*gconst5))+(((2.0)*gconst0*gconst11*gconst22*px))+(((-0.004161798144)*gconst16*gconst19*(sj3*sj3)))+(((2.0)*gconst12*gconst21*gconst4*px))+(((-0.008323596288)*gconst19*gconst2*(sj3*sj3)))+(((-4.0)*gconst18*gconst9*(px*px)))+(((4.0)*gconst11*gconst12*(px*px)))+(((-1.0)*gconst16*gconst17*gconst7*gconst8))+((gconst16*gconst23*gconst3*gconst5))+(((-0.016235601561)*gconst2*gconst5))+(((-0.127419)*gconst16*gconst6*gconst8))+(((-1.0)*gconst14*gconst23*gconst4*gconst5))+((gconst11*gconst12*gconst14*gconst7))+(((-0.127419)*gconst16*gconst22*gconst6))+(((-0.127419)*gconst15*gconst4*gconst5))+(((-0.127419)*gconst15*gconst19*gconst4))+(((-1.0)*gconst11*gconst13*gconst14*gconst5))+(((-2.0)*gconst11*gconst14*gconst9*px))+(((-1.0)*gconst1*gconst18*gconst22*gconst6))+(((-0.129024)*gconst11*gconst15*px*sj3))+(((-2.0)*gconst10*gconst2*gconst22*px))+(((2.0)*gconst13*gconst16*gconst3*px))+(((-0.064512)*gconst2*gconst22*gconst6*sj3))+(((-1.0)*gconst2*gconst21*gconst22*gconst3))+(((-0.016235601561)*gconst16*gconst19))+(((-1.0)*gconst0*gconst18*gconst23*gconst5))+(((-0.254838)*gconst12*gconst20*px))+(((-1.0)*gconst0*gconst18*gconst19*gconst9))+(((-1.0)*gconst15*gconst22*gconst4*gconst6))+(((-0.127419)*gconst15*gconst18*gconst5))+(((-2.0)*gconst13*gconst14*gconst4*px))+((gconst14*gconst22*gconst4*gconst7))+(((-1.0)*gconst0*gconst11*gconst13*gconst19))+(((-1.0)*gconst10*gconst12*gconst2*gconst21))+(((-2.0)*gconst12*gconst16*gconst3*px))+(((-2.0)*gconst11*gconst23*gconst5*px))+(((-2.0)*gconst10*gconst16*gconst8*px))+(((-0.127419)*gconst16*gconst20*gconst8))+(((-0.064512)*gconst1*gconst19*gconst4*sj3)));
op[5]=((((-0.129024)*gconst20*gconst8*px*sj3))+(((2.0)*gconst22*gconst4*gconst7*px))+(((-0.032880218112)*gconst16*px*sj3))+(((-0.032471203122)*gconst19*px))+(((-0.127419)*gconst1*gconst11*gconst19))+(((2.0)*gconst10*gconst13*gconst5*px))+(((-1.0)*gconst1*gconst11*gconst20*gconst8))+(((-0.065760436224)*gconst2*px*sj3))+(((4.0)*gconst11*gconst8*(px*px)))+(((-0.127419)*gconst12*gconst2*gconst6))+(((-1.0)*gconst1*gconst12*gconst20*gconst4))+(((-1.0)*gconst12*gconst15*gconst4*gconst6))+((gconst13*gconst17*gconst2*gconst5))+((gconst13*gconst19*gconst2*gconst3))+(((-2.0)*gconst17*gconst7*gconst8*px))+(((-0.064942406244)*gconst2*px))+(((-2.0)*gconst18*gconst5*gconst9*px))+(((-2.0)*gconst23*gconst4*gconst5*px))+(((-2.0)*gconst22*gconst3*gconst7*px))+(((-1.0)*gconst13*gconst14*gconst4*gconst5))+(((-4.0)*gconst10*gconst8*(px*px)))+(((-2.0)*gconst17*gconst2*gconst8*px))+(((-0.008323596288)*gconst19*px*(sj3*sj3)))+(((-1.0)*gconst11*gconst14*gconst5*gconst9))+(((-1.0)*gconst10*gconst2*gconst21*gconst8))+(((2.0)*gconst18*gconst7*gconst8*px))+(((2.0)*gconst10*gconst13*gconst2*px))+(((-1.0)*gconst12*gconst17*gconst2*gconst7))+(((2.0)*gconst19*gconst3*gconst9*px))+(((-2.0)*gconst0*gconst11*gconst13*px))+(((-0.065760436224)*gconst5*px*sj3))+(((2.0)*gconst16*gconst3*gconst9*px))+(((-2.0)*gconst0*gconst23*gconst4*px))+(((-0.064512)*gconst1*gconst11*gconst5*sj3))+(((-0.254838)*gconst20*gconst8*px))+(((4.0)*gconst12*gconst4*(px*px)))+(((2.0)*gconst17*gconst5*gconst9*px))+(((-2.0)*gconst19*gconst4*gconst9*px))+(((-1.0)*gconst12*gconst2*gconst21*gconst3))+(((2.0)*gconst17*gconst2*gconst9*px))+((gconst0*gconst12*gconst21*gconst4))+(((-0.064512)*gconst12*gconst2*gconst6*sj3))+(((-0.129024)*gconst1*gconst4*px*sj3))+(((2.0)*gconst23*gconst3*gconst5*px))+((gconst10*gconst16*gconst5*gconst9))+(((-0.129024)*gconst1*gconst18*px*sj3))+(((2.0)*gconst0*gconst11*gconst12*px))+(((4.0)*gconst13*gconst3*(px*px)))+(((2.0)*gconst2*gconst23*gconst3*px))+(((-0.064512)*gconst1*gconst11*gconst19*sj3))+((gconst10*gconst2*gconst23*gconst5))+(((-0.129024)*gconst15*gconst4*px*sj3))+((gconst0*gconst12*gconst18*gconst7))+(((-4.0)*gconst13*gconst4*(px*px)))+(((-2.0)*gconst0*gconst18*gconst9*px))+(((-0.254838)*gconst1*gconst4*px))+(((-1.0)*gconst10*gconst16*gconst7*gconst8))+(((-4.0)*gconst12*gconst3*(px*px)))+(((-0.127419)*gconst12*gconst2*gconst20))+((gconst11*gconst14*gconst7*gconst8))+(((-0.254838)*gconst6*gconst8*px))+(((4.0)*gconst10*gconst9*(px*px)))+(((2.0)*gconst14*gconst4*gconst8*px))+(((-0.064512)*gconst12*gconst2*gconst20*sj3))+(((-2.0)*gconst2*gconst22*gconst3*px))+(((-4.0)*gconst11*gconst9*(px*px)))+((gconst0*gconst11*gconst22*gconst7))+(((-0.064512)*gconst11*gconst15*gconst5*sj3))+(((-2.0)*gconst11*gconst13*gconst5*px))+(((2.0)*gconst11*gconst12*gconst7*px))+(((2.0)*gconst0*gconst18*gconst8*px))+(((-2.0)*gconst21*gconst3*gconst8*px))+(((-1.0)*gconst0*gconst11*gconst19*gconst9))+((gconst0*gconst11*gconst21*gconst8))+(((2.0)*gconst21*gconst4*gconst8*px))+(((-2.0)*gconst10*gconst12*gconst7*px))+(((-0.129024)*gconst22*gconst6*px*sj3))+(((-0.254838)*gconst22*gconst6*px))+(((-1.0)*gconst0*gconst13*gconst18*gconst5))+(((-0.016647192576)*gconst5*px*(sj3*sj3)))+((gconst13*gconst16*gconst3*gconst5))+(((-0.064512)*gconst12*gconst16*gconst6*sj3))+(((-0.127419)*gconst12*gconst16*gconst6))+(((-0.254838)*gconst15*gconst4*px))+(((-1.0)*gconst12*gconst16*gconst3*gconst7))+(((-1.0)*gconst11*gconst15*gconst6*gconst8))+(((2.0)*gconst0*gconst22*gconst4*px))+(((-1.0)*gconst1*gconst12*gconst18*gconst6))+(((-0.127419)*gconst11*gconst15*gconst5))+(((-1.0)*gconst0*gconst11*gconst23*gconst5))+(((-0.064942406244)*gconst5*px))+(((-2.0)*gconst10*gconst12*gconst2*px))+(((-1.0)*gconst0*gconst13*gconst19*gconst4))+((gconst12*gconst14*gconst4*gconst7))+(((-2.0)*gconst16*gconst3*gconst8*px))+(((-2.0)*gconst14*gconst4*gconst9*px))+(((-0.032471203122)*gconst16*px))+(((-0.008323596288)*gconst16*px*(sj3*sj3)))+(((-1.0)*gconst10*gconst2*gconst22*gconst7))+(((-0.032880218112)*gconst19*px*sj3))+(((-1.0)*gconst1*gconst11*gconst22*gconst6))+(((-0.129024)*gconst6*gconst8*px*sj3))+((gconst10*gconst19*gconst2*gconst9))+(((-0.127419)*gconst1*gconst11*gconst5))+(((-0.016647192576)*gconst2*px*(sj3*sj3)))+(((-0.254838)*gconst1*gconst18*px)));
op[6]=((((-2.0)*gconst10*gconst7*gconst8*px))+(((-1.0)*gconst15*gconst4*gconst6*gconst8))+(((2.0)*gconst12*gconst4*gconst7*px))+(((-0.127419)*gconst2*gconst20*gconst8))+(((-4.0)*gconst3*gconst8*(px*px)))+((gconst2*gconst23*gconst3*gconst5))+(((-0.064512)*gconst15*gconst4*gconst5*sj3))+(((-0.016235601561)*gconst19*gconst2))+(((2.0)*gconst0*gconst12*gconst4*px))+(((-1.0)*gconst2*gconst21*gconst3*gconst8))+(((-0.129024)*gconst1*gconst11*px*sj3))+(((-1.0)*gconst16*gconst3*gconst7*gconst8))+(((-0.008323596288)*gconst2*gconst5*(sj3*sj3)))+(((2.0)*gconst0*gconst11*gconst8*px))+(((-0.127419)*gconst1*gconst4*gconst5))+(((-0.004161798144)*gconst16*gconst5*(sj3*sj3)))+(((-0.064512)*gconst1*gconst18*gconst5*sj3))+((gconst0*gconst11*gconst12*gconst7))+(((-1.0)*gconst1*gconst22*gconst4*gconst6))+(((-0.064512)*gconst2*gconst6*gconst8*sj3))+(((-0.064512)*gconst16*gconst6*gconst8*sj3))+(((2.0)*gconst11*gconst7*gconst8*px))+(((-1.0)*gconst1*gconst18*gconst6*gconst8))+(((-2.0)*gconst12*gconst3*gconst7*px))+(((-2.0)*gconst12*gconst2*gconst3*px))+((gconst14*gconst4*gconst7*gconst8))+(((-0.016440109056)*gconst16*gconst5*sj3))+(((-2.0)*gconst10*gconst2*gconst8*px))+(((-0.129024)*gconst12*gconst6*px*sj3))+(((-1.0)*gconst0*gconst19*gconst4*gconst9))+(((-2.0)*gconst11*gconst5*gconst9*px))+(((-1.0)*gconst17*gconst2*gconst7*gconst8))+(((-1.0)*gconst1*gconst20*gconst4*gconst8))+(((2.0)*gconst13*gconst3*gconst5*px))+(((-0.016647192576)*(px*px)*(sj3*sj3)))+(((-0.254838)*gconst12*gconst6*px))+(((-1.0)*gconst14*gconst4*gconst5*gconst9))+(((-1.0)*gconst0*gconst18*gconst5*gconst9))+(((2.0)*gconst10*gconst5*gconst9*px))+(((-0.032471203122)*gconst2*gconst5))+(((-0.004161798144)*gconst19*gconst2*(sj3*sj3)))+(((-0.065760436224)*sj3*(px*px)))+(((-0.064512)*gconst2*gconst20*gconst8*sj3))+(((-0.064942406244)*(px*px)))+(((-0.127419)*gconst1*gconst19*gconst4))+(((-0.127419)*gconst2*gconst22*gconst6))+(((-1.0)*gconst10*gconst12*gconst2*gconst7))+(((4.0)*gconst4*gconst8*(px*px)))+(((-0.254838)*gconst1*gconst11*px))+(((-0.127419)*gconst2*gconst6*gconst8))+(((-1.0)*gconst1*gconst11*gconst12*gconst6))+(((-0.127419)*gconst1*gconst18*gconst5))+(((4.0)*gconst3*gconst9*(px*px)))+((gconst16*gconst3*gconst5*gconst9))+(((2.0)*gconst13*gconst2*gconst3*px))+(((-2.0)*gconst0*gconst13*gconst4*px))+(((-0.064512)*gconst1*gconst4*gconst5*sj3))+((gconst10*gconst13*gconst2*gconst5))+(((-0.127419)*gconst16*gconst6*gconst8))+(((-0.127419)*gconst15*gconst4*gconst5))+(((-2.0)*gconst13*gconst4*gconst5*px))+((gconst0*gconst22*gconst4*gconst7))+((gconst0*gconst21*gconst4*gconst8))+(((-1.0)*gconst2*gconst22*gconst3*gconst7))+(((-0.032880218112)*gconst2*gconst5*sj3))+(((-0.064512)*gconst2*gconst22*gconst6*sj3))+((gconst19*gconst2*gconst3*gconst9))+(((-2.0)*gconst0*gconst11*gconst9*px))+(((-0.016440109056)*gconst19*gconst2*sj3))+((gconst17*gconst2*gconst5*gconst9))+(((2.0)*gconst10*gconst2*gconst9*px))+(((-4.0)*gconst4*gconst9*(px*px)))+(((-1.0)*gconst0*gconst11*gconst13*gconst5))+(((-0.016235601561)*gconst16*gconst5))+(((-0.064512)*gconst1*gconst19*gconst4*sj3))+((gconst0*gconst18*gconst7*gconst8))+(((-1.0)*gconst0*gconst23*gconst4*gconst5)));
op[7]=(((gconst2*gconst3*x145))+(((-1.0)*gconst2*x124*x143))+(((-1.0)*x131*x157))+(((-1.0)*gconst1*x134*x139))+(((-0.127419)*x155))+((x123*x156))+(((-1.0)*x120*x137))+(((-1.0)*gconst0*x139*x149))+(((-1.0)*x123*x157))+((gconst12*gconst7*x154))+((x128*x159))+(((-1.0)*x134*x137))+(((-1.0)*gconst9*x128*x154))+((gconst0*gconst11*x148))+(((-1.0)*x124*x155))+(((-0.032880218112)*gconst2*x121))+(((-2.0)*x123*x142))+(((-1.0)*gconst10*gconst2*gconst7*x146))+((gconst4*x128*x148))+(((-1.0)*gconst6*x119*x120))+(((-0.032880218112)*gconst5*x121))+(((-1.0)*x145*x160))+(((-0.032471203122)*x123))+(((-0.032471203122)*x131))+(((-1.0)*gconst4*x128*x149))+(((-1.0)*x119*x158))+(((-1.0)*gconst7*x128*x142))+(((-0.129024)*x121*x134))+(((-0.129024)*x120*x121))+((gconst10*gconst9*x147))+((gconst3*x128*x149))+(((-1.0)*x135*x143)));
op[8]=((((-1.0)*gconst2*x124*x134))+(((-1.0)*x134*x135))+(((-0.127419)*gconst5*x120))+(((-1.0)*gconst5*x120*x124))+(((-1.0)*x147*x152))+(((-1.0)*x147*x161))+(((-1.0)*x120*x134))+((x148*x154))+((gconst3*gconst9*x147))+(((-1.0)*gconst2*gconst7*x142))+(((-1.0)*x149*x160))+(((-0.016235601561)*x147)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j4eval[2];
IkReal x163=(cj2*sj3);
IkReal x164=(cj3*sj2);
j4eval[0]=((((-1.54166666666667)*cj2))+(((-1.0)*x163))+(((3.585)*x164)));
j4eval[1]=IKsign(((((-0.01356229265)*cj2))+(((0.031537828638)*x164))+(((-0.0087971628)*x163))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x165=py*py;
IkReal x166=cj0*cj0;
IkReal x167=px*px;
IkReal x168=pz*pz;
IkReal x169=(cj0*px);
IkReal x170=((0.0148)*cj2);
IkReal x171=(cj3*sj2);
IkReal x172=((77.0833333333333)*cj2);
IkReal x173=(cj2*sj3);
IkReal x174=(py*sj0);
IkReal x175=((625.0)*x165);
IkReal x176=(cj2*x165);
IkReal x177=((0.185)*x166);
IkReal x178=((0.12)*x165);
IkReal x179=((2240.625)*x166);
IkReal x180=(cj2*x168);
IkReal x181=((0.4302)*x165);
IkReal x182=((963.541666666667)*cj2*x166);
IkReal x183=(x166*x167);
j1eval[0]=((((-50.0)*x173*x174))+(((-963.541666666667)*x166*x176))+(((625.0)*x168*x173))+((x173*x175))+(((1927.08333333333)*cj2*x169*x174))+(((-2240.625)*x165*x171))+x173+((x167*x182))+(((-1.0)*x167*x171*x179))+(((-1.0)*x166*x173*x175))+((x165*x171*x179))+(((-50.0)*x169*x173))+(((-2240.625)*x168*x171))+(((-4481.25)*x169*x171*x174))+(((1.54166666666667)*cj2))+(((1250.0)*x169*x173*x174))+(((625.0)*x173*x183))+(((-3.585)*x171))+(((-1.0)*x169*x172))+(((179.25)*x171*x174))+(((963.541666666667)*x180))+(((179.25)*x169*x171))+(((-1.0)*x172*x174))+(((963.541666666667)*x176)));
j1eval[1]=IKsign(((((0.034416)*x171*x174))+(((0.185)*x176))+(((-0.8604)*x169*x171*x174))+(((0.12)*x173*x183))+(((0.000296)*cj2))+(((0.034416)*x169*x171))+(((0.24)*x169*x173*x174))+(((-0.0096)*x173*x174))+((x173*x178))+(((0.37)*cj2*x169*x174))+((x166*x171*x181))+(((-0.0096)*x169*x173))+(((-1.0)*x171*x181))+(((-0.00068832)*x171))+(((-1.0)*x170*x174))+(((0.000192)*x173))+(((-1.0)*x166*x173*x178))+(((-1.0)*x176*x177))+(((-0.4302)*x168*x171))+(((-0.4302)*x171*x183))+((cj2*x167*x177))+(((-1.0)*x169*x170))+(((0.185)*x180))+(((0.12)*x168*x173))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((0.833449990700312)+(((2.08847251616078)*cj0*py))+(((0.560287730693703)*py*sj0))+(((0.560287730693703)*cj0*px))+(((-7.00359663367128)*pp))+(((-2.08847251616078)*px*sj0)))) < -1-IKFAST_SINCOS_THRESH || (((0.833449990700312)+(((2.08847251616078)*cj0*py))+(((0.560287730693703)*py*sj0))+(((0.560287730693703)*cj0*px))+(((-7.00359663367128)*pp))+(((-2.08847251616078)*px*sj0)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x184=IKasin(((0.833449990700312)+(((2.08847251616078)*cj0*py))+(((0.560287730693703)*py*sj0))+(((0.560287730693703)*cj0*px))+(((-7.00359663367128)*pp))+(((-2.08847251616078)*px*sj0))));
j4array[0]=((-2.30784248348928)+(((-1.0)*x184)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((0.83375017010051)+x184);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j1eval[2];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x185=(py*sj0);
IkReal x186=((0.0325)*sj4);
IkReal x187=(pz*sj4);
IkReal x188=((0.2688)*cj4);
IkReal x189=(cj4*pz);
IkReal x190=(cj0*px);
IkReal x191=((25.0)*sj4);
IkReal x192=((206.769230769231)*cj4);
j1eval[0]=((6.61846153846154)+(((-1.0)*sj4))+(((-1.0)*x190*x192))+(((-25.0)*x189))+(((-165.461538461538)*x185))+((x185*x191))+(((-206.769230769231)*x187))+(((-165.461538461538)*x190))+(((-1.0)*x185*x192))+(((8.27076923076923)*cj4))+((x190*x191))+(((117.307692307692)*pz)));
j1eval[1]=IKsign(((0.008604)+(((-0.0013)*sj4))+(((-1.0)*x188*x190))+(((0.1525)*pz))+((x186*x190))+((x185*x186))+(((-0.2688)*x187))+(((-0.0325)*x189))+(((-0.2151)*x185))+(((-1.0)*x185*x188))+(((-0.2151)*x190))+(((0.010752)*cj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x193=(cj0*px);
IkReal x194=((25.0)*cj4);
IkReal x195=(cj4*pz);
IkReal x196=((0.2688)*sj4);
IkReal x197=(py*sj0);
IkReal x198=(pz*sj4);
IkReal x199=((206.769230769231)*sj4);
IkReal x200=((0.0325)*cj4);
j1eval[0]=((4.69230769230769)+((x193*x194))+((x193*x199))+(((25.0)*x198))+(((-206.769230769231)*x195))+(((-117.307692307692)*x197))+(((-117.307692307692)*x193))+(((-165.461538461538)*pz))+((x194*x197))+(((-8.27076923076923)*sj4))+((x197*x199))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.0061)+(((-0.1525)*x197))+(((-0.1525)*x193))+((x193*x196))+(((-0.0013)*cj4))+((x196*x197))+(((-0.2688)*x195))+((x197*x200))+(((0.0325)*x198))+(((-0.2151)*pz))+(((-0.010752)*sj4))+((x193*x200))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1eval[0]=((-1.48838853546327)+sj4+(((-1.10170071536125)*cj4)));
j1eval[1]=IKsign(((-0.14283395)+(((0.0959655)*sj4))+(((-0.10572526)*cj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x201=(cj0*px);
IkReal x202=(py*sj0);
IkReal x203=((0.0325)*sj4);
IkReal x204=((0.2688)*cj4);
IkReal x205=((0.2688)*sj4);
IkReal x206=((0.0325)*cj4);
CheckValue<IkReal> x207=IKPowWithIntegerCheck(IKsign(((-0.14283395)+(((0.0959655)*sj4))+(((-0.10572526)*cj4)))),-1);
if(!x207.valid){
continue;
}
CheckValue<IkReal> x208 = IKatan2WithCheck(IkReal(((0.008604)+(((-0.0013)*sj4))+(((-1.0)*x201*x204))+((x201*x203))+(((-1.0)*x202*x204))+((pz*x205))+((pz*x206))+((x202*x203))+(((-0.1525)*pz))+(((-0.2151)*x202))+(((-0.2151)*x201))+(((0.010752)*cj4)))),IkReal(((-0.0061)+(((0.1525)*x202))+(((0.1525)*x201))+(((-1.0)*x201*x206))+(((-1.0)*x201*x205))+(((-1.0)*pz*x204))+(((-1.0)*x202*x206))+(((-1.0)*x202*x205))+(((0.010752)*sj4))+((pz*x203))+(((-0.2151)*pz))+(((0.0013)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x208.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x207.value)))+(x208.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x209=IKcos(j1);
IkReal x210=IKsin(j1);
IkReal x211=(py*sj0);
IkReal x212=(cj0*px);
IkReal x213=((0.2688)*cj4);
IkReal x214=((0.0325)*cj4);
IkReal x215=((0.0325)*sj4);
IkReal x216=((0.2688)*sj4);
IkReal x217=((0.305)*x209);
IkReal x218=((1.0)*x210);
IkReal x219=(sj4*x210);
IkReal x220=(pz*x209);
IkReal x221=((0.4302)*x210);
evalcond[0]=((0.1525)+(((-1.0)*pz*x218))+((x209*x211))+((x209*x212))+(((-1.0)*x216))+(((-1.0)*x214))+(((-0.04)*x209)));
evalcond[1]=((0.2151)+(((0.04)*x210))+x213+(((-1.0)*x211*x218))+(((-1.0)*x212*x218))+(((-1.0)*x215))+(((-1.0)*x220)));
evalcond[2]=((((-0.1525)*x210))+((x210*x216))+((x210*x214))+((x209*x215))+pz+(((-0.2151)*x209))+(((-1.0)*x209*x213)));
evalcond[3]=((0.04)+(((0.2151)*x210))+((x210*x213))+(((-0.1525)*x209))+((x209*x214))+((x209*x216))+(((-1.0)*x210*x215))+(((-1.0)*x211))+(((-1.0)*x212)));
evalcond[4]=((-0.02004538)+(((-0.2982)*px*sj0))+(((0.305)*pz*x210))+(((-0.017208)*x210))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.08)*x212))+(((0.08)*x211))+(((-1.0)*x211*x217))+(((-1.0)*x212*x217))+(((0.0122)*x209))+(((0.4302)*x220))+((x212*x221))+((x211*x221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x990=cj4*cj4;
IkReal x991=(cj0*px);
IkReal x992=((0.2688)*sj4);
IkReal x993=(cj4*sj4);
IkReal x994=(py*sj0);
IkReal x995=((0.0325)*cj4);
IkReal x996=((1.0)*pz);
CheckValue<IkReal> x997 = IKatan2WithCheck(IkReal(((-0.04153875)+(((0.04)*pz))+(((-0.03400125)*cj4))+(((-1.0)*x994*x996))+(((-1.0)*x991*x996))+(((0.06277513)*sj4))+(((0.017472)*x990))+(((0.07119719)*x993)))),IkReal(((0.09550969)+(((-0.081984)*sj4))+(((-0.07119719)*x990))+(((-0.0099125)*cj4))+(((-1.0)*pz*x996))+(((0.017472)*x993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x997.valid){
continue;
}
CheckValue<IkReal> x998=IKPowWithIntegerCheck(IKsign(((0.0061)+((x994*x995))+((x991*x992))+((x991*x995))+(((-0.2688)*cj4*pz))+((x992*x994))+(((-0.0013)*cj4))+(((-0.2151)*pz))+(((-0.010752)*sj4))+(((0.0325)*pz*sj4))+(((-0.1525)*x991))+(((-0.1525)*x994)))),-1);
if(!x998.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x997.value)+(((1.5707963267949)*(x998.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x999=IKcos(j1);
IkReal x1000=IKsin(j1);
IkReal x1001=(py*sj0);
IkReal x1002=(cj0*px);
IkReal x1003=((0.2688)*cj4);
IkReal x1004=((0.0325)*cj4);
IkReal x1005=((0.0325)*sj4);
IkReal x1006=((0.2688)*sj4);
IkReal x1007=((0.305)*x999);
IkReal x1008=((1.0)*x1000);
IkReal x1009=(sj4*x1000);
IkReal x1010=(pz*x999);
IkReal x1011=((0.4302)*x1000);
evalcond[0]=((0.1525)+(((-0.04)*x999))+(((-1.0)*pz*x1008))+(((-1.0)*x1004))+(((-1.0)*x1006))+((x1001*x999))+((x1002*x999)));
evalcond[1]=((0.2151)+x1003+(((-1.0)*x1005))+(((-1.0)*x1002*x1008))+(((-1.0)*x1001*x1008))+(((0.04)*x1000))+(((-1.0)*x1010)));
evalcond[2]=((((-0.1525)*x1000))+(((-1.0)*x1003*x999))+((x1000*x1006))+((x1000*x1004))+(((-0.2151)*x999))+pz+((x1005*x999)));
evalcond[3]=((0.04)+(((-1.0)*x1002))+(((-1.0)*x1001))+(((0.2151)*x1000))+((x1000*x1003))+((x1004*x999))+(((-1.0)*x1000*x1005))+((x1006*x999))+(((-0.1525)*x999)));
evalcond[4]=((-0.02004538)+(((0.0122)*x999))+(((-0.2982)*px*sj0))+(((0.4302)*x1010))+(((0.08)*x1001))+(((0.08)*x1002))+(((0.305)*pz*x1000))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x1001*x1011))+(((-1.0)*x1002*x1007))+(((-1.0)*x1001*x1007))+((x1002*x1011))+(((-0.017208)*x1000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1012=cj4*cj4;
IkReal x1013=(py*sj0);
IkReal x1014=((0.0325)*sj4);
IkReal x1015=((0.2688)*cj4);
IkReal x1016=(cj0*px);
IkReal x1017=(cj4*sj4);
IkReal x1018=((1.0)*pz);
CheckValue<IkReal> x1019 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((-0.07119719)*x1012))+(((0.0139815)*sj4))+(pz*pz)+(((0.017472)*x1017)))),IkReal(((0.04153875)+(((0.04)*pz))+(((-0.06277513)*sj4))+(((-0.07119719)*x1017))+(((-0.017472)*x1012))+(((0.03400125)*cj4))+(((-1.0)*x1016*x1018))+(((-1.0)*x1013*x1018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1019.valid){
continue;
}
CheckValue<IkReal> x1020=IKPowWithIntegerCheck(IKsign(((0.008604)+((x1014*x1016))+(((-0.0013)*sj4))+(((0.1525)*pz))+(((-0.0325)*cj4*pz))+(((-0.2688)*pz*sj4))+(((-1.0)*x1015*x1016))+(((-0.2151)*x1013))+(((-0.2151)*x1016))+((x1013*x1014))+(((-1.0)*x1013*x1015))+(((0.010752)*cj4)))),-1);
if(!x1020.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1019.value)+(((1.5707963267949)*(x1020.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1021=IKcos(j1);
IkReal x1022=IKsin(j1);
IkReal x1023=(py*sj0);
IkReal x1024=(cj0*px);
IkReal x1025=((0.2688)*cj4);
IkReal x1026=((0.0325)*cj4);
IkReal x1027=((0.0325)*sj4);
IkReal x1028=((0.2688)*sj4);
IkReal x1029=((0.305)*x1021);
IkReal x1030=((1.0)*x1022);
IkReal x1031=(sj4*x1022);
IkReal x1032=(pz*x1021);
IkReal x1033=((0.4302)*x1022);
evalcond[0]=((0.1525)+(((-1.0)*pz*x1030))+(((-0.04)*x1021))+(((-1.0)*x1026))+(((-1.0)*x1028))+((x1021*x1024))+((x1021*x1023)));
evalcond[1]=((0.2151)+(((-1.0)*x1024*x1030))+x1025+(((-1.0)*x1032))+(((-1.0)*x1023*x1030))+(((-1.0)*x1027))+(((0.04)*x1022)));
evalcond[2]=((((-0.1525)*x1022))+(((-0.2151)*x1021))+(((-1.0)*x1021*x1025))+((x1022*x1028))+((x1022*x1026))+((x1021*x1027))+pz);
evalcond[3]=((0.04)+(((-0.1525)*x1021))+(((-1.0)*x1023))+(((-1.0)*x1024))+(((-1.0)*x1022*x1027))+((x1022*x1025))+((x1021*x1026))+((x1021*x1028))+(((0.2151)*x1022)));
evalcond[4]=((-0.02004538)+(((-0.2982)*px*sj0))+(((0.0122)*x1021))+(((0.4302)*x1032))+(((-1.0)*x1023*x1029))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.305)*pz*x1022))+(((0.08)*x1024))+(((0.08)*x1023))+(((-0.017208)*x1022))+((x1023*x1033))+((x1024*x1033))+(((-1.0)*x1024*x1029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((0.82174456754206)+(((-2.53136654493896)*px*sj0))+(((2.53136654493896)*cj0*py))+(((0.679105712927957)*cj0*px))+(((-8.48882141159946)*pp))+(((0.679105712927957)*py*sj0)))) < -1-IKFAST_SINCOS_THRESH || (((0.82174456754206)+(((-2.53136654493896)*px*sj0))+(((2.53136654493896)*cj0*py))+(((0.679105712927957)*cj0*px))+(((-8.48882141159946)*pp))+(((0.679105712927957)*py*sj0)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1034=IKasin(((0.82174456754206)+(((-2.53136654493896)*px*sj0))+(((2.53136654493896)*cj0*py))+(((0.679105712927957)*cj0*px))+(((-8.48882141159946)*pp))+(((0.679105712927957)*py*sj0))));
j4array[0]=((-1.8410782591361)+(((-1.0)*x1034)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((1.30051439445369)+x1034);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j1eval[3];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1035=cj4*cj4;
IkReal x1036=(cj0*px);
IkReal x1037=((25.0)*cj4);
IkReal x1038=((0.017472)*sj4);
IkReal x1039=(cj4*pz);
IkReal x1040=(pz*sj4);
IkReal x1041=(py*sj0);
IkReal x1042=((206.769230769231)*sj4);
IkReal x1043=((0.0325)*cj4);
IkReal x1044=((0.2688)*sj4);
j1eval[0]=((1.0)+((x1036*x1037))+(((-25.0)*x1036))+((x1037*x1041))+(((165.461538461538)*pz))+((x1041*x1042))+(((-25.0)*x1040))+(((-25.0)*x1041))+((x1036*x1042))+(((-8.27076923076923)*sj4))+(((206.769230769231)*x1039))+(((-1.0)*cj4)));
j1eval[1]=((IKabs(((-0.07330969)+(((-1.0)*cj4*x1038))+x1038+(pz*pz)+(((0.0021125)*cj4))+(((0.07119719)*x1035)))))+(IKabs(((-0.01572675)+(((0.017472)*x1035))+(((0.07119719)*cj4*sj4))+(((-0.04)*pz))+((pz*x1041))+(((-0.00174525)*cj4))+((pz*x1036))+(((0.05887513)*sj4))))));
j1eval[2]=IKsign(((0.0013)+(((-0.0013)*cj4))+((x1041*x1043))+((x1041*x1044))+(((0.2688)*x1039))+(((-0.0325)*x1041))+(((-0.0325)*x1040))+((x1036*x1043))+((x1036*x1044))+(((-0.0325)*x1036))+(((-0.010752)*sj4))+(((0.2151)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1045=(py*sj0);
IkReal x1046=((0.0325)*sj4);
IkReal x1047=(pz*sj4);
IkReal x1048=((0.2688)*cj4);
IkReal x1049=((25.0)*pz);
IkReal x1050=(cj0*px);
IkReal x1051=((0.0325)*pz);
IkReal x1052=((25.0)*sj4);
IkReal x1053=((206.769230769231)*cj4);
j1eval[0]=((6.61846153846154)+(((-1.0)*sj4))+(((-1.0)*x1045*x1053))+(((-165.461538461538)*x1045))+(((-165.461538461538)*x1050))+((x1050*x1052))+(((206.769230769231)*x1047))+(((8.27076923076923)*cj4))+((cj4*x1049))+(((-1.0)*x1050*x1053))+((x1045*x1052))+(((-1.0)*x1049)));
j1eval[1]=IKsign(((0.008604)+(((-1.0)*x1051))+(((-0.0013)*sj4))+(((-1.0)*x1045*x1048))+(((0.2688)*x1047))+(((-0.2151)*x1045))+(((-1.0)*x1048*x1050))+(((-0.2151)*x1050))+((x1046*x1050))+((x1045*x1046))+((cj4*x1051))+(((0.010752)*cj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1eval[0]=((-3.83531085570763)+sj4+(((-3.60930452890775)*cj4)));
j1eval[1]=IKsign(((-0.12063395)+(((-0.11352526)*cj4))+(((0.0314535)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1054=((-1.0)*py);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1054);
rxp0_1=(px*r20);
rxp1_0=(r21*x1054);
rxp1_1=(px*r21);
rxp2_0=(r22*x1054);
rxp2_1=(px*r22);
j1eval[0]=((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1055=((-1.0)*py);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1055);
rxp0_1=(px*r20);
rxp1_0=(r21*x1055);
rxp1_1=(px*r21);
rxp2_0=(r22*x1055);
rxp2_1=(px*r22);
IkReal x1056=cj0*cj0;
IkReal x1057=py*py;
IkReal x1058=(py*sj0);
IkReal x1059=(cj0*px);
IkReal x1060=((625.0)*x1057);
j1eval[0]=((1.0)+(((-25.0)*x1059))+(((-25.0)*x1058)));
j1eval[1]=((-1.0)+((x1056*x1060))+(((50.0)*x1059))+(((50.0)*x1058))+(((-625.0)*x1056*(px*px)))+(((-1.0)*x1060))+(((-1250.0)*x1058*x1059)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1061=px*px;
IkReal x1062=cj0*cj0;
IkReal x1063=py*py;
IkReal x1064=(py*sj0);
IkReal x1065=(cj0*px);
IkReal x1066=(px*py);
IkReal x1067=((2982.0)*cj0*sj0);
IkReal x1068=(x1061*x1062);
IkReal x1069=(x1062*x1063);
CheckValue<IkReal> x1070=IKPowWithIntegerCheck(((400.0)+(((-10000.0)*x1064))+(((-10000.0)*x1065))),-1);
if(!x1070.valid){
continue;
}
CheckValue<IkReal> x1071=IKPowWithIntegerCheck(((-1.04)+(((-1300.0)*x1064*x1065))+(((650.0)*x1069))+(((-650.0)*x1068))+(((-650.0)*x1063))+(((52.0)*x1065))+(((52.0)*x1064))),-1);
if(!x1071.valid){
continue;
}
if( IKabs(((-4839.0)*(x1070.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1071.value)*(((-84.13136)+(((400.0)*x1061))+(((1600.0)*x1064*x1065))+(((5964.0)*x1062*x1066))+(((119.28)*px*sj0))+(((-10000.0)*x1063*x1065))+(((-119.28)*cj0*py))+(((2071.284)*x1064))+(((2071.284)*x1065))+(((-1.0)*x1061*x1067))+(((1200.0)*x1063))+(((-10000.0)*x1065*(px*px)))+(((-800.0)*x1069))+((x1063*x1067))+(((-2982.0)*x1066))+(((800.0)*x1068))+(((-10000.0)*x1064*(py*py)))+(((-10000.0)*x1061*x1064)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4839.0)*(x1070.value)))+IKsqr(((x1071.value)*(((-84.13136)+(((400.0)*x1061))+(((1600.0)*x1064*x1065))+(((5964.0)*x1062*x1066))+(((119.28)*px*sj0))+(((-10000.0)*x1063*x1065))+(((-119.28)*cj0*py))+(((2071.284)*x1064))+(((2071.284)*x1065))+(((-1.0)*x1061*x1067))+(((1200.0)*x1063))+(((-10000.0)*x1065*(px*px)))+(((-800.0)*x1069))+((x1063*x1067))+(((-2982.0)*x1066))+(((800.0)*x1068))+(((-10000.0)*x1064*(py*py)))+(((-10000.0)*x1061*x1064))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4839.0)*(x1070.value)), ((x1071.value)*(((-84.13136)+(((400.0)*x1061))+(((1600.0)*x1064*x1065))+(((5964.0)*x1062*x1066))+(((119.28)*px*sj0))+(((-10000.0)*x1063*x1065))+(((-119.28)*cj0*py))+(((2071.284)*x1064))+(((2071.284)*x1065))+(((-1.0)*x1061*x1067))+(((1200.0)*x1063))+(((-10000.0)*x1065*(px*px)))+(((-800.0)*x1069))+((x1063*x1067))+(((-2982.0)*x1066))+(((800.0)*x1068))+(((-10000.0)*x1064*(py*py)))+(((-10000.0)*x1061*x1064))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1072=IKcos(j1);
IkReal x1073=IKsin(j1);
IkReal x1074=(cj0*px);
IkReal x1075=(py*sj0);
IkReal x1076=((1.0)*x1073);
IkReal x1077=((0.4302)*x1073);
IkReal x1078=((1.0)*x1072);
IkReal x1079=((0.065)*x1072);
evalcond[0]=((-0.4839)*x1072);
evalcond[1]=((0.04)+(((0.4839)*x1073))+(((-1.0)*x1075))+(((-1.0)*x1074)));
evalcond[2]=((((-1.0)*x1075*x1078))+(((-1.0)*x1074*x1078))+(((0.04)*x1072)));
evalcond[3]=((0.4839)+(((-1.0)*x1075*x1076))+(((-1.0)*x1074*x1076))+(((0.04)*x1073)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((-0.0026)*x1072))+(((-1.0)*(px*px)))+((x1074*x1077))+((x1074*x1079))+(((-0.017208)*x1073))+((x1075*x1077))+((x1075*x1079))+(((0.2982)*cj0*py))+(((-1.0)*(py*py)))+(((0.08)*x1075))+(((0.08)*x1074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1080=py*py;
IkReal x1081=cj0*cj0;
IkReal x1082=px*px;
IkReal x1083=(cj0*px);
IkReal x1084=(py*sj0);
IkReal x1085=((4302.0)*x1081);
CheckValue<IkReal> x1086=IKPowWithIntegerCheck(((-12.5814)+(((314.535)*x1084))+(((314.535)*x1083))),-1);
if(!x1086.valid){
continue;
}
if( IKabs(((-0.0826617069642488)+(((2.06654267410622)*x1083))+(((2.06654267410622)*x1084)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1086.value)*(((-17.30940618)+(((1442.9898)*px*sj0))+(((-42.96)*x1084))+(((-42.96)*x1083))+(((-8604.0)*x1083*x1084))+(((-1442.9898)*cj0*py))+(((537.0)*x1080))+(((-1.0)*x1082*x1085))+((x1080*x1085))+(((4839.0)*x1082)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.0826617069642488)+(((2.06654267410622)*x1083))+(((2.06654267410622)*x1084))))+IKsqr(((x1086.value)*(((-17.30940618)+(((1442.9898)*px*sj0))+(((-42.96)*x1084))+(((-42.96)*x1083))+(((-8604.0)*x1083*x1084))+(((-1442.9898)*cj0*py))+(((537.0)*x1080))+(((-1.0)*x1082*x1085))+((x1080*x1085))+(((4839.0)*x1082))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.0826617069642488)+(((2.06654267410622)*x1083))+(((2.06654267410622)*x1084))), ((x1086.value)*(((-17.30940618)+(((1442.9898)*px*sj0))+(((-42.96)*x1084))+(((-42.96)*x1083))+(((-8604.0)*x1083*x1084))+(((-1442.9898)*cj0*py))+(((537.0)*x1080))+(((-1.0)*x1082*x1085))+((x1080*x1085))+(((4839.0)*x1082))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1087=IKcos(j1);
IkReal x1088=IKsin(j1);
IkReal x1089=(cj0*px);
IkReal x1090=(py*sj0);
IkReal x1091=((1.0)*x1088);
IkReal x1092=((0.4302)*x1088);
IkReal x1093=((1.0)*x1087);
IkReal x1094=((0.065)*x1087);
evalcond[0]=((-0.4839)*x1087);
evalcond[1]=((0.04)+(((0.4839)*x1088))+(((-1.0)*x1090))+(((-1.0)*x1089)));
evalcond[2]=((((-1.0)*x1090*x1093))+(((-1.0)*x1089*x1093))+(((0.04)*x1087)));
evalcond[3]=((0.4839)+(((-1.0)*x1090*x1091))+(((-1.0)*x1089*x1091))+(((0.04)*x1088)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((-1.0)*(px*px)))+(((-0.017208)*x1088))+((x1089*x1092))+((x1089*x1094))+(((0.08)*x1090))+(((0.2982)*cj0*py))+(((-0.0026)*x1087))+(((-1.0)*(py*py)))+((x1090*x1092))+((x1090*x1094))+(((0.08)*x1089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1095=(py*sj0);
IkReal x1096=((0.0325)*sj4);
IkReal x1097=((0.2688)*cj4);
IkReal x1098=(cj0*px);
IkReal x1099=((0.2688)*sj4);
IkReal x1100=((0.0325)*pz);
IkReal x1101=((0.0325)*cj4);
CheckValue<IkReal> x1102=IKPowWithIntegerCheck(IKsign(((-0.12063395)+(((-0.11352526)*cj4))+(((0.0314535)*sj4)))),-1);
if(!x1102.valid){
continue;
}
CheckValue<IkReal> x1103 = IKatan2WithCheck(IkReal(((0.008604)+x1100+(((-0.0013)*sj4))+(((-0.2151)*x1098))+(((-0.2151)*x1095))+(((-1.0)*cj4*x1100))+(((-1.0)*pz*x1099))+(((-1.0)*x1097*x1098))+((x1095*x1096))+(((-1.0)*x1095*x1097))+((x1096*x1098))+(((0.010752)*cj4)))),IkReal(((0.0013)+(((-0.0325)*x1098))+(((-0.0325)*x1095))+((x1098*x1101))+(((-1.0)*pz*x1097))+(((-0.0013)*cj4))+((x1095*x1099))+(((-0.2151)*pz))+((x1098*x1099))+(((-0.010752)*sj4))+((pz*x1096))+((x1095*x1101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1103.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1102.value)))+(x1103.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1104=IKcos(j1);
IkReal x1105=IKsin(j1);
IkReal x1106=(py*sj0);
IkReal x1107=((0.2688)*cj4);
IkReal x1108=((0.0325)*cj4);
IkReal x1109=(cj0*px);
IkReal x1110=((0.2688)*sj4);
IkReal x1111=((1.0)*x1109);
IkReal x1112=((1.0)*x1104);
IkReal x1113=(sj4*x1105);
IkReal x1114=((0.0325)*x1104);
IkReal x1115=(pz*x1105);
IkReal x1116=((0.4302)*x1105);
IkReal x1117=((0.065)*x1104);
evalcond[0]=((0.0325)+x1115+(((-1.0)*x1106*x1112))+(((0.04)*x1104))+(((-1.0)*x1104*x1111))+(((-1.0)*x1108))+(((-1.0)*x1110)));
evalcond[1]=((0.2151)+x1107+(((-1.0)*pz*x1112))+(((-1.0)*x1105*x1106))+(((0.04)*x1105))+(((-0.0325)*sj4))+(((-1.0)*x1105*x1111)));
evalcond[2]=((((0.0325)*x1105))+((sj4*x1114))+pz+(((-1.0)*x1104*x1107))+(((-0.2151)*x1104))+(((-1.0)*x1105*x1110))+(((-1.0)*x1105*x1108)));
evalcond[3]=((0.04)+x1114+(((0.2151)*x1105))+((x1105*x1107))+(((-1.0)*x1106))+(((-1.0)*x1104*x1108))+(((-1.0)*x1104*x1110))+(((-1.0)*x1111))+(((-0.0325)*x1113)));
evalcond[4]=((0.00215462)+((x1109*x1116))+((x1109*x1117))+(((-0.2982)*px*sj0))+(((0.4302)*pz*x1104))+(((0.08)*x1106))+(((0.08)*x1109))+(((-0.065)*x1115))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.0026)*x1104))+(((-0.017208)*x1105))+((x1106*x1117))+((x1106*x1116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1118=cj4*cj4;
IkReal x1119=((0.0325)*sj4);
IkReal x1120=(cj0*px);
IkReal x1121=(py*sj0);
IkReal x1122=((0.2688)*cj4);
IkReal x1123=(cj4*sj4);
IkReal x1124=((0.0325)*pz);
IkReal x1125=((1.0)*pz);
CheckValue<IkReal> x1126 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((0.017472)*x1123))+(((0.0139815)*sj4))+(pz*pz)+(((-0.07119719)*x1118)))),IkReal(((-0.01572675)+(((0.04)*pz))+(((0.017472)*x1118))+(((0.07119719)*x1123))+(((-1.0)*x1121*x1125))+(((-0.00174525)*cj4))+(((0.05887513)*sj4))+(((-1.0)*x1120*x1125)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1126.valid){
continue;
}
CheckValue<IkReal> x1127=IKPowWithIntegerCheck(IKsign(((0.008604)+(((-0.0013)*sj4))+(((-1.0)*x1121*x1122))+((x1119*x1121))+((x1119*x1120))+(((-0.2151)*x1121))+(((-0.2151)*x1120))+(((0.2688)*pz*sj4))+((cj4*x1124))+(((-1.0)*x1124))+(((-1.0)*x1120*x1122))+(((0.010752)*cj4)))),-1);
if(!x1127.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1126.value)+(((1.5707963267949)*(x1127.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1128=IKcos(j1);
IkReal x1129=IKsin(j1);
IkReal x1130=(py*sj0);
IkReal x1131=((0.2688)*cj4);
IkReal x1132=((0.0325)*cj4);
IkReal x1133=(cj0*px);
IkReal x1134=((0.2688)*sj4);
IkReal x1135=((1.0)*x1133);
IkReal x1136=((1.0)*x1128);
IkReal x1137=(sj4*x1129);
IkReal x1138=((0.0325)*x1128);
IkReal x1139=(pz*x1129);
IkReal x1140=((0.4302)*x1129);
IkReal x1141=((0.065)*x1128);
evalcond[0]=((0.0325)+x1139+(((0.04)*x1128))+(((-1.0)*x1130*x1136))+(((-1.0)*x1134))+(((-1.0)*x1132))+(((-1.0)*x1128*x1135)));
evalcond[1]=((0.2151)+(((-1.0)*x1129*x1130))+x1131+(((0.04)*x1129))+(((-1.0)*pz*x1136))+(((-0.0325)*sj4))+(((-1.0)*x1129*x1135)));
evalcond[2]=(((sj4*x1138))+(((-0.2151)*x1128))+pz+(((-1.0)*x1128*x1131))+(((-1.0)*x1129*x1132))+(((-1.0)*x1129*x1134))+(((0.0325)*x1129)));
evalcond[3]=((0.04)+x1138+(((0.2151)*x1129))+((x1129*x1131))+(((-1.0)*x1135))+(((-1.0)*x1130))+(((-1.0)*x1128*x1134))+(((-1.0)*x1128*x1132))+(((-0.0325)*x1137)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((-0.0026)*x1128))+(((0.4302)*pz*x1128))+(((-0.065)*x1139))+((x1130*x1140))+((x1130*x1141))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.017208)*x1129))+((x1133*x1140))+((x1133*x1141))+(((0.08)*x1133))+(((0.08)*x1130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1142=cj4*cj4;
IkReal x1143=((0.017472)*sj4);
IkReal x1144=(cj0*px);
IkReal x1145=((0.0325)*cj4);
IkReal x1146=(py*sj0);
IkReal x1147=((0.2688)*sj4);
CheckValue<IkReal> x1148=IKPowWithIntegerCheck(IKsign(((0.0013)+((x1145*x1146))+(((-0.0325)*pz*sj4))+((x1146*x1147))+(((-0.0013)*cj4))+(((-0.0325)*x1146))+(((-0.0325)*x1144))+(((0.2688)*cj4*pz))+(((-0.010752)*sj4))+((x1144*x1145))+((x1144*x1147))+(((0.2151)*pz)))),-1);
if(!x1148.valid){
continue;
}
CheckValue<IkReal> x1149 = IKatan2WithCheck(IkReal(((-0.01572675)+((pz*x1144))+((pz*x1146))+(((0.07119719)*cj4*sj4))+(((-0.04)*pz))+(((0.017472)*x1142))+(((-0.00174525)*cj4))+(((0.05887513)*sj4)))),IkReal(((-0.07330969)+x1143+(((-1.0)*cj4*x1143))+(pz*pz)+(((0.0021125)*cj4))+(((0.07119719)*x1142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1149.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1148.value)))+(x1149.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1150=IKcos(j1);
IkReal x1151=IKsin(j1);
IkReal x1152=(py*sj0);
IkReal x1153=((0.2688)*cj4);
IkReal x1154=((0.0325)*cj4);
IkReal x1155=(cj0*px);
IkReal x1156=((0.2688)*sj4);
IkReal x1157=((1.0)*x1155);
IkReal x1158=((1.0)*x1150);
IkReal x1159=(sj4*x1151);
IkReal x1160=((0.0325)*x1150);
IkReal x1161=(pz*x1151);
IkReal x1162=((0.4302)*x1151);
IkReal x1163=((0.065)*x1150);
evalcond[0]=((0.0325)+x1161+(((-1.0)*x1156))+(((-1.0)*x1154))+(((0.04)*x1150))+(((-1.0)*x1152*x1158))+(((-1.0)*x1150*x1157)));
evalcond[1]=((0.2151)+x1153+(((0.04)*x1151))+(((-1.0)*pz*x1158))+(((-0.0325)*sj4))+(((-1.0)*x1151*x1157))+(((-1.0)*x1151*x1152)));
evalcond[2]=(((sj4*x1160))+(((0.0325)*x1151))+(((-0.2151)*x1150))+pz+(((-1.0)*x1151*x1156))+(((-1.0)*x1151*x1154))+(((-1.0)*x1150*x1153)));
evalcond[3]=((0.04)+x1160+(((-1.0)*x1157))+(((-0.0325)*x1159))+(((-1.0)*x1152))+((x1151*x1153))+(((0.2151)*x1151))+(((-1.0)*x1150*x1154))+(((-1.0)*x1150*x1156)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((-0.0026)*x1150))+(((-0.065)*x1161))+((x1155*x1162))+((x1155*x1163))+(((0.08)*x1155))+(((0.08)*x1152))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x1152*x1162))+((x1152*x1163))+(((0.4302)*pz*x1150))+(((-0.017208)*x1151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((0.833449990700312)+(((2.08847251616078)*cj0*py))+(((0.560287730693703)*py*sj0))+(((0.560287730693703)*cj0*px))+(((-7.00359663367128)*pp))+(((-2.08847251616078)*px*sj0)))) < -1-IKFAST_SINCOS_THRESH || (((0.833449990700312)+(((2.08847251616078)*cj0*py))+(((0.560287730693703)*py*sj0))+(((0.560287730693703)*cj0*px))+(((-7.00359663367128)*pp))+(((-2.08847251616078)*px*sj0)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1164=IKasin(((0.833449990700312)+(((2.08847251616078)*cj0*py))+(((0.560287730693703)*py*sj0))+(((0.560287730693703)*cj0*px))+(((-7.00359663367128)*pp))+(((-2.08847251616078)*px*sj0))));
j4array[0]=((-2.30784248348928)+(((-1.0)*x1164)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((0.83375017010051)+x1164);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j1eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x1165=(cj4*pz);
IkReal x1166=(cj0*px);
IkReal x1167=(py*sj0);
IkReal x1168=((206.769230769231)*cj4);
IkReal x1169=((0.2688)*cj4);
IkReal x1170=(pz*sj4);
IkReal x1171=(sj4*x1167);
j1eval[0]=((-6.61846153846154)+(((165.461538461538)*x1166))+(((165.461538461538)*x1167))+(((-8.27076923076923)*cj4))+sj4+((x1166*x1168))+(((-206.769230769231)*x1170))+(((-25.0)*x1165))+(((-25.0)*sj4*x1166))+(((-25.0)*x1171))+((x1167*x1168))+(((117.307692307692)*pz)));
j1eval[1]=IKsign(((-0.008604)+(((0.1525)*pz))+(((-0.0325)*sj4*x1166))+(((-0.2688)*x1170))+((x1166*x1169))+(((0.2151)*x1167))+(((0.2151)*x1166))+(((-0.010752)*cj4))+((x1167*x1169))+(((-0.0325)*x1165))+(((0.0013)*sj4))+(((-0.0325)*x1171))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x1172=(cj0*px);
IkReal x1173=((25.0)*cj4);
IkReal x1174=(cj4*pz);
IkReal x1175=((0.2688)*sj4);
IkReal x1176=(py*sj0);
IkReal x1177=(pz*sj4);
IkReal x1178=((206.769230769231)*sj4);
IkReal x1179=((0.0325)*cj4);
j1eval[0]=((4.69230769230769)+((x1173*x1176))+(((165.461538461538)*pz))+((x1176*x1178))+(((-25.0)*x1177))+((x1172*x1173))+((x1172*x1178))+(((206.769230769231)*x1174))+(((-8.27076923076923)*sj4))+(((-117.307692307692)*x1176))+(((-117.307692307692)*x1172))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.0061)+(((0.2688)*x1174))+(((-0.0013)*cj4))+((x1176*x1179))+((x1175*x1176))+((x1172*x1175))+((x1172*x1179))+(((-0.010752)*sj4))+(((-0.0325)*x1177))+(((-0.1525)*x1176))+(((-0.1525)*x1172))+(((0.2151)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x1180=cj0*cj0;
IkReal x1181=py*py;
IkReal x1182=pz*pz;
IkReal x1183=px*px;
IkReal x1184=(py*sj0);
IkReal x1185=(cj0*px);
IkReal x1186=(x1180*x1181);
IkReal x1187=(x1180*x1183);
j1eval[0]=((1.0)+(((1250.0)*x1184*x1185))+(((625.0)*x1182))+(((625.0)*x1187))+(((625.0)*x1181))+(((-50.0)*x1185))+(((-50.0)*x1184))+(((-625.0)*x1186)));
j1eval[1]=IKsign(((0.0016)+x1187+x1182+x1181+(((2.0)*x1184*x1185))+(((-1.0)*x1186))+(((-0.08)*x1184))+(((-0.08)*x1185))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1188=cj0*cj0;
IkReal x1189=py*py;
IkReal x1190=(cj0*px);
IkReal x1191=(py*sj0);
IkReal x1192=((0.0325)*sj4);
IkReal x1193=((0.2688)*cj4);
IkReal x1194=((0.2688)*sj4);
IkReal x1195=((0.0325)*cj4);
CheckValue<IkReal> x1196 = IKatan2WithCheck(IkReal(((0.008604)+(((-0.0013)*sj4))+(((-1.0)*x1191*x1193))+(((0.1525)*pz))+(((-1.0)*x1190*x1193))+(((-0.2151)*x1191))+(((-0.2151)*x1190))+(((-1.0)*pz*x1195))+(((-1.0)*pz*x1194))+((x1191*x1192))+((x1190*x1192))+(((0.010752)*cj4)))),IkReal(((0.0061)+(((-0.1525)*x1190))+(((-0.1525)*x1191))+(((-0.0013)*cj4))+((pz*x1192))+(((-1.0)*pz*x1193))+(((-0.2151)*pz))+(((-0.010752)*sj4))+((x1191*x1194))+((x1191*x1195))+((x1190*x1194))+((x1190*x1195)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1196.valid){
continue;
}
CheckValue<IkReal> x1197=IKPowWithIntegerCheck(IKsign(((0.0016)+x1189+(((2.0)*x1190*x1191))+(pz*pz)+((x1188*(px*px)))+(((-0.08)*x1191))+(((-0.08)*x1190))+(((-1.0)*x1188*x1189)))),-1);
if(!x1197.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1196.value)+(((1.5707963267949)*(x1197.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1198=IKsin(j1);
IkReal x1199=IKcos(j1);
IkReal x1200=(py*sj0);
IkReal x1201=((0.0325)*sj4);
IkReal x1202=(cj0*px);
IkReal x1203=((0.2688)*sj4);
IkReal x1204=((0.2688)*cj4);
IkReal x1205=((0.0325)*cj4);
IkReal x1206=((0.305)*x1199);
IkReal x1207=(pz*x1199);
IkReal x1208=(pz*x1198);
IkReal x1209=((0.4302)*x1198);
evalcond[0]=((0.2151)+x1204+x1207+(((-0.04)*x1198))+(((-1.0)*x1201))+((x1198*x1200))+((x1198*x1202)));
evalcond[1]=((0.1525)+(((-0.04)*x1199))+((x1199*x1200))+((x1199*x1202))+(((-1.0)*x1208))+(((-1.0)*x1205))+(((-1.0)*x1203)));
evalcond[2]=((((-1.0)*x1199*x1201))+(((0.2151)*x1199))+(((-0.1525)*x1198))+((x1199*x1204))+pz+((x1198*x1205))+((x1198*x1203)));
evalcond[3]=((0.04)+(((-0.1525)*x1199))+(((-0.2151)*x1198))+((x1199*x1205))+((x1199*x1203))+(((-1.0)*x1200))+(((-1.0)*x1202))+((x1198*x1201))+(((-1.0)*x1198*x1204)));
evalcond[4]=((-0.02004538)+(((-0.2982)*px*sj0))+(((0.08)*x1202))+(((0.08)*x1200))+(((0.0122)*x1199))+(((0.2982)*cj0*py))+(((-1.0)*x1202*x1206))+(((-1.0)*x1202*x1209))+(((-1.0)*pp))+(((-0.4302)*x1207))+(((-1.0)*x1200*x1209))+(((-1.0)*x1200*x1206))+(((0.305)*x1208))+(((0.017208)*x1198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1210=cj4*cj4;
IkReal x1211=(cj0*px);
IkReal x1212=((0.2688)*sj4);
IkReal x1213=(cj4*sj4);
IkReal x1214=(py*sj0);
IkReal x1215=((0.0325)*cj4);
IkReal x1216=((1.0)*pz);
CheckValue<IkReal> x1217=IKPowWithIntegerCheck(IKsign(((0.0061)+((x1214*x1215))+((x1212*x1214))+(((-0.0325)*pz*sj4))+(((-0.1525)*x1211))+(((-0.1525)*x1214))+(((-0.0013)*cj4))+(((0.2688)*cj4*pz))+(((-0.010752)*sj4))+((x1211*x1215))+((x1211*x1212))+(((0.2151)*pz)))),-1);
if(!x1217.valid){
continue;
}
CheckValue<IkReal> x1218 = IKatan2WithCheck(IkReal(((0.04153875)+(((0.04)*pz))+(((-0.06277513)*sj4))+(((-0.07119719)*x1213))+(((-1.0)*x1214*x1216))+(((0.03400125)*cj4))+(((-0.017472)*x1210))+(((-1.0)*x1211*x1216)))),IkReal(((0.09550969)+(((-0.081984)*sj4))+(((-0.07119719)*x1210))+(((-0.0099125)*cj4))+(((0.017472)*x1213))+(((-1.0)*pz*x1216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1218.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1217.value)))+(x1218.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1219=IKsin(j1);
IkReal x1220=IKcos(j1);
IkReal x1221=(py*sj0);
IkReal x1222=((0.0325)*sj4);
IkReal x1223=(cj0*px);
IkReal x1224=((0.2688)*sj4);
IkReal x1225=((0.2688)*cj4);
IkReal x1226=((0.0325)*cj4);
IkReal x1227=((0.305)*x1220);
IkReal x1228=(pz*x1220);
IkReal x1229=(pz*x1219);
IkReal x1230=((0.4302)*x1219);
evalcond[0]=((0.2151)+x1225+x1228+(((-1.0)*x1222))+((x1219*x1221))+((x1219*x1223))+(((-0.04)*x1219)));
evalcond[1]=((0.1525)+(((-1.0)*x1229))+(((-1.0)*x1226))+(((-1.0)*x1224))+((x1220*x1221))+((x1220*x1223))+(((-0.04)*x1220)));
evalcond[2]=((((-0.1525)*x1219))+((x1219*x1224))+((x1219*x1226))+(((-1.0)*x1220*x1222))+(((0.2151)*x1220))+((x1220*x1225))+pz);
evalcond[3]=((0.04)+(((-1.0)*x1221))+(((-1.0)*x1223))+((x1219*x1222))+(((-0.1525)*x1220))+(((-0.2151)*x1219))+((x1220*x1224))+((x1220*x1226))+(((-1.0)*x1219*x1225)));
evalcond[4]=((-0.02004538)+(((-0.2982)*px*sj0))+(((-1.0)*x1223*x1230))+(((-0.4302)*x1228))+(((0.305)*x1229))+(((0.017208)*x1219))+(((0.0122)*x1220))+(((-1.0)*x1221*x1227))+(((-1.0)*x1221*x1230))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.08)*x1221))+(((0.08)*x1223))+(((-1.0)*x1223*x1227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1231=cj4*cj4;
IkReal x1232=((0.0325)*sj4);
IkReal x1233=(cj0*px);
IkReal x1234=(py*sj0);
IkReal x1235=((0.2688)*cj4);
IkReal x1236=(cj4*sj4);
IkReal x1237=((1.0)*pz);
CheckValue<IkReal> x1238 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((0.017472)*x1236))+(((0.0139815)*sj4))+(pz*pz)+(((-0.07119719)*x1231)))),IkReal(((-0.04153875)+(((0.04)*pz))+(((-0.03400125)*cj4))+(((0.06277513)*sj4))+(((0.017472)*x1231))+(((-1.0)*x1233*x1237))+(((-1.0)*x1234*x1237))+(((0.07119719)*x1236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1238.valid){
continue;
}
CheckValue<IkReal> x1239=IKPowWithIntegerCheck(IKsign(((-0.008604)+((x1234*x1235))+(((0.1525)*pz))+(((-0.0325)*cj4*pz))+(((0.2151)*x1234))+(((0.2151)*x1233))+(((-0.2688)*pz*sj4))+((x1233*x1235))+(((-0.010752)*cj4))+(((0.0013)*sj4))+(((-1.0)*x1232*x1233))+(((-1.0)*x1232*x1234)))),-1);
if(!x1239.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1238.value)+(((1.5707963267949)*(x1239.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1240=IKsin(j1);
IkReal x1241=IKcos(j1);
IkReal x1242=(py*sj0);
IkReal x1243=((0.0325)*sj4);
IkReal x1244=(cj0*px);
IkReal x1245=((0.2688)*sj4);
IkReal x1246=((0.2688)*cj4);
IkReal x1247=((0.0325)*cj4);
IkReal x1248=((0.305)*x1241);
IkReal x1249=(pz*x1241);
IkReal x1250=(pz*x1240);
IkReal x1251=((0.4302)*x1240);
evalcond[0]=((0.2151)+x1246+x1249+(((-0.04)*x1240))+((x1240*x1244))+((x1240*x1242))+(((-1.0)*x1243)));
evalcond[1]=((0.1525)+(((-0.04)*x1241))+(((-1.0)*x1247))+(((-1.0)*x1245))+((x1241*x1244))+((x1241*x1242))+(((-1.0)*x1250)));
evalcond[2]=((((-0.1525)*x1240))+((x1240*x1245))+((x1240*x1247))+(((0.2151)*x1241))+pz+((x1241*x1246))+(((-1.0)*x1241*x1243)));
evalcond[3]=((0.04)+(((-0.2151)*x1240))+(((-0.1525)*x1241))+((x1240*x1243))+(((-1.0)*x1242))+(((-1.0)*x1244))+(((-1.0)*x1240*x1246))+((x1241*x1247))+((x1241*x1245)));
evalcond[4]=((-0.02004538)+(((-0.2982)*px*sj0))+(((-1.0)*x1242*x1251))+(((0.0122)*x1241))+(((-1.0)*x1244*x1248))+(((0.2982)*cj0*py))+(((-1.0)*x1242*x1248))+(((-1.0)*pp))+(((-1.0)*x1244*x1251))+(((0.017208)*x1240))+(((-0.4302)*x1249))+(((0.305)*x1250))+(((0.08)*x1242))+(((0.08)*x1244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((0.82174456754206)+(((-2.53136654493896)*px*sj0))+(((2.53136654493896)*cj0*py))+(((0.679105712927957)*cj0*px))+(((-8.48882141159946)*pp))+(((0.679105712927957)*py*sj0)))) < -1-IKFAST_SINCOS_THRESH || (((0.82174456754206)+(((-2.53136654493896)*px*sj0))+(((2.53136654493896)*cj0*py))+(((0.679105712927957)*cj0*px))+(((-8.48882141159946)*pp))+(((0.679105712927957)*py*sj0)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1252=IKasin(((0.82174456754206)+(((-2.53136654493896)*px*sj0))+(((2.53136654493896)*cj0*py))+(((0.679105712927957)*cj0*px))+(((-8.48882141159946)*pp))+(((0.679105712927957)*py*sj0))));
j4array[0]=((-1.8410782591361)+(((-1.0)*x1252)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((1.30051439445369)+x1252);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j1eval[3];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1253=cj4*cj4;
IkReal x1254=(cj0*px);
IkReal x1255=((25.0)*cj4);
IkReal x1256=((0.017472)*sj4);
IkReal x1257=(cj4*pz);
IkReal x1258=(pz*sj4);
IkReal x1259=(py*sj0);
IkReal x1260=((206.769230769231)*sj4);
IkReal x1261=((0.0325)*cj4);
IkReal x1262=((0.2688)*sj4);
j1eval[0]=((1.0)+(((-206.769230769231)*x1257))+(((-25.0)*x1254))+(((-25.0)*x1259))+((x1259*x1260))+(((25.0)*x1258))+((x1254*x1260))+(((-165.461538461538)*pz))+((x1255*x1259))+((x1254*x1255))+(((-8.27076923076923)*sj4))+(((-1.0)*cj4)));
j1eval[1]=((IKabs(((0.01572675)+(((-0.017472)*x1253))+(((-0.04)*pz))+(((0.00174525)*cj4))+((pz*x1259))+((pz*x1254))+(((-0.07119719)*cj4*sj4))+(((-0.05887513)*sj4)))))+(IKabs(((-0.07330969)+x1256+(((0.07119719)*x1253))+(pz*pz)+(((0.0021125)*cj4))+(((-1.0)*cj4*x1256))))));
j1eval[2]=IKsign(((0.0013)+(((-0.2688)*x1257))+(((-0.0325)*x1254))+(((-0.0325)*x1259))+(((-0.0013)*cj4))+((x1259*x1261))+((x1259*x1262))+((x1254*x1262))+((x1254*x1261))+(((-0.2151)*pz))+(((-0.010752)*sj4))+(((0.0325)*x1258))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1263=((0.0325)*pz);
IkReal x1264=(py*sj0);
IkReal x1265=((0.0325)*sj4);
IkReal x1266=((25.0)*sj4);
IkReal x1267=(cj0*px);
IkReal x1268=((0.2688)*cj4);
IkReal x1269=((25.0)*pz);
IkReal x1270=((206.769230769231)*cj4);
IkReal x1271=(pz*sj4);
j1eval[0]=((-6.61846153846154)+(((-1.0)*x1264*x1266))+(((-8.27076923076923)*cj4))+sj4+((x1264*x1270))+(((206.769230769231)*x1271))+(((-1.0)*x1266*x1267))+((x1267*x1270))+(((165.461538461538)*x1264))+(((165.461538461538)*x1267))+((cj4*x1269))+(((-1.0)*x1269)));
j1eval[1]=IKsign(((-0.008604)+(((0.2151)*x1267))+(((0.2151)*x1264))+(((-1.0)*x1264*x1265))+((x1264*x1268))+((x1267*x1268))+(((-1.0)*x1265*x1267))+(((-0.010752)*cj4))+(((0.2688)*x1271))+(((0.0013)*sj4))+((cj4*x1263))+(((-1.0)*x1263))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1272=((25.0)*cj4);
IkReal x1273=(cj0*px);
IkReal x1274=(pz*sj4);
IkReal x1275=(py*sj0);
IkReal x1276=((0.2688)*sj4);
IkReal x1277=((0.0325)*cj4);
IkReal x1278=(cj4*pz);
IkReal x1279=((206.769230769231)*sj4);
j1eval[0]=((-1.0)+(((8.27076923076923)*sj4))+(((206.769230769231)*x1278))+cj4+(((-25.0)*x1274))+(((165.461538461538)*pz))+(((-1.0)*x1275*x1279))+(((25.0)*x1275))+(((25.0)*x1273))+(((-1.0)*x1272*x1275))+(((-1.0)*x1272*x1273))+(((-1.0)*x1273*x1279)));
j1eval[1]=IKsign(((-0.0013)+(((-0.0325)*x1274))+(((-1.0)*x1275*x1277))+(((-1.0)*x1275*x1276))+(((0.010752)*sj4))+(((-1.0)*x1273*x1277))+(((-1.0)*x1273*x1276))+(((0.0013)*cj4))+(((0.2688)*x1278))+(((0.0325)*x1275))+(((0.0325)*x1273))+(((0.2151)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1280=((-1.0)*py);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1280);
rxp0_1=(px*r20);
rxp1_0=(r21*x1280);
rxp1_1=(px*r21);
rxp2_0=(r22*x1280);
rxp2_1=(px*r22);
j1eval[0]=((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1281=((-1.0)*py);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1281);
rxp0_1=(px*r20);
rxp1_0=(r21*x1281);
rxp1_1=(px*r21);
rxp2_0=(r22*x1281);
rxp2_1=(px*r22);
IkReal x1282=cj0*cj0;
IkReal x1283=py*py;
IkReal x1284=(py*sj0);
IkReal x1285=(cj0*px);
IkReal x1286=((625.0)*x1283);
j1eval[0]=((-1.0)+(((25.0)*x1284))+(((25.0)*x1285)));
j1eval[1]=((1.0)+x1286+(((-50.0)*x1285))+(((-50.0)*x1284))+(((1250.0)*x1284*x1285))+(((625.0)*x1282*(px*px)))+(((-1.0)*x1282*x1286)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1287=py*py;
IkReal x1288=px*px;
IkReal x1289=cj0*cj0;
IkReal x1290=(py*sj0);
IkReal x1291=(cj0*px);
IkReal x1292=(px*py);
IkReal x1293=((2982.0)*cj0*sj0);
IkReal x1294=(x1288*x1289);
IkReal x1295=(x1287*x1289);
CheckValue<IkReal> x1296=IKPowWithIntegerCheck(((-400.0)+(((10000.0)*x1290))+(((10000.0)*x1291))),-1);
if(!x1296.valid){
continue;
}
CheckValue<IkReal> x1297=IKPowWithIntegerCheck(((1.04)+(((-52.0)*x1290))+(((-52.0)*x1291))+(((650.0)*x1294))+(((1300.0)*x1290*x1291))+(((-650.0)*x1295))+(((650.0)*x1287))),-1);
if(!x1297.valid){
continue;
}
if( IKabs(((-4839.0)*(x1296.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1297.value)*(((84.13136)+(((-1200.0)*x1287))+(((-1.0)*x1287*x1293))+(((2982.0)*x1292))+(((119.28)*cj0*py))+(((-400.0)*x1288))+(((-2071.284)*x1290))+(((-2071.284)*x1291))+(((10000.0)*x1291*(px*px)))+(((-800.0)*x1294))+(((-5964.0)*x1289*x1292))+(((-119.28)*px*sj0))+(((800.0)*x1295))+((x1288*x1293))+(((-1600.0)*x1290*x1291))+(((10000.0)*x1287*x1291))+(((10000.0)*x1288*x1290))+(((10000.0)*x1290*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4839.0)*(x1296.value)))+IKsqr(((x1297.value)*(((84.13136)+(((-1200.0)*x1287))+(((-1.0)*x1287*x1293))+(((2982.0)*x1292))+(((119.28)*cj0*py))+(((-400.0)*x1288))+(((-2071.284)*x1290))+(((-2071.284)*x1291))+(((10000.0)*x1291*(px*px)))+(((-800.0)*x1294))+(((-5964.0)*x1289*x1292))+(((-119.28)*px*sj0))+(((800.0)*x1295))+((x1288*x1293))+(((-1600.0)*x1290*x1291))+(((10000.0)*x1287*x1291))+(((10000.0)*x1288*x1290))+(((10000.0)*x1290*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4839.0)*(x1296.value)), ((x1297.value)*(((84.13136)+(((-1200.0)*x1287))+(((-1.0)*x1287*x1293))+(((2982.0)*x1292))+(((119.28)*cj0*py))+(((-400.0)*x1288))+(((-2071.284)*x1290))+(((-2071.284)*x1291))+(((10000.0)*x1291*(px*px)))+(((-800.0)*x1294))+(((-5964.0)*x1289*x1292))+(((-119.28)*px*sj0))+(((800.0)*x1295))+((x1288*x1293))+(((-1600.0)*x1290*x1291))+(((10000.0)*x1287*x1291))+(((10000.0)*x1288*x1290))+(((10000.0)*x1290*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1298=IKsin(j1);
IkReal x1299=IKcos(j1);
IkReal x1300=(py*sj0);
IkReal x1301=(cj0*px);
IkReal x1302=((1.0)*x1300);
IkReal x1303=((0.065)*x1299);
IkReal x1304=(x1298*x1300);
evalcond[0]=((0.4839)*x1299);
evalcond[1]=((0.04)+(((-1.0)*x1301))+(((-1.0)*x1302))+(((-0.4839)*x1298)));
evalcond[2]=((0.4839)+x1304+(((-0.04)*x1298))+((x1298*x1301)));
evalcond[3]=((((-1.0)*x1299*x1302))+(((-1.0)*x1299*x1301))+(((0.04)*x1299)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((-1.0)*(px*px)))+(((-0.4302)*x1298*x1301))+(((-0.4302)*x1304))+((x1300*x1303))+(((0.2982)*cj0*py))+(((0.017208)*x1298))+(((-0.0026)*x1299))+(((-1.0)*(py*py)))+((x1301*x1303))+(((0.08)*x1301))+(((0.08)*x1300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1305=py*py;
IkReal x1306=cj0*cj0;
IkReal x1307=px*px;
IkReal x1308=(cj0*px);
IkReal x1309=(py*sj0);
IkReal x1310=((4302.0)*x1306);
CheckValue<IkReal> x1311=IKPowWithIntegerCheck(((-12.5814)+(((314.535)*x1308))+(((314.535)*x1309))),-1);
if(!x1311.valid){
continue;
}
if( IKabs(((0.0826617069642488)+(((-2.06654267410622)*x1308))+(((-2.06654267410622)*x1309)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1311.value)*(((-17.30940618)+(((1442.9898)*px*sj0))+(((-1.0)*x1307*x1310))+((x1305*x1310))+(((-42.96)*x1308))+(((-42.96)*x1309))+(((-1442.9898)*cj0*py))+(((-8604.0)*x1308*x1309))+(((4839.0)*x1307))+(((537.0)*x1305)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0826617069642488)+(((-2.06654267410622)*x1308))+(((-2.06654267410622)*x1309))))+IKsqr(((x1311.value)*(((-17.30940618)+(((1442.9898)*px*sj0))+(((-1.0)*x1307*x1310))+((x1305*x1310))+(((-42.96)*x1308))+(((-42.96)*x1309))+(((-1442.9898)*cj0*py))+(((-8604.0)*x1308*x1309))+(((4839.0)*x1307))+(((537.0)*x1305))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0826617069642488)+(((-2.06654267410622)*x1308))+(((-2.06654267410622)*x1309))), ((x1311.value)*(((-17.30940618)+(((1442.9898)*px*sj0))+(((-1.0)*x1307*x1310))+((x1305*x1310))+(((-42.96)*x1308))+(((-42.96)*x1309))+(((-1442.9898)*cj0*py))+(((-8604.0)*x1308*x1309))+(((4839.0)*x1307))+(((537.0)*x1305))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1312=IKsin(j1);
IkReal x1313=IKcos(j1);
IkReal x1314=(py*sj0);
IkReal x1315=(cj0*px);
IkReal x1316=((1.0)*x1314);
IkReal x1317=((0.065)*x1313);
IkReal x1318=(x1312*x1314);
evalcond[0]=((0.4839)*x1313);
evalcond[1]=((0.04)+(((-1.0)*x1315))+(((-1.0)*x1316))+(((-0.4839)*x1312)));
evalcond[2]=((0.4839)+x1318+(((-0.04)*x1312))+((x1312*x1315)));
evalcond[3]=((((-1.0)*x1313*x1316))+(((-1.0)*x1313*x1315))+(((0.04)*x1313)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((-1.0)*(px*px)))+((x1314*x1317))+(((-0.4302)*x1318))+(((-0.4302)*x1312*x1315))+(((0.017208)*x1312))+(((0.2982)*cj0*py))+(((-0.0026)*x1313))+(((-1.0)*(py*py)))+(((0.08)*x1314))+(((0.08)*x1315))+((x1315*x1317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1319=cj0*cj0;
IkReal x1320=py*py;
IkReal x1321=cj4*cj4;
IkReal x1322=(cj0*px);
IkReal x1323=((0.2688)*sj4);
IkReal x1324=(cj4*sj4);
IkReal x1325=(py*sj0);
IkReal x1326=((0.0325)*cj4);
IkReal x1327=((1.0)*pz);
CheckValue<IkReal> x1328 = IKatan2WithCheck(IkReal(((-0.01572675)+(((0.04)*pz))+(((0.017472)*x1321))+(((-1.0)*x1322*x1327))+(((0.07119719)*x1324))+(((-1.0)*x1325*x1327))+(((-0.00174525)*cj4))+(((0.05887513)*sj4)))),IkReal(((-0.04572426)+(((-0.11563776)*cj4))+x1320+(((-0.07119719)*x1321))+(((0.017472)*x1324))+(((-1.0)*x1319*x1320))+(((2.0)*x1322*x1325))+(((-0.08)*x1325))+(((-0.08)*x1322))+(((0.0139815)*sj4))+((x1319*(px*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1328.valid){
continue;
}
CheckValue<IkReal> x1329=IKPowWithIntegerCheck(IKsign(((-0.0013)+(((-0.0325)*pz*sj4))+(((-1.0)*x1323*x1325))+(((-1.0)*x1322*x1326))+(((-1.0)*x1322*x1323))+(((0.010752)*sj4))+(((0.0325)*x1325))+(((0.0325)*x1322))+(((-1.0)*x1325*x1326))+(((0.2688)*cj4*pz))+(((0.0013)*cj4))+(((0.2151)*pz)))),-1);
if(!x1329.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1328.value)+(((1.5707963267949)*(x1329.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1330=IKsin(j1);
IkReal x1331=IKcos(j1);
IkReal x1332=(py*sj0);
IkReal x1333=((0.2688)*cj4);
IkReal x1334=((0.0325)*cj4);
IkReal x1335=(cj0*px);
IkReal x1336=((0.2688)*sj4);
IkReal x1337=(sj4*x1330);
IkReal x1338=((1.0)*x1331);
IkReal x1339=(pz*x1331);
IkReal x1340=((0.0325)*x1331);
IkReal x1341=(pz*x1330);
IkReal x1342=((0.4302)*x1330);
IkReal x1343=((0.065)*x1331);
evalcond[0]=((0.2151)+x1339+x1333+(((-0.04)*x1330))+((x1330*x1335))+((x1330*x1332))+(((-0.0325)*sj4)));
evalcond[1]=((0.0325)+(((-1.0)*x1335*x1338))+x1341+(((-1.0)*x1332*x1338))+(((0.04)*x1331))+(((-1.0)*x1336))+(((-1.0)*x1334)));
evalcond[2]=((((0.0325)*x1330))+((x1331*x1333))+(((-1.0)*sj4*x1340))+(((-1.0)*x1330*x1334))+(((-1.0)*x1330*x1336))+(((0.2151)*x1331))+pz);
evalcond[3]=((0.04)+x1340+(((0.0325)*x1337))+(((-1.0)*x1332))+(((-1.0)*x1335))+(((-1.0)*x1330*x1333))+(((-1.0)*x1331*x1334))+(((-1.0)*x1331*x1336))+(((-0.2151)*x1330)));
evalcond[4]=((0.00215462)+(((-0.065)*x1341))+(((-0.2982)*px*sj0))+(((-0.4302)*x1339))+(((0.08)*x1335))+(((0.08)*x1332))+((x1332*x1343))+(((-1.0)*x1335*x1342))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.017208)*x1330))+(((-0.0026)*x1331))+((x1335*x1343))+(((-1.0)*x1332*x1342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1344=cj4*cj4;
IkReal x1345=((0.0325)*sj4);
IkReal x1346=(cj0*px);
IkReal x1347=(py*sj0);
IkReal x1348=((0.2688)*cj4);
IkReal x1349=(cj4*sj4);
IkReal x1350=((0.0325)*pz);
IkReal x1351=((1.0)*pz);
CheckValue<IkReal> x1352 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((0.017472)*x1349))+(((0.0139815)*sj4))+(pz*pz)+(((-0.07119719)*x1344)))),IkReal(((0.01572675)+(((0.04)*pz))+(((-0.017472)*x1344))+(((-1.0)*x1346*x1351))+(((-1.0)*x1347*x1351))+(((0.00174525)*cj4))+(((-0.07119719)*x1349))+(((-0.05887513)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1352.valid){
continue;
}
CheckValue<IkReal> x1353=IKPowWithIntegerCheck(IKsign(((-0.008604)+(((-1.0)*x1350))+((x1346*x1348))+((x1347*x1348))+((cj4*x1350))+(((0.2688)*pz*sj4))+(((-0.010752)*cj4))+(((0.0013)*sj4))+(((0.2151)*x1347))+(((0.2151)*x1346))+(((-1.0)*x1345*x1346))+(((-1.0)*x1345*x1347)))),-1);
if(!x1353.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1352.value)+(((1.5707963267949)*(x1353.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1354=IKsin(j1);
IkReal x1355=IKcos(j1);
IkReal x1356=(py*sj0);
IkReal x1357=((0.2688)*cj4);
IkReal x1358=((0.0325)*cj4);
IkReal x1359=(cj0*px);
IkReal x1360=((0.2688)*sj4);
IkReal x1361=(sj4*x1354);
IkReal x1362=((1.0)*x1355);
IkReal x1363=(pz*x1355);
IkReal x1364=((0.0325)*x1355);
IkReal x1365=(pz*x1354);
IkReal x1366=((0.4302)*x1354);
IkReal x1367=((0.065)*x1355);
evalcond[0]=((0.2151)+x1357+x1363+((x1354*x1359))+((x1354*x1356))+(((-0.0325)*sj4))+(((-0.04)*x1354)));
evalcond[1]=((0.0325)+x1365+(((-1.0)*x1358))+(((0.04)*x1355))+(((-1.0)*x1359*x1362))+(((-1.0)*x1356*x1362))+(((-1.0)*x1360)));
evalcond[2]=(((x1355*x1357))+(((-1.0)*sj4*x1364))+(((-1.0)*x1354*x1358))+(((-1.0)*x1354*x1360))+pz+(((0.0325)*x1354))+(((0.2151)*x1355)));
evalcond[3]=((0.04)+x1364+(((-1.0)*x1356))+(((-1.0)*x1359))+(((-0.2151)*x1354))+(((-1.0)*x1354*x1357))+(((-1.0)*x1355*x1358))+(((-1.0)*x1355*x1360))+(((0.0325)*x1361)));
evalcond[4]=((0.00215462)+((x1356*x1367))+(((-0.2982)*px*sj0))+(((-0.065)*x1365))+(((0.017208)*x1354))+((x1359*x1367))+(((-0.0026)*x1355))+(((-1.0)*x1359*x1366))+(((-0.4302)*x1363))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.08)*x1359))+(((0.08)*x1356))+(((-1.0)*x1356*x1366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1368=cj4*cj4;
IkReal x1369=((0.017472)*sj4);
IkReal x1370=(cj0*px);
IkReal x1371=((0.2688)*sj4);
IkReal x1372=((0.0325)*cj4);
IkReal x1373=(py*sj0);
CheckValue<IkReal> x1374 = IKatan2WithCheck(IkReal(((0.01572675)+(((-0.017472)*x1368))+((pz*x1373))+((pz*x1370))+(((-0.04)*pz))+(((0.00174525)*cj4))+(((-0.07119719)*cj4*sj4))+(((-0.05887513)*sj4)))),IkReal(((-0.07330969)+x1369+(pz*pz)+(((0.0021125)*cj4))+(((0.07119719)*x1368))+(((-1.0)*cj4*x1369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1374.valid){
continue;
}
CheckValue<IkReal> x1375=IKPowWithIntegerCheck(IKsign(((0.0013)+((x1372*x1373))+(((-0.0325)*x1370))+(((-0.0325)*x1373))+(((-0.2688)*cj4*pz))+(((-0.0013)*cj4))+(((-0.2151)*pz))+((x1371*x1373))+((x1370*x1371))+((x1370*x1372))+(((-0.010752)*sj4))+(((0.0325)*pz*sj4)))),-1);
if(!x1375.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1374.value)+(((1.5707963267949)*(x1375.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1376=IKsin(j1);
IkReal x1377=IKcos(j1);
IkReal x1378=(py*sj0);
IkReal x1379=((0.2688)*cj4);
IkReal x1380=((0.0325)*cj4);
IkReal x1381=(cj0*px);
IkReal x1382=((0.2688)*sj4);
IkReal x1383=(sj4*x1376);
IkReal x1384=((1.0)*x1377);
IkReal x1385=(pz*x1377);
IkReal x1386=((0.0325)*x1377);
IkReal x1387=(pz*x1376);
IkReal x1388=((0.4302)*x1376);
IkReal x1389=((0.065)*x1377);
evalcond[0]=((0.2151)+x1379+x1385+((x1376*x1378))+(((-0.04)*x1376))+((x1376*x1381))+(((-0.0325)*sj4)));
evalcond[1]=((0.0325)+(((-1.0)*x1382))+(((-1.0)*x1380))+x1387+(((-1.0)*x1381*x1384))+(((-1.0)*x1378*x1384))+(((0.04)*x1377)));
evalcond[2]=((((0.2151)*x1377))+(((-1.0)*sj4*x1386))+(((0.0325)*x1376))+(((-1.0)*x1376*x1380))+(((-1.0)*x1376*x1382))+((x1377*x1379))+pz);
evalcond[3]=((0.04)+x1386+(((-1.0)*x1378))+(((-1.0)*x1377*x1380))+(((-1.0)*x1377*x1382))+(((-1.0)*x1376*x1379))+(((-1.0)*x1381))+(((0.0325)*x1383))+(((-0.2151)*x1376)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+((x1381*x1389))+(((0.08)*x1378))+(((0.017208)*x1376))+(((0.08)*x1381))+(((-0.065)*x1387))+(((0.2982)*cj0*py))+(((-0.0026)*x1377))+(((-1.0)*pp))+(((-1.0)*x1381*x1388))+(((-0.4302)*x1385))+(((-1.0)*x1378*x1388))+((x1378*x1389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1390 = IKatan2WithCheck(IkReal(((((0.0074)*px*sj0*sj2))+(((-0.08)*cj0*cj2*px*pz*sj3))+(((0.16)*cj0*cj3*px*py*sj0))+(((0.4302)*cj0*cj2*cj3*sj0*(py*py)))+(((0.0111)*cj2*pz))+(((0.011928)*cj3*px*sj0))+(((0.00894538)*cj2*pz*sj3))+(((-0.06414282)*cj0*cj2*cj3*px))+(((0.06414282)*pz*sj3))+(((6.98152e-5)*cj3))+(((0.0048)*px*sj0*sj2*sj3))+(((-0.017892)*py*sj0*sj2*sj3))+(((0.12)*cj0*sj0*sj2*sj3*(py*py)))+((cj2*pp*pz*sj3))+(((-0.12)*cj0*sj0*sj2*sj3*(px*px)))+(((-0.2982)*cj3*px*py))+(((-0.011928)*cj0*cj3*py))+(((0.00071568)*sj2*sj3))+(((-0.185)*cj0*sj0*sj2*(px*px)))+(((-0.185)*px*py*sj2))+(((0.5964)*cj3*px*py*(cj0*cj0)))+(((0.4302)*px*pz*sj0*sj3))+(((0.017208)*cj2*cj3*px*sj0))+(((-1.0)*cj0*cj3*pp*px))+(((0.2982)*cj2*px*pz*sj0*sj3))+(((-0.08)*cj2*py*pz*sj0*sj3))+(((0.08)*cj3*(py*py)))+(((-0.017892)*cj0*px*sj2*sj3))+(((-0.4302)*cj0*py*pz*sj3))+(((-0.0275835)*cj0*px*sj2))+(((-0.00494538)*cj0*cj3*px))+(((0.04)*cj3*pp))+(((-0.12)*px*py*sj2*sj3))+(((-1.0)*cj3*pp*py*sj0))+(((0.37)*px*py*sj2*(cj0*cj0)))+(((-0.0275835)*py*sj0*sj2))+(((-0.2982)*cj0*cj3*sj0*(px*px)))+(((0.8604)*cj2*cj3*px*py*(cj0*cj0)))+(((0.08)*cj3*(cj0*cj0)*(px*px)))+(((-0.2982)*cj0*cj2*py*pz*sj3))+(((0.24)*px*py*sj2*sj3*(cj0*cj0)))+(((0.0025657128)*cj2*cj3))+(((0.185)*cj0*sj0*sj2*(py*py)))+(((-0.025812)*cj3*pz*sj2))+(((-0.0074)*cj0*py*sj2))+(((-0.017208)*cj0*cj2*cj3*py))+(((-0.0048)*cj0*py*sj2*sj3))+(((-0.4302)*cj0*cj2*cj3*sj0*(px*px)))+(((-0.06414282)*cj2*cj3*py*sj0))+(((-0.4302)*cj2*cj3*px*py))+(((-0.08)*cj3*(cj0*cj0)*(py*py)))+(((0.2982)*cj0*cj3*sj0*(py*py)))+(((-0.00494538)*cj3*py*sj0))+(((0.00110334)*sj2)))),IkReal(((((-1.0)*cj0*cj2*pp*px*sj3))+(((-0.017208)*cj0*py*sj3))+(((0.185)*cj0*py*pz*sj2))+(((0.0003578152)*cj2*sj3))+(((-0.06414282)*py*sj0*sj3))+(((-0.06414282)*cj2*cj3*pz))+(((0.8604)*px*py*sj3*(cj0*cj0)))+(((-0.0275835)*pz*sj2))+(((0.2982)*cj0*cj2*sj0*sj3*(py*py)))+(((0.2982)*cj0*cj3*py*pz))+(((-0.0111)*cj0*cj2*px))+(((-0.2982)*cj2*px*py*sj3))+(((-0.00174538)*cj3*pz))+(((-0.011928)*cj0*cj2*py*sj3))+(((-0.01214538)*cj2*py*sj0*sj3))+(((-0.2982)*cj0*cj2*sj0*sj3*(px*px)))+(((-0.2982)*cj3*px*pz*sj0))+(((0.08)*cj3*py*pz*sj0))+(((-0.185)*px*pz*sj0*sj2))+(((0.000444)*cj2))+(((0.4302)*cj0*sj0*sj3*(py*py)))+(((-0.12)*px*pz*sj0*sj2*sj3))+(((0.0025657128)*sj3))+(((-0.4302)*px*py*sj3))+(((-0.4302)*cj2*cj3*px*pz*sj0))+(((-0.4302)*cj0*sj0*sj3*(px*px)))+(((0.5964)*cj2*px*py*sj3*(cj0*cj0)))+(((-0.08)*cj2*sj3*(cj0*cj0)*(py*py)))+(((-0.017892)*pz*sj2*sj3))+(((0.025812)*cj3*py*sj0*sj2))+(((0.011928)*cj2*px*sj0*sj3))+(((0.4302)*cj0*cj2*cj3*py*pz))+(((0.16)*cj0*cj2*px*py*sj0*sj3))+(((0.025812)*cj0*cj3*px*sj2))+(((-1.0)*cj3*pp*pz))+(((0.04)*cj2*pp*sj3))+(((-0.06414282)*cj0*px*sj3))+(((-0.00103248)*cj3*sj2))+(((0.08)*cj0*cj3*px*pz))+(((-0.0111)*cj2*py*sj0))+(((0.08)*cj2*sj3*(cj0*cj0)*(px*px)))+(((-1.0)*cj2*pp*py*sj0*sj3))+(((0.017208)*px*sj0*sj3))+(((0.12)*cj0*py*pz*sj2*sj3))+(((-0.01214538)*cj0*cj2*px*sj3))+(((0.08)*cj2*sj3*(py*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1390.valid){
continue;
}
CheckValue<IkReal> x1391=IKPowWithIntegerCheck(IKsign(((((0.034416)*cj0*cj3*px*sj2))+(((0.4302)*cj3*sj2*(cj0*cj0)*(py*py)))+(((0.12)*cj2*sj3*(cj0*cj0)*(px*px)))+(((-0.4302)*cj3*sj2*(cj0*cj0)*(px*px)))+(((0.000296)*cj2))+(((-0.0148)*cj0*cj2*px))+(((0.185)*cj2*(pz*pz)))+(((-0.0096)*cj2*py*sj0*sj3))+(((-0.00068832)*cj3*sj2))+(((-0.8604)*cj0*cj3*px*py*sj0*sj2))+(((-0.0096)*cj0*cj2*px*sj3))+(((0.185)*cj2*(py*py)))+(((0.37)*cj0*cj2*px*py*sj0))+(((0.12)*cj2*sj3*(pz*pz)))+(((-0.12)*cj2*sj3*(cj0*cj0)*(py*py)))+(((-0.4302)*cj3*sj2*(pz*pz)))+(((-0.185)*cj2*(cj0*cj0)*(py*py)))+(((-0.0148)*cj2*py*sj0))+(((0.000192)*cj2*sj3))+(((-0.4302)*cj3*sj2*(py*py)))+(((0.034416)*cj3*py*sj0*sj2))+(((0.12)*cj2*sj3*(py*py)))+(((0.185)*cj2*(cj0*cj0)*(px*px)))+(((0.24)*cj0*cj2*px*py*sj0*sj3)))),-1);
if(!x1391.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1390.value)+(((1.5707963267949)*(x1391.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x1392=IKsin(j1);
IkReal x1393=IKcos(j1);
IkReal x1394=(cj0*sj2);
IkReal x1395=((1.0)*py);
IkReal x1396=(sj2*sj3);
IkReal x1397=(px*sj0);
IkReal x1398=(cj0*py);
IkReal x1399=((0.4302)*sj2);
IkReal x1400=((0.185)*cj0);
IkReal x1401=(cj2*cj3);
IkReal x1402=((0.4302)*cj2);
IkReal x1403=((0.185)*sj3);
IkReal x1404=(cj0*px);
IkReal x1405=(cj2*sj3);
IkReal x1406=(cj3*sj2);
IkReal x1407=(px*x1392);
IkReal x1408=((0.185)*cj3*py);
IkReal x1409=(sj0*x1392);
IkReal x1410=(sj0*x1393);
IkReal x1411=(pz*x1392);
IkReal x1412=(pz*x1393);
IkReal x1413=(sj3*x1393);
IkReal x1414=(cj3*x1393);
evalcond[0]=((((-1.0)*x1404*x1414))+(((-0.06)*cj3))+((x1392*x1404*x1405))+(((0.1491)*x1396))+((py*x1405*x1409))+(((-0.04)*x1392*x1405))+(((-1.0)*cj3*x1395*x1410))+((x1405*x1412))+((x1396*x1397))+(((0.04)*x1414))+(((-1.0)*sj3*x1394*x1395))+((cj3*x1411)));
evalcond[1]=((-0.00894538)+(((0.08)*x1404))+(((-0.12)*x1393*x1404))+(((-0.017208)*sj2*x1392))+(((0.4302)*x1394*x1407))+(((-1.0)*x1400*x1401*x1407))+(((-0.0275835)*x1406))+(((-0.0111)*sj3))+((x1399*x1412))+(((-0.2982)*x1397))+(((0.0048)*x1393))+(((-0.185)*x1397*x1406))+(((-1.0)*pp))+((x1394*x1408))+(((0.2982)*x1398))+((py*x1399*x1409))+((x1398*x1402))+(((-0.185)*py*x1401*x1409))+(((0.08)*py*sj0))+(((-1.0)*py*x1403*x1410))+(((-1.0)*px*x1400*x1413))+(((-1.0)*x1397*x1402))+(((0.0074)*x1413))+(((-0.06414282)*cj2))+(((0.0074)*x1392*x1401))+(((0.12)*x1411))+(((-0.12)*py*x1410))+((x1403*x1411))+(((-0.185)*x1401*x1412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1415=(cj1*cj3);
IkReal x1416=(cj2*sj1*sj3);
j4eval[0]=(x1416+(((-1.0)*x1415)));
j4eval[1]=IKsign(((((-0.07330969)*x1415))+(((0.07330969)*x1416))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1417=(cj2*sj3);
IkReal x1418=(cj3*sj2);
j4eval[0]=((((-1.54166666666667)*cj2))+(((3.585)*x1418))+(((-1.0)*x1417)));
j4eval[1]=IKsign(((((-0.01356229265)*cj2))+(((0.031537828638)*x1418))+(((-0.0087971628)*x1417))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=((-1.54166666666667)+(((-1.0)*sj3)));
j4eval[1]=IKsign(((-135.6229265)+(((-87.971628)*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1419=((3.66663670246048)*pz);
IkReal x1420=(cj0*px);
IkReal x1421=((3.66663670246048)*sj1);
IkReal x1422=((0.443324750111479)*cj1);
IkReal x1423=((0.443324750111479)*sj1);
IkReal x1424=(py*sj0);
IkReal x1425=((3.66663670246048)*cj1);
if( IKabs(((0.654521250874202)+((x1424*x1425))+((x1420*x1425))+(((-1.0)*pz*x1422))+(((-1.0)*x1423*x1424))+(((-1.0)*x1420*x1423))+(((-0.146665468098419)*cj1))+(((-1.0)*sj1*x1419))+(((0.0177329900044592)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.721086530307249)+((x1420*x1422))+((x1420*x1421))+((x1422*x1424))+(((-1.0)*pz*x1423))+((cj1*x1419))+(((-0.146665468098419)*sj1))+((x1421*x1424))+(((-0.0177329900044592)*cj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.654521250874202)+((x1424*x1425))+((x1420*x1425))+(((-1.0)*pz*x1422))+(((-1.0)*x1423*x1424))+(((-1.0)*x1420*x1423))+(((-0.146665468098419)*cj1))+(((-1.0)*sj1*x1419))+(((0.0177329900044592)*sj1))))+IKsqr(((-0.721086530307249)+((x1420*x1422))+((x1420*x1421))+((x1422*x1424))+(((-1.0)*pz*x1423))+((cj1*x1419))+(((-0.146665468098419)*sj1))+((x1421*x1424))+(((-0.0177329900044592)*cj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.654521250874202)+((x1424*x1425))+((x1420*x1425))+(((-1.0)*pz*x1422))+(((-1.0)*x1423*x1424))+(((-1.0)*x1420*x1423))+(((-0.146665468098419)*cj1))+(((-1.0)*sj1*x1419))+(((0.0177329900044592)*sj1))), ((-0.721086530307249)+((x1420*x1422))+((x1420*x1421))+((x1422*x1424))+(((-1.0)*pz*x1423))+((cj1*x1419))+(((-0.146665468098419)*sj1))+((x1421*x1424))+(((-0.0177329900044592)*cj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1426=IKcos(j4);
IkReal x1427=IKsin(j4);
IkReal x1428=((0.2688)*cj1);
IkReal x1429=((1.0)*pz);
IkReal x1430=(cj0*px);
IkReal x1431=(py*sj0);
IkReal x1432=((1.0)*sj1);
IkReal x1433=((0.2688)*x1427);
IkReal x1434=((0.0325)*x1426);
IkReal x1435=((0.2688)*x1426);
IkReal x1436=((0.0325)*x1427);
evalcond[0]=((0.1525)+(((-0.04)*cj1))+(((-1.0)*x1434))+(((-1.0)*x1433))+(((-1.0)*sj1*x1429))+((cj1*x1431))+((cj1*x1430)));
evalcond[1]=((0.2151)+(((-1.0)*x1436))+(((-1.0)*x1431*x1432))+x1435+(((0.04)*sj1))+(((-1.0)*x1430*x1432))+(((-1.0)*cj1*x1429)));
evalcond[2]=((0.11900314)+(((-0.2982)*px*sj0))+(((0.10572526)*x1426))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.08)*x1431))+(((0.08)*x1430))+(((-0.0959655)*x1427)));
evalcond[3]=((((-1.0)*x1426*x1428))+((sj1*x1433))+((sj1*x1434))+pz+(((-0.1525)*sj1))+(((-0.2151)*cj1))+((cj1*x1436)));
evalcond[4]=((0.04)+(((-1.0)*x1431))+(((-1.0)*x1430))+((sj1*x1435))+(((-0.1525)*cj1))+(((0.2151)*sj1))+(((-1.0)*sj1*x1436))+((x1427*x1428))+((cj1*x1434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1437=((3.66663670246048)*pz);
IkReal x1438=(cj0*px);
IkReal x1439=((3.66663670246048)*sj1);
IkReal x1440=((0.443324750111479)*cj1);
IkReal x1441=((0.443324750111479)*sj1);
IkReal x1442=(py*sj0);
IkReal x1443=((3.66663670246048)*cj1);
if( IKabs(((0.214524846578945)+(((-1.0)*x1438*x1443))+(((-1.0)*x1438*x1441))+(((-1.0)*x1441*x1442))+(((0.146665468098419)*cj1))+(((-1.0)*pz*x1440))+((sj1*x1437))+(((-1.0)*x1442*x1443))+(((0.0177329900044592)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.774285500320626)+(((0.0177329900044592)*cj1))+((x1439*x1442))+(((-1.0)*x1438*x1440))+((x1438*x1439))+((pz*x1441))+(((-0.146665468098419)*sj1))+(((-1.0)*x1440*x1442))+((cj1*x1437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.214524846578945)+(((-1.0)*x1438*x1443))+(((-1.0)*x1438*x1441))+(((-1.0)*x1441*x1442))+(((0.146665468098419)*cj1))+(((-1.0)*pz*x1440))+((sj1*x1437))+(((-1.0)*x1442*x1443))+(((0.0177329900044592)*sj1))))+IKsqr(((-0.774285500320626)+(((0.0177329900044592)*cj1))+((x1439*x1442))+(((-1.0)*x1438*x1440))+((x1438*x1439))+((pz*x1441))+(((-0.146665468098419)*sj1))+(((-1.0)*x1440*x1442))+((cj1*x1437))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.214524846578945)+(((-1.0)*x1438*x1443))+(((-1.0)*x1438*x1441))+(((-1.0)*x1441*x1442))+(((0.146665468098419)*cj1))+(((-1.0)*pz*x1440))+((sj1*x1437))+(((-1.0)*x1442*x1443))+(((0.0177329900044592)*sj1))), ((-0.774285500320626)+(((0.0177329900044592)*cj1))+((x1439*x1442))+(((-1.0)*x1438*x1440))+((x1438*x1439))+((pz*x1441))+(((-0.146665468098419)*sj1))+(((-1.0)*x1440*x1442))+((cj1*x1437))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1444=IKcos(j4);
IkReal x1445=IKsin(j4);
IkReal x1446=((0.0325)*cj1);
IkReal x1447=((1.0)*cj1);
IkReal x1448=(py*sj0);
IkReal x1449=((1.0)*cj0*px);
IkReal x1450=((0.2688)*x1445);
IkReal x1451=((0.0325)*x1444);
IkReal x1452=((0.2688)*x1444);
IkReal x1453=((0.0325)*x1445);
evalcond[0]=((0.0325)+(((0.04)*cj1))+(((-1.0)*x1450))+(((-1.0)*x1451))+(((-1.0)*x1447*x1448))+((pz*sj1))+(((-1.0)*cj0*px*x1447)));
evalcond[1]=((0.2151)+(((-1.0)*sj1*x1448))+(((-1.0)*x1453))+(((-1.0)*sj1*x1449))+(((-1.0)*pz*x1447))+x1452+(((0.04)*sj1)));
evalcond[2]=((0.09680314)+(((0.11352526)*x1444))+(((-0.2982)*px*sj0))+(((-0.0314535)*x1445))+(((0.08)*x1448))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.08)*cj0*px)));
evalcond[3]=(((x1445*x1446))+(((0.0325)*sj1))+(((-1.0)*cj1*x1452))+pz+(((-0.2151)*cj1))+(((-1.0)*sj1*x1450))+(((-1.0)*sj1*x1451)));
evalcond[4]=((0.04)+(((-1.0)*x1448))+(((-1.0)*cj1*x1450))+x1446+((sj1*x1452))+(((-1.0)*x1449))+(((-1.0)*sj1*x1453))+(((-1.0)*x1444*x1446))+(((0.2151)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1454=((0.443324750111479)*cj0);
IkReal x1455=(pz*sj3);
IkReal x1456=(cj3*py);
IkReal x1457=((3.66663670246048)*cj0);
IkReal x1458=((0.443324750111479)*sj0);
IkReal x1459=(cj3*px);
IkReal x1460=((3.66663670246048)*sj0);
if( IKabs(((0.452256038731033)+(((0.219998202147629)*sj3))+(((0.546695532336858)*cj3))+(((-1.0)*px*x1454))+((x1459*x1460))+(((-1.0)*py*x1458))+(((-1.0)*x1456*x1457))+(((-3.66663670246048)*x1455)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.894351483412356)+((py*x1460))+((px*x1457))+(((-1.0)*x1454*x1456))+((x1458*x1459))+(((0.0660997202416215)*cj3))+(((-0.443324750111479)*x1455))+(((0.0265994850066887)*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.452256038731033)+(((0.219998202147629)*sj3))+(((0.546695532336858)*cj3))+(((-1.0)*px*x1454))+((x1459*x1460))+(((-1.0)*py*x1458))+(((-1.0)*x1456*x1457))+(((-3.66663670246048)*x1455))))+IKsqr(((-0.894351483412356)+((py*x1460))+((px*x1457))+(((-1.0)*x1454*x1456))+((x1458*x1459))+(((0.0660997202416215)*cj3))+(((-0.443324750111479)*x1455))+(((0.0265994850066887)*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.452256038731033)+(((0.219998202147629)*sj3))+(((0.546695532336858)*cj3))+(((-1.0)*px*x1454))+((x1459*x1460))+(((-1.0)*py*x1458))+(((-1.0)*x1456*x1457))+(((-3.66663670246048)*x1455))), ((-0.894351483412356)+((py*x1460))+((px*x1457))+(((-1.0)*x1454*x1456))+((x1458*x1459))+(((0.0660997202416215)*cj3))+(((-0.443324750111479)*x1455))+(((0.0265994850066887)*sj3))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1461=IKcos(j4);
IkReal x1462=IKsin(j4);
IkReal x1463=(cj0*py);
IkReal x1464=(px*sj0);
IkReal x1465=(py*sj0);
IkReal x1466=(cj0*px);
IkReal x1467=((0.0325)*x1461);
IkReal x1468=(sj3*x1462);
IkReal x1469=((0.2688)*x1462);
evalcond[0]=((-0.06)+((sj3*x1467))+(((-0.0925)*sj3))+pz+(((0.2688)*x1468)));
evalcond[1]=((0.2551)+(((-0.0325)*x1462))+(((0.2688)*x1461))+(((-1.0)*x1466))+(((-1.0)*x1465)));
evalcond[2]=((0.1491)+(((-1.0)*cj3*x1467))+(((-1.0)*cj3*x1469))+x1464+(((-1.0)*x1463))+(((0.0925)*cj3)));
evalcond[3]=((0.0925)+((cj3*x1464))+(((0.06)*sj3))+(((-1.0)*x1469))+(((-1.0)*x1467))+(((0.1491)*cj3))+(((-1.0)*pz*sj3))+(((-1.0)*cj3*x1463)));
evalcond[4]=((0.10790314)+(((0.2982)*x1463))+(((-0.2982)*x1464))+(((-0.0637095)*x1462))+(((-0.0039)*sj3*x1461))+(((0.10962526)*x1461))+(((-1.0)*pp))+(((-0.032256)*x1468))+(((0.08)*x1466))+(((0.08)*x1465))+(((0.0111)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1470=((0.443324750111479)*cj0);
IkReal x1471=(pz*sj3);
IkReal x1472=(cj3*py);
IkReal x1473=((3.66663670246048)*cj0);
IkReal x1474=((0.443324750111479)*sj0);
IkReal x1475=(cj3*px);
IkReal x1476=((3.66663670246048)*sj0);
if( IKabs(((0.416790058722114)+(((0.219998202147629)*sj3))+(((3.66663670246048)*x1471))+(((0.546695532336858)*cj3))+((py*x1474))+((px*x1470))+(((-1.0)*x1472*x1473))+((x1475*x1476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.601020547215518)+(((-1.0)*x1470*x1472))+(((0.443324750111479)*x1471))+(((-1.0)*px*x1473))+((x1474*x1475))+(((0.0660997202416215)*cj3))+(((0.0265994850066887)*sj3))+(((-1.0)*py*x1476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.416790058722114)+(((0.219998202147629)*sj3))+(((3.66663670246048)*x1471))+(((0.546695532336858)*cj3))+((py*x1474))+((px*x1470))+(((-1.0)*x1472*x1473))+((x1475*x1476))))+IKsqr(((-0.601020547215518)+(((-1.0)*x1470*x1472))+(((0.443324750111479)*x1471))+(((-1.0)*px*x1473))+((x1474*x1475))+(((0.0660997202416215)*cj3))+(((0.0265994850066887)*sj3))+(((-1.0)*py*x1476))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.416790058722114)+(((0.219998202147629)*sj3))+(((3.66663670246048)*x1471))+(((0.546695532336858)*cj3))+((py*x1474))+((px*x1470))+(((-1.0)*x1472*x1473))+((x1475*x1476))), ((-0.601020547215518)+(((-1.0)*x1470*x1472))+(((0.443324750111479)*x1471))+(((-1.0)*px*x1473))+((x1474*x1475))+(((0.0660997202416215)*cj3))+(((0.0265994850066887)*sj3))+(((-1.0)*py*x1476))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1477=IKsin(j4);
IkReal x1478=IKcos(j4);
IkReal x1479=(cj0*py);
IkReal x1480=(px*sj0);
IkReal x1481=(py*sj0);
IkReal x1482=(cj0*px);
IkReal x1483=((0.0325)*x1478);
IkReal x1484=(sj3*x1477);
IkReal x1485=((0.2688)*x1477);
evalcond[0]=((0.1751)+(((-0.0325)*x1477))+(((0.2688)*x1478))+x1482+x1481);
evalcond[1]=((0.06)+(((-0.2688)*x1484))+pz+(((-1.0)*sj3*x1483))+(((0.0925)*sj3)));
evalcond[2]=((0.1491)+(((-1.0)*cj3*x1483))+(((-1.0)*cj3*x1485))+(((-1.0)*x1479))+x1480+(((0.0925)*cj3)));
evalcond[3]=((0.0925)+((cj3*x1480))+(((-1.0)*x1485))+(((-1.0)*x1483))+(((0.06)*sj3))+(((-1.0)*cj3*x1479))+(((0.1491)*cj3))+((pz*sj3)));
evalcond[4]=((0.10790314)+(((-0.2982)*x1480))+(((-0.032256)*x1484))+(((0.08)*x1481))+(((0.08)*x1482))+(((-1.0)*pp))+(((0.2982)*x1479))+(((-0.0039)*sj3*x1478))+(((0.10962526)*x1478))+(((-0.0637095)*x1477))+(((0.0111)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1486=((3.66663670246048)*pz);
IkReal x1487=(cj0*px);
IkReal x1488=((3.66663670246048)*sj1);
IkReal x1489=((0.443324750111479)*cj1);
IkReal x1490=((0.443324750111479)*sj1);
IkReal x1491=(py*sj0);
IkReal x1492=((3.66663670246048)*cj1);
if( IKabs(((0.654521250874202)+(((-0.0177329900044592)*sj1))+((pz*x1489))+((x1487*x1492))+((x1487*x1490))+(((-0.146665468098419)*cj1))+((x1491*x1492))+(((-1.0)*sj1*x1486))+((x1490*x1491)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.721086530307249)+(((-1.0)*x1487*x1488))+((x1489*x1491))+((x1487*x1489))+(((-1.0)*cj1*x1486))+(((0.146665468098419)*sj1))+(((-1.0)*x1488*x1491))+(((-1.0)*pz*x1490))+(((-0.0177329900044592)*cj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.654521250874202)+(((-0.0177329900044592)*sj1))+((pz*x1489))+((x1487*x1492))+((x1487*x1490))+(((-0.146665468098419)*cj1))+((x1491*x1492))+(((-1.0)*sj1*x1486))+((x1490*x1491))))+IKsqr(((-0.721086530307249)+(((-1.0)*x1487*x1488))+((x1489*x1491))+((x1487*x1489))+(((-1.0)*cj1*x1486))+(((0.146665468098419)*sj1))+(((-1.0)*x1488*x1491))+(((-1.0)*pz*x1490))+(((-0.0177329900044592)*cj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.654521250874202)+(((-0.0177329900044592)*sj1))+((pz*x1489))+((x1487*x1492))+((x1487*x1490))+(((-0.146665468098419)*cj1))+((x1491*x1492))+(((-1.0)*sj1*x1486))+((x1490*x1491))), ((-0.721086530307249)+(((-1.0)*x1487*x1488))+((x1489*x1491))+((x1487*x1489))+(((-1.0)*cj1*x1486))+(((0.146665468098419)*sj1))+(((-1.0)*x1488*x1491))+(((-1.0)*pz*x1490))+(((-0.0177329900044592)*cj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1493=IKsin(j4);
IkReal x1494=IKcos(j4);
IkReal x1495=(cj0*px);
IkReal x1496=(py*sj0);
IkReal x1497=(sj1*x1494);
IkReal x1498=((0.2688)*x1493);
IkReal x1499=((0.0325)*x1494);
IkReal x1500=((0.0325)*x1493);
IkReal x1501=((0.2688)*x1494);
evalcond[0]=((0.2151)+(((-1.0)*x1500))+((sj1*x1496))+((sj1*x1495))+((cj1*pz))+x1501+(((-0.04)*sj1)));
evalcond[1]=((0.1525)+((cj1*x1495))+((cj1*x1496))+(((-1.0)*x1499))+(((-1.0)*x1498))+(((-0.04)*cj1))+(((-1.0)*pz*sj1)));
evalcond[2]=((0.11900314)+(((-0.2982)*px*sj0))+(((0.10572526)*x1494))+(((0.08)*x1496))+(((0.08)*x1495))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.0959655)*x1493)));
evalcond[3]=((((0.0325)*x1497))+(((-1.0)*cj1*x1500))+((sj1*x1498))+((cj1*x1501))+pz+(((-0.1525)*sj1))+(((0.2151)*cj1)));
evalcond[4]=((0.04)+((cj1*x1498))+((cj1*x1499))+(((-1.0)*x1495))+(((-1.0)*x1496))+((sj1*x1500))+(((-0.2688)*x1497))+(((-0.1525)*cj1))+(((-0.2151)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1502=((3.66663670246048)*pz);
IkReal x1503=(cj0*px);
IkReal x1504=((3.66663670246048)*sj1);
IkReal x1505=((0.443324750111479)*cj1);
IkReal x1506=((0.443324750111479)*sj1);
IkReal x1507=(py*sj0);
IkReal x1508=((3.66663670246048)*cj1);
if( IKabs(((0.214524846578945)+(((-0.0177329900044592)*sj1))+(((-1.0)*x1507*x1508))+((x1506*x1507))+(((0.146665468098419)*cj1))+((sj1*x1502))+((pz*x1505))+((x1503*x1506))+(((-1.0)*x1503*x1508)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.774285500320626)+(((0.0177329900044592)*cj1))+(((-1.0)*cj1*x1502))+(((-1.0)*x1504*x1507))+(((0.146665468098419)*sj1))+((pz*x1506))+(((-1.0)*x1503*x1505))+(((-1.0)*x1503*x1504))+(((-1.0)*x1505*x1507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.214524846578945)+(((-0.0177329900044592)*sj1))+(((-1.0)*x1507*x1508))+((x1506*x1507))+(((0.146665468098419)*cj1))+((sj1*x1502))+((pz*x1505))+((x1503*x1506))+(((-1.0)*x1503*x1508))))+IKsqr(((-0.774285500320626)+(((0.0177329900044592)*cj1))+(((-1.0)*cj1*x1502))+(((-1.0)*x1504*x1507))+(((0.146665468098419)*sj1))+((pz*x1506))+(((-1.0)*x1503*x1505))+(((-1.0)*x1503*x1504))+(((-1.0)*x1505*x1507))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.214524846578945)+(((-0.0177329900044592)*sj1))+(((-1.0)*x1507*x1508))+((x1506*x1507))+(((0.146665468098419)*cj1))+((sj1*x1502))+((pz*x1505))+((x1503*x1506))+(((-1.0)*x1503*x1508))), ((-0.774285500320626)+(((0.0177329900044592)*cj1))+(((-1.0)*cj1*x1502))+(((-1.0)*x1504*x1507))+(((0.146665468098419)*sj1))+((pz*x1506))+(((-1.0)*x1503*x1505))+(((-1.0)*x1503*x1504))+(((-1.0)*x1505*x1507))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1509=IKsin(j4);
IkReal x1510=IKcos(j4);
IkReal x1511=(cj0*px);
IkReal x1512=(py*sj0);
IkReal x1513=((0.0325)*cj1);
IkReal x1514=((1.0)*cj1);
IkReal x1515=((0.2688)*x1509);
IkReal x1516=((0.0325)*x1510);
IkReal x1517=((0.0325)*x1509);
IkReal x1518=((0.2688)*x1510);
evalcond[0]=((0.2151)+(((-1.0)*x1517))+((cj1*pz))+((sj1*x1512))+((sj1*x1511))+x1518+(((-0.04)*sj1)));
evalcond[1]=((0.0325)+(((-1.0)*x1515))+(((-1.0)*x1516))+(((0.04)*cj1))+(((-1.0)*x1512*x1514))+((pz*sj1))+(((-1.0)*x1511*x1514)));
evalcond[2]=((0.09680314)+(((-0.2982)*px*sj0))+(((-0.0314535)*x1509))+(((0.11352526)*x1510))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.08)*x1512))+(((0.08)*x1511)));
evalcond[3]=((((0.0325)*sj1))+((cj1*x1518))+pz+(((0.2151)*cj1))+(((-1.0)*x1509*x1513))+(((-1.0)*sj1*x1515))+(((-1.0)*sj1*x1516)));
evalcond[4]=((0.04)+(((-1.0)*cj1*x1515))+(((-1.0)*x1512))+(((-1.0)*x1511))+(((-1.0)*x1510*x1513))+((sj1*x1517))+x1513+(((-0.2151)*sj1))+(((-1.0)*sj1*x1518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1519=((0.443324750111479)*cj0);
IkReal x1520=(pz*sj3);
IkReal x1521=(cj3*py);
IkReal x1522=((3.66663670246048)*cj0);
IkReal x1523=((0.443324750111479)*sj0);
IkReal x1524=(cj3*px);
IkReal x1525=((3.66663670246048)*sj0);
if( IKabs(((0.416790058722114)+(((0.219998202147629)*sj3))+(((-1.0)*x1524*x1525))+(((-0.546695532336858)*cj3))+(((-3.66663670246048)*x1520))+((x1521*x1522))+((px*x1519))+((py*x1523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.601020547215518)+((x1519*x1521))+(((-0.0660997202416215)*cj3))+(((0.0265994850066887)*sj3))+(((-1.0)*px*x1522))+(((-1.0)*x1523*x1524))+(((-0.443324750111479)*x1520))+(((-1.0)*py*x1525)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.416790058722114)+(((0.219998202147629)*sj3))+(((-1.0)*x1524*x1525))+(((-0.546695532336858)*cj3))+(((-3.66663670246048)*x1520))+((x1521*x1522))+((px*x1519))+((py*x1523))))+IKsqr(((-0.601020547215518)+((x1519*x1521))+(((-0.0660997202416215)*cj3))+(((0.0265994850066887)*sj3))+(((-1.0)*px*x1522))+(((-1.0)*x1523*x1524))+(((-0.443324750111479)*x1520))+(((-1.0)*py*x1525))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.416790058722114)+(((0.219998202147629)*sj3))+(((-1.0)*x1524*x1525))+(((-0.546695532336858)*cj3))+(((-3.66663670246048)*x1520))+((x1521*x1522))+((px*x1519))+((py*x1523))), ((-0.601020547215518)+((x1519*x1521))+(((-0.0660997202416215)*cj3))+(((0.0265994850066887)*sj3))+(((-1.0)*px*x1522))+(((-1.0)*x1523*x1524))+(((-0.443324750111479)*x1520))+(((-1.0)*py*x1525))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1526=IKsin(j4);
IkReal x1527=IKcos(j4);
IkReal x1528=(px*sj0);
IkReal x1529=(cj0*py);
IkReal x1530=(py*sj0);
IkReal x1531=(cj0*px);
IkReal x1532=((0.0325)*x1527);
IkReal x1533=((0.2688)*x1526);
evalcond[0]=((0.1751)+(((0.2688)*x1527))+x1531+x1530+(((-0.0325)*x1526)));
evalcond[1]=((-0.06)+((sj3*x1533))+((sj3*x1532))+(((-0.0925)*sj3))+pz);
evalcond[2]=((0.1491)+(((-0.0925)*cj3))+((cj3*x1533))+((cj3*x1532))+x1528+(((-1.0)*x1529)));
evalcond[3]=((0.0925)+(((-0.1491)*cj3))+(((0.06)*sj3))+(((-1.0)*x1532))+(((-1.0)*x1533))+(((-1.0)*cj3*x1528))+((cj3*x1529))+(((-1.0)*pz*sj3)));
evalcond[4]=((0.10790314)+(((-0.0637095)*x1526))+(((0.08)*x1530))+(((0.08)*x1531))+(((0.2982)*x1529))+(((-1.0)*pp))+(((0.10962526)*x1527))+(((-0.2982)*x1528))+(((-0.0039)*sj3*x1527))+(((0.0111)*sj3))+(((-0.032256)*sj3*x1526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1534=((0.443324750111479)*cj0);
IkReal x1535=(pz*sj3);
IkReal x1536=(cj3*py);
IkReal x1537=((3.66663670246048)*cj0);
IkReal x1538=((0.443324750111479)*sj0);
IkReal x1539=(cj3*px);
IkReal x1540=((3.66663670246048)*sj0);
if( IKabs(((0.452256038731033)+(((0.219998202147629)*sj3))+(((3.66663670246048)*x1535))+((x1536*x1537))+(((-0.546695532336858)*cj3))+(((-1.0)*px*x1534))+(((-1.0)*x1539*x1540))+(((-1.0)*py*x1538)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.894351483412356)+(((0.443324750111479)*x1535))+(((-0.0660997202416215)*cj3))+(((0.0265994850066887)*sj3))+((px*x1537))+((py*x1540))+(((-1.0)*x1538*x1539))+((x1534*x1536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.452256038731033)+(((0.219998202147629)*sj3))+(((3.66663670246048)*x1535))+((x1536*x1537))+(((-0.546695532336858)*cj3))+(((-1.0)*px*x1534))+(((-1.0)*x1539*x1540))+(((-1.0)*py*x1538))))+IKsqr(((-0.894351483412356)+(((0.443324750111479)*x1535))+(((-0.0660997202416215)*cj3))+(((0.0265994850066887)*sj3))+((px*x1537))+((py*x1540))+(((-1.0)*x1538*x1539))+((x1534*x1536))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.452256038731033)+(((0.219998202147629)*sj3))+(((3.66663670246048)*x1535))+((x1536*x1537))+(((-0.546695532336858)*cj3))+(((-1.0)*px*x1534))+(((-1.0)*x1539*x1540))+(((-1.0)*py*x1538))), ((-0.894351483412356)+(((0.443324750111479)*x1535))+(((-0.0660997202416215)*cj3))+(((0.0265994850066887)*sj3))+((px*x1537))+((py*x1540))+(((-1.0)*x1538*x1539))+((x1534*x1536))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1541=IKcos(j4);
IkReal x1542=IKsin(j4);
IkReal x1543=(px*sj0);
IkReal x1544=(cj0*py);
IkReal x1545=(py*sj0);
IkReal x1546=(cj0*px);
IkReal x1547=((0.0325)*x1541);
IkReal x1548=((0.2688)*x1542);
evalcond[0]=((0.06)+(((-1.0)*sj3*x1548))+(((-1.0)*sj3*x1547))+pz+(((0.0925)*sj3)));
evalcond[1]=((0.2551)+(((-1.0)*x1545))+(((-1.0)*x1546))+(((-0.0325)*x1542))+(((0.2688)*x1541)));
evalcond[2]=((0.1491)+(((-1.0)*x1544))+(((-0.0925)*cj3))+((cj3*x1547))+((cj3*x1548))+x1543);
evalcond[3]=((0.0925)+(((-0.1491)*cj3))+(((0.06)*sj3))+((cj3*x1544))+(((-1.0)*cj3*x1543))+((pz*sj3))+(((-1.0)*x1547))+(((-1.0)*x1548)));
evalcond[4]=((0.10790314)+(((-0.2982)*x1543))+(((0.2982)*x1544))+(((-0.0637095)*x1542))+(((-0.0039)*sj3*x1541))+(((-0.032256)*sj3*x1542))+(((0.10962526)*x1541))+(((-1.0)*pp))+(((0.0111)*sj3))+(((0.08)*x1545))+(((0.08)*x1546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1549=(cj0*px);
IkReal x1550=(py*sj0);
IkReal x1551=(px*sj0);
IkReal x1552=((3.47599263279376)*sj2);
IkReal x1553=((2.02009785553963)*cj2);
IkReal x1554=((3.47599263279376)*cj2);
IkReal x1555=(cj0*py);
IkReal x1556=((2.02009785553963)*sj2);
if( IKabs(((0.432724419827574)+((x1551*x1552))+(((-1.03050848468498)*pp))+(((-1.0)*x1552*x1555))+((x1550*x1554))+(((-0.13903970531175)*cj2))+(((0.0824406787747985)*x1549))+((x1549*x1554))+(((-0.307297630133062)*x1551))+(((0.518270501549549)*sj2))+(((0.307297630133062)*x1555))+(((0.0824406787747985)*x1550)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.73280997075852)+((x1551*x1556))+(((2.54158778399283)*x1551))+((x1550*x1553))+(((-1.0)*x1555*x1556))+(((-0.681847829374334)*x1550))+((x1549*x1553))+(((-2.54158778399283)*x1555))+(((-0.080803914221585)*cj2))+(((-0.681847829374334)*x1549))+(((0.301196590260958)*sj2))+(((8.52309786717917)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.432724419827574)+((x1551*x1552))+(((-1.03050848468498)*pp))+(((-1.0)*x1552*x1555))+((x1550*x1554))+(((-0.13903970531175)*cj2))+(((0.0824406787747985)*x1549))+((x1549*x1554))+(((-0.307297630133062)*x1551))+(((0.518270501549549)*sj2))+(((0.307297630133062)*x1555))+(((0.0824406787747985)*x1550))))+IKsqr(((-0.73280997075852)+((x1551*x1556))+(((2.54158778399283)*x1551))+((x1550*x1553))+(((-1.0)*x1555*x1556))+(((-0.681847829374334)*x1550))+((x1549*x1553))+(((-2.54158778399283)*x1555))+(((-0.080803914221585)*cj2))+(((-0.681847829374334)*x1549))+(((0.301196590260958)*sj2))+(((8.52309786717917)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.432724419827574)+((x1551*x1552))+(((-1.03050848468498)*pp))+(((-1.0)*x1552*x1555))+((x1550*x1554))+(((-0.13903970531175)*cj2))+(((0.0824406787747985)*x1549))+((x1549*x1554))+(((-0.307297630133062)*x1551))+(((0.518270501549549)*sj2))+(((0.307297630133062)*x1555))+(((0.0824406787747985)*x1550))), ((-0.73280997075852)+((x1551*x1556))+(((2.54158778399283)*x1551))+((x1550*x1553))+(((-1.0)*x1555*x1556))+(((-0.681847829374334)*x1550))+((x1549*x1553))+(((-2.54158778399283)*x1555))+(((-0.080803914221585)*cj2))+(((-0.681847829374334)*x1549))+(((0.301196590260958)*sj2))+(((8.52309786717917)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1557=IKsin(j4);
IkReal x1558=IKcos(j4);
IkReal x1559=(sj0*sj2);
IkReal x1560=((1.0)*py);
IkReal x1561=(px*sj0);
IkReal x1562=(cj0*cj2);
IkReal x1563=(py*sj0);
IkReal x1564=(cj2*x1558);
IkReal x1565=((0.2688)*x1557);
IkReal x1566=((0.2688)*x1558);
IkReal x1567=((0.0325)*x1558);
IkReal x1568=((0.0325)*x1557);
IkReal x1569=((1.0)*cj0*px);
evalcond[0]=((0.10790314)+(((-0.2982)*x1561))+(((-0.0637095)*x1557))+(((0.10962526)*x1558))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.08)*cj0*px))+(((0.08)*x1563)));
evalcond[1]=((0.0925)+(((-1.0)*cj0*sj2*x1560))+(((-0.04)*cj2))+((cj2*x1563))+((px*x1562))+(((0.1491)*sj2))+((px*x1559))+(((-1.0)*x1567))+(((-1.0)*x1565)));
evalcond[2]=((0.2151)+(((-1.0)*sj2*x1569))+(((-1.0)*x1559*x1560))+(((0.1491)*cj2))+(((-1.0)*x1560*x1562))+((cj2*x1561))+x1566+(((0.04)*sj2))+(((-1.0)*x1568)));
evalcond[3]=((0.1491)+(((-1.0)*sj2*x1565))+(((-1.0)*sj2*x1567))+(((-1.0)*cj0*x1560))+(((0.2688)*x1564))+x1561+(((0.2151)*cj2))+(((0.0925)*sj2))+(((-1.0)*cj2*x1568)));
evalcond[4]=((0.04)+(((-1.0)*sj2*x1568))+(((-0.0925)*cj2))+((cj2*x1565))+(((0.0325)*x1564))+(((-1.0)*sj0*x1560))+(((-1.0)*x1569))+(((0.2151)*sj2))+((sj2*x1566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1570=((4.69754647271971)*cj2);
IkReal x1571=(cj0*py);
IkReal x1572=(px*sj0);
IkReal x1573=(cj0*px);
IkReal x1574=(py*sj0);
IkReal x1575=((8.08309205744797)*cj2);
IkReal x1576=(sj2*x1574);
if( IKabs(((0.399930214306355)+((x1571*x1575))+(((-19.8196578511377)*pp))+(((-1.0)*x1572*x1575))+(((-8.08309205744797)*sj2*x1573))+(((-8.08309205744797)*x1576))+(((5.91022197120927)*x1571))+(((-1.20518902576549)*cj2))+(((-5.91022197120927)*x1572))+(((0.323323682297919)*sj2))+(((1.58557262809102)*x1573))+(((1.58557262809102)*x1574)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.751868556677989)+(((0.714591570179692)*x1571))+(((0.187901858908789)*sj2))+(((-4.69754647271971)*x1576))+(((0.191708000048207)*x1574))+(((0.191708000048207)*x1573))+((x1570*x1571))+(((-1.0)*x1570*x1572))+(((-4.69754647271971)*sj2*x1573))+(((-0.700404179082509)*cj2))+(((-0.714591570179692)*x1572))+(((-2.39635000060259)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.399930214306355)+((x1571*x1575))+(((-19.8196578511377)*pp))+(((-1.0)*x1572*x1575))+(((-8.08309205744797)*sj2*x1573))+(((-8.08309205744797)*x1576))+(((5.91022197120927)*x1571))+(((-1.20518902576549)*cj2))+(((-5.91022197120927)*x1572))+(((0.323323682297919)*sj2))+(((1.58557262809102)*x1573))+(((1.58557262809102)*x1574))))+IKsqr(((-0.751868556677989)+(((0.714591570179692)*x1571))+(((0.187901858908789)*sj2))+(((-4.69754647271971)*x1576))+(((0.191708000048207)*x1574))+(((0.191708000048207)*x1573))+((x1570*x1571))+(((-1.0)*x1570*x1572))+(((-4.69754647271971)*sj2*x1573))+(((-0.700404179082509)*cj2))+(((-0.714591570179692)*x1572))+(((-2.39635000060259)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.399930214306355)+((x1571*x1575))+(((-19.8196578511377)*pp))+(((-1.0)*x1572*x1575))+(((-8.08309205744797)*sj2*x1573))+(((-8.08309205744797)*x1576))+(((5.91022197120927)*x1571))+(((-1.20518902576549)*cj2))+(((-5.91022197120927)*x1572))+(((0.323323682297919)*sj2))+(((1.58557262809102)*x1573))+(((1.58557262809102)*x1574))), ((-0.751868556677989)+(((0.714591570179692)*x1571))+(((0.187901858908789)*sj2))+(((-4.69754647271971)*x1576))+(((0.191708000048207)*x1574))+(((0.191708000048207)*x1573))+((x1570*x1571))+(((-1.0)*x1570*x1572))+(((-4.69754647271971)*sj2*x1573))+(((-0.700404179082509)*cj2))+(((-0.714591570179692)*x1572))+(((-2.39635000060259)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1577=IKcos(j4);
IkReal x1578=IKsin(j4);
IkReal x1579=(px*sj2);
IkReal x1580=((1.0)*cj2);
IkReal x1581=(py*sj0);
IkReal x1582=(cj0*px);
IkReal x1583=(cj0*py);
IkReal x1584=(px*sj0);
IkReal x1585=(cj2*x1577);
IkReal x1586=((0.2688)*x1578);
IkReal x1587=((0.2688)*x1577);
IkReal x1588=((0.0325)*x1577);
IkReal x1589=((0.0325)*x1578);
evalcond[0]=((0.10790314)+(((0.2982)*x1583))+(((-0.0637095)*x1578))+(((0.10962526)*x1577))+(((-1.0)*pp))+(((0.08)*x1582))+(((0.08)*x1581))+(((-0.2982)*x1584)));
evalcond[1]=((0.2151)+(((-1.0)*x1589))+((sj2*x1581))+(((-1.0)*x1580*x1583))+(((0.1491)*cj2))+x1587+((cj0*x1579))+((cj2*x1584))+(((-0.04)*sj2)));
evalcond[2]=((0.0925)+(((-1.0)*x1588))+(((-1.0)*x1586))+(((-1.0)*x1580*x1581))+(((-1.0)*x1580*x1582))+(((0.04)*cj2))+((sj0*x1579))+(((0.1491)*sj2))+(((-1.0)*sj2*x1583)));
evalcond[3]=((0.1491)+(((-1.0)*cj2*x1589))+x1584+(((0.2688)*x1585))+(((0.2151)*cj2))+(((0.0925)*sj2))+(((-1.0)*x1583))+(((-1.0)*sj2*x1586))+(((-1.0)*sj2*x1588)));
evalcond[4]=((0.04)+((sj2*x1589))+(((-1.0)*cj2*x1586))+(((-0.0325)*x1585))+(((-1.0)*x1581))+(((-1.0)*x1582))+(((-1.0)*sj2*x1587))+(((-0.2151)*sj2))+(((0.0925)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1590=((0.443324750111479)*cj0);
IkReal x1591=(cj2*py);
IkReal x1592=((3.66663670246048)*cj0);
IkReal x1593=(pz*sj2);
IkReal x1594=(py*sj0);
IkReal x1595=(cj2*px*sj0);
if( IKabs(((0.507855782775783)+(((3.66663670246048)*x1594))+(((-0.443324750111479)*x1593))+(((0.0660997202416215)*cj2))+(((-1.0)*x1590*x1591))+((px*x1592))+(((0.443324750111479)*x1595)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.738819520311708)+(((3.66663670246048)*x1593))+(((-3.66663670246048)*x1595))+(((-0.546695532336858)*cj2))+((x1591*x1592))+((px*x1590))+(((0.443324750111479)*x1594)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.507855782775783)+(((3.66663670246048)*x1594))+(((-0.443324750111479)*x1593))+(((0.0660997202416215)*cj2))+(((-1.0)*x1590*x1591))+((px*x1592))+(((0.443324750111479)*x1595))))+IKsqr(((-0.738819520311708)+(((3.66663670246048)*x1593))+(((-3.66663670246048)*x1595))+(((-0.546695532336858)*cj2))+((x1591*x1592))+((px*x1590))+(((0.443324750111479)*x1594))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.507855782775783)+(((3.66663670246048)*x1594))+(((-0.443324750111479)*x1593))+(((0.0660997202416215)*cj2))+(((-1.0)*x1590*x1591))+((px*x1592))+(((0.443324750111479)*x1595))), ((-0.738819520311708)+(((3.66663670246048)*x1593))+(((-3.66663670246048)*x1595))+(((-0.546695532336858)*cj2))+((x1591*x1592))+((px*x1590))+(((0.443324750111479)*x1594))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1596=IKsin(j4);
IkReal x1597=IKcos(j4);
IkReal x1598=(px*sj0);
IkReal x1599=(cj0*py);
IkReal x1600=(py*sj0);
IkReal x1601=(cj0*px);
IkReal x1602=((0.0325)*x1596);
IkReal x1603=((0.2688)*x1597);
evalcond[0]=(((sj2*x1602))+pz+(((-1.0)*sj2*x1603))+(((-0.2151)*sj2)));
evalcond[1]=((-0.1125)+(((-1.0)*x1601))+(((-1.0)*x1600))+(((0.0325)*x1597))+(((0.2688)*x1596)));
evalcond[2]=((0.1491)+x1598+((cj2*x1603))+(((0.2151)*cj2))+(((-1.0)*x1599))+(((-1.0)*cj2*x1602)));
evalcond[3]=((0.2151)+(((-1.0)*x1602))+x1603+(((0.1491)*cj2))+((cj2*x1598))+(((-1.0)*pz*sj2))+(((-1.0)*cj2*x1599)));
evalcond[4]=((0.11900314)+(((0.2982)*x1599))+(((-1.0)*pp))+(((0.08)*x1600))+(((0.08)*x1601))+(((-0.2982)*x1598))+(((0.10572526)*x1597))+(((-0.0959655)*x1596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1604=((0.443324750111479)*cj0);
IkReal x1605=(cj2*py);
IkReal x1606=((3.66663670246048)*cj0);
IkReal x1607=(pz*sj2);
IkReal x1608=(py*sj0);
IkReal x1609=(cj2*px*sj0);
if( IKabs(((0.801186718972622)+(((0.0660997202416215)*cj2))+(((-1.0)*px*x1606))+(((0.443324750111479)*x1609))+(((0.443324750111479)*x1607))+(((-3.66663670246048)*x1608))+(((-1.0)*x1604*x1605)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.703353540302789)+(((-0.443324750111479)*x1608))+(((-0.546695532336858)*cj2))+(((-1.0)*px*x1604))+(((-3.66663670246048)*x1607))+(((-3.66663670246048)*x1609))+((x1605*x1606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.801186718972622)+(((0.0660997202416215)*cj2))+(((-1.0)*px*x1606))+(((0.443324750111479)*x1609))+(((0.443324750111479)*x1607))+(((-3.66663670246048)*x1608))+(((-1.0)*x1604*x1605))))+IKsqr(((-0.703353540302789)+(((-0.443324750111479)*x1608))+(((-0.546695532336858)*cj2))+(((-1.0)*px*x1604))+(((-3.66663670246048)*x1607))+(((-3.66663670246048)*x1609))+((x1605*x1606))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.801186718972622)+(((0.0660997202416215)*cj2))+(((-1.0)*px*x1606))+(((0.443324750111479)*x1609))+(((0.443324750111479)*x1607))+(((-3.66663670246048)*x1608))+(((-1.0)*x1604*x1605))), ((-0.703353540302789)+(((-0.443324750111479)*x1608))+(((-0.546695532336858)*cj2))+(((-1.0)*px*x1604))+(((-3.66663670246048)*x1607))+(((-3.66663670246048)*x1609))+((x1605*x1606))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1610=IKsin(j4);
IkReal x1611=IKcos(j4);
IkReal x1612=(px*sj0);
IkReal x1613=(cj0*py);
IkReal x1614=(py*sj0);
IkReal x1615=(cj0*px);
IkReal x1616=((0.0325)*x1610);
IkReal x1617=((0.2688)*x1611);
evalcond[0]=(((sj2*x1617))+pz+(((0.2151)*sj2))+(((-1.0)*sj2*x1616)));
evalcond[1]=((0.1925)+(((-1.0)*x1614))+(((-1.0)*x1615))+(((-0.2688)*x1610))+(((-0.0325)*x1611)));
evalcond[2]=((0.1491)+(((-1.0)*x1613))+x1612+((cj2*x1617))+(((0.2151)*cj2))+(((-1.0)*cj2*x1616)));
evalcond[3]=((0.2151)+x1617+(((-1.0)*x1616))+(((0.1491)*cj2))+(((-1.0)*cj2*x1613))+((cj2*x1612))+((pz*sj2)));
evalcond[4]=((0.11900314)+(((-0.0959655)*x1610))+(((-1.0)*pp))+(((0.2982)*x1613))+(((-0.2982)*x1612))+(((0.10572526)*x1611))+(((0.08)*x1615))+(((0.08)*x1614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1618=((4.69754647271971)*cj2);
IkReal x1619=(cj0*py);
IkReal x1620=(px*sj0);
IkReal x1621=(cj0*px);
IkReal x1622=(py*sj0);
IkReal x1623=((8.08309205744797)*cj2);
IkReal x1624=(sj2*x1622);
if( IKabs(((0.399930214306355)+(((-19.8196578511377)*pp))+(((5.91022197120927)*x1619))+(((-0.323323682297919)*sj2))+(((-5.91022197120927)*x1620))+(((1.58557262809102)*x1622))+(((1.58557262809102)*x1621))+(((-1.20518902576549)*cj2))+(((-1.0)*x1620*x1623))+((x1619*x1623))+(((8.08309205744797)*x1624))+(((8.08309205744797)*sj2*x1621)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.751868556677989)+(((0.714591570179692)*x1619))+(((4.69754647271971)*x1624))+(((-0.714591570179692)*x1620))+(((-0.187901858908789)*sj2))+(((-0.700404179082509)*cj2))+(((0.191708000048207)*x1622))+(((0.191708000048207)*x1621))+((x1618*x1619))+(((-2.39635000060259)*pp))+(((4.69754647271971)*sj2*x1621))+(((-1.0)*x1618*x1620)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.399930214306355)+(((-19.8196578511377)*pp))+(((5.91022197120927)*x1619))+(((-0.323323682297919)*sj2))+(((-5.91022197120927)*x1620))+(((1.58557262809102)*x1622))+(((1.58557262809102)*x1621))+(((-1.20518902576549)*cj2))+(((-1.0)*x1620*x1623))+((x1619*x1623))+(((8.08309205744797)*x1624))+(((8.08309205744797)*sj2*x1621))))+IKsqr(((-0.751868556677989)+(((0.714591570179692)*x1619))+(((4.69754647271971)*x1624))+(((-0.714591570179692)*x1620))+(((-0.187901858908789)*sj2))+(((-0.700404179082509)*cj2))+(((0.191708000048207)*x1622))+(((0.191708000048207)*x1621))+((x1618*x1619))+(((-2.39635000060259)*pp))+(((4.69754647271971)*sj2*x1621))+(((-1.0)*x1618*x1620))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.399930214306355)+(((-19.8196578511377)*pp))+(((5.91022197120927)*x1619))+(((-0.323323682297919)*sj2))+(((-5.91022197120927)*x1620))+(((1.58557262809102)*x1622))+(((1.58557262809102)*x1621))+(((-1.20518902576549)*cj2))+(((-1.0)*x1620*x1623))+((x1619*x1623))+(((8.08309205744797)*x1624))+(((8.08309205744797)*sj2*x1621))), ((-0.751868556677989)+(((0.714591570179692)*x1619))+(((4.69754647271971)*x1624))+(((-0.714591570179692)*x1620))+(((-0.187901858908789)*sj2))+(((-0.700404179082509)*cj2))+(((0.191708000048207)*x1622))+(((0.191708000048207)*x1621))+((x1618*x1619))+(((-2.39635000060259)*pp))+(((4.69754647271971)*sj2*x1621))+(((-1.0)*x1618*x1620))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1625=IKcos(j4);
IkReal x1626=IKsin(j4);
IkReal x1627=(px*sj0);
IkReal x1628=(cj0*py);
IkReal x1629=((1.0)*py*sj0);
IkReal x1630=((1.0)*cj0*cj2);
IkReal x1631=(cj2*x1625);
IkReal x1632=((0.2688)*x1626);
IkReal x1633=((0.2688)*x1625);
IkReal x1634=((0.0325)*x1625);
IkReal x1635=((0.0325)*x1626);
IkReal x1636=((1.0)*cj0*px);
evalcond[0]=((0.10790314)+(((0.10962526)*x1625))+(((-0.0637095)*x1626))+(((-1.0)*pp))+(((-0.2982)*x1627))+(((0.08)*cj0*px))+(((0.2982)*x1628))+(((0.08)*py*sj0)));
evalcond[1]=((0.2151)+(((-1.0)*sj2*x1636))+x1633+(((0.1491)*cj2))+(((-1.0)*x1635))+(((-1.0)*cj2*x1628))+((cj2*x1627))+(((0.04)*sj2))+(((-1.0)*sj2*x1629)));
evalcond[2]=((0.0925)+(((-1.0)*cj2*x1629))+(((0.04)*cj2))+(((-1.0)*px*x1630))+((sj2*x1628))+(((-1.0)*x1632))+(((-1.0)*x1634))+(((-1.0)*sj2*x1627))+(((-0.1491)*sj2)));
evalcond[3]=((0.1491)+(((-1.0)*x1628))+(((0.2688)*x1631))+x1627+((sj2*x1632))+((sj2*x1634))+(((-1.0)*cj2*x1635))+(((-0.0925)*sj2))+(((0.2151)*cj2)));
evalcond[4]=((0.04)+(((-1.0)*sj2*x1635))+((sj2*x1633))+(((-1.0)*x1629))+(((-1.0)*x1636))+(((-1.0)*cj2*x1632))+(((-0.0325)*x1631))+(((0.2151)*sj2))+(((0.0925)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1637=((4.69754647271971)*cj2);
IkReal x1638=(cj0*py);
IkReal x1639=(px*sj0);
IkReal x1640=(cj0*px);
IkReal x1641=(py*sj0);
IkReal x1642=((8.08309205744797)*cj2);
IkReal x1643=(sj2*x1641);
if( IKabs(((0.399930214306355)+(((1.58557262809102)*x1641))+(((1.58557262809102)*x1640))+(((-19.8196578511377)*pp))+(((-5.91022197120927)*x1639))+(((-1.0)*x1639*x1642))+(((-8.08309205744797)*sj2*x1640))+(((-1.20518902576549)*cj2))+(((5.91022197120927)*x1638))+(((0.323323682297919)*sj2))+((x1638*x1642))+(((-8.08309205744797)*x1643)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.751868556677989)+(((0.187901858908789)*sj2))+((x1637*x1638))+(((-4.69754647271971)*x1643))+(((-0.714591570179692)*x1639))+(((0.191708000048207)*x1640))+(((0.191708000048207)*x1641))+(((-4.69754647271971)*sj2*x1640))+(((-1.0)*x1637*x1639))+(((-0.700404179082509)*cj2))+(((0.714591570179692)*x1638))+(((-2.39635000060259)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.399930214306355)+(((1.58557262809102)*x1641))+(((1.58557262809102)*x1640))+(((-19.8196578511377)*pp))+(((-5.91022197120927)*x1639))+(((-1.0)*x1639*x1642))+(((-8.08309205744797)*sj2*x1640))+(((-1.20518902576549)*cj2))+(((5.91022197120927)*x1638))+(((0.323323682297919)*sj2))+((x1638*x1642))+(((-8.08309205744797)*x1643))))+IKsqr(((-0.751868556677989)+(((0.187901858908789)*sj2))+((x1637*x1638))+(((-4.69754647271971)*x1643))+(((-0.714591570179692)*x1639))+(((0.191708000048207)*x1640))+(((0.191708000048207)*x1641))+(((-4.69754647271971)*sj2*x1640))+(((-1.0)*x1637*x1639))+(((-0.700404179082509)*cj2))+(((0.714591570179692)*x1638))+(((-2.39635000060259)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.399930214306355)+(((1.58557262809102)*x1641))+(((1.58557262809102)*x1640))+(((-19.8196578511377)*pp))+(((-5.91022197120927)*x1639))+(((-1.0)*x1639*x1642))+(((-8.08309205744797)*sj2*x1640))+(((-1.20518902576549)*cj2))+(((5.91022197120927)*x1638))+(((0.323323682297919)*sj2))+((x1638*x1642))+(((-8.08309205744797)*x1643))), ((-0.751868556677989)+(((0.187901858908789)*sj2))+((x1637*x1638))+(((-4.69754647271971)*x1643))+(((-0.714591570179692)*x1639))+(((0.191708000048207)*x1640))+(((0.191708000048207)*x1641))+(((-4.69754647271971)*sj2*x1640))+(((-1.0)*x1637*x1639))+(((-0.700404179082509)*cj2))+(((0.714591570179692)*x1638))+(((-2.39635000060259)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1644=IKcos(j4);
IkReal x1645=IKsin(j4);
IkReal x1646=(cj0*sj2);
IkReal x1647=(cj0*py);
IkReal x1648=(px*sj0);
IkReal x1649=(py*sj0);
IkReal x1650=(cj0*px);
IkReal x1651=(cj2*x1644);
IkReal x1652=((0.2688)*x1645);
IkReal x1653=((0.2688)*x1644);
IkReal x1654=((0.0325)*x1644);
IkReal x1655=((0.0325)*x1645);
evalcond[0]=((0.10790314)+(((0.08)*x1649))+(((0.08)*x1650))+(((0.10962526)*x1644))+(((-1.0)*pp))+(((-0.2982)*x1648))+(((0.2982)*x1647))+(((-0.0637095)*x1645)));
evalcond[1]=((0.2151)+x1653+((cj2*x1648))+((sj2*x1649))+(((0.1491)*cj2))+((px*x1646))+(((-1.0)*x1655))+(((-1.0)*cj2*x1647))+(((-0.04)*sj2)));
evalcond[2]=((0.0925)+((py*x1646))+((cj2*x1649))+(((-0.04)*cj2))+((cj2*x1650))+(((-1.0)*sj2*x1648))+(((-1.0)*x1654))+(((-1.0)*x1652))+(((-0.1491)*sj2)));
evalcond[3]=((0.1491)+(((0.2688)*x1651))+x1648+((sj2*x1652))+((sj2*x1654))+(((-1.0)*x1647))+(((-0.0925)*sj2))+(((-1.0)*cj2*x1655))+(((0.2151)*cj2)));
evalcond[4]=((0.04)+(((-1.0)*sj2*x1653))+(((-0.0925)*cj2))+((cj2*x1652))+(((-1.0)*x1650))+((sj2*x1655))+(((-1.0)*x1649))+(((0.0325)*x1651))+(((-0.2151)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1656=((0.443324750111479)*cj0);
IkReal x1657=(cj2*py);
IkReal x1658=((3.66663670246048)*cj0);
IkReal x1659=(pz*sj2);
IkReal x1660=(py*sj0);
IkReal x1661=(cj2*px*sj0);
if( IKabs(((0.361190314677364)+(((-1.0)*x1656*x1657))+(((-0.443324750111479)*x1659))+(((-1.0)*px*x1658))+(((0.0660997202416215)*cj2))+(((0.443324750111479)*x1661))+(((-3.66663670246048)*x1660)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.756552510316167)+(((-0.443324750111479)*x1660))+(((-1.0)*px*x1656))+(((3.66663670246048)*x1659))+(((-0.546695532336858)*cj2))+((x1657*x1658))+(((-3.66663670246048)*x1661)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.361190314677364)+(((-1.0)*x1656*x1657))+(((-0.443324750111479)*x1659))+(((-1.0)*px*x1658))+(((0.0660997202416215)*cj2))+(((0.443324750111479)*x1661))+(((-3.66663670246048)*x1660))))+IKsqr(((-0.756552510316167)+(((-0.443324750111479)*x1660))+(((-1.0)*px*x1656))+(((3.66663670246048)*x1659))+(((-0.546695532336858)*cj2))+((x1657*x1658))+(((-3.66663670246048)*x1661))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.361190314677364)+(((-1.0)*x1656*x1657))+(((-0.443324750111479)*x1659))+(((-1.0)*px*x1658))+(((0.0660997202416215)*cj2))+(((0.443324750111479)*x1661))+(((-3.66663670246048)*x1660))), ((-0.756552510316167)+(((-0.443324750111479)*x1660))+(((-1.0)*px*x1656))+(((3.66663670246048)*x1659))+(((-0.546695532336858)*cj2))+((x1657*x1658))+(((-3.66663670246048)*x1661))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1662=IKsin(j4);
IkReal x1663=IKcos(j4);
IkReal x1664=(px*sj0);
IkReal x1665=(cj0*py);
IkReal x1666=(py*sj0);
IkReal x1667=(cj0*px);
IkReal x1668=((0.0325)*x1662);
IkReal x1669=((0.2688)*x1663);
evalcond[0]=((((-1.0)*sj2*x1669))+((sj2*x1668))+pz+(((-0.2151)*sj2)));
evalcond[1]=((0.0725)+(((-1.0)*x1666))+(((-1.0)*x1667))+(((-0.0325)*x1663))+(((-0.2688)*x1662)));
evalcond[2]=((0.1491)+x1664+(((-1.0)*x1665))+((cj2*x1669))+(((-1.0)*cj2*x1668))+(((0.2151)*cj2)));
evalcond[3]=((0.2151)+x1669+(((0.1491)*cj2))+((cj2*x1664))+(((-1.0)*x1668))+(((-1.0)*pz*sj2))+(((-1.0)*cj2*x1665)));
evalcond[4]=((0.09680314)+(((0.2982)*x1665))+(((0.08)*x1667))+(((0.08)*x1666))+(((-0.2982)*x1664))+(((-1.0)*pp))+(((0.11352526)*x1663))+(((-0.0314535)*x1662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1670=((0.443324750111479)*cj0);
IkReal x1671=(cj2*py);
IkReal x1672=((3.66663670246048)*cj0);
IkReal x1673=(pz*sj2);
IkReal x1674=(py*sj0);
IkReal x1675=(cj2*px*sj0);
if( IKabs(((0.0678593784805256)+(((0.443324750111479)*x1675))+(((0.443324750111479)*x1673))+(((0.0660997202416215)*cj2))+((px*x1672))+(((3.66663670246048)*x1674))+(((-1.0)*x1670*x1671)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.792018490325085)+(((0.443324750111479)*x1674))+(((-3.66663670246048)*x1673))+(((-3.66663670246048)*x1675))+((px*x1670))+(((-0.546695532336858)*cj2))+((x1671*x1672)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0678593784805256)+(((0.443324750111479)*x1675))+(((0.443324750111479)*x1673))+(((0.0660997202416215)*cj2))+((px*x1672))+(((3.66663670246048)*x1674))+(((-1.0)*x1670*x1671))))+IKsqr(((-0.792018490325085)+(((0.443324750111479)*x1674))+(((-3.66663670246048)*x1673))+(((-3.66663670246048)*x1675))+((px*x1670))+(((-0.546695532336858)*cj2))+((x1671*x1672))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.0678593784805256)+(((0.443324750111479)*x1675))+(((0.443324750111479)*x1673))+(((0.0660997202416215)*cj2))+((px*x1672))+(((3.66663670246048)*x1674))+(((-1.0)*x1670*x1671))), ((-0.792018490325085)+(((0.443324750111479)*x1674))+(((-3.66663670246048)*x1673))+(((-3.66663670246048)*x1675))+((px*x1670))+(((-0.546695532336858)*cj2))+((x1671*x1672))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1676=IKsin(j4);
IkReal x1677=IKcos(j4);
IkReal x1678=(px*sj0);
IkReal x1679=(cj0*py);
IkReal x1680=(py*sj0);
IkReal x1681=(cj0*px);
IkReal x1682=((0.0325)*x1676);
IkReal x1683=((0.2688)*x1677);
evalcond[0]=(pz+(((-1.0)*sj2*x1682))+(((0.2151)*sj2))+((sj2*x1683)));
evalcond[1]=((0.0075)+(((0.2688)*x1676))+(((-1.0)*x1681))+(((-1.0)*x1680))+(((0.0325)*x1677)));
evalcond[2]=((0.1491)+x1678+(((-1.0)*x1679))+(((0.2151)*cj2))+(((-1.0)*cj2*x1682))+((cj2*x1683)));
evalcond[3]=((0.2151)+(((-1.0)*x1682))+((cj2*x1678))+x1683+(((0.1491)*cj2))+((pz*sj2))+(((-1.0)*cj2*x1679)));
evalcond[4]=((0.09680314)+(((0.08)*x1680))+(((0.08)*x1681))+(((-0.2982)*x1678))+(((-1.0)*pp))+(((-0.0314535)*x1676))+(((0.11352526)*x1677))+(((0.2982)*x1679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1684=(sj1*sj2);
IkReal x1685=((322.56)*sj3);
IkReal x1686=(px*sj0);
IkReal x1687=(cj0*px);
IkReal x1688=(cj0*py);
IkReal x1689=(py*sj0);
IkReal x1690=((39.0)*sj3);
IkReal x1691=((1096.2526)*cj2);
IkReal x1692=((637.095)*cj2);
IkReal x1693=(cj2*sj3);
IkReal x1694=(cj1*pz*sj2);
CheckValue<IkReal> x1695=IKPowWithIntegerCheck(IKsign(((-135.6229265)+(((-87.971628)*sj3)))),-1);
if(!x1695.valid){
continue;
}
CheckValue<IkReal> x1696 = IKatan2WithCheck(IkReal(((-54.23970606)+(((-1.0)*x1688*x1691))+(((-215.04)*x1689))+(((-215.04)*x1687))+(((-38.2257)*sj3))+(((-1096.2526)*x1694))+((x1690*x1694))+((x1684*x1689*x1690))+(((43.850104)*x1684))+(((-1.56)*sj3*x1684))+(((163.45126266)*cj2))+(((2688.0)*pp))+((x1684*x1687*x1690))+(((-1.0)*cj2*x1686*x1690))+((x1686*x1691))+(((801.5616)*x1686))+((cj2*x1688*x1690))+(((-5.8149)*x1693))+(((-801.5616)*x1688))+(((-1096.2526)*x1684*x1687))+(((-1096.2526)*x1684*x1689)))),IkReal(((101.970614)+(((-1.0)*x1688*x1692))+((cj2*x1685*x1686))+(((12.9024)*sj3*x1684))+(((96.915)*x1686))+(((65.775156)*sj3))+(((48.093696)*x1693))+((x1686*x1692))+(((325.0)*pp))+(((25.4838)*x1684))+(((-1.0)*x1684*x1685*x1689))+(((-1.0)*x1684*x1685*x1687))+(((94.9908645)*cj2))+(((-637.095)*x1684*x1689))+(((-637.095)*x1684*x1687))+(((-637.095)*x1694))+(((-96.915)*x1688))+(((-26.0)*x1689))+(((-26.0)*x1687))+(((-1.0)*cj2*x1685*x1688))+(((-1.0)*x1685*x1694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1695.value)))+(x1696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1697=IKcos(j4);
IkReal x1698=IKsin(j4);
IkReal x1699=(cj1*sj2);
IkReal x1700=(cj1*cj2);
IkReal x1701=(cj3*sj2);
IkReal x1702=((1.0)*pz);
IkReal x1703=(px*sj0);
IkReal x1704=(sj1*sj2);
IkReal x1705=(cj0*py);
IkReal x1706=(cj1*sj3);
IkReal x1707=(sj1*sj3);
IkReal x1708=(py*sj0);
IkReal x1709=((0.0925)*cj3);
IkReal x1710=(cj0*px);
IkReal x1711=(cj2*sj1);
IkReal x1712=((0.0325)*x1697);
IkReal x1713=(sj3*x1698);
IkReal x1714=((0.2688)*x1697);
IkReal x1715=((0.0325)*x1698);
IkReal x1716=((1.0)*x1710);
IkReal x1717=(cj3*x1711);
IkReal x1718=((0.2688)*cj3*x1698);
evalcond[0]=((0.1491)+(((-1.0)*x1701*x1712))+(((-0.2688)*x1698*x1701))+x1703+(((-1.0)*x1705))+(((0.0925)*x1701))+((cj2*x1714))+(((0.2151)*cj2))+(((-1.0)*cj2*x1715)));
evalcond[1]=((0.2151)+(((-1.0)*cj2*x1705))+x1714+(((-1.0)*x1699*x1702))+(((-1.0)*x1715))+(((0.1491)*cj2))+(((-1.0)*x1704*x1716))+(((0.04)*x1704))+((cj2*x1703))+(((-1.0)*x1704*x1708)));
evalcond[2]=((0.10790314)+(((0.2982)*x1705))+(((-0.0039)*sj3*x1697))+(((-0.032256)*x1713))+(((-0.0637095)*x1698))+(((-1.0)*pp))+(((0.08)*x1710))+(((0.10962526)*x1697))+(((0.0111)*sj3))+(((-0.2982)*x1703))+(((0.08)*x1708)));
evalcond[3]=(((x1699*x1715))+(((-0.2151)*x1699))+((x1700*x1709))+(((-1.0)*x1699*x1714))+(((-1.0)*x1700*x1718))+(((-0.06)*sj1))+pz+(((0.2688)*x1698*x1707))+(((-1.0)*cj3*x1700*x1712))+((x1707*x1712))+(((-0.0925)*x1707)));
evalcond[4]=((0.04)+((x1712*x1717))+(((-1.0)*x1708))+(((-1.0)*x1709*x1711))+(((-1.0)*x1716))+(((-0.06)*cj1))+(((0.2151)*x1704))+(((0.2688)*x1698*x1717))+((x1706*x1712))+(((-1.0)*x1704*x1715))+((x1704*x1714))+(((0.2688)*x1698*x1706))+(((-0.0925)*x1706)));
evalcond[5]=((0.0925)+(((-1.0)*x1702*x1707))+((x1710*x1717))+((cj3*pz*x1700))+(((0.06)*sj3))+(((-1.0)*x1712))+(((-1.0)*x1701*x1705))+(((-0.04)*x1706))+((x1706*x1708))+((x1701*x1703))+(((-0.04)*x1717))+((x1706*x1710))+(((0.1491)*x1701))+((x1708*x1717))+(((-0.2688)*x1698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1719=(cj2*sj3);
IkReal x1720=(cj2*sj0);
IkReal x1721=((0.0096915)*px);
IkReal x1722=(cj3*sj2);
IkReal x1723=((0.0325)*pp);
IkReal x1724=(cj0*py);
IkReal x1725=((0.021504)*py);
IkReal x1726=(px*sj0);
IkReal x1727=((0.0039)*sj3);
IkReal x1728=((0.032256)*sj3);
IkReal x1729=((0.0026)*py);
IkReal x1730=((0.2688)*pp);
IkReal x1731=(cj0*cj2*px);
IkReal x1732=(cj0*px*x1722);
CheckValue<IkReal> x1733 = IKatan2WithCheck(IkReal(((0.016345126266)+(((0.0026)*x1732))+((x1724*x1727))+((cj2*x1730))+(((-0.10962526)*x1724))+(((-1.0)*x1722*x1723))+(((-1.0)*x1726*x1727))+(((0.0096915)*x1722*x1724))+(((-0.08015616)*cj2*x1724))+(((-1.0)*x1720*x1725))+(((0.10962526)*x1726))+((sj0*x1722*x1729))+(((-0.00382257)*x1719))+(((-0.021504)*x1731))+(((0.08015616)*px*x1720))+(((-0.00058149)*sj3))+(((-1.0)*sj0*x1721*x1722))+(((-0.005423970606)*cj2))+(((0.0136471886)*x1722)))),IkReal(((0.00949908645)+(((-0.023111235282)*x1722))+(((-0.0637095)*x1724))+((x1722*x1730))+((cj2*x1723))+((x1726*x1728))+(((0.0048093696)*sj3))+(((-1.0)*x1720*x1729))+(((-0.0096915)*cj2*x1724))+(((0.0101970614)*cj2))+((x1720*x1721))+(((-0.021504)*x1732))+(((-0.08015616)*x1722*x1724))+(((0.0065775156)*x1719))+(((-0.0026)*x1731))+(((-1.0)*x1724*x1728))+(((0.0637095)*x1726))+(((-1.0)*sj0*x1722*x1725))+(((0.08015616)*x1722*x1726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1733.valid){
continue;
}
CheckValue<IkReal> x1734=IKPowWithIntegerCheck(IKsign(((((-0.0087971628)*x1719))+(((-0.01356229265)*cj2))+(((0.031537828638)*x1722)))),-1);
if(!x1734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1733.value)+(((1.5707963267949)*(x1734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1735=IKcos(j4);
IkReal x1736=IKsin(j4);
IkReal x1737=(cj1*sj2);
IkReal x1738=(cj1*cj2);
IkReal x1739=(cj3*sj2);
IkReal x1740=((1.0)*pz);
IkReal x1741=(px*sj0);
IkReal x1742=(sj1*sj2);
IkReal x1743=(cj0*py);
IkReal x1744=(cj1*sj3);
IkReal x1745=(sj1*sj3);
IkReal x1746=(py*sj0);
IkReal x1747=((0.0925)*cj3);
IkReal x1748=(cj0*px);
IkReal x1749=(cj2*sj1);
IkReal x1750=((0.0325)*x1735);
IkReal x1751=(sj3*x1736);
IkReal x1752=((0.2688)*x1735);
IkReal x1753=((0.0325)*x1736);
IkReal x1754=((1.0)*x1748);
IkReal x1755=(cj3*x1749);
IkReal x1756=((0.2688)*cj3*x1736);
evalcond[0]=((0.1491)+x1741+((cj2*x1752))+(((-1.0)*x1739*x1750))+(((-1.0)*x1743))+(((-0.2688)*x1736*x1739))+(((-1.0)*cj2*x1753))+(((0.2151)*cj2))+(((0.0925)*x1739)));
evalcond[1]=((0.2151)+(((-1.0)*cj2*x1743))+x1752+(((0.04)*x1742))+(((0.1491)*cj2))+((cj2*x1741))+(((-1.0)*x1737*x1740))+(((-1.0)*x1753))+(((-1.0)*x1742*x1746))+(((-1.0)*x1742*x1754)));
evalcond[2]=((0.10790314)+(((-0.0637095)*x1736))+(((0.08)*x1748))+(((0.08)*x1746))+(((0.2982)*x1743))+(((-0.0039)*sj3*x1735))+(((0.10962526)*x1735))+(((-1.0)*pp))+(((-0.032256)*x1751))+(((-0.2982)*x1741))+(((0.0111)*sj3)));
evalcond[3]=(((x1737*x1753))+(((0.2688)*x1736*x1745))+((x1745*x1750))+(((-1.0)*x1738*x1756))+(((-1.0)*x1737*x1752))+(((-0.0925)*x1745))+(((-0.06)*sj1))+pz+(((-1.0)*cj3*x1738*x1750))+(((-0.2151)*x1737))+((x1738*x1747)));
evalcond[4]=((0.04)+(((0.2688)*x1736*x1744))+(((0.2688)*x1736*x1755))+((x1744*x1750))+(((-0.06)*cj1))+((x1750*x1755))+(((0.2151)*x1742))+(((-0.0925)*x1744))+(((-1.0)*x1746))+(((-1.0)*x1754))+(((-1.0)*x1747*x1749))+((x1742*x1752))+(((-1.0)*x1742*x1753)));
evalcond[5]=((0.0925)+((x1739*x1741))+(((0.06)*sj3))+(((0.1491)*x1739))+(((-1.0)*x1740*x1745))+(((-1.0)*x1739*x1743))+((x1744*x1746))+((x1744*x1748))+((x1746*x1755))+(((-1.0)*x1750))+((x1748*x1755))+(((-0.2688)*x1736))+((cj3*pz*x1738))+(((-0.04)*x1755))+(((-0.04)*x1744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1757=((0.2688)*cj2);
IkReal x1758=(cj1*cj3);
IkReal x1759=(px*sj0);
IkReal x1760=(sj1*sj3);
IkReal x1761=(cj0*py);
IkReal x1762=(cj3*sj2);
IkReal x1763=((0.00195)*sj1);
IkReal x1764=((0.0325)*pz);
IkReal x1765=((0.016128)*sj1);
IkReal x1766=(cj1*sj2);
IkReal x1767=((0.0325)*cj2);
CheckValue<IkReal> x1768=IKPowWithIntegerCheck(IKsign(((((-0.07330969)*x1758))+(((0.07330969)*cj2*x1760)))),-1);
if(!x1768.valid){
continue;
}
CheckValue<IkReal> x1769 = IKatan2WithCheck(IkReal(((((-1.0)*x1762*x1763))+(((-0.2688)*x1759*x1766))+(((-0.04007808)*x1766))+(((-1.0)*x1758*x1759*x1767))+(((-0.03185475)*x1758))+(((0.2688)*x1761*x1766))+(((0.03185475)*cj2*x1760))+((x1762*x1764))+(((-1.0)*pz*x1757))+(((0.00484575)*x1760))+(((-0.0325)*x1760*x1761))+(((0.0325)*x1759*x1760))+((cj2*x1765))+((x1758*x1761*x1767))+(((-0.00484575)*cj2*x1758)))),IkReal((((x1757*x1758*x1759))+(((-1.0)*cj2*x1764))+(((-0.2688)*x1759*x1760))+(((-0.04007808)*x1760))+(((-0.0325)*x1759*x1766))+(((0.2688)*x1760*x1761))+(((-1.0)*x1757*x1758*x1761))+((x1762*x1765))+(((-0.00484575)*x1766))+(((0.04007808)*cj2*x1758))+(((0.0325)*x1761*x1766))+(((-0.05481263)*cj2*x1760))+(((-0.2688)*pz*x1762))+(((0.05481263)*x1758))+((cj2*x1763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1768.value)))+(x1769.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1770=IKcos(j4);
IkReal x1771=IKsin(j4);
IkReal x1772=(cj1*sj2);
IkReal x1773=(cj1*cj2);
IkReal x1774=(cj3*sj2);
IkReal x1775=((1.0)*pz);
IkReal x1776=(px*sj0);
IkReal x1777=(sj1*sj2);
IkReal x1778=(cj0*py);
IkReal x1779=(cj1*sj3);
IkReal x1780=(sj1*sj3);
IkReal x1781=(py*sj0);
IkReal x1782=((0.0925)*cj3);
IkReal x1783=(cj0*px);
IkReal x1784=(cj2*sj1);
IkReal x1785=((0.0325)*x1770);
IkReal x1786=(sj3*x1771);
IkReal x1787=((0.2688)*x1770);
IkReal x1788=((0.0325)*x1771);
IkReal x1789=((1.0)*x1783);
IkReal x1790=(cj3*x1784);
IkReal x1791=((0.2688)*cj3*x1771);
evalcond[0]=((0.1491)+(((-1.0)*x1778))+x1776+(((-1.0)*x1774*x1785))+((cj2*x1787))+(((0.0925)*x1774))+(((-1.0)*cj2*x1788))+(((0.2151)*cj2))+(((-0.2688)*x1771*x1774)));
evalcond[1]=((0.2151)+(((-1.0)*x1788))+(((-1.0)*x1772*x1775))+x1787+(((-1.0)*x1777*x1781))+(((-1.0)*x1777*x1789))+(((0.1491)*cj2))+(((0.04)*x1777))+((cj2*x1776))+(((-1.0)*cj2*x1778)));
evalcond[2]=((0.10790314)+(((0.10962526)*x1770))+(((0.2982)*x1778))+(((-0.0039)*sj3*x1770))+(((-1.0)*pp))+(((-0.032256)*x1786))+(((0.08)*x1783))+(((0.08)*x1781))+(((-0.0637095)*x1771))+(((-0.2982)*x1776))+(((0.0111)*sj3)));
evalcond[3]=((((0.2688)*x1771*x1780))+(((-1.0)*cj3*x1773*x1785))+((x1772*x1788))+(((-0.0925)*x1780))+(((-0.06)*sj1))+(((-0.2151)*x1772))+pz+(((-1.0)*x1772*x1787))+((x1780*x1785))+((x1773*x1782))+(((-1.0)*x1773*x1791)));
evalcond[4]=((0.04)+(((0.2688)*x1771*x1790))+(((-1.0)*x1789))+(((0.2151)*x1777))+(((-0.06)*cj1))+((x1777*x1787))+(((-1.0)*x1777*x1788))+((x1779*x1785))+(((0.2688)*x1771*x1779))+(((-1.0)*x1781))+((x1785*x1790))+(((-1.0)*x1782*x1784))+(((-0.0925)*x1779)));
evalcond[5]=((0.0925)+((x1783*x1790))+(((-1.0)*x1785))+(((0.06)*sj3))+((cj3*pz*x1773))+(((-1.0)*x1775*x1780))+(((-0.2688)*x1771))+((x1779*x1783))+((x1779*x1781))+(((-0.04)*x1779))+(((-1.0)*x1774*x1778))+(((0.1491)*x1774))+((x1774*x1776))+((x1781*x1790))+(((-0.04)*x1790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1792=(cj2*sj3);
IkReal x1793=(cj2*sj0);
IkReal x1794=((0.0096915)*px);
IkReal x1795=(cj3*sj2);
IkReal x1796=((0.0325)*pp);
IkReal x1797=(cj0*py);
IkReal x1798=((0.021504)*py);
IkReal x1799=(px*sj0);
IkReal x1800=((0.0039)*sj3);
IkReal x1801=((0.032256)*sj3);
IkReal x1802=((0.0026)*py);
IkReal x1803=((0.2688)*pp);
IkReal x1804=(cj0*cj2*px);
IkReal x1805=(cj0*px*x1795);
CheckValue<IkReal> x1806=IKPowWithIntegerCheck(IKsign(((((-0.01356229265)*cj2))+(((-0.0087971628)*x1792))+(((0.031537828638)*x1795)))),-1);
if(!x1806.valid){
continue;
}
CheckValue<IkReal> x1807 = IKatan2WithCheck(IkReal(((0.016345126266)+(((-1.0)*x1795*x1796))+(((-0.00382257)*x1792))+(((-0.08015616)*cj2*x1797))+(((0.0096915)*x1795*x1797))+(((-1.0)*sj0*x1794*x1795))+((cj2*x1803))+(((-0.10962526)*x1797))+(((-1.0)*x1799*x1800))+(((-1.0)*x1793*x1798))+((x1797*x1800))+(((0.10962526)*x1799))+(((-0.00058149)*sj3))+(((0.0136471886)*x1795))+(((0.08015616)*px*x1793))+(((-0.005423970606)*cj2))+(((0.0026)*x1805))+(((-0.021504)*x1804))+((sj0*x1795*x1802)))),IkReal(((0.00949908645)+((x1793*x1794))+(((0.0065775156)*x1792))+((x1799*x1801))+(((-0.023111235282)*x1795))+(((-0.0637095)*x1797))+((x1795*x1803))+(((-1.0)*x1797*x1801))+((cj2*x1796))+(((-0.0096915)*cj2*x1797))+(((0.0048093696)*sj3))+(((-1.0)*sj0*x1795*x1798))+(((0.0101970614)*cj2))+(((-0.0026)*x1804))+(((0.08015616)*x1795*x1799))+(((-1.0)*x1793*x1802))+(((-0.08015616)*x1795*x1797))+(((0.0637095)*x1799))+(((-0.021504)*x1805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1806.value)))+(x1807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1808=IKcos(j4);
IkReal x1809=IKsin(j4);
IkReal x1810=(cj3*sj2);
IkReal x1811=(px*sj0);
IkReal x1812=(cj0*py);
evalcond[0]=((0.1491)+(((0.0925)*x1810))+(((-0.2688)*x1809*x1810))+(((0.2688)*cj2*x1808))+(((-0.0325)*cj2*x1809))+x1811+(((0.2151)*cj2))+(((-1.0)*x1812))+(((-0.0325)*x1808*x1810)));
evalcond[1]=((0.10790314)+(((-0.0637095)*x1809))+(((-0.0039)*sj3*x1808))+(((-0.032256)*sj3*x1809))+(((0.10962526)*x1808))+(((-0.2982)*x1811))+(((-1.0)*pp))+(((0.08)*cj0*px))+(((0.08)*py*sj0))+(((0.2982)*x1812))+(((0.0111)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x1813=cj0*cj0;
IkReal x1814=py*py;
IkReal x1815=px*px;
IkReal x1816=pz*pz;
IkReal x1817=(cj3*sj2);
IkReal x1818=(py*sj0);
IkReal x1819=(cj0*px);
IkReal x1820=((625.0)*x1814);
IkReal x1821=(x1813*x1817);
j1eval[0]=((((-1.0)*x1817*x1820))+(((-625.0)*x1815*x1821))+(((-1250.0)*x1817*x1818*x1819))+(((-625.0)*x1816*x1817))+((x1820*x1821))+(((50.0)*x1817*x1818))+(((50.0)*x1817*x1819))+(((-1.0)*x1817)));
j1eval[1]=IKsign(((((-1.0)*x1816*x1817))+(((-1.0)*x1814*x1817))+(((-0.0016)*x1817))+(((0.08)*x1817*x1819))+(((0.08)*x1817*x1818))+(((-2.0)*x1817*x1818*x1819))+(((-1.0)*x1815*x1821))+((x1814*x1821))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1822=cj2*cj2;
IkReal x1823=cj3*cj3;
IkReal x1824=cj4*cj4;
IkReal x1825=(cj4*sj3);
IkReal x1826=(cj4*sj4);
IkReal x1827=(sj3*sj4);
IkReal x1828=(cj4*x1822);
IkReal x1829=((0.0060125)*x1823);
IkReal x1830=((0.08080969)*x1823);
IkReal x1831=(sj4*x1823);
IkReal x1832=(cj2*cj3*sj2);
IkReal x1833=((0.07119719)*x1824);
IkReal x1834=((18.2556897435897)*x1824);
IkReal x1835=((1.54166666666667)*x1823);
IkReal x1836=(sj4*x1822);
IkReal x1837=(x1822*x1823);
j1eval[0]=((-33.7779358974359)+(((-28.109041025641)*cj4))+(((-2.84615384615385)*sj3))+(((12.7507692307692)*x1822*x1831))+(((29.6507076923077)*x1828))+(((-20.7204333333333)*x1837))+(((-4.48)*x1822*x1826))+((x1822*x1834))+(((-4.48)*x1826*x1837))+(((-36.5113794871795)*x1826*x1832))+(((-3.585)*x1836))+(((4.48)*x1823*x1826))+(((-8.96)*x1824*x1832))+(((-1.0)*cj4*x1835))+x1825+(((16.3357692307692)*sj4))+(((-31.1923743589744)*sj4*x1832))+(((-1.0)*x1823*x1834))+(((12.1344256410256)*x1822))+((x1828*x1835))+(((8.27076923076923)*x1827))+(((9.16576923076923)*cj4*x1832))+((x1834*x1837))+(((-12.7507692307692)*x1831))+(((20.7204333333333)*x1823))+(((14.6834615384615)*x1832)));
j1eval[1]=IKsign(((-0.13173395)+(((0.11563776)*x1828))+(((-0.034944)*x1824*x1832))+(((-0.0111)*sj3))+(((-0.017472)*x1822*x1826))+(((-0.0139815)*x1836))+(((-0.10962526)*cj4))+((x1822*x1833))+(((-0.12165026)*sj4*x1832))+(((0.0039)*x1825))+(((0.0572655)*x1832))+(((-0.14239438)*x1826*x1832))+(((0.017472)*x1823*x1826))+(((-1.0)*cj4*x1829))+((x1828*x1829))+x1830+(((0.032256)*x1827))+(((-1.0)*x1822*x1830))+(((-1.0)*x1823*x1833))+(((-0.049728)*x1831))+((x1833*x1837))+(((0.04732426)*x1822))+(((0.049728)*x1822*x1831))+(((0.0637095)*sj4))+(((0.0357465)*cj4*x1832))+(((-0.017472)*x1826*x1837))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1838=cj2*cj2;
IkReal x1839=(sj2*sj3);
IkReal x1840=(cj0*px);
IkReal x1841=((165.461538461538)*pz);
IkReal x1842=(cj4*pz);
IkReal x1843=(py*sj0);
IkReal x1844=((206.769230769231)*sj4);
IkReal x1845=((0.0325)*cj4);
IkReal x1846=(pz*sj4);
IkReal x1847=((46.1538461538462)*sj2);
IkReal x1848=((0.06)*sj2);
IkReal x1849=((0.2688)*sj4);
IkReal x1850=((0.2151)*pz);
IkReal x1851=((25.0)*cj4);
IkReal x1852=(cj2*cj3*sj2);
j1eval[0]=((((2.84615384615385)*x1839))+((x1838*x1841))+(((-1.0)*x1843*x1847))+(((-206.769230769231)*x1842))+((x1839*x1840*x1844))+(((-1.0)*x1841))+(((-1.0)*cj4*x1839))+(((-25.0)*x1842*x1852))+(((71.1538461538462)*pz*x1852))+(((206.769230769231)*x1838*x1842))+((x1839*x1840*x1851))+(((1.84615384615385)*sj2))+(((-25.0)*x1838*x1846))+(((-71.1538461538462)*x1839*x1843))+(((-71.1538461538462)*x1839*x1840))+(((-8.27076923076923)*sj4*x1839))+(((-1.0)*pz*x1844*x1852))+(((25.0)*x1846))+(((-1.0)*x1840*x1847))+((x1839*x1843*x1844))+((x1839*x1843*x1851)));
j1eval[1]=IKsign(((((-1.0)*x1843*x1848))+(((0.0925)*pz*x1852))+((x1839*x1840*x1845))+((x1839*x1840*x1849))+(((-0.0925)*x1839*x1843))+(((-0.0925)*x1839*x1840))+((x1838*x1850))+(((-0.0325)*x1838*x1846))+(((-0.2688)*x1842))+(((0.0037)*x1839))+(((-0.0325)*x1842*x1852))+(((-1.0)*x1840*x1848))+((x1839*x1843*x1849))+((x1839*x1843*x1845))+(((-0.010752)*sj4*x1839))+(((0.0325)*x1846))+(((0.2688)*x1838*x1842))+(((-0.2688)*x1846*x1852))+(((-0.0013)*cj4*x1839))+(((0.0024)*sj2))+(((-1.0)*x1850))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1853=(pz*sj3);
IkReal x1854=(pz*sj4);
IkReal x1855=(cj4*pz);
IkReal x1856=(cj3*py*sj0);
IkReal x1857=(cj0*cj3*px);
j1eval[0]=((((-112.0)*x1854))+cj3+(((-25.0)*x1857))+(((-25.0)*x1856))+(((38.5416666666667)*pz))+(((-13.5416666666667)*x1855))+(((25.0)*x1853)));
j1eval[1]=IKsign(((((4.625)*pz))+(((-13.44)*x1854))+(((-1.625)*x1855))+(((3.0)*x1853))+(((0.12)*cj3))+(((-3.0)*x1856))+(((-3.0)*x1857))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1858=cj4*cj4;
IkReal x1859=(sj3*sj4);
IkReal x1860=(cj4*sj4);
IkReal x1861=(cj4*sj3);
j1eval[0]=((-21.6435102564103)+(((-4.48)*x1860))+(((-2.84615384615385)*sj3))+(((18.2556897435897)*x1858))+(((12.7507692307692)*sj4))+x1861+(((1.54166666666667)*cj4))+(((8.27076923076923)*x1859)));
j1eval[1]=IKsign(((-0.08440969)+(((0.0060125)*cj4))+(((-0.0111)*sj3))+(((0.0039)*x1861))+(((0.07119719)*x1858))+(((-0.017472)*x1860))+(((0.032256)*x1859))+(((0.049728)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1862=(cj0*px);
IkReal x1863=((25.0)*cj4);
IkReal x1864=((0.06)*sj3);
IkReal x1865=(py*sj0);
IkReal x1866=((0.2688)*sj4);
IkReal x1867=((206.769230769231)*sj4);
IkReal x1868=((0.0325)*cj4);
IkReal x1869=(cj3*pz);
IkReal x1870=((46.1538461538462)*sj3);
j1eval[0]=((-2.84615384615385)+(((71.1538461538462)*x1862))+(((71.1538461538462)*x1865))+(((8.27076923076923)*sj4))+((x1862*x1870))+cj4+(((46.1538461538462)*x1869))+((x1865*x1870))+(((-1.0)*x1865*x1867))+(((-1.0)*x1863*x1865))+(((-1.0)*x1862*x1863))+(((-1.0)*x1862*x1867))+(((-1.84615384615385)*sj3)));
j1eval[1]=IKsign(((-0.0037)+(((-0.0024)*sj3))+((x1864*x1865))+(((-1.0)*x1865*x1868))+(((-1.0)*x1865*x1866))+((x1862*x1864))+(((-1.0)*x1862*x1866))+(((-1.0)*x1862*x1868))+(((0.010752)*sj4))+(((0.0013)*cj4))+(((0.06)*x1869))+(((0.0925)*x1865))+(((0.0925)*x1862))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4=0;
sj4=0;
cj4=1.0;
j1eval[0]=IKabs(((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1871=((25.0)*py*sj0);
IkReal x1872=((25.0)*cj0*px);
IkReal x1873=(x1872+x1871);
op[0]=((-1.0)+x1873);
op[1]=0;
op[2]=((1.0)+(((-1.0)*x1873)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1874=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1874);
rxp0_1=(px*r20);
rxp1_0=(r21*x1874);
rxp1_1=(px*r21);
rxp2_0=(r22*x1874);
rxp2_1=(px*r22);
j1eval[0]=((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1875=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1875);
rxp0_1=(px*r20);
rxp1_0=(r21*x1875);
rxp1_1=(px*r21);
rxp2_0=(r22*x1875);
rxp2_1=(px*r22);
j1eval[0]=((-4.69230769230769)+(((8.27076923076923)*sj4))+cj4);
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.477971219266972)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((-64205457.4638844)+(((1605136436.59711)*py*sj0))+(((1605136436.59711)*cj0*px)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1876=IKsin(j1);
IkReal x1877=IKcos(j1);
IkReal x1878=(py*sj0);
IkReal x1879=(cj0*px);
IkReal x1880=((0.305)*x1877);
evalcond[0]=((6.23e-10)*x1876);
evalcond[1]=(((x1876*x1879))+((x1876*x1878))+(((-0.04)*x1876)));
evalcond[2]=((-6.23e-10)+((x1877*x1879))+((x1877*x1878))+(((-0.04)*x1877)));
evalcond[3]=((-0.0841882)+(((-1.0)*(px*px)))+(((-1.0)*x1879*x1880))+(((-1.0)*x1878*x1880))+(((0.7284)*cj0*py))+(((0.08)*x1879))+(((0.08)*x1878))+(((-0.7284)*px*sj0))+(((0.0122)*x1877))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.42297407047914)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((-286993112.760117)+(((7174827819.00292)*cj0*px))+(((7174827819.00292)*py*sj0)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1881=IKsin(j1);
IkReal x1882=IKcos(j1);
IkReal x1883=(py*sj0);
IkReal x1884=(cj0*px);
IkReal x1885=((0.305)*x1882);
evalcond[0]=((1.39376166958522e-10)*x1881);
evalcond[1]=(((x1881*x1883))+((x1881*x1884))+(((-0.04)*x1881)));
evalcond[2]=((-1.39376166958522e-10)+((x1882*x1883))+((x1882*x1884))+(((-0.04)*x1882)));
evalcond[3]=((-0.0841882)+(((-1.0)*(px*px)))+(((0.08)*x1884))+(((0.08)*x1883))+(((-1.0)*x1883*x1885))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-1.0)*x1884*x1885))+(((-1.0)*(py*py)))+(((0.0122)*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1887=IKPowWithIntegerCheck(((-0.1525)+(((0.0325)*cj4))+(((0.2688)*sj4))),-1);
if(!x1887.valid){
continue;
}
IkReal x1886=x1887.value;
cj1array[0]=(((cj0*px*x1886))+((py*sj0*x1886))+(((-0.04)*x1886)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1888=IKsin(j1);
IkReal x1889=IKcos(j1);
IkReal x1890=(py*sj0);
IkReal x1891=((0.2688)*sj4);
IkReal x1892=((0.0325)*cj4);
IkReal x1893=(cj0*px);
IkReal x1894=((0.305)*x1889);
evalcond[0]=((((-0.1525)*x1888))+((x1888*x1891))+((x1888*x1892)));
evalcond[1]=((((-0.04)*x1888))+((x1888*x1890))+((x1888*x1893)));
evalcond[2]=((0.1525)+(((-0.04)*x1889))+((x1889*x1893))+((x1889*x1890))+(((-1.0)*x1892))+(((-1.0)*x1891)));
evalcond[3]=((-0.0841882)+(((-1.0)*x1893*x1894))+(((-1.0)*(px*px)))+(((0.08)*x1890))+(((0.08)*x1893))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-1.0)*x1890*x1894))+(((-1.0)*(py*py)))+(((0.0122)*x1889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1896=IKPowWithIntegerCheck(((-0.04)+((cj0*px))+((py*sj0))),-1);
if(!x1896.valid){
continue;
}
IkReal x1895=x1896.value;
cj1array[0]=((((0.0325)*cj4*x1895))+(((0.2688)*sj4*x1895))+(((-0.1525)*x1895)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1897=IKsin(j1);
IkReal x1898=IKcos(j1);
IkReal x1899=(py*sj0);
IkReal x1900=((0.2688)*sj4);
IkReal x1901=(cj0*px);
IkReal x1902=((0.0325)*cj4);
IkReal x1903=((0.305)*x1898);
evalcond[0]=((((-0.1525)*x1897))+((x1897*x1900))+((x1897*x1902)));
evalcond[1]=((((-0.04)*x1897))+((x1897*x1899))+((x1897*x1901)));
evalcond[2]=((0.04)+((x1898*x1900))+((x1898*x1902))+(((-1.0)*x1901))+(((-0.1525)*x1898))+(((-1.0)*x1899)));
evalcond[3]=((-0.0841882)+(((-1.0)*x1899*x1903))+(((-1.0)*(px*px)))+(((0.08)*x1899))+(((0.08)*x1901))+(((-1.0)*x1901*x1903))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-1.0)*(py*py)))+(((0.0122)*x1898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1904=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1904);
rxp0_1=(px*r20);
rxp1_0=(r21*x1904);
rxp1_1=(px*r21);
rxp2_0=(r22*x1904);
rxp2_1=(px*r22);
j1eval[0]=((1.0)+(((-8.27076923076923)*sj4))+(((-1.0)*cj4)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1905=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1905);
rxp0_1=(px*r20);
rxp1_0=(r21*x1905);
rxp1_1=(px*r21);
rxp2_0=(r22*x1905);
rxp2_1=(px*r22);
j1eval[0]=((1.0)+(((-25.0)*py*sj0))+(((-25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1906=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1906);
rxp0_1=(px*r20);
rxp1_0=(r21*x1906);
rxp1_1=(px*r21);
rxp2_0=(r22*x1906);
rxp2_1=(px*r22);
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1910=IKPowWithIntegerCheck(((-0.0026)+(((0.065)*cj0*px))+(((0.065)*py*sj0))),-1);
if(!x1910.valid){
continue;
}
IkReal x1907=x1910.value;
IkReal x1908=(cj0*x1907);
IkReal x1909=(sj0*x1907);
cj1array[0]=(((x1907*(py*py)))+(((-0.08)*px*x1908))+(((-0.7284)*py*x1908))+(((-0.08)*py*x1909))+(((0.0619882)*x1907))+(((0.7284)*px*x1909))+((x1907*(px*px))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x1911=IKsin(j1);
IkReal x1912=IKcos(j1);
IkReal x1913=((1.0)*py*sj0);
IkReal x1914=((1.0)*cj0*px);
evalcond[0]=((((-1.0)*x1911*x1914))+(((-1.0)*x1911*x1913))+(((0.04)*x1911)));
evalcond[1]=((((0.04)*x1912))+(((-1.0)*x1912*x1914))+(((-1.0)*x1912*x1913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.90094528974611)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((370156673.740422)+(((-9253916843.51055)*py*sj0))+(((-9253916843.51055)*cj0*px)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1915=IKsin(j1);
IkReal x1916=IKcos(j1);
IkReal x1917=(cj0*px);
IkReal x1918=(py*sj0);
IkReal x1919=((1.0)*x1918);
IkReal x1920=((1.0)*x1917);
IkReal x1921=((0.065)*x1916);
evalcond[0]=((-1.08062349912001e-10)*x1915);
evalcond[1]=((((0.04)*x1915))+(((-1.0)*x1915*x1920))+(((-1.0)*x1915*x1919)));
evalcond[2]=((-1.08062349912001e-10)+(((-1.0)*x1916*x1920))+(((0.04)*x1916))+(((-1.0)*x1916*x1919)));
evalcond[3]=((-0.0619882)+(((-1.0)*(px*px)))+(((0.08)*x1918))+(((0.08)*x1917))+((x1918*x1921))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-0.0026)*x1916))+((x1917*x1921))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-6.28318530717959)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1922=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1922);
rxp0_1=(px*r20);
rxp1_0=(r21*x1922);
rxp1_1=(px*r21);
rxp2_0=(r22*x1922);
rxp2_1=(px*r22);
sj4=0;
cj4=1.0;
j4=6.2831800034078;
j1eval[0]=((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1926=IKPowWithIntegerCheck(((-0.0026)+(((0.065)*cj0*px))+(((0.065)*py*sj0))),-1);
if(!x1926.valid){
continue;
}
IkReal x1923=x1926.value;
IkReal x1924=(cj0*x1923);
IkReal x1925=(sj0*x1923);
cj1array[0]=(((x1923*(px*px)))+(((-0.08)*px*x1924))+(((-0.7284)*py*x1924))+((x1923*(py*py)))+(((0.7284)*px*x1925))+(((0.0619882)*x1923))+(((-0.08)*py*x1925)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x1927=IKsin(j1);
IkReal x1928=IKcos(j1);
IkReal x1929=((1.0)*py*sj0);
IkReal x1930=((1.0)*cj0*px);
evalcond[0]=((((0.04)*x1927))+(((-1.0)*x1927*x1929))+(((-1.0)*x1927*x1930)));
evalcond[1]=((((-1.0)*x1928*x1930))+(((-1.0)*x1928*x1929))+(((0.04)*x1928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1933=IKPowWithIntegerCheck(((0.04)+(((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x1933.valid){
continue;
}
IkReal x1931=x1933.value;
IkReal x1932=((0.0325)*x1931);
cj1array[0]=((((0.2688)*sj4*x1931))+((cj4*x1932))+(((-1.0)*x1932)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1934=IKsin(j1);
IkReal x1935=IKcos(j1);
IkReal x1936=((0.2688)*sj4);
IkReal x1937=(cj0*px);
IkReal x1938=(py*sj0);
IkReal x1939=((0.0325)*x1934);
IkReal x1940=((1.0)*x1934);
IkReal x1941=((0.065)*x1935);
IkReal x1942=((0.0325)*x1935);
evalcond[0]=((((-1.0)*cj4*x1939))+(((-1.0)*x1934*x1936))+x1939);
evalcond[1]=((((-1.0)*x1937*x1940))+(((0.04)*x1934))+(((-1.0)*x1938*x1940)));
evalcond[2]=((0.04)+(((-1.0)*cj4*x1942))+(((-1.0)*x1938))+(((-1.0)*x1937))+x1942+(((-1.0)*x1935*x1936)));
evalcond[3]=((-0.0619882)+(((-1.0)*(px*px)))+((x1938*x1941))+((x1937*x1941))+(((-0.0026)*x1935))+(((0.08)*x1937))+(((0.08)*x1938))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1944=IKPowWithIntegerCheck(((0.0325)+(((-0.2688)*sj4))+(((-0.0325)*cj4))),-1);
if(!x1944.valid){
continue;
}
IkReal x1943=x1944.value;
cj1array[0]=(((cj0*px*x1943))+((py*sj0*x1943))+(((-0.04)*x1943)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1945=IKsin(j1);
IkReal x1946=IKcos(j1);
IkReal x1947=((0.2688)*sj4);
IkReal x1948=(cj0*px);
IkReal x1949=(py*sj0);
IkReal x1950=((1.0)*x1949);
IkReal x1951=((0.0325)*x1945);
IkReal x1952=((0.065)*x1946);
evalcond[0]=((((-1.0)*cj4*x1951))+(((-1.0)*x1945*x1947))+x1951);
evalcond[1]=((((0.04)*x1945))+(((-1.0)*x1945*x1950))+(((-1.0)*x1945*x1948)));
evalcond[2]=((0.0325)+(((0.04)*x1946))+(((-1.0)*x1947))+(((-1.0)*x1946*x1950))+(((-1.0)*x1946*x1948))+(((-0.0325)*cj4)));
evalcond[3]=((-0.0619882)+(((-1.0)*(px*px)))+(((0.08)*x1949))+(((0.08)*x1948))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-0.0026)*x1946))+((x1948*x1952))+(((-1.0)*(py*py)))+((x1949*x1952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1953=pz*pz;
IkReal x1954=cj4*cj4;
IkReal x1955=cj3*cj3;
IkReal x1956=((0.0060125)*cj4);
IkReal x1957=((0.016128)*sj4);
IkReal x1958=(cj3*sj3);
IkReal x1959=((0.06)*sj3);
IkReal x1960=(py*sj0);
IkReal x1961=(cj0*px);
IkReal x1962=((0.2688)*sj4);
IkReal x1963=(pz*sj3);
IkReal x1964=((0.00195)*cj4);
IkReal x1965=((0.0325)*cj4);
IkReal x1966=((0.049728)*sj4);
IkReal x1967=(cj3*pz);
IkReal x1968=((1.0)*x1967);
IkReal x1969=((0.07119719)*x1954);
IkReal x1970=((0.017472)*cj4*sj4);
CheckValue<IkReal> x1971 = IKatan2WithCheck(IkReal(((((-0.00555)*x1958))+((x1958*x1964))+((cj3*x1956))+((cj3*x1953))+((cj3*x1969))+((cj3*x1966))+((x1957*x1958))+(((-0.08080969)*cj3))+(((-0.04)*x1963))+(((-1.0)*cj3*x1970))+((x1961*x1963))+((x1960*x1963)))),IkReal(((-0.0111)+((sj3*x1956))+((sj3*x1953))+((sj3*x1969))+((sj3*x1966))+(((0.04)*x1967))+(((-1.0)*sj3*x1970))+(((-0.08440969)*sj3))+(((0.0039)*cj4))+(((-1.0)*x1961*x1968))+(((-1.0)*x1960*x1968))+(((0.032256)*sj4))+(((-1.0)*x1955*x1957))+(((-1.0)*x1955*x1964))+(((0.00555)*x1955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1971.valid){
continue;
}
CheckValue<IkReal> x1972=IKPowWithIntegerCheck(IKsign(((-0.0037)+(((-0.0024)*sj3))+((x1959*x1961))+((x1959*x1960))+(((0.0925)*x1961))+(((0.0925)*x1960))+(((0.06)*x1967))+(((0.010752)*sj4))+(((-1.0)*x1961*x1962))+(((-1.0)*x1961*x1965))+(((-1.0)*x1960*x1965))+(((-1.0)*x1960*x1962))+(((0.0013)*cj4)))),-1);
if(!x1972.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1971.value)+(((1.5707963267949)*(x1972.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1973=IKsin(j1);
IkReal x1974=IKcos(j1);
IkReal x1975=((0.0325)*cj4);
IkReal x1976=(py*sj0);
IkReal x1977=((0.185)*pz);
IkReal x1978=(cj0*px);
IkReal x1979=((0.2688)*sj4);
IkReal x1980=(sj3*x1973);
IkReal x1981=(cj3*x1974);
IkReal x1982=((0.185)*x1978);
IkReal x1983=(sj3*x1974);
IkReal x1984=(pz*x1973);
IkReal x1985=(cj3*x1973);
IkReal x1986=((0.12)*x1974);
evalcond[0]=((((-0.0925)*x1980))+((x1975*x1980))+(((0.0925)*x1981))+(((-1.0)*x1979*x1981))+(((-0.06)*x1973))+(((-1.0)*x1975*x1981))+((x1979*x1980))+pz);
evalcond[1]=((0.04)+(((-0.0925)*x1985))+(((-0.0925)*x1983))+((x1975*x1985))+((x1975*x1983))+(((-1.0)*x1976))+(((-1.0)*x1978))+(((-0.06)*x1974))+((x1979*x1985))+((x1979*x1983)));
evalcond[2]=((((0.04)*x1981))+((cj3*x1984))+((x1976*x1980))+(((-0.06)*cj3))+(((-1.0)*x1978*x1981))+((x1978*x1980))+((pz*x1983))+(((-1.0)*x1976*x1981))+(((-0.04)*x1980)));
evalcond[3]=((0.0925)+(((0.06)*sj3))+((x1976*x1985))+((x1976*x1983))+(((-1.0)*x1975))+(((-1.0)*x1979))+((x1978*x1985))+((x1978*x1983))+((pz*x1981))+(((-0.04)*x1983))+(((-0.04)*x1985))+(((-1.0)*pz*x1980)));
evalcond[4]=((-0.0730882)+(((-1.0)*x1976*x1986))+(((-0.0111)*sj3))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-1.0)*pp))+(((0.08)*x1976))+(((0.08)*x1978))+(((0.0048)*x1974))+(((-1.0)*x1977*x1981))+(((-1.0)*x1982*x1983))+(((-1.0)*x1982*x1985))+(((-1.0)*x1978*x1986))+(((0.12)*x1984))+(((-0.185)*x1976*x1983))+(((-0.185)*x1976*x1985))+(((0.0074)*x1983))+(((0.0074)*x1985))+((x1977*x1980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1987=(cj4*sj3);
IkReal x1988=((0.0925)*sj3);
IkReal x1989=(cj0*px);
IkReal x1990=((0.0325)*cj4);
IkReal x1991=(sj3*sj4);
IkReal x1992=((0.2688)*sj4);
IkReal x1993=(py*sj0);
IkReal x1994=((0.0925)*cj3);
IkReal x1995=(cj3*pz);
IkReal x1996=(cj3*x1993);
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal(((((0.0325)*pz*x1987))+(((0.2688)*pz*x1991))+(((-0.0037)*cj3))+(((-0.06)*pz))+(((0.010752)*cj3*sj4))+(((-1.0)*x1992*x1996))+((x1989*x1994))+(((-1.0)*x1990*x1996))+((x1993*x1994))+(((-1.0)*pz*x1988))+(((0.0013)*cj3*cj4))+(((-1.0)*cj3*x1989*x1990))+(((-1.0)*cj3*x1989*x1992)))),IkReal(((-0.0024)+(((-0.0325)*x1987*x1989))+(((0.010752)*x1991))+((x1988*x1993))+(((-0.2688)*x1989*x1991))+(((0.0013)*x1987))+(((0.06)*x1989))+(((-0.0037)*sj3))+(((-1.0)*x1992*x1995))+((x1988*x1989))+(((-0.0325)*x1987*x1993))+(((-1.0)*x1990*x1995))+(((0.06)*x1993))+(((-0.2688)*x1991*x1993))+((pz*x1994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
CheckValue<IkReal> x1998=IKPowWithIntegerCheck(IKsign(((-0.08440969)+(((0.0060125)*cj4))+(((-0.0111)*sj3))+(((0.07119719)*(cj4*cj4)))+(((0.0039)*x1987))+(((0.032256)*x1991))+(((-0.017472)*cj4*sj4))+(((0.049728)*sj4)))),-1);
if(!x1998.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1997.value)+(((1.5707963267949)*(x1998.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1999=IKsin(j1);
IkReal x2000=IKcos(j1);
IkReal x2001=((0.0325)*cj4);
IkReal x2002=(py*sj0);
IkReal x2003=((0.185)*pz);
IkReal x2004=(cj0*px);
IkReal x2005=((0.2688)*sj4);
IkReal x2006=(sj3*x1999);
IkReal x2007=(cj3*x2000);
IkReal x2008=((0.185)*x2004);
IkReal x2009=(sj3*x2000);
IkReal x2010=(pz*x1999);
IkReal x2011=(cj3*x1999);
IkReal x2012=((0.12)*x2000);
evalcond[0]=((((-1.0)*x2005*x2007))+(((-0.0925)*x2006))+(((-0.06)*x1999))+(((-1.0)*x2001*x2007))+(((0.0925)*x2007))+pz+((x2005*x2006))+((x2001*x2006)));
evalcond[1]=((0.04)+(((-0.0925)*x2011))+(((-0.0925)*x2009))+(((-0.06)*x2000))+((x2005*x2011))+(((-1.0)*x2004))+(((-1.0)*x2002))+((x2005*x2009))+((x2001*x2009))+((x2001*x2011)));
evalcond[2]=((((-1.0)*x2002*x2007))+((x2002*x2006))+(((-0.04)*x2006))+(((-0.06)*cj3))+((cj3*x2010))+((pz*x2009))+(((-1.0)*x2004*x2007))+((x2004*x2006))+(((0.04)*x2007)));
evalcond[3]=((0.0925)+((x2002*x2009))+(((-0.04)*x2009))+(((0.06)*sj3))+(((-1.0)*pz*x2006))+(((-0.04)*x2011))+((x2004*x2011))+((pz*x2007))+((x2002*x2011))+(((-1.0)*x2001))+(((-1.0)*x2005))+((x2004*x2009)));
evalcond[4]=((-0.0730882)+(((-1.0)*x2008*x2011))+(((0.08)*x2002))+(((0.08)*x2004))+(((-0.0111)*sj3))+(((-1.0)*x2003*x2007))+(((0.0074)*x2011))+(((-1.0)*x2004*x2012))+(((-1.0)*x2002*x2012))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-1.0)*pp))+(((0.0048)*x2000))+(((-1.0)*x2008*x2009))+(((-0.185)*x2002*x2009))+(((0.0074)*x2009))+(((-0.185)*x2002*x2011))+((x2003*x2006))+(((0.12)*x2010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2013=cj3*cj3;
IkReal x2014=pz*pz;
IkReal x2015=(cj0*px);
IkReal x2016=((3.0)*cj3);
IkReal x2017=(cj3*sj3);
IkReal x2018=((0.8064)*sj4);
IkReal x2019=(cj3*pz);
IkReal x2020=(pz*sj3);
IkReal x2021=((0.0975)*cj4);
IkReal x2022=(py*sj0);
IkReal x2023=((50.0)*x2014);
CheckValue<IkReal> x2024 = IKatan2WithCheck(IkReal(((((-50.0)*x2015*x2019))+(((-1.0)*x2013*x2018))+((sj3*x2023))+(((-1.0)*x2013*x2021))+(((-50.0)*x2019*x2022))+(((2.0)*x2019))+(((0.2775)*x2013)))),IkReal(((((-1.0)*cj3*x2023))+(((0.18)*cj3))+(((-1.0)*x2017*x2021))+(((2.0)*x2020))+(((-50.0)*x2020*x2022))+(((-50.0)*x2015*x2020))+(((0.2775)*x2017))+(((-1.0)*x2017*x2018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2024.valid){
continue;
}
CheckValue<IkReal> x2025=IKPowWithIntegerCheck(IKsign(((((4.625)*pz))+(((-1.625)*cj4*pz))+(((-1.0)*x2016*x2022))+(((-1.0)*x2015*x2016))+(((-13.44)*pz*sj4))+(((0.12)*cj3))+(((3.0)*x2020)))),-1);
if(!x2025.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2024.value)+(((1.5707963267949)*(x2025.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2026=IKsin(j1);
IkReal x2027=IKcos(j1);
IkReal x2028=((0.0325)*cj4);
IkReal x2029=(py*sj0);
IkReal x2030=((0.185)*pz);
IkReal x2031=(cj0*px);
IkReal x2032=((0.2688)*sj4);
IkReal x2033=(sj3*x2026);
IkReal x2034=(cj3*x2027);
IkReal x2035=((0.185)*x2031);
IkReal x2036=(sj3*x2027);
IkReal x2037=(pz*x2026);
IkReal x2038=(cj3*x2026);
IkReal x2039=((0.12)*x2027);
evalcond[0]=(((x2032*x2033))+(((-0.0925)*x2033))+(((-0.06)*x2026))+((x2028*x2033))+pz+(((0.0925)*x2034))+(((-1.0)*x2032*x2034))+(((-1.0)*x2028*x2034)));
evalcond[1]=((0.04)+((x2032*x2038))+((x2032*x2036))+(((-0.0925)*x2036))+(((-0.0925)*x2038))+(((-0.06)*x2027))+((x2028*x2036))+((x2028*x2038))+(((-1.0)*x2029))+(((-1.0)*x2031)));
evalcond[2]=(((x2031*x2033))+(((-0.04)*x2033))+(((-0.06)*cj3))+((pz*x2036))+(((-1.0)*x2031*x2034))+((cj3*x2037))+(((-1.0)*x2029*x2034))+((x2029*x2033))+(((0.04)*x2034)));
evalcond[3]=((0.0925)+((x2031*x2038))+((x2031*x2036))+(((-0.04)*x2036))+(((-0.04)*x2038))+(((0.06)*sj3))+(((-1.0)*pz*x2033))+((pz*x2034))+(((-1.0)*x2032))+(((-1.0)*x2028))+((x2029*x2036))+((x2029*x2038)));
evalcond[4]=((-0.0730882)+(((-1.0)*x2035*x2036))+(((-1.0)*x2035*x2038))+(((0.12)*x2037))+(((0.08)*x2031))+(((-0.0111)*sj3))+((x2030*x2033))+(((0.08)*x2029))+(((0.7284)*cj0*py))+(((-1.0)*x2029*x2039))+(((-0.7284)*px*sj0))+(((-1.0)*pp))+(((-1.0)*x2030*x2034))+(((0.0048)*x2027))+(((0.0074)*x2036))+(((0.0074)*x2038))+(((-1.0)*x2031*x2039))+(((-0.185)*x2029*x2038))+(((-0.185)*x2029*x2036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2040=(pz*sj4);
IkReal x2041=(pz*sj3);
IkReal x2042=(cj4*pz);
IkReal x2043=(cj3*py*sj0);
IkReal x2044=(cj0*cj3*px);
j1eval[0]=(cj3+(((112.0)*x2040))+(((-25.0)*x2044))+(((-25.0)*x2041))+(((-25.0)*x2043))+(((-38.5416666666667)*pz))+(((13.5416666666667)*x2042)));
j1eval[1]=IKsign(((((1.625)*x2042))+(((-4.625)*pz))+(((0.12)*cj3))+(((-3.0)*x2043))+(((-3.0)*x2041))+(((-3.0)*x2044))+(((13.44)*x2040))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2045=cj4*cj4;
IkReal x2046=(sj3*sj4);
IkReal x2047=(cj4*sj4);
IkReal x2048=(cj4*sj3);
j1eval[0]=((-21.6435102564103)+(((18.2556897435897)*x2045))+(((-2.84615384615385)*sj3))+x2048+(((12.7507692307692)*sj4))+(((1.54166666666667)*cj4))+(((8.27076923076923)*x2046))+(((-4.48)*x2047)));
j1eval[1]=IKsign(((-0.08440969)+(((0.0060125)*cj4))+(((-0.0111)*sj3))+(((-0.017472)*x2047))+(((0.07119719)*x2045))+(((0.049728)*sj4))+(((0.032256)*x2046))+(((0.0039)*x2048))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2049=(cj0*px);
IkReal x2050=((25.0)*cj4);
IkReal x2051=((0.06)*sj3);
IkReal x2052=(py*sj0);
IkReal x2053=((0.2688)*sj4);
IkReal x2054=((206.769230769231)*sj4);
IkReal x2055=((0.0325)*cj4);
IkReal x2056=(cj3*pz);
IkReal x2057=((46.1538461538462)*sj3);
j1eval[0]=((-2.84615384615385)+(((8.27076923076923)*sj4))+cj4+((x2052*x2057))+((x2049*x2057))+(((71.1538461538462)*x2049))+(((71.1538461538462)*x2052))+(((-46.1538461538462)*x2056))+(((-1.0)*x2049*x2054))+(((-1.0)*x2049*x2050))+(((-1.84615384615385)*sj3))+(((-1.0)*x2050*x2052))+(((-1.0)*x2052*x2054)));
j1eval[1]=IKsign(((-0.0037)+(((-0.0024)*sj3))+((x2049*x2051))+(((0.010752)*sj4))+(((-0.06)*x2056))+(((0.0925)*x2052))+(((-1.0)*x2049*x2055))+(((-1.0)*x2049*x2053))+(((0.0013)*cj4))+((x2051*x2052))+(((-1.0)*x2052*x2053))+(((-1.0)*x2052*x2055))+(((0.0925)*x2049))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j4=0;
sj4=0;
cj4=1.0;
j1eval[0]=IKabs(((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2058=((25.0)*py*sj0);
IkReal x2059=((25.0)*cj0*px);
IkReal x2060=(x2059+x2058);
op[0]=((-1.0)+x2060);
op[1]=0;
op[2]=((1.0)+(((-1.0)*x2060)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2061=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2061);
rxp0_1=(px*r20);
rxp1_0=(r21*x2061);
rxp1_1=(px*r21);
rxp2_0=(r22*x2061);
rxp2_1=(px*r22);
j1eval[0]=((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2062=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2062);
rxp0_1=(px*r20);
rxp1_0=(r21*x2062);
rxp1_1=(px*r21);
rxp2_0=(r22*x2062);
rxp2_1=(px*r22);
j1eval[0]=((-4.69230769230769)+(((8.27076923076923)*sj4))+cj4);
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.477971219266972)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((-64205457.4638844)+(((1605136436.59711)*py*sj0))+(((1605136436.59711)*cj0*px)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2063=IKcos(j1);
IkReal x2064=IKsin(j1);
IkReal x2065=(py*sj0);
IkReal x2066=(cj0*px);
IkReal x2067=((1.0)*x2064);
IkReal x2068=((0.305)*x2063);
evalcond[0]=((6.23e-10)*x2064);
evalcond[1]=((-6.23e-10)+((x2063*x2065))+((x2063*x2066))+(((-0.04)*x2063)));
evalcond[2]=((((0.04)*x2064))+(((-1.0)*x2065*x2067))+(((-1.0)*x2066*x2067)));
evalcond[3]=((0.04409744)+(((-1.0)*(px*px)))+(((0.08)*x2066))+(((0.08)*x2065))+(((0.132)*px*sj0))+(((-1.0)*x2065*x2068))+(((-0.132)*cj0*py))+(((-1.0)*x2066*x2068))+(((-1.0)*(py*py)))+(((0.0122)*x2063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.42297407047914)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((-286993112.760117)+(((7174827819.00292)*cj0*px))+(((7174827819.00292)*py*sj0)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2069=IKcos(j1);
IkReal x2070=IKsin(j1);
IkReal x2071=(py*sj0);
IkReal x2072=(cj0*px);
IkReal x2073=((1.0)*x2070);
IkReal x2074=((0.305)*x2069);
evalcond[0]=((1.39376166958522e-10)*x2070);
evalcond[1]=((-1.39376166958522e-10)+((x2069*x2072))+((x2069*x2071))+(((-0.04)*x2069)));
evalcond[2]=((((-1.0)*x2071*x2073))+(((0.04)*x2070))+(((-1.0)*x2072*x2073)));
evalcond[3]=((0.04409744)+(((-1.0)*(px*px)))+(((0.08)*x2072))+(((0.08)*x2071))+(((0.132)*px*sj0))+(((-1.0)*x2071*x2074))+(((-0.132)*cj0*py))+(((-1.0)*(py*py)))+(((0.0122)*x2069))+(((-1.0)*x2072*x2074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2076=IKPowWithIntegerCheck(((-0.1525)+(((0.0325)*cj4))+(((0.2688)*sj4))),-1);
if(!x2076.valid){
continue;
}
IkReal x2075=x2076.value;
cj1array[0]=(((py*sj0*x2075))+((cj0*px*x2075))+(((-0.04)*x2075)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2077=IKsin(j1);
IkReal x2078=IKcos(j1);
IkReal x2079=((0.2688)*sj4);
IkReal x2080=((0.0325)*cj4);
IkReal x2081=(cj0*px);
IkReal x2082=(py*sj0);
IkReal x2083=((1.0)*x2077);
IkReal x2084=((0.305)*x2078);
evalcond[0]=(((x2077*x2080))+((x2077*x2079))+(((-0.1525)*x2077)));
evalcond[1]=((((0.04)*x2077))+(((-1.0)*x2081*x2083))+(((-1.0)*x2082*x2083)));
evalcond[2]=((0.1525)+((x2078*x2082))+((x2078*x2081))+(((-1.0)*x2080))+(((-1.0)*x2079))+(((-0.04)*x2078)));
evalcond[3]=((0.04409744)+(((-1.0)*(px*px)))+(((0.132)*px*sj0))+(((-1.0)*x2081*x2084))+(((0.08)*x2081))+(((0.08)*x2082))+(((-0.132)*cj0*py))+(((-1.0)*x2082*x2084))+(((0.0122)*x2078))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2086=IKPowWithIntegerCheck(((-0.04)+((cj0*px))+((py*sj0))),-1);
if(!x2086.valid){
continue;
}
IkReal x2085=x2086.value;
cj1array[0]=((((0.0325)*cj4*x2085))+(((-0.1525)*x2085))+(((0.2688)*sj4*x2085)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2087=IKsin(j1);
IkReal x2088=IKcos(j1);
IkReal x2089=((0.2688)*sj4);
IkReal x2090=(py*sj0);
IkReal x2091=(cj0*px);
IkReal x2092=((0.0325)*cj4);
IkReal x2093=((1.0)*x2087);
IkReal x2094=((0.305)*x2088);
evalcond[0]=(((x2087*x2092))+(((-0.1525)*x2087))+((x2087*x2089)));
evalcond[1]=((((-1.0)*x2090*x2093))+(((-1.0)*x2091*x2093))+(((0.04)*x2087)));
evalcond[2]=((0.04)+((x2088*x2092))+(((-0.1525)*x2088))+((x2088*x2089))+(((-1.0)*x2091))+(((-1.0)*x2090)));
evalcond[3]=((0.04409744)+(((-1.0)*x2090*x2094))+(((-1.0)*(px*px)))+(((-1.0)*x2091*x2094))+(((0.132)*px*sj0))+(((0.08)*x2090))+(((0.08)*x2091))+(((-0.132)*cj0*py))+(((0.0122)*x2088))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2095=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2095);
rxp0_1=(px*r20);
rxp1_0=(r21*x2095);
rxp1_1=(px*r21);
rxp2_0=(r22*x2095);
rxp2_1=(px*r22);
j1eval[0]=((1.0)+(((-8.27076923076923)*sj4))+(((-1.0)*cj4)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2096=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2096);
rxp0_1=(px*r20);
rxp1_0=(r21*x2096);
rxp1_1=(px*r21);
rxp2_0=(r22*x2096);
rxp2_1=(px*r22);
j1eval[0]=((1.0)+(((-25.0)*py*sj0))+(((-25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2097=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2097);
rxp0_1=(px*r20);
rxp1_0=(r21*x2097);
rxp1_1=(px*r21);
rxp2_0=(r22*x2097);
rxp2_1=(px*r22);
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2101=IKPowWithIntegerCheck(((-0.0026)+(((0.065)*cj0*px))+(((0.065)*py*sj0))),-1);
if(!x2101.valid){
continue;
}
IkReal x2098=x2101.value;
IkReal x2099=(px*x2098);
IkReal x2100=(py*x2098);
cj1array[0]=((((-0.08)*cj0*x2099))+(((-0.132)*sj0*x2099))+((px*x2099))+(((0.132)*cj0*x2100))+((py*x2100))+(((-0.08)*sj0*x2100))+(((-0.06629744)*x2098)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x2102=IKsin(j1);
IkReal x2103=IKcos(j1);
IkReal x2104=(py*sj0);
IkReal x2105=(cj0*px);
IkReal x2106=((1.0)*x2103);
evalcond[0]=(((x2102*x2105))+((x2102*x2104))+(((-0.04)*x2102)));
evalcond[1]=((((0.04)*x2103))+(((-1.0)*x2105*x2106))+(((-1.0)*x2104*x2106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.90094528974611)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((370156673.740422)+(((-9253916843.51055)*py*sj0))+(((-9253916843.51055)*cj0*px)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2107=IKsin(j1);
IkReal x2108=IKcos(j1);
IkReal x2109=(py*sj0);
IkReal x2110=(cj0*px);
IkReal x2111=((1.0)*x2108);
IkReal x2112=((0.065)*x2108);
evalcond[0]=((-1.08062349912001e-10)*x2107);
evalcond[1]=(((x2107*x2110))+((x2107*x2109))+(((-0.04)*x2107)));
evalcond[2]=((-1.08062349912001e-10)+(((0.04)*x2108))+(((-1.0)*x2109*x2111))+(((-1.0)*x2110*x2111)));
evalcond[3]=((0.06629744)+((x2109*x2112))+(((-1.0)*(px*px)))+(((0.08)*x2109))+(((0.132)*px*sj0))+((x2110*x2112))+(((-0.132)*cj0*py))+(((0.08)*x2110))+(((-1.0)*(py*py)))+(((-0.0026)*x2108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-6.28318530717959)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2113=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2113);
rxp0_1=(px*r20);
rxp1_0=(r21*x2113);
rxp1_1=(px*r21);
rxp2_0=(r22*x2113);
rxp2_1=(px*r22);
sj4=0;
cj4=1.0;
j4=6.2831800034078;
j1eval[0]=((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2117=IKPowWithIntegerCheck(((-0.0026)+(((0.065)*cj0*px))+(((0.065)*py*sj0))),-1);
if(!x2117.valid){
continue;
}
IkReal x2114=x2117.value;
IkReal x2115=(px*x2114);
IkReal x2116=(py*x2114);
cj1array[0]=((((-0.08)*cj0*x2115))+(((-0.06629744)*x2114))+((px*x2115))+(((-0.132)*sj0*x2115))+(((-0.08)*sj0*x2116))+((py*x2116))+(((0.132)*cj0*x2116)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x2118=IKsin(j1);
IkReal x2119=IKcos(j1);
IkReal x2120=(py*sj0);
IkReal x2121=(cj0*px);
IkReal x2122=((1.0)*x2119);
evalcond[0]=((((-0.04)*x2118))+((x2118*x2120))+((x2118*x2121)));
evalcond[1]=((((0.04)*x2119))+(((-1.0)*x2120*x2122))+(((-1.0)*x2121*x2122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2125=IKPowWithIntegerCheck(((0.04)+(((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x2125.valid){
continue;
}
IkReal x2123=x2125.value;
IkReal x2124=((0.0325)*x2123);
cj1array[0]=((((0.2688)*sj4*x2123))+(((-1.0)*x2124))+((cj4*x2124)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2126=IKsin(j1);
IkReal x2127=IKcos(j1);
IkReal x2128=(py*sj0);
IkReal x2129=((0.2688)*sj4);
IkReal x2130=(cj0*px);
IkReal x2131=((0.0325)*x2126);
IkReal x2132=((0.065)*x2127);
IkReal x2133=((0.0325)*x2127);
evalcond[0]=(x2131+(((-1.0)*cj4*x2131))+(((-1.0)*x2126*x2129)));
evalcond[1]=((((-0.04)*x2126))+((x2126*x2130))+((x2126*x2128)));
evalcond[2]=((0.04)+x2133+(((-1.0)*x2128))+(((-1.0)*x2130))+(((-1.0)*x2127*x2129))+(((-1.0)*cj4*x2133)));
evalcond[3]=((0.06629744)+(((-1.0)*(px*px)))+(((0.08)*x2130))+(((0.132)*px*sj0))+(((-0.0026)*x2127))+((x2128*x2132))+(((0.08)*x2128))+(((-0.132)*cj0*py))+(((-1.0)*(py*py)))+((x2130*x2132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2135=IKPowWithIntegerCheck(((0.0325)+(((-0.2688)*sj4))+(((-0.0325)*cj4))),-1);
if(!x2135.valid){
continue;
}
IkReal x2134=x2135.value;
cj1array[0]=(((cj0*px*x2134))+(((-0.04)*x2134))+((py*sj0*x2134)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2136=IKsin(j1);
IkReal x2137=IKcos(j1);
IkReal x2138=(py*sj0);
IkReal x2139=((0.2688)*sj4);
IkReal x2140=(cj0*px);
IkReal x2141=((1.0)*x2137);
IkReal x2142=((0.0325)*x2136);
IkReal x2143=((0.065)*x2137);
evalcond[0]=(x2142+(((-1.0)*cj4*x2142))+(((-1.0)*x2136*x2139)));
evalcond[1]=(((x2136*x2138))+(((-0.04)*x2136))+((x2136*x2140)));
evalcond[2]=((0.0325)+(((-1.0)*x2138*x2141))+(((-1.0)*x2139))+(((0.04)*x2137))+(((-1.0)*x2140*x2141))+(((-0.0325)*cj4)));
evalcond[3]=((0.06629744)+((x2138*x2143))+(((-1.0)*(px*px)))+(((0.08)*x2138))+(((0.132)*px*sj0))+(((0.08)*x2140))+((x2140*x2143))+(((-0.132)*cj0*py))+(((-0.0026)*x2137))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2144=pz*pz;
IkReal x2145=cj4*cj4;
IkReal x2146=cj3*cj3;
IkReal x2147=((0.016128)*sj4);
IkReal x2148=(cj3*sj3);
IkReal x2149=(cj3*pz);
IkReal x2150=(py*sj0);
IkReal x2151=(cj0*px);
IkReal x2152=((0.2688)*sj4);
IkReal x2153=(pz*sj3);
IkReal x2154=((0.00195)*cj4);
IkReal x2155=((0.049728)*sj4);
IkReal x2156=((0.0325)*cj4);
IkReal x2157=((0.0060125)*cj4);
IkReal x2158=(sj3*x2150);
IkReal x2159=((0.07119719)*x2145);
IkReal x2160=((0.017472)*cj4*sj4);
CheckValue<IkReal> x2161 = IKatan2WithCheck(IkReal(((((-1.0)*x2148*x2154))+((x2150*x2153))+((x2151*x2153))+(((0.00555)*x2148))+(((-1.0)*cj3*x2144))+(((0.08080969)*cj3))+(((-1.0)*cj3*x2159))+(((-1.0)*cj3*x2155))+(((-1.0)*cj3*x2157))+(((-1.0)*x2147*x2148))+((cj3*x2160))+(((-0.04)*x2153)))),IkReal(((-0.0111)+(((-1.0)*sj3*x2160))+((sj3*x2144))+((x2149*x2151))+((x2149*x2150))+(((-0.08440969)*sj3))+(((0.0039)*cj4))+(((0.00555)*x2146))+(((0.032256)*sj4))+(((-1.0)*x2146*x2154))+(((-0.04)*x2149))+(((-1.0)*x2146*x2147))+((sj3*x2155))+((sj3*x2157))+((sj3*x2159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2161.valid){
continue;
}
CheckValue<IkReal> x2162=IKPowWithIntegerCheck(IKsign(((-0.0037)+(((-0.0024)*sj3))+(((0.06)*sj3*x2151))+(((0.010752)*sj4))+(((0.0925)*x2150))+(((0.0925)*x2151))+(((0.0013)*cj4))+(((-1.0)*x2150*x2152))+(((-1.0)*x2150*x2156))+(((-1.0)*x2151*x2156))+(((-1.0)*x2151*x2152))+(((-0.06)*x2149))+(((0.06)*x2158)))),-1);
if(!x2162.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2161.value)+(((1.5707963267949)*(x2162.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2163=IKcos(j1);
IkReal x2164=IKsin(j1);
IkReal x2165=((0.0325)*cj4);
IkReal x2166=(cj0*px);
IkReal x2167=((1.0)*pz);
IkReal x2168=(py*sj0);
IkReal x2169=((0.185)*pz);
IkReal x2170=((0.2688)*sj4);
IkReal x2171=(sj3*x2164);
IkReal x2172=(cj3*x2163);
IkReal x2173=(sj3*x2163);
IkReal x2174=(cj3*x2164);
IkReal x2175=((0.12)*x2163);
evalcond[0]=(((x2170*x2172))+((x2170*x2171))+(((-0.06)*x2164))+((x2165*x2172))+((x2165*x2171))+pz+(((-0.0925)*x2171))+(((-0.0925)*x2172)));
evalcond[1]=((0.04)+(((-1.0)*x2170*x2174))+((x2170*x2173))+(((-0.06)*x2163))+((x2165*x2173))+(((-0.0925)*x2173))+(((0.0925)*x2174))+(((-1.0)*x2166))+(((-1.0)*x2168))+(((-1.0)*x2165*x2174)));
evalcond[2]=((((-1.0)*x2168*x2172))+(((-1.0)*x2168*x2171))+(((-1.0)*x2166*x2172))+(((-1.0)*x2166*x2171))+(((-0.06)*cj3))+(((0.04)*x2172))+(((0.04)*x2171))+((pz*x2174))+(((-1.0)*x2167*x2173)));
evalcond[3]=((0.0925)+(((-1.0)*x2168*x2174))+(((0.06)*sj3))+(((-1.0)*x2166*x2174))+((x2166*x2173))+(((0.04)*x2174))+(((-0.04)*x2173))+(((-1.0)*x2165))+(((-1.0)*x2170))+((x2168*x2173))+(((-1.0)*x2167*x2172))+(((-1.0)*x2167*x2171)));
evalcond[4]=((0.05519744)+(((-1.0)*x2168*x2175))+(((-0.0111)*sj3))+(((-0.185)*x2168*x2173))+(((-0.0074)*x2174))+(((0.132)*px*sj0))+(((0.12)*pz*x2164))+(((0.0074)*x2173))+(((-1.0)*x2166*x2175))+(((0.185)*x2168*x2174))+(((-1.0)*pp))+(((0.0048)*x2163))+(((-0.185)*x2166*x2173))+(((-0.132)*cj0*py))+((x2169*x2171))+((x2169*x2172))+(((0.08)*x2168))+(((0.08)*x2166))+(((0.185)*x2166*x2174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2176=(cj4*sj3);
IkReal x2177=((0.0925)*sj3);
IkReal x2178=(cj0*px);
IkReal x2179=((0.0325)*cj4);
IkReal x2180=(sj3*sj4);
IkReal x2181=((0.2688)*sj4);
IkReal x2182=(py*sj0);
IkReal x2183=((0.0925)*cj3);
IkReal x2184=(cj3*pz);
IkReal x2185=(cj3*x2182);
CheckValue<IkReal> x2186 = IKatan2WithCheck(IkReal((((cj3*x2178*x2179))+((x2179*x2185))+(((-0.0013)*cj3*cj4))+(((0.0037)*cj3))+(((-0.06)*pz))+(((0.0325)*pz*x2176))+(((-0.010752)*cj3*sj4))+((x2181*x2185))+(((-1.0)*pz*x2177))+(((0.2688)*pz*x2180))+(((-1.0)*x2182*x2183))+((cj3*x2178*x2181))+(((-1.0)*x2178*x2183)))),IkReal(((-0.0024)+(((0.010752)*x2180))+((x2179*x2184))+(((0.06)*x2178))+(((0.06)*x2182))+(((-0.2688)*x2180*x2182))+(((-0.0325)*x2176*x2178))+((x2177*x2178))+(((-1.0)*pz*x2183))+(((-0.0325)*x2176*x2182))+((x2177*x2182))+(((-0.2688)*x2178*x2180))+((x2181*x2184))+(((-0.0037)*sj3))+(((0.0013)*x2176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2186.valid){
continue;
}
CheckValue<IkReal> x2187=IKPowWithIntegerCheck(IKsign(((-0.08440969)+(((0.0060125)*cj4))+(((-0.0111)*sj3))+(((0.07119719)*(cj4*cj4)))+(((0.0039)*x2176))+(((-0.017472)*cj4*sj4))+(((0.032256)*x2180))+(((0.049728)*sj4)))),-1);
if(!x2187.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2186.value)+(((1.5707963267949)*(x2187.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2188=IKcos(j1);
IkReal x2189=IKsin(j1);
IkReal x2190=((0.0325)*cj4);
IkReal x2191=(cj0*px);
IkReal x2192=((1.0)*pz);
IkReal x2193=(py*sj0);
IkReal x2194=((0.185)*pz);
IkReal x2195=((0.2688)*sj4);
IkReal x2196=(sj3*x2189);
IkReal x2197=(cj3*x2188);
IkReal x2198=(sj3*x2188);
IkReal x2199=(cj3*x2189);
IkReal x2200=((0.12)*x2188);
evalcond[0]=((((-0.0925)*x2197))+(((-0.0925)*x2196))+((x2190*x2197))+((x2190*x2196))+pz+(((-0.06)*x2189))+((x2195*x2197))+((x2195*x2196)));
evalcond[1]=((0.04)+(((-1.0)*x2195*x2199))+(((-1.0)*x2191))+(((-1.0)*x2193))+(((-0.0925)*x2198))+(((0.0925)*x2199))+((x2190*x2198))+(((-0.06)*x2188))+(((-1.0)*x2190*x2199))+((x2195*x2198)));
evalcond[2]=((((-1.0)*x2192*x2198))+(((-0.06)*cj3))+(((-1.0)*x2193*x2196))+(((-1.0)*x2193*x2197))+(((-1.0)*x2191*x2196))+(((-1.0)*x2191*x2197))+(((0.04)*x2196))+(((0.04)*x2197))+((pz*x2199)));
evalcond[3]=((0.0925)+((x2191*x2198))+(((-0.04)*x2198))+((x2193*x2198))+(((0.06)*sj3))+(((-1.0)*x2192*x2196))+(((-1.0)*x2192*x2197))+(((-1.0)*x2193*x2199))+(((-1.0)*x2191*x2199))+(((-1.0)*x2190))+(((-1.0)*x2195))+(((0.04)*x2199)));
evalcond[4]=((0.05519744)+(((0.12)*pz*x2189))+(((-0.0111)*sj3))+((x2194*x2197))+((x2194*x2196))+(((-1.0)*x2193*x2200))+(((0.132)*px*sj0))+(((0.0048)*x2188))+(((-1.0)*pp))+(((-0.0074)*x2199))+(((0.08)*x2193))+(((0.08)*x2191))+(((0.185)*x2193*x2199))+(((-0.132)*cj0*py))+(((-1.0)*x2191*x2200))+(((-0.185)*x2191*x2198))+(((0.0074)*x2198))+(((0.185)*x2191*x2199))+(((-0.185)*x2193*x2198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2201=cj3*cj3;
IkReal x2202=pz*pz;
IkReal x2203=(cj0*px);
IkReal x2204=((3.0)*cj3);
IkReal x2205=(cj3*sj3);
IkReal x2206=((0.8064)*sj4);
IkReal x2207=(cj3*pz);
IkReal x2208=(pz*sj3);
IkReal x2209=((0.0975)*cj4);
IkReal x2210=(py*sj0);
IkReal x2211=((50.0)*x2202);
CheckValue<IkReal> x2212=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2203*x2204))+(((-1.0)*x2204*x2210))+(((13.44)*pz*sj4))+(((-3.0)*x2208))+(((-4.625)*pz))+(((1.625)*cj4*pz))+(((0.12)*cj3)))),-1);
if(!x2212.valid){
continue;
}
CheckValue<IkReal> x2213 = IKatan2WithCheck(IkReal(((((-0.2775)*x2201))+(((-1.0)*sj3*x2211))+((x2201*x2206))+((x2201*x2209))+(((-50.0)*x2203*x2207))+(((-50.0)*x2207*x2210))+(((2.0)*x2207)))),IkReal(((((0.2775)*x2205))+(((0.18)*cj3))+(((-1.0)*x2205*x2209))+(((-1.0)*x2205*x2206))+(((50.0)*x2208*x2210))+(((50.0)*x2203*x2208))+(((-1.0)*cj3*x2211))+(((-2.0)*x2208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2213.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2212.value)))+(x2213.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2214=IKcos(j1);
IkReal x2215=IKsin(j1);
IkReal x2216=((0.0325)*cj4);
IkReal x2217=(cj0*px);
IkReal x2218=((1.0)*pz);
IkReal x2219=(py*sj0);
IkReal x2220=((0.185)*pz);
IkReal x2221=((0.2688)*sj4);
IkReal x2222=(sj3*x2215);
IkReal x2223=(cj3*x2214);
IkReal x2224=(sj3*x2214);
IkReal x2225=(cj3*x2215);
IkReal x2226=((0.12)*x2214);
evalcond[0]=(((x2216*x2223))+((x2216*x2222))+pz+(((-0.0925)*x2223))+(((-0.0925)*x2222))+((x2221*x2222))+((x2221*x2223))+(((-0.06)*x2215)));
evalcond[1]=((0.04)+(((-1.0)*x2219))+(((-1.0)*x2217))+((x2216*x2224))+(((-1.0)*x2221*x2225))+(((0.0925)*x2225))+(((-0.0925)*x2224))+(((-1.0)*x2216*x2225))+((x2221*x2224))+(((-0.06)*x2214)));
evalcond[2]=((((0.04)*x2222))+(((0.04)*x2223))+(((-0.06)*cj3))+(((-1.0)*x2219*x2223))+(((-1.0)*x2219*x2222))+(((-1.0)*x2218*x2224))+(((-1.0)*x2217*x2223))+(((-1.0)*x2217*x2222))+((pz*x2225)));
evalcond[3]=((0.0925)+(((0.04)*x2225))+(((-1.0)*x2216))+(((0.06)*sj3))+(((-1.0)*x2219*x2225))+(((-0.04)*x2224))+(((-1.0)*x2221))+((x2217*x2224))+((x2219*x2224))+(((-1.0)*x2218*x2223))+(((-1.0)*x2218*x2222))+(((-1.0)*x2217*x2225)));
evalcond[4]=((0.05519744)+(((-1.0)*x2219*x2226))+(((-0.185)*x2219*x2224))+(((0.0074)*x2224))+(((-0.0111)*sj3))+(((-1.0)*x2217*x2226))+(((-0.0074)*x2225))+(((0.132)*px*sj0))+(((0.0048)*x2214))+(((0.08)*x2217))+(((0.08)*x2219))+(((-0.185)*x2217*x2224))+(((-1.0)*pp))+(((0.185)*x2219*x2225))+(((-0.132)*cj0*py))+((x2220*x2223))+((x2220*x2222))+(((0.12)*pz*x2215))+(((0.185)*x2217*x2225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2227=((25.0)*cj4);
IkReal x2228=(cj0*px);
IkReal x2229=(pz*sj2);
IkReal x2230=(py*sj0);
IkReal x2231=((206.769230769231)*sj4);
IkReal x2232=((0.0325)*cj4);
IkReal x2233=((0.2688)*sj4);
j1eval[0]=((4.69230769230769)+(((-117.307692307692)*x2230))+((x2228*x2231))+((x2227*x2228))+((x2227*x2230))+((x2230*x2231))+(((-206.769230769231)*cj4*x2229))+(((-165.461538461538)*x2229))+(((-8.27076923076923)*sj4))+(((25.0)*sj4*x2229))+(((-1.0)*cj4))+(((-117.307692307692)*x2228)));
j1eval[1]=IKsign(((0.0061)+((x2228*x2232))+((x2228*x2233))+(((-0.0013)*cj4))+(((0.0325)*sj4*x2229))+((x2230*x2232))+((x2230*x2233))+(((-0.2688)*cj4*x2229))+(((-0.2151)*x2229))+(((-0.010752)*sj4))+(((-0.1525)*x2228))+(((-0.1525)*x2230))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2234=((0.2688)*cj4);
IkReal x2235=((25.0)*sj4);
IkReal x2236=((0.0325)*sj4);
IkReal x2237=(pz*sj4);
IkReal x2238=((206.769230769231)*cj4);
IkReal x2239=(cj4*pz);
IkReal x2240=(sj2*sj4);
IkReal x2241=(cj4*sj2);
IkReal x2242=(py*sj0*sj2);
IkReal x2243=(cj0*px*sj2);
j1eval[0]=((((-6.61846153846154)*sj2))+x2240+(((-8.27076923076923)*x2241))+(((206.769230769231)*x2237))+(((25.0)*x2239))+(((-117.307692307692)*pz))+(((165.461538461538)*x2242))+(((165.461538461538)*x2243))+((x2238*x2242))+((x2238*x2243))+(((-1.0)*x2235*x2242))+(((-1.0)*x2235*x2243)));
j1eval[1]=IKsign(((((0.2688)*x2237))+(((-0.010752)*x2241))+(((0.0013)*x2240))+((x2234*x2242))+((x2234*x2243))+(((-1.0)*x2236*x2243))+(((-1.0)*x2236*x2242))+(((-0.008604)*sj2))+(((0.0325)*x2239))+(((-0.1525)*pz))+(((0.2151)*x2243))+(((0.2151)*x2242))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2244=cj0*cj0;
IkReal x2245=py*py;
IkReal x2246=px*px;
IkReal x2247=pz*pz;
IkReal x2248=(py*sj0);
IkReal x2249=(cj0*cj2*px);
IkReal x2250=(cj2*x2244);
IkReal x2251=((12.5)*x2245);
IkReal x2252=(cj2*x2247);
j1eval[0]=((((-1.0)*x2249))+((cj2*x2251))+(((0.02)*cj2))+(((12.5)*x2246*x2250))+(((12.5)*x2252))+(((25.0)*x2248*x2249))+(((-1.0)*x2250*x2251))+(((-1.0)*cj2*x2248)));
j1eval[1]=IKsign((((x2246*x2250))+x2252+(((-0.08)*cj2*x2248))+((cj2*x2245))+(((0.0016)*cj2))+(((2.0)*x2248*x2249))+(((-1.0)*x2245*x2250))+(((-0.08)*x2249))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x2253=(py*sj0);
IkReal x2254=((0.0325)*sj4);
IkReal x2255=(pz*sj4);
IkReal x2256=((0.2688)*cj4);
IkReal x2257=(cj4*pz);
IkReal x2258=(cj0*px);
IkReal x2259=((25.0)*sj4);
IkReal x2260=((206.769230769231)*cj4);
j1eval[0]=((6.61846153846154)+(((-25.0)*x2257))+(((-1.0)*sj4))+((x2253*x2259))+(((-165.461538461538)*x2258))+(((-165.461538461538)*x2253))+(((-1.0)*x2258*x2260))+((x2258*x2259))+(((-1.0)*x2253*x2260))+(((-206.769230769231)*x2255))+(((8.27076923076923)*cj4))+(((117.307692307692)*pz)));
j1eval[1]=IKsign(((0.008604)+(((-0.2688)*x2255))+(((-0.2151)*x2258))+(((-0.2151)*x2253))+(((-0.0013)*sj4))+(((0.1525)*pz))+((x2254*x2258))+((x2253*x2254))+(((-1.0)*x2256*x2258))+(((-1.0)*x2253*x2256))+(((-0.0325)*x2257))+(((0.010752)*cj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x2261=(cj0*px);
IkReal x2262=((25.0)*cj4);
IkReal x2263=(cj4*pz);
IkReal x2264=((0.2688)*sj4);
IkReal x2265=(py*sj0);
IkReal x2266=(pz*sj4);
IkReal x2267=((206.769230769231)*sj4);
IkReal x2268=((0.0325)*cj4);
j1eval[0]=((4.69230769230769)+(((-206.769230769231)*x2263))+((x2261*x2267))+((x2261*x2262))+(((-165.461538461538)*pz))+((x2262*x2265))+((x2265*x2267))+(((-8.27076923076923)*sj4))+(((-117.307692307692)*x2265))+(((-117.307692307692)*x2261))+(((-1.0)*cj4))+(((25.0)*x2266)));
j1eval[1]=IKsign(((0.0061)+(((0.0325)*x2266))+(((-0.0013)*cj4))+((x2261*x2264))+((x2261*x2268))+(((-0.2151)*pz))+(((-0.1525)*x2265))+(((-0.1525)*x2261))+(((-0.2688)*x2263))+(((-0.010752)*sj4))+((x2264*x2265))+((x2265*x2268))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=((-1.48838853546327)+sj4+(((-1.10170071536125)*cj4)));
j1eval[1]=IKsign(((-0.14283395)+(((0.0959655)*sj4))+(((-0.10572526)*cj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2269=(cj0*px);
IkReal x2270=(py*sj0);
IkReal x2271=((0.0325)*sj4);
IkReal x2272=((0.2688)*cj4);
IkReal x2273=((0.2688)*sj4);
IkReal x2274=((0.0325)*cj4);
CheckValue<IkReal> x2275=IKPowWithIntegerCheck(IKsign(((-0.14283395)+(((0.0959655)*sj4))+(((-0.10572526)*cj4)))),-1);
if(!x2275.valid){
continue;
}
CheckValue<IkReal> x2276 = IKatan2WithCheck(IkReal(((0.008604)+(((-0.0013)*sj4))+((x2270*x2271))+((pz*x2273))+((pz*x2274))+((x2269*x2271))+(((-1.0)*x2270*x2272))+(((-0.2151)*x2270))+(((-0.2151)*x2269))+(((-1.0)*x2269*x2272))+(((-0.1525)*pz))+(((0.010752)*cj4)))),IkReal(((-0.0061)+(((-1.0)*pz*x2272))+(((0.1525)*x2269))+((pz*x2271))+(((0.1525)*x2270))+(((-1.0)*x2270*x2274))+(((-1.0)*x2270*x2273))+(((0.010752)*sj4))+(((-0.2151)*pz))+(((-1.0)*x2269*x2274))+(((-1.0)*x2269*x2273))+(((0.0013)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2276.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2275.value)))+(x2276.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2277=IKcos(j1);
IkReal x2278=IKsin(j1);
IkReal x2279=(py*sj0);
IkReal x2280=(cj0*px);
IkReal x2281=((0.2688)*cj4);
IkReal x2282=((0.0325)*cj4);
IkReal x2283=((0.0325)*sj4);
IkReal x2284=((0.2688)*sj4);
IkReal x2285=((0.305)*x2277);
IkReal x2286=((1.0)*x2278);
IkReal x2287=(sj4*x2278);
IkReal x2288=(pz*x2277);
IkReal x2289=((0.4302)*x2278);
evalcond[0]=((0.1525)+(((-1.0)*x2284))+(((-1.0)*x2282))+((x2277*x2280))+(((-0.04)*x2277))+(((-1.0)*pz*x2286))+((x2277*x2279)));
evalcond[1]=((0.2151)+(((-1.0)*x2280*x2286))+x2281+(((-1.0)*x2283))+(((-1.0)*x2288))+(((-1.0)*x2279*x2286))+(((0.04)*x2278)));
evalcond[2]=((((-1.0)*x2277*x2281))+((x2277*x2283))+((x2278*x2282))+((x2278*x2284))+(((-0.2151)*x2277))+pz+(((-0.1525)*x2278)));
evalcond[3]=((0.04)+(((0.2151)*x2278))+(((-1.0)*x2280))+((x2277*x2284))+((x2277*x2282))+((x2278*x2281))+(((-1.0)*x2278*x2283))+(((-0.1525)*x2277))+(((-1.0)*x2279)));
evalcond[4]=((-0.02004538)+(((-0.017208)*x2278))+(((-0.2982)*px*sj0))+(((-1.0)*x2280*x2285))+((x2280*x2289))+(((0.08)*x2280))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x2279*x2289))+(((-1.0)*x2279*x2285))+(((0.0122)*x2277))+(((0.305)*pz*x2278))+(((0.08)*x2279))+(((0.4302)*x2288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2290=cj4*cj4;
IkReal x2291=(cj0*px);
IkReal x2292=((0.2688)*sj4);
IkReal x2293=(cj4*sj4);
IkReal x2294=(py*sj0);
IkReal x2295=((0.0325)*cj4);
IkReal x2296=((1.0)*pz);
CheckValue<IkReal> x2297=IKPowWithIntegerCheck(IKsign(((0.0061)+(((-0.2688)*cj4*pz))+(((-0.0013)*cj4))+((x2291*x2295))+((x2291*x2292))+(((-0.2151)*pz))+(((-0.010752)*sj4))+((x2292*x2294))+((x2294*x2295))+(((-0.1525)*x2294))+(((-0.1525)*x2291))+(((0.0325)*pz*sj4)))),-1);
if(!x2297.valid){
continue;
}
CheckValue<IkReal> x2298 = IKatan2WithCheck(IkReal(((-0.04153875)+(((0.04)*pz))+(((-0.03400125)*cj4))+(((0.07119719)*x2293))+(((0.06277513)*sj4))+(((0.017472)*x2290))+(((-1.0)*x2291*x2296))+(((-1.0)*x2294*x2296)))),IkReal(((0.09550969)+(((-0.081984)*sj4))+(((-0.07119719)*x2290))+(((-0.0099125)*cj4))+(((-1.0)*pz*x2296))+(((0.017472)*x2293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2298.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2297.value)))+(x2298.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2299=IKcos(j1);
IkReal x2300=IKsin(j1);
IkReal x2301=(py*sj0);
IkReal x2302=(cj0*px);
IkReal x2303=((0.2688)*cj4);
IkReal x2304=((0.0325)*cj4);
IkReal x2305=((0.0325)*sj4);
IkReal x2306=((0.2688)*sj4);
IkReal x2307=((0.305)*x2299);
IkReal x2308=((1.0)*x2300);
IkReal x2309=(sj4*x2300);
IkReal x2310=(pz*x2299);
IkReal x2311=((0.4302)*x2300);
evalcond[0]=((0.1525)+(((-0.04)*x2299))+(((-1.0)*x2306))+(((-1.0)*x2304))+((x2299*x2302))+((x2299*x2301))+(((-1.0)*pz*x2308)));
evalcond[1]=((0.2151)+(((-1.0)*x2310))+(((-1.0)*x2301*x2308))+x2303+(((-1.0)*x2305))+(((0.04)*x2300))+(((-1.0)*x2302*x2308)));
evalcond[2]=(((x2300*x2306))+((x2300*x2304))+(((-0.1525)*x2300))+pz+(((-1.0)*x2299*x2303))+((x2299*x2305))+(((-0.2151)*x2299)));
evalcond[3]=((0.04)+(((-1.0)*x2301))+(((-1.0)*x2302))+((x2300*x2303))+(((-1.0)*x2300*x2305))+(((0.2151)*x2300))+((x2299*x2304))+((x2299*x2306))+(((-0.1525)*x2299)));
evalcond[4]=((-0.02004538)+(((0.0122)*x2299))+(((-0.2982)*px*sj0))+(((-1.0)*x2301*x2307))+(((0.305)*pz*x2300))+((x2302*x2311))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x2301*x2311))+(((0.4302)*x2310))+(((-1.0)*x2302*x2307))+(((0.08)*x2301))+(((0.08)*x2302))+(((-0.017208)*x2300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2312=cj4*cj4;
IkReal x2313=(py*sj0);
IkReal x2314=((0.0325)*sj4);
IkReal x2315=((0.2688)*cj4);
IkReal x2316=(cj0*px);
IkReal x2317=(cj4*sj4);
IkReal x2318=((1.0)*pz);
CheckValue<IkReal> x2319=IKPowWithIntegerCheck(IKsign(((0.008604)+(((-0.0013)*sj4))+(((0.1525)*pz))+(((-0.0325)*cj4*pz))+(((-0.2151)*x2316))+(((-0.2151)*x2313))+(((-0.2688)*pz*sj4))+(((-1.0)*x2315*x2316))+((x2314*x2316))+(((-1.0)*x2313*x2315))+((x2313*x2314))+(((0.010752)*cj4)))),-1);
if(!x2319.valid){
continue;
}
CheckValue<IkReal> x2320 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((0.017472)*x2317))+(((0.0139815)*sj4))+(pz*pz)+(((-0.07119719)*x2312)))),IkReal(((0.04153875)+(((0.04)*pz))+(((-0.06277513)*sj4))+(((0.03400125)*cj4))+(((-1.0)*x2313*x2318))+(((-0.07119719)*x2317))+(((-0.017472)*x2312))+(((-1.0)*x2316*x2318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2320.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2319.value)))+(x2320.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2321=IKcos(j1);
IkReal x2322=IKsin(j1);
IkReal x2323=(py*sj0);
IkReal x2324=(cj0*px);
IkReal x2325=((0.2688)*cj4);
IkReal x2326=((0.0325)*cj4);
IkReal x2327=((0.0325)*sj4);
IkReal x2328=((0.2688)*sj4);
IkReal x2329=((0.305)*x2321);
IkReal x2330=((1.0)*x2322);
IkReal x2331=(sj4*x2322);
IkReal x2332=(pz*x2321);
IkReal x2333=((0.4302)*x2322);
evalcond[0]=((0.1525)+(((-1.0)*pz*x2330))+((x2321*x2323))+((x2321*x2324))+(((-0.04)*x2321))+(((-1.0)*x2326))+(((-1.0)*x2328)));
evalcond[1]=((0.2151)+x2325+(((-1.0)*x2323*x2330))+(((0.04)*x2322))+(((-1.0)*x2332))+(((-1.0)*x2324*x2330))+(((-1.0)*x2327)));
evalcond[2]=((((-1.0)*x2321*x2325))+((x2322*x2326))+((x2322*x2328))+(((-0.2151)*x2321))+((x2321*x2327))+(((-0.1525)*x2322))+pz);
evalcond[3]=((0.04)+(((0.2151)*x2322))+((x2322*x2325))+((x2321*x2328))+((x2321*x2326))+(((-1.0)*x2322*x2327))+(((-0.1525)*x2321))+(((-1.0)*x2323))+(((-1.0)*x2324)));
evalcond[4]=((-0.02004538)+(((-0.2982)*px*sj0))+(((-1.0)*x2324*x2329))+(((0.305)*pz*x2322))+(((-0.017208)*x2322))+(((0.08)*x2323))+(((0.08)*x2324))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x2324*x2333))+(((-1.0)*x2323*x2329))+((x2323*x2333))+(((0.0122)*x2321))+(((0.4302)*x2332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2334=(cj4*pz);
IkReal x2335=(cj0*px);
IkReal x2336=(py*sj0);
IkReal x2337=((206.769230769231)*cj4);
IkReal x2338=((0.2688)*cj4);
IkReal x2339=(pz*sj4);
IkReal x2340=(sj4*x2336);
j1eval[0]=((-6.61846153846154)+(((-206.769230769231)*x2339))+(((-8.27076923076923)*cj4))+sj4+(((165.461538461538)*x2335))+(((165.461538461538)*x2336))+(((-25.0)*x2340))+(((-25.0)*x2334))+((x2336*x2337))+((x2335*x2337))+(((117.307692307692)*pz))+(((-25.0)*sj4*x2335)));
j1eval[1]=IKsign(((-0.008604)+(((-0.2688)*x2339))+(((0.1525)*pz))+(((-0.0325)*x2334))+(((0.2151)*x2336))+(((0.2151)*x2335))+((x2336*x2338))+((x2335*x2338))+(((-0.0325)*sj4*x2335))+(((-0.010752)*cj4))+(((0.0013)*sj4))+(((-0.0325)*x2340))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2341=(cj0*px);
IkReal x2342=((25.0)*cj4);
IkReal x2343=(cj4*pz);
IkReal x2344=((0.2688)*sj4);
IkReal x2345=(py*sj0);
IkReal x2346=(pz*sj4);
IkReal x2347=((206.769230769231)*sj4);
IkReal x2348=((0.0325)*cj4);
j1eval[0]=((4.69230769230769)+((x2341*x2342))+((x2341*x2347))+(((165.461538461538)*pz))+(((-25.0)*x2346))+((x2345*x2347))+(((-117.307692307692)*x2341))+(((-117.307692307692)*x2345))+(((206.769230769231)*x2343))+((x2342*x2345))+(((-8.27076923076923)*sj4))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.0061)+(((0.2688)*x2343))+((x2341*x2348))+((x2341*x2344))+(((-0.1525)*x2341))+(((-0.1525)*x2345))+(((-0.0013)*cj4))+((x2345*x2348))+((x2344*x2345))+(((-0.010752)*sj4))+(((0.2151)*pz))+(((-0.0325)*x2346))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2349=cj0*cj0;
IkReal x2350=py*py;
IkReal x2351=pz*pz;
IkReal x2352=px*px;
IkReal x2353=(py*sj0);
IkReal x2354=(cj0*px);
IkReal x2355=(x2349*x2350);
IkReal x2356=(x2349*x2352);
j1eval[0]=((1.0)+(((625.0)*x2351))+(((625.0)*x2350))+(((625.0)*x2356))+(((-625.0)*x2355))+(((-50.0)*x2354))+(((-50.0)*x2353))+(((1250.0)*x2353*x2354)));
j1eval[1]=IKsign(((0.0016)+x2350+x2351+x2356+(((2.0)*x2353*x2354))+(((-1.0)*x2355))+(((-0.08)*x2354))+(((-0.08)*x2353))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2357=cj0*cj0;
IkReal x2358=py*py;
IkReal x2359=(cj0*px);
IkReal x2360=(py*sj0);
IkReal x2361=((0.0325)*sj4);
IkReal x2362=((0.2688)*cj4);
IkReal x2363=((0.2688)*sj4);
IkReal x2364=((0.0325)*cj4);
CheckValue<IkReal> x2365 = IKatan2WithCheck(IkReal(((0.008604)+(((-0.2151)*x2359))+(((-0.0013)*sj4))+(((0.1525)*pz))+((x2359*x2361))+(((-1.0)*x2359*x2362))+((x2360*x2361))+(((-1.0)*x2360*x2362))+(((-1.0)*pz*x2363))+(((-1.0)*pz*x2364))+(((-0.2151)*x2360))+(((0.010752)*cj4)))),IkReal(((0.0061)+(((-0.1525)*x2359))+((pz*x2361))+(((-0.0013)*cj4))+(((-0.1525)*x2360))+((x2359*x2363))+((x2359*x2364))+(((-0.2151)*pz))+((x2360*x2363))+((x2360*x2364))+(((-0.010752)*sj4))+(((-1.0)*pz*x2362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2365.valid){
continue;
}
CheckValue<IkReal> x2366=IKPowWithIntegerCheck(IKsign(((0.0016)+(((-0.08)*x2360))+((x2357*(px*px)))+x2358+(pz*pz)+(((-1.0)*x2357*x2358))+(((2.0)*x2359*x2360))+(((-0.08)*x2359)))),-1);
if(!x2366.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2365.value)+(((1.5707963267949)*(x2366.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2367=IKsin(j1);
IkReal x2368=IKcos(j1);
IkReal x2369=(py*sj0);
IkReal x2370=((0.0325)*sj4);
IkReal x2371=(cj0*px);
IkReal x2372=((0.2688)*sj4);
IkReal x2373=((0.2688)*cj4);
IkReal x2374=((0.0325)*cj4);
IkReal x2375=((0.305)*x2368);
IkReal x2376=(pz*x2368);
IkReal x2377=(pz*x2367);
IkReal x2378=((0.4302)*x2367);
evalcond[0]=((0.2151)+x2376+x2373+(((-1.0)*x2370))+((x2367*x2369))+((x2367*x2371))+(((-0.04)*x2367)));
evalcond[1]=((0.1525)+((x2368*x2371))+(((-1.0)*x2374))+(((-1.0)*x2372))+(((-1.0)*x2377))+(((-0.04)*x2368))+((x2368*x2369)));
evalcond[2]=(((x2368*x2373))+(((-1.0)*x2368*x2370))+(((-0.1525)*x2367))+((x2367*x2372))+((x2367*x2374))+(((0.2151)*x2368))+pz);
evalcond[3]=((0.04)+((x2368*x2374))+((x2368*x2372))+(((-1.0)*x2371))+(((-1.0)*x2369))+(((-0.1525)*x2368))+((x2367*x2370))+(((-1.0)*x2367*x2373))+(((-0.2151)*x2367)));
evalcond[4]=((-0.02004538)+(((-0.2982)*px*sj0))+(((0.0122)*x2368))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.017208)*x2367))+(((-1.0)*x2369*x2375))+(((-1.0)*x2369*x2378))+(((0.08)*x2369))+(((-0.4302)*x2376))+(((0.08)*x2371))+(((-1.0)*x2371*x2378))+(((-1.0)*x2371*x2375))+(((0.305)*x2377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2379=cj4*cj4;
IkReal x2380=(cj0*px);
IkReal x2381=((0.2688)*sj4);
IkReal x2382=(cj4*sj4);
IkReal x2383=(py*sj0);
IkReal x2384=((0.0325)*cj4);
IkReal x2385=((1.0)*pz);
CheckValue<IkReal> x2386=IKPowWithIntegerCheck(IKsign(((0.0061)+(((-0.0325)*pz*sj4))+((x2381*x2383))+(((-0.1525)*x2380))+(((-0.1525)*x2383))+(((-0.0013)*cj4))+((x2383*x2384))+(((0.2688)*cj4*pz))+((x2380*x2381))+((x2380*x2384))+(((-0.010752)*sj4))+(((0.2151)*pz)))),-1);
if(!x2386.valid){
continue;
}
CheckValue<IkReal> x2387 = IKatan2WithCheck(IkReal(((0.04153875)+(((-1.0)*x2380*x2385))+(((0.04)*pz))+(((-0.06277513)*sj4))+(((-0.07119719)*x2382))+(((0.03400125)*cj4))+(((-0.017472)*x2379))+(((-1.0)*x2383*x2385)))),IkReal(((0.09550969)+(((-0.081984)*sj4))+(((-0.0099125)*cj4))+(((-1.0)*pz*x2385))+(((0.017472)*x2382))+(((-0.07119719)*x2379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2387.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2386.value)))+(x2387.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2388=IKsin(j1);
IkReal x2389=IKcos(j1);
IkReal x2390=(py*sj0);
IkReal x2391=((0.0325)*sj4);
IkReal x2392=(cj0*px);
IkReal x2393=((0.2688)*sj4);
IkReal x2394=((0.2688)*cj4);
IkReal x2395=((0.0325)*cj4);
IkReal x2396=((0.305)*x2389);
IkReal x2397=(pz*x2389);
IkReal x2398=(pz*x2388);
IkReal x2399=((0.4302)*x2388);
evalcond[0]=((0.2151)+x2397+x2394+(((-1.0)*x2391))+((x2388*x2392))+((x2388*x2390))+(((-0.04)*x2388)));
evalcond[1]=((0.1525)+(((-1.0)*x2398))+(((-1.0)*x2393))+(((-1.0)*x2395))+((x2389*x2390))+((x2389*x2392))+(((-0.04)*x2389)));
evalcond[2]=((((-0.1525)*x2388))+(((-1.0)*x2389*x2391))+pz+(((0.2151)*x2389))+((x2388*x2395))+((x2388*x2393))+((x2389*x2394)));
evalcond[3]=((0.04)+(((-0.1525)*x2389))+(((-1.0)*x2392))+(((-1.0)*x2390))+(((-0.2151)*x2388))+(((-1.0)*x2388*x2394))+((x2388*x2391))+((x2389*x2393))+((x2389*x2395)));
evalcond[4]=((-0.02004538)+(((0.08)*x2390))+(((0.08)*x2392))+(((-0.2982)*px*sj0))+(((0.305)*x2398))+(((0.0122)*x2389))+(((-1.0)*x2390*x2399))+(((-1.0)*x2390*x2396))+(((-0.4302)*x2397))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.017208)*x2388))+(((-1.0)*x2392*x2396))+(((-1.0)*x2392*x2399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2400=cj4*cj4;
IkReal x2401=((0.0325)*sj4);
IkReal x2402=(cj0*px);
IkReal x2403=(py*sj0);
IkReal x2404=((0.2688)*cj4);
IkReal x2405=(cj4*sj4);
IkReal x2406=((1.0)*pz);
CheckValue<IkReal> x2407 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((0.017472)*x2405))+(((0.0139815)*sj4))+(pz*pz)+(((-0.07119719)*x2400)))),IkReal(((-0.04153875)+(((0.04)*pz))+(((-0.03400125)*cj4))+(((-1.0)*x2403*x2406))+(((0.017472)*x2400))+(((0.06277513)*sj4))+(((-1.0)*x2402*x2406))+(((0.07119719)*x2405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2407.valid){
continue;
}
CheckValue<IkReal> x2408=IKPowWithIntegerCheck(IKsign(((-0.008604)+(((-1.0)*x2401*x2403))+(((-1.0)*x2401*x2402))+((x2403*x2404))+(((0.1525)*pz))+(((-0.0325)*cj4*pz))+(((-0.2688)*pz*sj4))+(((0.2151)*x2403))+(((0.2151)*x2402))+((x2402*x2404))+(((-0.010752)*cj4))+(((0.0013)*sj4)))),-1);
if(!x2408.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2407.value)+(((1.5707963267949)*(x2408.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2409=IKsin(j1);
IkReal x2410=IKcos(j1);
IkReal x2411=(py*sj0);
IkReal x2412=((0.0325)*sj4);
IkReal x2413=(cj0*px);
IkReal x2414=((0.2688)*sj4);
IkReal x2415=((0.2688)*cj4);
IkReal x2416=((0.0325)*cj4);
IkReal x2417=((0.305)*x2410);
IkReal x2418=(pz*x2410);
IkReal x2419=(pz*x2409);
IkReal x2420=((0.4302)*x2409);
evalcond[0]=((0.2151)+x2415+x2418+((x2409*x2413))+((x2409*x2411))+(((-1.0)*x2412))+(((-0.04)*x2409)));
evalcond[1]=((0.1525)+(((-1.0)*x2419))+((x2410*x2411))+((x2410*x2413))+(((-1.0)*x2416))+(((-1.0)*x2414))+(((-0.04)*x2410)));
evalcond[2]=((((-0.1525)*x2409))+((x2410*x2415))+((x2409*x2416))+((x2409*x2414))+pz+(((0.2151)*x2410))+(((-1.0)*x2410*x2412)));
evalcond[3]=((0.04)+(((-1.0)*x2413))+(((-1.0)*x2411))+((x2410*x2414))+((x2410*x2416))+((x2409*x2412))+(((-0.2151)*x2409))+(((-0.1525)*x2410))+(((-1.0)*x2409*x2415)));
evalcond[4]=((-0.02004538)+(((-0.2982)*px*sj0))+(((-0.4302)*x2418))+(((-1.0)*x2413*x2420))+(((0.017208)*x2409))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-1.0)*x2411*x2417))+(((0.0122)*x2410))+(((-1.0)*x2411*x2420))+(((0.305)*x2419))+(((-1.0)*x2413*x2417))+(((0.08)*x2413))+(((0.08)*x2411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2421=cj0*cj0;
IkReal x2422=py*py;
IkReal x2423=px*px;
IkReal x2424=(py*sj2);
IkReal x2425=((0.2688)*sj4);
IkReal x2426=(cj2*pz);
IkReal x2427=((0.0325)*cj4);
IkReal x2428=((1.0)*px);
IkReal x2429=(pz*sj2);
IkReal x2430=(px*sj2);
IkReal x2431=(cj2*x2422);
IkReal x2432=(cj0*cj2*px);
IkReal x2433=(cj2*py*sj0);
IkReal x2434=(cj0*sj0*sj2);
CheckValue<IkReal> x2435 = IKatan2WithCheck(IkReal(((((0.005964)*sj2))+(((-1.0)*x2423*x2434))+(((-0.1491)*sj0*x2424))+(((2.0)*px*x2421*x2424))+(((-1.0)*x2424*x2428))+(((0.1525)*x2426))+(((-1.0)*x2425*x2426))+(((0.04)*sj0*x2430))+(((-0.1491)*cj0*x2430))+(((-0.04)*cj0*x2424))+((x2422*x2434))+(((-1.0)*x2426*x2427)))),IkReal(((((-0.1525)*x2432))+(((-0.1525)*x2433))+((x2425*x2433))+((x2425*x2432))+((cj0*pz*x2424))+(((-0.1491)*x2429))+(((-1.0)*sj0*x2428*x2429))+(((0.0061)*cj2))+((x2427*x2432))+((x2427*x2433))+(((-0.010752)*cj2*sj4))+(((-0.0013)*cj2*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2435.valid){
continue;
}
CheckValue<IkReal> x2436=IKPowWithIntegerCheck(IKsign(((((-0.08)*x2433))+(((-0.08)*x2432))+x2431+((pz*x2426))+(((0.0016)*cj2))+(((2.0)*py*sj0*x2432))+((cj2*x2421*x2423))+(((-1.0)*x2421*x2431)))),-1);
if(!x2436.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2435.value)+(((1.5707963267949)*(x2436.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2437=IKcos(j1);
IkReal x2438=IKsin(j1);
IkReal x2439=(px*sj2);
IkReal x2440=(py*sj0);
IkReal x2441=((0.4302)*cj0);
IkReal x2442=(cj0*px);
IkReal x2443=((0.2688)*sj4);
IkReal x2444=(cj2*py);
IkReal x2445=(cj0*py);
IkReal x2446=((0.0325)*cj4);
IkReal x2447=((0.2688)*cj4);
IkReal x2448=((0.0325)*sj4);
IkReal x2449=(px*sj0);
IkReal x2450=((1.0)*cj0);
IkReal x2451=((0.305)*x2437);
IkReal x2452=(sj2*x2438);
IkReal x2453=(sj2*x2437);
IkReal x2454=(pz*x2438);
IkReal x2455=(cj2*x2438);
evalcond[0]=((0.1525)+(((-1.0)*x2454))+(((-0.04)*x2437))+((x2437*x2442))+((x2437*x2440))+(((-1.0)*x2443))+(((-1.0)*x2446)));
evalcond[1]=((((-0.1525)*x2438))+(((-0.2151)*x2453))+pz+((x2448*x2453))+(((-1.0)*x2447*x2453))+((x2438*x2443))+((x2438*x2446)));
evalcond[2]=(((x2442*x2455))+((x2440*x2455))+((cj2*pz*x2437))+(((0.1491)*sj2))+(((-1.0)*sj2*x2445))+((sj0*x2439))+(((-0.04)*x2455)));
evalcond[3]=((0.04)+(((-0.1525)*x2437))+(((0.2151)*x2452))+((x2447*x2452))+(((-1.0)*x2448*x2452))+(((-1.0)*x2442))+(((-1.0)*x2440))+((x2437*x2446))+((x2437*x2443)));
evalcond[4]=((0.2151)+((cj2*x2449))+x2447+(((-1.0)*pz*x2453))+(((0.1491)*cj2))+(((-1.0)*x2444*x2450))+(((-1.0)*x2440*x2452))+(((-1.0)*x2438*x2439*x2450))+(((0.04)*x2452))+(((-1.0)*x2448)));
evalcond[5]=((-0.02004538)+(((-1.0)*x2442*x2451))+(((0.2982)*x2445))+(((0.305)*x2454))+(((0.08)*x2440))+(((0.08)*x2442))+(((0.4302)*x2440*x2452))+(((-1.0)*pp))+(((0.4302)*pz*x2453))+(((-0.017208)*x2452))+(((-0.4302)*cj2*x2449))+(((-0.2982)*x2449))+((x2438*x2439*x2441))+((x2441*x2444))+(((-0.06414282)*cj2))+(((-1.0)*x2440*x2451))+(((0.0122)*x2437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2456=cj0*cj0;
IkReal x2457=py*py;
IkReal x2458=cj4*cj4;
IkReal x2459=((0.0325)*sj4);
IkReal x2460=(cj4*sj2);
IkReal x2461=(cj0*px);
IkReal x2462=(py*sj0);
IkReal x2463=(sj2*sj4);
IkReal x2464=(sj2*x2462);
CheckValue<IkReal> x2465 = IKatan2WithCheck(IkReal(((-0.09390969)+x2457+(((0.07119719)*x2458))+(((0.0099125)*cj4))+(((2.0)*x2461*x2462))+(((-0.017472)*cj4*sj4))+(((-0.08)*x2461))+(((-0.08)*x2462))+(((0.081984)*sj4))+(((-1.0)*x2456*x2457))+((x2456*(px*px))))),IkReal((((pz*x2462))+((pz*x2461))+(((-0.03400125)*x2460))+(((-0.04)*pz))+(((-0.04153875)*sj2))+(((0.06277513)*x2463))+(((0.017472)*sj2*x2458))+(((0.07119719)*sj4*x2460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2465.valid){
continue;
}
CheckValue<IkReal> x2466=IKPowWithIntegerCheck(IKsign(((((0.2151)*x2464))+(((0.0325)*cj4*pz))+(((-0.010752)*x2460))+(((0.2688)*x2460*x2462))+(((0.2688)*x2460*x2461))+(((0.2151)*sj2*x2461))+(((0.0013)*x2463))+(((0.2688)*pz*sj4))+(((-0.008604)*sj2))+(((-0.1525)*pz))+(((-1.0)*sj2*x2459*x2461))+(((-1.0)*x2459*x2464)))),-1);
if(!x2466.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2465.value)+(((1.5707963267949)*(x2466.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2467=IKcos(j1);
IkReal x2468=IKsin(j1);
IkReal x2469=(px*sj2);
IkReal x2470=(py*sj0);
IkReal x2471=((0.4302)*cj0);
IkReal x2472=(cj0*px);
IkReal x2473=((0.2688)*sj4);
IkReal x2474=(cj2*py);
IkReal x2475=(cj0*py);
IkReal x2476=((0.0325)*cj4);
IkReal x2477=((0.2688)*cj4);
IkReal x2478=((0.0325)*sj4);
IkReal x2479=(px*sj0);
IkReal x2480=((1.0)*cj0);
IkReal x2481=((0.305)*x2467);
IkReal x2482=(sj2*x2468);
IkReal x2483=(sj2*x2467);
IkReal x2484=(pz*x2468);
IkReal x2485=(cj2*x2468);
evalcond[0]=((0.1525)+(((-0.04)*x2467))+(((-1.0)*x2484))+((x2467*x2472))+((x2467*x2470))+(((-1.0)*x2473))+(((-1.0)*x2476)));
evalcond[1]=((((-0.1525)*x2468))+((x2468*x2476))+((x2468*x2473))+(((-1.0)*x2477*x2483))+pz+((x2478*x2483))+(((-0.2151)*x2483)));
evalcond[2]=((((-0.04)*x2485))+((cj2*pz*x2467))+((x2472*x2485))+((x2470*x2485))+(((0.1491)*sj2))+((sj0*x2469))+(((-1.0)*sj2*x2475)));
evalcond[3]=((0.04)+(((-0.1525)*x2467))+((x2477*x2482))+((x2467*x2476))+((x2467*x2473))+(((-1.0)*x2470))+(((-1.0)*x2472))+(((0.2151)*x2482))+(((-1.0)*x2478*x2482)));
evalcond[4]=((0.2151)+x2477+(((-1.0)*x2468*x2469*x2480))+((cj2*x2479))+(((-1.0)*x2470*x2482))+(((0.1491)*cj2))+(((0.04)*x2482))+(((-1.0)*x2478))+(((-1.0)*pz*x2483))+(((-1.0)*x2474*x2480)));
evalcond[5]=((-0.02004538)+((x2471*x2474))+((x2468*x2469*x2471))+(((-0.4302)*cj2*x2479))+(((-0.2982)*x2479))+(((-0.017208)*x2482))+(((-1.0)*pp))+(((0.0122)*x2467))+(((-1.0)*x2472*x2481))+(((0.2982)*x2475))+(((0.4302)*pz*x2483))+(((0.08)*x2472))+(((0.08)*x2470))+(((-1.0)*x2470*x2481))+(((0.4302)*x2470*x2482))+(((-0.06414282)*cj2))+(((0.305)*x2484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2486=cj4*cj4;
IkReal x2487=(cj4*sj2);
IkReal x2488=(py*sj0);
IkReal x2489=((0.0325)*cj4);
IkReal x2490=(cj0*px);
IkReal x2491=((0.2688)*sj4);
IkReal x2492=(sj2*sj4);
IkReal x2493=((1.0)*pz);
CheckValue<IkReal> x2494 = IKatan2WithCheck(IkReal(((((0.04)*pz))+(((-1.0)*x2490*x2493))+(((0.06277513)*x2492))+(((-0.03400125)*x2487))+(((-0.04153875)*sj2))+(((0.07119719)*sj4*x2487))+(((-1.0)*x2488*x2493))+(((0.017472)*sj2*x2486)))),IkReal(((0.09550969)+(((-0.081984)*sj4))+(((-0.07119719)*x2486))+(((-1.0)*pz*x2493))+(((-0.0099125)*cj4))+(((0.017472)*cj4*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2494.valid){
continue;
}
CheckValue<IkReal> x2495=IKPowWithIntegerCheck(IKsign(((0.0061)+((x2488*x2491))+((x2488*x2489))+(((-0.1525)*x2488))+(((-0.1525)*x2490))+(((-0.0013)*cj4))+((x2490*x2491))+(((-0.010752)*sj4))+(((0.0325)*pz*x2492))+(((-0.2151)*pz*sj2))+(((-0.2688)*pz*x2487))+((x2489*x2490)))),-1);
if(!x2495.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2494.value)+(((1.5707963267949)*(x2495.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2496=IKcos(j1);
IkReal x2497=IKsin(j1);
IkReal x2498=(px*sj2);
IkReal x2499=(py*sj0);
IkReal x2500=((0.4302)*cj0);
IkReal x2501=(cj0*px);
IkReal x2502=((0.2688)*sj4);
IkReal x2503=(cj2*py);
IkReal x2504=(cj0*py);
IkReal x2505=((0.0325)*cj4);
IkReal x2506=((0.2688)*cj4);
IkReal x2507=((0.0325)*sj4);
IkReal x2508=(px*sj0);
IkReal x2509=((1.0)*cj0);
IkReal x2510=((0.305)*x2496);
IkReal x2511=(sj2*x2497);
IkReal x2512=(sj2*x2496);
IkReal x2513=(pz*x2497);
IkReal x2514=(cj2*x2497);
evalcond[0]=((0.1525)+(((-1.0)*x2505))+(((-1.0)*x2502))+((x2496*x2499))+((x2496*x2501))+(((-1.0)*x2513))+(((-0.04)*x2496)));
evalcond[1]=(((x2497*x2505))+((x2497*x2502))+(((-1.0)*x2506*x2512))+(((-0.1525)*x2497))+pz+((x2507*x2512))+(((-0.2151)*x2512)));
evalcond[2]=(((cj2*pz*x2496))+(((-0.04)*x2514))+((x2499*x2514))+((x2501*x2514))+(((0.1491)*sj2))+(((-1.0)*sj2*x2504))+((sj0*x2498)));
evalcond[3]=((0.04)+((x2496*x2505))+((x2496*x2502))+(((0.2151)*x2511))+(((-0.1525)*x2496))+(((-1.0)*x2499))+((x2506*x2511))+(((-1.0)*x2501))+(((-1.0)*x2507*x2511)));
evalcond[4]=((0.2151)+(((-1.0)*pz*x2512))+(((-1.0)*x2507))+x2506+(((0.04)*x2511))+(((-1.0)*x2503*x2509))+(((-1.0)*x2497*x2498*x2509))+(((0.1491)*cj2))+(((-1.0)*x2499*x2511))+((cj2*x2508)));
evalcond[5]=((-0.02004538)+(((0.4302)*x2499*x2511))+(((-0.017208)*x2511))+((x2500*x2503))+((x2497*x2498*x2500))+(((0.08)*x2501))+(((0.305)*x2513))+(((0.0122)*x2496))+(((-1.0)*x2499*x2510))+(((-1.0)*pp))+(((0.08)*x2499))+(((-0.2982)*x2508))+(((-0.4302)*cj2*x2508))+(((0.4302)*pz*x2512))+(((0.2982)*x2504))+(((-1.0)*x2501*x2510))+(((-0.06414282)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2515=(cj0*px);
IkReal x2516=((25.0)*cj4);
IkReal x2517=(pz*sj2);
IkReal x2518=(py*sj0);
IkReal x2519=((206.769230769231)*sj4);
IkReal x2520=((0.0325)*cj4);
IkReal x2521=((0.2688)*sj4);
j1eval[0]=((1.0)+((x2518*x2519))+(((206.769230769231)*cj4*x2517))+(((165.461538461538)*x2517))+(((-25.0)*sj4*x2517))+((x2515*x2516))+((x2515*x2519))+(((-25.0)*x2515))+(((-25.0)*x2518))+(((-8.27076923076923)*sj4))+((x2516*x2518))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.0013)+((x2515*x2520))+((x2515*x2521))+(((0.2151)*x2517))+(((-0.0325)*x2518))+(((-0.0325)*x2515))+(((-0.0013)*cj4))+(((-0.0325)*sj4*x2517))+(((0.2688)*cj4*x2517))+((x2518*x2520))+((x2518*x2521))+(((-0.010752)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2522=(sj2*sj4);
IkReal x2523=((0.2688)*cj4);
IkReal x2524=(cj0*px);
IkReal x2525=(py*sj0);
IkReal x2526=(pz*sj4);
IkReal x2527=(cj4*sj2);
IkReal x2528=((25.0)*pz);
IkReal x2529=((0.0325)*pz);
IkReal x2530=(sj2*x2525);
j1eval[0]=((((-165.461538461538)*x2530))+(((-206.769230769231)*x2524*x2527))+(((25.0)*x2522*x2525))+(((25.0)*x2522*x2524))+(((-1.0)*x2522))+(((-206.769230769231)*x2525*x2527))+(((206.769230769231)*x2526))+(((6.61846153846154)*sj2))+((cj4*x2528))+(((8.27076923076923)*x2527))+(((-165.461538461538)*sj2*x2524))+(((-1.0)*x2528)));
j1eval[1]=IKsign(((((-1.0)*sj2*x2523*x2524))+(((-0.2151)*sj2*x2524))+(((0.2688)*x2526))+(((0.0325)*x2522*x2525))+(((0.0325)*x2522*x2524))+(((-1.0)*x2523*x2530))+((cj4*x2529))+(((0.008604)*sj2))+(((0.010752)*x2527))+(((-0.0013)*x2522))+(((-1.0)*x2529))+(((-0.2151)*x2530))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2531=py*py;
IkReal x2532=cj0*cj0;
IkReal x2533=pz*pz;
IkReal x2534=px*px;
IkReal x2535=(py*sj0);
IkReal x2536=((1.0)*cj2);
IkReal x2537=(cj0*cj2*px);
IkReal x2538=(cj2*x2531);
IkReal x2539=((625.0)*x2532);
IkReal x2540=(cj2*x2533);
j1eval[0]=((((-625.0)*x2538))+(((-1.0)*x2536))+(((-1250.0)*x2535*x2537))+(((50.0)*cj2*x2535))+(((50.0)*x2537))+(((-625.0)*x2540))+(((-1.0)*cj2*x2534*x2539))+((x2538*x2539)));
j1eval[1]=IKsign(((((-1.0)*x2533*x2536))+(((-2.0)*x2535*x2537))+(((-1.0)*x2532*x2534*x2536))+(((-0.0016)*cj2))+(((-1.0)*x2531*x2536))+(((0.08)*x2537))+((x2532*x2538))+(((0.08)*cj2*x2535))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x2541=cj4*cj4;
IkReal x2542=(cj0*px);
IkReal x2543=((25.0)*cj4);
IkReal x2544=((0.017472)*sj4);
IkReal x2545=(cj4*pz);
IkReal x2546=(pz*sj4);
IkReal x2547=(py*sj0);
IkReal x2548=((206.769230769231)*sj4);
IkReal x2549=((0.0325)*cj4);
IkReal x2550=((0.2688)*sj4);
j1eval[0]=((1.0)+((x2543*x2547))+((x2547*x2548))+(((165.461538461538)*pz))+(((206.769230769231)*x2545))+(((-25.0)*x2547))+(((-25.0)*x2546))+(((-25.0)*x2542))+((x2542*x2548))+((x2542*x2543))+(((-8.27076923076923)*sj4))+(((-1.0)*cj4)));
j1eval[1]=((IKabs(((-0.07330969)+x2544+(((0.07119719)*x2541))+(pz*pz)+(((0.0021125)*cj4))+(((-1.0)*cj4*x2544)))))+(IKabs(((-0.01572675)+(((0.07119719)*cj4*sj4))+(((0.017472)*x2541))+(((-0.04)*pz))+(((-0.00174525)*cj4))+((pz*x2547))+((pz*x2542))+(((0.05887513)*sj4))))));
j1eval[2]=IKsign(((0.0013)+((x2547*x2550))+((x2547*x2549))+(((-0.0013)*cj4))+((x2542*x2550))+(((0.2688)*x2545))+((x2542*x2549))+(((-0.010752)*sj4))+(((-0.0325)*x2542))+(((-0.0325)*x2547))+(((-0.0325)*x2546))+(((0.2151)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x2551=(py*sj0);
IkReal x2552=((0.0325)*sj4);
IkReal x2553=(pz*sj4);
IkReal x2554=((0.2688)*cj4);
IkReal x2555=((25.0)*pz);
IkReal x2556=(cj0*px);
IkReal x2557=((0.0325)*pz);
IkReal x2558=((25.0)*sj4);
IkReal x2559=((206.769230769231)*cj4);
j1eval[0]=((6.61846153846154)+(((-1.0)*sj4))+(((-1.0)*x2556*x2559))+((x2551*x2558))+(((206.769230769231)*x2553))+((x2556*x2558))+(((-165.461538461538)*x2556))+(((-165.461538461538)*x2551))+((cj4*x2555))+(((8.27076923076923)*cj4))+(((-1.0)*x2551*x2559))+(((-1.0)*x2555)));
j1eval[1]=IKsign(((0.008604)+(((-0.0013)*sj4))+(((-1.0)*x2554*x2556))+((x2551*x2552))+(((-0.2151)*x2551))+(((-0.2151)*x2556))+((cj4*x2557))+(((0.2688)*x2553))+(((-1.0)*x2551*x2554))+((x2552*x2556))+(((-1.0)*x2557))+(((0.010752)*cj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=((-3.83531085570763)+sj4+(((-3.60930452890775)*cj4)));
j1eval[1]=IKsign(((-0.12063395)+(((-0.11352526)*cj4))+(((0.0314535)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2560=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2560);
rxp0_1=(px*r20);
rxp1_0=(r21*x2560);
rxp1_1=(px*r21);
rxp2_0=(r22*x2560);
rxp2_1=(px*r22);
j1eval[0]=((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2561=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2561);
rxp0_1=(px*r20);
rxp1_0=(r21*x2561);
rxp1_1=(px*r21);
rxp2_0=(r22*x2561);
rxp2_1=(px*r22);
IkReal x2562=cj0*cj0;
IkReal x2563=py*py;
IkReal x2564=(py*sj0);
IkReal x2565=(cj0*px);
IkReal x2566=((625.0)*x2563);
j1eval[0]=((1.0)+(((-25.0)*x2564))+(((-25.0)*x2565)));
j1eval[1]=((-1.0)+((x2562*x2566))+(((50.0)*x2564))+(((50.0)*x2565))+(((-1.0)*x2566))+(((-1250.0)*x2564*x2565))+(((-625.0)*x2562*(px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2567=px*px;
IkReal x2568=cj0*cj0;
IkReal x2569=py*py;
IkReal x2570=(py*sj0);
IkReal x2571=(cj0*px);
IkReal x2572=(px*py);
IkReal x2573=((2982.0)*cj0*sj0);
IkReal x2574=(x2567*x2568);
IkReal x2575=(x2568*x2569);
CheckValue<IkReal> x2576=IKPowWithIntegerCheck(((400.0)+(((-10000.0)*x2571))+(((-10000.0)*x2570))),-1);
if(!x2576.valid){
continue;
}
CheckValue<IkReal> x2577=IKPowWithIntegerCheck(((-1.04)+(((52.0)*x2570))+(((52.0)*x2571))+(((-650.0)*x2574))+(((-1300.0)*x2570*x2571))+(((650.0)*x2575))+(((-650.0)*x2569))),-1);
if(!x2577.valid){
continue;
}
if( IKabs(((-4839.0)*(x2576.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2577.value)*(((-84.13136)+(((-10000.0)*x2569*x2571))+(((-10000.0)*x2571*(px*px)))+(((-10000.0)*x2570*(py*py)))+(((-10000.0)*x2567*x2570))+(((1600.0)*x2570*x2571))+(((119.28)*px*sj0))+(((800.0)*x2574))+(((-800.0)*x2575))+(((-119.28)*cj0*py))+(((1200.0)*x2569))+(((-2982.0)*x2572))+(((2071.284)*x2571))+(((2071.284)*x2570))+(((-1.0)*x2567*x2573))+(((400.0)*x2567))+((x2569*x2573))+(((5964.0)*x2568*x2572)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4839.0)*(x2576.value)))+IKsqr(((x2577.value)*(((-84.13136)+(((-10000.0)*x2569*x2571))+(((-10000.0)*x2571*(px*px)))+(((-10000.0)*x2570*(py*py)))+(((-10000.0)*x2567*x2570))+(((1600.0)*x2570*x2571))+(((119.28)*px*sj0))+(((800.0)*x2574))+(((-800.0)*x2575))+(((-119.28)*cj0*py))+(((1200.0)*x2569))+(((-2982.0)*x2572))+(((2071.284)*x2571))+(((2071.284)*x2570))+(((-1.0)*x2567*x2573))+(((400.0)*x2567))+((x2569*x2573))+(((5964.0)*x2568*x2572))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4839.0)*(x2576.value)), ((x2577.value)*(((-84.13136)+(((-10000.0)*x2569*x2571))+(((-10000.0)*x2571*(px*px)))+(((-10000.0)*x2570*(py*py)))+(((-10000.0)*x2567*x2570))+(((1600.0)*x2570*x2571))+(((119.28)*px*sj0))+(((800.0)*x2574))+(((-800.0)*x2575))+(((-119.28)*cj0*py))+(((1200.0)*x2569))+(((-2982.0)*x2572))+(((2071.284)*x2571))+(((2071.284)*x2570))+(((-1.0)*x2567*x2573))+(((400.0)*x2567))+((x2569*x2573))+(((5964.0)*x2568*x2572))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2578=IKcos(j1);
IkReal x2579=IKsin(j1);
IkReal x2580=(cj0*px);
IkReal x2581=(py*sj0);
IkReal x2582=((1.0)*x2579);
IkReal x2583=((0.4302)*x2579);
IkReal x2584=((1.0)*x2578);
IkReal x2585=((0.065)*x2578);
evalcond[0]=((-0.4839)*x2578);
evalcond[1]=((0.04)+(((-1.0)*x2581))+(((-1.0)*x2580))+(((0.4839)*x2579)));
evalcond[2]=((((0.04)*x2578))+(((-1.0)*x2580*x2584))+(((-1.0)*x2581*x2584)));
evalcond[3]=((0.4839)+(((0.04)*x2579))+(((-1.0)*x2580*x2582))+(((-1.0)*x2581*x2582)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((0.08)*x2580))+(((0.08)*x2581))+(((-1.0)*(px*px)))+(((-0.0026)*x2578))+((x2580*x2585))+((x2580*x2583))+((x2581*x2585))+((x2581*x2583))+(((0.2982)*cj0*py))+(((-0.017208)*x2579))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2586=py*py;
IkReal x2587=cj0*cj0;
IkReal x2588=px*px;
IkReal x2589=(cj0*px);
IkReal x2590=(py*sj0);
IkReal x2591=((4302.0)*x2587);
CheckValue<IkReal> x2592=IKPowWithIntegerCheck(((-12.5814)+(((314.535)*x2590))+(((314.535)*x2589))),-1);
if(!x2592.valid){
continue;
}
if( IKabs(((-0.0826617069642488)+(((2.06654267410622)*x2590))+(((2.06654267410622)*x2589)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2592.value)*(((-17.30940618)+(((1442.9898)*px*sj0))+(((-42.96)*x2590))+(((-42.96)*x2589))+(((4839.0)*x2588))+(((-1442.9898)*cj0*py))+(((537.0)*x2586))+((x2586*x2591))+(((-1.0)*x2588*x2591))+(((-8604.0)*x2589*x2590)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.0826617069642488)+(((2.06654267410622)*x2590))+(((2.06654267410622)*x2589))))+IKsqr(((x2592.value)*(((-17.30940618)+(((1442.9898)*px*sj0))+(((-42.96)*x2590))+(((-42.96)*x2589))+(((4839.0)*x2588))+(((-1442.9898)*cj0*py))+(((537.0)*x2586))+((x2586*x2591))+(((-1.0)*x2588*x2591))+(((-8604.0)*x2589*x2590))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.0826617069642488)+(((2.06654267410622)*x2590))+(((2.06654267410622)*x2589))), ((x2592.value)*(((-17.30940618)+(((1442.9898)*px*sj0))+(((-42.96)*x2590))+(((-42.96)*x2589))+(((4839.0)*x2588))+(((-1442.9898)*cj0*py))+(((537.0)*x2586))+((x2586*x2591))+(((-1.0)*x2588*x2591))+(((-8604.0)*x2589*x2590))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2593=IKcos(j1);
IkReal x2594=IKsin(j1);
IkReal x2595=(cj0*px);
IkReal x2596=(py*sj0);
IkReal x2597=((1.0)*x2594);
IkReal x2598=((0.4302)*x2594);
IkReal x2599=((1.0)*x2593);
IkReal x2600=((0.065)*x2593);
evalcond[0]=((-0.4839)*x2593);
evalcond[1]=((0.04)+(((-1.0)*x2595))+(((-1.0)*x2596))+(((0.4839)*x2594)));
evalcond[2]=((((-1.0)*x2596*x2599))+(((-1.0)*x2595*x2599))+(((0.04)*x2593)));
evalcond[3]=((0.4839)+(((-1.0)*x2596*x2597))+(((-1.0)*x2595*x2597))+(((0.04)*x2594)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((-1.0)*(px*px)))+(((0.08)*x2596))+(((0.08)*x2595))+((x2596*x2600))+((x2595*x2600))+(((0.2982)*cj0*py))+(((-0.017208)*x2594))+((x2595*x2598))+(((-0.0026)*x2593))+(((-1.0)*(py*py)))+((x2596*x2598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2601=(py*sj0);
IkReal x2602=((0.0325)*sj4);
IkReal x2603=((0.2688)*cj4);
IkReal x2604=(cj0*px);
IkReal x2605=((0.2688)*sj4);
IkReal x2606=((0.0325)*pz);
IkReal x2607=((0.0325)*cj4);
CheckValue<IkReal> x2608 = IKatan2WithCheck(IkReal(((0.008604)+(((-0.0013)*sj4))+(((-1.0)*x2601*x2603))+(((-0.2151)*x2604))+(((-0.2151)*x2601))+((x2602*x2604))+(((-1.0)*cj4*x2606))+((x2601*x2602))+(((-1.0)*x2603*x2604))+(((-1.0)*pz*x2605))+x2606+(((0.010752)*cj4)))),IkReal(((0.0013)+((pz*x2602))+(((-0.0013)*cj4))+(((-0.2151)*pz))+((x2601*x2607))+((x2601*x2605))+(((-0.0325)*x2604))+(((-0.0325)*x2601))+(((-0.010752)*sj4))+(((-1.0)*pz*x2603))+((x2604*x2607))+((x2604*x2605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2608.valid){
continue;
}
CheckValue<IkReal> x2609=IKPowWithIntegerCheck(IKsign(((-0.12063395)+(((-0.11352526)*cj4))+(((0.0314535)*sj4)))),-1);
if(!x2609.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2608.value)+(((1.5707963267949)*(x2609.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2610=IKcos(j1);
IkReal x2611=IKsin(j1);
IkReal x2612=(py*sj0);
IkReal x2613=((0.2688)*cj4);
IkReal x2614=((0.0325)*cj4);
IkReal x2615=(cj0*px);
IkReal x2616=((0.2688)*sj4);
IkReal x2617=((1.0)*x2615);
IkReal x2618=((1.0)*x2610);
IkReal x2619=(sj4*x2611);
IkReal x2620=((0.0325)*x2610);
IkReal x2621=(pz*x2611);
IkReal x2622=((0.4302)*x2611);
IkReal x2623=((0.065)*x2610);
evalcond[0]=((0.0325)+(((-1.0)*x2610*x2617))+(((-1.0)*x2612*x2618))+(((0.04)*x2610))+(((-1.0)*x2614))+(((-1.0)*x2616))+x2621);
evalcond[1]=((0.2151)+(((-1.0)*x2611*x2617))+(((0.04)*x2611))+(((-1.0)*pz*x2618))+(((-1.0)*x2611*x2612))+(((-0.0325)*sj4))+x2613);
evalcond[2]=((((-1.0)*x2610*x2613))+(((-1.0)*x2611*x2614))+(((-1.0)*x2611*x2616))+(((-0.2151)*x2610))+((sj4*x2620))+pz+(((0.0325)*x2611)));
evalcond[3]=((0.04)+(((0.2151)*x2611))+(((-1.0)*x2610*x2614))+(((-1.0)*x2610*x2616))+(((-1.0)*x2612))+(((-0.0325)*x2619))+((x2611*x2613))+(((-1.0)*x2617))+x2620);
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((-0.0026)*x2610))+(((0.08)*x2612))+(((0.08)*x2615))+(((0.4302)*pz*x2610))+((x2615*x2622))+((x2615*x2623))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.065)*x2621))+(((-0.017208)*x2611))+((x2612*x2623))+((x2612*x2622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2624=cj4*cj4;
IkReal x2625=((0.0325)*sj4);
IkReal x2626=(cj0*px);
IkReal x2627=(py*sj0);
IkReal x2628=((0.2688)*cj4);
IkReal x2629=(cj4*sj4);
IkReal x2630=((0.0325)*pz);
IkReal x2631=((1.0)*pz);
CheckValue<IkReal> x2632 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((-0.07119719)*x2624))+(((0.017472)*x2629))+(((0.0139815)*sj4))+(pz*pz))),IkReal(((-0.01572675)+(((0.04)*pz))+(((0.017472)*x2624))+(((-0.00174525)*cj4))+(((0.07119719)*x2629))+(((0.05887513)*sj4))+(((-1.0)*x2626*x2631))+(((-1.0)*x2627*x2631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2632.valid){
continue;
}
CheckValue<IkReal> x2633=IKPowWithIntegerCheck(IKsign(((0.008604)+(((-0.0013)*sj4))+(((-0.2151)*x2626))+(((-0.2151)*x2627))+(((-1.0)*x2630))+(((-1.0)*x2627*x2628))+(((-1.0)*x2626*x2628))+(((0.2688)*pz*sj4))+((cj4*x2630))+((x2625*x2627))+((x2625*x2626))+(((0.010752)*cj4)))),-1);
if(!x2633.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2632.value)+(((1.5707963267949)*(x2633.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2634=IKcos(j1);
IkReal x2635=IKsin(j1);
IkReal x2636=(py*sj0);
IkReal x2637=((0.2688)*cj4);
IkReal x2638=((0.0325)*cj4);
IkReal x2639=(cj0*px);
IkReal x2640=((0.2688)*sj4);
IkReal x2641=((1.0)*x2639);
IkReal x2642=((1.0)*x2634);
IkReal x2643=(sj4*x2635);
IkReal x2644=((0.0325)*x2634);
IkReal x2645=(pz*x2635);
IkReal x2646=((0.4302)*x2635);
IkReal x2647=((0.065)*x2634);
evalcond[0]=((0.0325)+(((-1.0)*x2634*x2641))+(((-1.0)*x2638))+(((-1.0)*x2640))+(((-1.0)*x2636*x2642))+(((0.04)*x2634))+x2645);
evalcond[1]=((0.2151)+(((-1.0)*x2635*x2641))+(((-1.0)*pz*x2642))+(((-1.0)*x2635*x2636))+(((-0.0325)*sj4))+(((0.04)*x2635))+x2637);
evalcond[2]=((((-1.0)*x2635*x2640))+((sj4*x2644))+(((0.0325)*x2635))+(((-0.2151)*x2634))+pz+(((-1.0)*x2634*x2637))+(((-1.0)*x2635*x2638)));
evalcond[3]=((0.04)+(((-1.0)*x2634*x2640))+(((-0.0325)*x2643))+(((0.2151)*x2635))+(((-1.0)*x2634*x2638))+(((-1.0)*x2641))+((x2635*x2637))+(((-1.0)*x2636))+x2644);
evalcond[4]=((0.00215462)+(((0.4302)*pz*x2634))+(((-0.017208)*x2635))+(((-0.2982)*px*sj0))+((x2639*x2647))+((x2639*x2646))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x2636*x2647))+((x2636*x2646))+(((-0.0026)*x2634))+(((-0.065)*x2645))+(((0.08)*x2639))+(((0.08)*x2636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2648=cj4*cj4;
IkReal x2649=((0.017472)*sj4);
IkReal x2650=(cj0*px);
IkReal x2651=((0.0325)*cj4);
IkReal x2652=(py*sj0);
IkReal x2653=((0.2688)*sj4);
CheckValue<IkReal> x2654 = IKatan2WithCheck(IkReal(((-0.01572675)+(((0.07119719)*cj4*sj4))+(((-0.04)*pz))+(((0.017472)*x2648))+(((-0.00174525)*cj4))+(((0.05887513)*sj4))+((pz*x2650))+((pz*x2652)))),IkReal(((-0.07330969)+(((0.07119719)*x2648))+(pz*pz)+(((0.0021125)*cj4))+(((-1.0)*cj4*x2649))+x2649)),IKFAST_ATAN2_MAGTHRESH);
if(!x2654.valid){
continue;
}
CheckValue<IkReal> x2655=IKPowWithIntegerCheck(IKsign(((0.0013)+(((-0.0325)*pz*sj4))+(((-0.0013)*cj4))+(((-0.0325)*x2650))+(((-0.0325)*x2652))+(((0.2688)*cj4*pz))+((x2652*x2653))+(((-0.010752)*sj4))+((x2651*x2652))+((x2650*x2651))+((x2650*x2653))+(((0.2151)*pz)))),-1);
if(!x2655.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2654.value)+(((1.5707963267949)*(x2655.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2656=IKcos(j1);
IkReal x2657=IKsin(j1);
IkReal x2658=(py*sj0);
IkReal x2659=((0.2688)*cj4);
IkReal x2660=((0.0325)*cj4);
IkReal x2661=(cj0*px);
IkReal x2662=((0.2688)*sj4);
IkReal x2663=((1.0)*x2661);
IkReal x2664=((1.0)*x2656);
IkReal x2665=(sj4*x2657);
IkReal x2666=((0.0325)*x2656);
IkReal x2667=(pz*x2657);
IkReal x2668=((0.4302)*x2657);
IkReal x2669=((0.065)*x2656);
evalcond[0]=((0.0325)+(((-1.0)*x2660))+(((-1.0)*x2662))+(((-1.0)*x2658*x2664))+(((0.04)*x2656))+(((-1.0)*x2656*x2663))+x2667);
evalcond[1]=((0.2151)+(((-1.0)*x2657*x2658))+(((-1.0)*x2657*x2663))+(((0.04)*x2657))+(((-1.0)*pz*x2664))+(((-0.0325)*sj4))+x2659);
evalcond[2]=((((0.0325)*x2657))+((sj4*x2666))+(((-1.0)*x2657*x2660))+(((-1.0)*x2657*x2662))+pz+(((-0.2151)*x2656))+(((-1.0)*x2656*x2659)));
evalcond[3]=((0.04)+((x2657*x2659))+(((-0.0325)*x2665))+(((-1.0)*x2663))+(((0.2151)*x2657))+(((-1.0)*x2658))+(((-1.0)*x2656*x2662))+(((-1.0)*x2656*x2660))+x2666);
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((0.08)*x2661))+((x2661*x2669))+((x2661*x2668))+((x2658*x2669))+((x2658*x2668))+(((0.08)*x2658))+(((0.4302)*pz*x2656))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.0026)*x2656))+(((-0.017208)*x2657))+(((-0.065)*x2667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2670=cj4*cj4;
IkReal x2671=(cj0*px);
IkReal x2672=((25.0)*cj4);
IkReal x2673=((0.017472)*sj4);
IkReal x2674=(cj4*pz);
IkReal x2675=(pz*sj4);
IkReal x2676=(py*sj0);
IkReal x2677=((206.769230769231)*sj4);
IkReal x2678=((0.0325)*cj4);
IkReal x2679=((0.2688)*sj4);
j1eval[0]=((1.0)+(((-206.769230769231)*x2674))+((x2672*x2676))+(((25.0)*x2675))+(((-25.0)*x2676))+(((-25.0)*x2671))+(((-165.461538461538)*pz))+((x2671*x2672))+((x2671*x2677))+(((-8.27076923076923)*sj4))+(((-1.0)*cj4))+((x2676*x2677)));
j1eval[1]=((IKabs(((-0.07330969)+(pz*pz)+(((0.0021125)*cj4))+(((-1.0)*cj4*x2673))+(((0.07119719)*x2670))+x2673)))+(IKabs(((0.01572675)+(((-0.017472)*x2670))+(((-0.04)*pz))+((pz*x2676))+((pz*x2671))+(((0.00174525)*cj4))+(((-0.07119719)*cj4*sj4))+(((-0.05887513)*sj4))))));
j1eval[2]=IKsign(((0.0013)+(((-0.0325)*x2671))+(((-0.0325)*x2676))+(((0.0325)*x2675))+(((-0.0013)*cj4))+(((-0.2688)*x2674))+(((-0.2151)*pz))+((x2671*x2679))+((x2671*x2678))+(((-0.010752)*sj4))+((x2676*x2678))+((x2676*x2679))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2680=((0.0325)*pz);
IkReal x2681=(py*sj0);
IkReal x2682=((0.0325)*sj4);
IkReal x2683=((25.0)*sj4);
IkReal x2684=(cj0*px);
IkReal x2685=((0.2688)*cj4);
IkReal x2686=((25.0)*pz);
IkReal x2687=((206.769230769231)*cj4);
IkReal x2688=(pz*sj4);
j1eval[0]=((-6.61846153846154)+(((-8.27076923076923)*cj4))+(((206.769230769231)*x2688))+sj4+(((-1.0)*x2683*x2684))+((x2684*x2687))+((cj4*x2686))+(((-1.0)*x2681*x2683))+(((-1.0)*x2686))+(((165.461538461538)*x2681))+(((165.461538461538)*x2684))+((x2681*x2687)));
j1eval[1]=IKsign(((-0.008604)+((x2684*x2685))+((cj4*x2680))+(((-1.0)*x2681*x2682))+(((-1.0)*x2680))+(((-1.0)*x2682*x2684))+(((0.2688)*x2688))+(((-0.010752)*cj4))+(((0.2151)*x2684))+(((0.2151)*x2681))+((x2681*x2685))+(((0.0013)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2689=((25.0)*cj4);
IkReal x2690=(cj0*px);
IkReal x2691=(pz*sj4);
IkReal x2692=(py*sj0);
IkReal x2693=((0.2688)*sj4);
IkReal x2694=((0.0325)*cj4);
IkReal x2695=(cj4*pz);
IkReal x2696=((206.769230769231)*sj4);
j1eval[0]=((-1.0)+(((-1.0)*x2692*x2696))+(((8.27076923076923)*sj4))+cj4+(((165.461538461538)*pz))+(((206.769230769231)*x2695))+(((-25.0)*x2691))+(((-1.0)*x2689*x2690))+(((-1.0)*x2689*x2692))+(((25.0)*x2692))+(((25.0)*x2690))+(((-1.0)*x2690*x2696)));
j1eval[1]=IKsign(((-0.0013)+(((-1.0)*x2692*x2694))+(((-1.0)*x2692*x2693))+(((-0.0325)*x2691))+(((0.0325)*x2692))+(((0.0325)*x2690))+(((0.010752)*sj4))+(((0.0013)*cj4))+(((0.2688)*x2695))+(((-1.0)*x2690*x2694))+(((-1.0)*x2690*x2693))+(((0.2151)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2697=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2697);
rxp0_1=(px*r20);
rxp1_0=(r21*x2697);
rxp1_1=(px*r21);
rxp2_0=(r22*x2697);
rxp2_1=(px*r22);
j1eval[0]=((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2698=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2698);
rxp0_1=(px*r20);
rxp1_0=(r21*x2698);
rxp1_1=(px*r21);
rxp2_0=(r22*x2698);
rxp2_1=(px*r22);
IkReal x2699=cj0*cj0;
IkReal x2700=py*py;
IkReal x2701=(py*sj0);
IkReal x2702=(cj0*px);
IkReal x2703=((625.0)*x2700);
j1eval[0]=((-1.0)+(((25.0)*x2702))+(((25.0)*x2701)));
j1eval[1]=((1.0)+x2703+(((625.0)*x2699*(px*px)))+(((-50.0)*x2702))+(((-50.0)*x2701))+(((1250.0)*x2701*x2702))+(((-1.0)*x2699*x2703)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2704=py*py;
IkReal x2705=px*px;
IkReal x2706=cj0*cj0;
IkReal x2707=(py*sj0);
IkReal x2708=(cj0*px);
IkReal x2709=(px*py);
IkReal x2710=((2982.0)*cj0*sj0);
IkReal x2711=(x2705*x2706);
IkReal x2712=(x2704*x2706);
CheckValue<IkReal> x2713=IKPowWithIntegerCheck(((-400.0)+(((10000.0)*x2708))+(((10000.0)*x2707))),-1);
if(!x2713.valid){
continue;
}
CheckValue<IkReal> x2714=IKPowWithIntegerCheck(((1.04)+(((650.0)*x2704))+(((-650.0)*x2712))+(((-52.0)*x2708))+(((-52.0)*x2707))+(((1300.0)*x2707*x2708))+(((650.0)*x2711))),-1);
if(!x2714.valid){
continue;
}
if( IKabs(((-4839.0)*(x2713.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2714.value)*(((84.13136)+(((-1.0)*x2704*x2710))+(((-1600.0)*x2707*x2708))+(((119.28)*cj0*py))+(((800.0)*x2712))+(((-5964.0)*x2706*x2709))+(((10000.0)*x2708*(px*px)))+(((2982.0)*x2709))+(((-400.0)*x2705))+(((-119.28)*px*sj0))+(((10000.0)*x2707*(py*py)))+(((10000.0)*x2705*x2707))+(((-800.0)*x2711))+(((10000.0)*x2704*x2708))+((x2705*x2710))+(((-1200.0)*x2704))+(((-2071.284)*x2708))+(((-2071.284)*x2707)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4839.0)*(x2713.value)))+IKsqr(((x2714.value)*(((84.13136)+(((-1.0)*x2704*x2710))+(((-1600.0)*x2707*x2708))+(((119.28)*cj0*py))+(((800.0)*x2712))+(((-5964.0)*x2706*x2709))+(((10000.0)*x2708*(px*px)))+(((2982.0)*x2709))+(((-400.0)*x2705))+(((-119.28)*px*sj0))+(((10000.0)*x2707*(py*py)))+(((10000.0)*x2705*x2707))+(((-800.0)*x2711))+(((10000.0)*x2704*x2708))+((x2705*x2710))+(((-1200.0)*x2704))+(((-2071.284)*x2708))+(((-2071.284)*x2707))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4839.0)*(x2713.value)), ((x2714.value)*(((84.13136)+(((-1.0)*x2704*x2710))+(((-1600.0)*x2707*x2708))+(((119.28)*cj0*py))+(((800.0)*x2712))+(((-5964.0)*x2706*x2709))+(((10000.0)*x2708*(px*px)))+(((2982.0)*x2709))+(((-400.0)*x2705))+(((-119.28)*px*sj0))+(((10000.0)*x2707*(py*py)))+(((10000.0)*x2705*x2707))+(((-800.0)*x2711))+(((10000.0)*x2704*x2708))+((x2705*x2710))+(((-1200.0)*x2704))+(((-2071.284)*x2708))+(((-2071.284)*x2707))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2715=IKsin(j1);
IkReal x2716=IKcos(j1);
IkReal x2717=(py*sj0);
IkReal x2718=(cj0*px);
IkReal x2719=((1.0)*x2717);
IkReal x2720=((0.065)*x2716);
IkReal x2721=(x2715*x2717);
evalcond[0]=((0.4839)*x2716);
evalcond[1]=((0.04)+(((-0.4839)*x2715))+(((-1.0)*x2718))+(((-1.0)*x2719)));
evalcond[2]=((0.4839)+x2721+((x2715*x2718))+(((-0.04)*x2715)));
evalcond[3]=((((0.04)*x2716))+(((-1.0)*x2716*x2718))+(((-1.0)*x2716*x2719)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((-1.0)*(px*px)))+(((-0.0026)*x2716))+(((-0.4302)*x2721))+(((-0.4302)*x2715*x2718))+((x2717*x2720))+(((0.2982)*cj0*py))+((x2718*x2720))+(((0.017208)*x2715))+(((-1.0)*(py*py)))+(((0.08)*x2717))+(((0.08)*x2718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2722=py*py;
IkReal x2723=cj0*cj0;
IkReal x2724=px*px;
IkReal x2725=(cj0*px);
IkReal x2726=(py*sj0);
IkReal x2727=((4302.0)*x2723);
CheckValue<IkReal> x2728=IKPowWithIntegerCheck(((-12.5814)+(((314.535)*x2725))+(((314.535)*x2726))),-1);
if(!x2728.valid){
continue;
}
if( IKabs(((0.0826617069642488)+(((-2.06654267410622)*x2725))+(((-2.06654267410622)*x2726)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2728.value)*(((-17.30940618)+(((1442.9898)*px*sj0))+(((-1.0)*x2724*x2727))+(((-8604.0)*x2725*x2726))+(((-1442.9898)*cj0*py))+(((-42.96)*x2725))+(((-42.96)*x2726))+((x2722*x2727))+(((4839.0)*x2724))+(((537.0)*x2722)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0826617069642488)+(((-2.06654267410622)*x2725))+(((-2.06654267410622)*x2726))))+IKsqr(((x2728.value)*(((-17.30940618)+(((1442.9898)*px*sj0))+(((-1.0)*x2724*x2727))+(((-8604.0)*x2725*x2726))+(((-1442.9898)*cj0*py))+(((-42.96)*x2725))+(((-42.96)*x2726))+((x2722*x2727))+(((4839.0)*x2724))+(((537.0)*x2722))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0826617069642488)+(((-2.06654267410622)*x2725))+(((-2.06654267410622)*x2726))), ((x2728.value)*(((-17.30940618)+(((1442.9898)*px*sj0))+(((-1.0)*x2724*x2727))+(((-8604.0)*x2725*x2726))+(((-1442.9898)*cj0*py))+(((-42.96)*x2725))+(((-42.96)*x2726))+((x2722*x2727))+(((4839.0)*x2724))+(((537.0)*x2722))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2729=IKsin(j1);
IkReal x2730=IKcos(j1);
IkReal x2731=(py*sj0);
IkReal x2732=(cj0*px);
IkReal x2733=((1.0)*x2731);
IkReal x2734=((0.065)*x2730);
IkReal x2735=(x2729*x2731);
evalcond[0]=((0.4839)*x2730);
evalcond[1]=((0.04)+(((-1.0)*x2732))+(((-0.4839)*x2729))+(((-1.0)*x2733)));
evalcond[2]=((0.4839)+x2735+(((-0.04)*x2729))+((x2729*x2732)));
evalcond[3]=((((-1.0)*x2730*x2733))+(((-1.0)*x2730*x2732))+(((0.04)*x2730)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((-1.0)*(px*px)))+(((-0.4302)*x2735))+(((-0.0026)*x2730))+((x2731*x2734))+(((0.08)*x2732))+(((0.08)*x2731))+(((0.2982)*cj0*py))+((x2732*x2734))+(((-0.4302)*x2729*x2732))+(((-1.0)*(py*py)))+(((0.017208)*x2729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2736=cj0*cj0;
IkReal x2737=py*py;
IkReal x2738=cj4*cj4;
IkReal x2739=(cj0*px);
IkReal x2740=((0.2688)*sj4);
IkReal x2741=(cj4*sj4);
IkReal x2742=(py*sj0);
IkReal x2743=((0.0325)*cj4);
IkReal x2744=((1.0)*pz);
CheckValue<IkReal> x2745=IKPowWithIntegerCheck(IKsign(((-0.0013)+(((-0.0325)*pz*sj4))+(((0.0325)*x2742))+(((-1.0)*x2739*x2740))+(((-1.0)*x2739*x2743))+(((-1.0)*x2740*x2742))+(((0.010752)*sj4))+(((0.2688)*cj4*pz))+(((0.0013)*cj4))+(((0.0325)*x2739))+(((-1.0)*x2742*x2743))+(((0.2151)*pz)))),-1);
if(!x2745.valid){
continue;
}
CheckValue<IkReal> x2746 = IKatan2WithCheck(IkReal(((-0.01572675)+(((0.04)*pz))+(((0.017472)*x2738))+(((0.07119719)*x2741))+(((-1.0)*x2739*x2744))+(((-0.00174525)*cj4))+(((0.05887513)*sj4))+(((-1.0)*x2742*x2744)))),IkReal(((-0.04572426)+(((-0.11563776)*cj4))+x2737+(((-0.08)*x2739))+(((0.017472)*x2741))+(((0.0139815)*sj4))+(((2.0)*x2739*x2742))+(((-1.0)*x2736*x2737))+(((-0.08)*x2742))+(((-0.07119719)*x2738))+((x2736*(px*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2746.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2745.value)))+(x2746.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2747=IKsin(j1);
IkReal x2748=IKcos(j1);
IkReal x2749=(py*sj0);
IkReal x2750=((0.2688)*cj4);
IkReal x2751=((0.0325)*cj4);
IkReal x2752=(cj0*px);
IkReal x2753=((0.2688)*sj4);
IkReal x2754=(sj4*x2747);
IkReal x2755=((1.0)*x2748);
IkReal x2756=(pz*x2748);
IkReal x2757=((0.0325)*x2748);
IkReal x2758=(pz*x2747);
IkReal x2759=((0.4302)*x2747);
IkReal x2760=((0.065)*x2748);
evalcond[0]=((0.2151)+x2756+x2750+(((-0.04)*x2747))+((x2747*x2749))+((x2747*x2752))+(((-0.0325)*sj4)));
evalcond[1]=((0.0325)+x2758+(((-1.0)*x2752*x2755))+(((0.04)*x2748))+(((-1.0)*x2749*x2755))+(((-1.0)*x2753))+(((-1.0)*x2751)));
evalcond[2]=((((0.0325)*x2747))+(((0.2151)*x2748))+pz+((x2748*x2750))+(((-1.0)*sj4*x2757))+(((-1.0)*x2747*x2751))+(((-1.0)*x2747*x2753)));
evalcond[3]=((0.04)+x2757+(((0.0325)*x2754))+(((-1.0)*x2748*x2751))+(((-1.0)*x2748*x2753))+(((-1.0)*x2752))+(((-1.0)*x2749))+(((-1.0)*x2747*x2750))+(((-0.2151)*x2747)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((-1.0)*x2752*x2759))+(((-0.4302)*x2756))+(((0.017208)*x2747))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.08)*x2749))+(((0.08)*x2752))+(((-0.0026)*x2748))+((x2749*x2760))+((x2752*x2760))+(((-0.065)*x2758))+(((-1.0)*x2749*x2759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2761=cj4*cj4;
IkReal x2762=((0.0325)*sj4);
IkReal x2763=(cj0*px);
IkReal x2764=(py*sj0);
IkReal x2765=((0.2688)*cj4);
IkReal x2766=(cj4*sj4);
IkReal x2767=((0.0325)*pz);
IkReal x2768=((1.0)*pz);
CheckValue<IkReal> x2769=IKPowWithIntegerCheck(IKsign(((-0.008604)+((cj4*x2767))+(((0.2151)*x2763))+(((0.2151)*x2764))+(((-1.0)*x2762*x2764))+(((-1.0)*x2762*x2763))+(((-1.0)*x2767))+(((0.2688)*pz*sj4))+(((-0.010752)*cj4))+(((0.0013)*sj4))+((x2764*x2765))+((x2763*x2765)))),-1);
if(!x2769.valid){
continue;
}
CheckValue<IkReal> x2770 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((-0.07119719)*x2761))+(((0.0139815)*sj4))+(pz*pz)+(((0.017472)*x2766)))),IkReal(((0.01572675)+(((-1.0)*x2764*x2768))+(((0.04)*pz))+(((-0.017472)*x2761))+(((-0.07119719)*x2766))+(((0.00174525)*cj4))+(((-0.05887513)*sj4))+(((-1.0)*x2763*x2768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2770.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2769.value)))+(x2770.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2771=IKsin(j1);
IkReal x2772=IKcos(j1);
IkReal x2773=(py*sj0);
IkReal x2774=((0.2688)*cj4);
IkReal x2775=((0.0325)*cj4);
IkReal x2776=(cj0*px);
IkReal x2777=((0.2688)*sj4);
IkReal x2778=(sj4*x2771);
IkReal x2779=((1.0)*x2772);
IkReal x2780=(pz*x2772);
IkReal x2781=((0.0325)*x2772);
IkReal x2782=(pz*x2771);
IkReal x2783=((0.4302)*x2771);
IkReal x2784=((0.065)*x2772);
evalcond[0]=((0.2151)+x2774+x2780+((x2771*x2773))+((x2771*x2776))+(((-0.04)*x2771))+(((-0.0325)*sj4)));
evalcond[1]=((0.0325)+x2782+(((-1.0)*x2776*x2779))+(((0.04)*x2772))+(((-1.0)*x2773*x2779))+(((-1.0)*x2777))+(((-1.0)*x2775)));
evalcond[2]=((((0.0325)*x2771))+(((-1.0)*sj4*x2781))+(((-1.0)*x2771*x2775))+(((-1.0)*x2771*x2777))+pz+(((0.2151)*x2772))+((x2772*x2774)));
evalcond[3]=((0.04)+x2781+(((0.0325)*x2778))+(((-1.0)*x2776))+(((-1.0)*x2773))+(((-1.0)*x2772*x2775))+(((-1.0)*x2772*x2777))+(((-1.0)*x2771*x2774))+(((-0.2151)*x2771)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((-0.0026)*x2772))+(((0.08)*x2776))+(((0.08)*x2773))+(((-0.4302)*x2780))+((x2776*x2784))+(((-0.065)*x2782))+((x2773*x2784))+(((0.017208)*x2771))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-1.0)*x2776*x2783))+(((-1.0)*x2773*x2783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2785=cj4*cj4;
IkReal x2786=((0.017472)*sj4);
IkReal x2787=(cj0*px);
IkReal x2788=((0.2688)*sj4);
IkReal x2789=((0.0325)*cj4);
IkReal x2790=(py*sj0);
CheckValue<IkReal> x2791 = IKatan2WithCheck(IkReal(((0.01572675)+(((-0.017472)*x2785))+((pz*x2790))+(((-0.04)*pz))+((pz*x2787))+(((0.00174525)*cj4))+(((-0.07119719)*cj4*sj4))+(((-0.05887513)*sj4)))),IkReal(((-0.07330969)+x2786+(((-1.0)*cj4*x2786))+(pz*pz)+(((0.0021125)*cj4))+(((0.07119719)*x2785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2791.valid){
continue;
}
CheckValue<IkReal> x2792=IKPowWithIntegerCheck(IKsign(((0.0013)+(((-0.2688)*cj4*pz))+((x2787*x2789))+((x2787*x2788))+(((-0.0013)*cj4))+((x2789*x2790))+(((-0.2151)*pz))+(((-0.010752)*sj4))+(((-0.0325)*x2790))+(((-0.0325)*x2787))+((x2788*x2790))+(((0.0325)*pz*sj4)))),-1);
if(!x2792.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2791.value)+(((1.5707963267949)*(x2792.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2793=IKsin(j1);
IkReal x2794=IKcos(j1);
IkReal x2795=(py*sj0);
IkReal x2796=((0.2688)*cj4);
IkReal x2797=((0.0325)*cj4);
IkReal x2798=(cj0*px);
IkReal x2799=((0.2688)*sj4);
IkReal x2800=(sj4*x2793);
IkReal x2801=((1.0)*x2794);
IkReal x2802=(pz*x2794);
IkReal x2803=((0.0325)*x2794);
IkReal x2804=(pz*x2793);
IkReal x2805=((0.4302)*x2793);
IkReal x2806=((0.065)*x2794);
evalcond[0]=((0.2151)+x2796+(((-0.04)*x2793))+((x2793*x2798))+((x2793*x2795))+x2802+(((-0.0325)*sj4)));
evalcond[1]=((0.0325)+(((-1.0)*x2799))+(((-1.0)*x2797))+(((0.04)*x2794))+(((-1.0)*x2795*x2801))+(((-1.0)*x2798*x2801))+x2804);
evalcond[2]=((((0.2151)*x2794))+(((-1.0)*sj4*x2803))+((x2794*x2796))+(((0.0325)*x2793))+pz+(((-1.0)*x2793*x2799))+(((-1.0)*x2793*x2797)));
evalcond[3]=((0.04)+(((-0.2151)*x2793))+(((-1.0)*x2798))+(((-1.0)*x2795))+x2803+(((-1.0)*x2793*x2796))+(((-1.0)*x2794*x2799))+(((-1.0)*x2794*x2797))+(((0.0325)*x2800)));
evalcond[4]=((0.00215462)+(((-0.2982)*px*sj0))+(((-0.065)*x2804))+((x2798*x2806))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.0026)*x2794))+(((0.08)*x2795))+(((0.08)*x2798))+(((-1.0)*x2795*x2805))+(((-0.4302)*x2802))+(((-1.0)*x2798*x2805))+((x2795*x2806))+(((0.017208)*x2793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x2807=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2807);
rxp0_1=(px*r20);
rxp1_0=(r21*x2807);
rxp1_1=(px*r21);
rxp2_0=(r22*x2807);
rxp2_1=(px*r22);
IkReal x2808=((25.0)*sj2);
j1eval[0]=sj2;
j1eval[1]=((((-1.0)*sj2))+((cj0*px*x2808))+((py*sj0*x2808)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2809=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2809);
rxp0_1=(px*r20);
rxp1_0=(r21*x2809);
rxp1_1=(px*r21);
rxp2_0=(r22*x2809);
rxp2_1=(px*r22);
IkReal x2810=py*py;
IkReal x2811=cj0*cj0;
IkReal x2812=((50.0)*sj2);
IkReal x2813=(cj0*px);
IkReal x2814=(py*sj0);
IkReal x2815=((1.0)*sj2);
IkReal x2816=((625.0)*sj2);
j1eval[0]=((((-1.0)*x2813*x2815))+(((0.04)*sj2))+(((-1.0)*x2814*x2815)));
j1eval[1]=((((-1.0)*x2810*x2816))+((x2812*x2813))+((x2812*x2814))+(((-1250.0)*sj2*x2813*x2814))+(((-1.0)*x2811*x2816*(px*px)))+((x2810*x2811*x2816))+(((-1.0)*x2815)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2817=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2817);
rxp0_1=(px*r20);
rxp1_0=(r21*x2817);
rxp1_1=(px*r21);
rxp2_0=(r22*x2817);
rxp2_1=(px*r22);
IkReal x2818=py*py;
IkReal x2819=cj0*cj0;
IkReal x2820=(py*sj0);
IkReal x2821=((1.0)*cj2);
IkReal x2822=(cj0*cj2*px);
IkReal x2823=((625.0)*cj2*x2818);
j1eval[0]=((((-1.0)*x2820*x2821))+(((0.04)*cj2))+(((-1.0)*cj0*px*x2821)));
j1eval[1]=(((x2819*x2823))+(((50.0)*x2822))+(((-625.0)*cj2*x2819*(px*px)))+(((-1250.0)*x2820*x2822))+(((50.0)*cj2*x2820))+(((-1.0)*x2823))+(((-1.0)*x2821)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2824=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2824);
rxp0_1=(px*r20);
rxp1_0=(r21*x2824);
rxp1_1=(px*r21);
rxp2_0=(r22*x2824);
rxp2_1=(px*r22);
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2828=IKPowWithIntegerCheck(((-0.0026)+(((0.065)*cj0*px))+(((0.065)*py*sj0))),-1);
if(!x2828.valid){
continue;
}
IkReal x2825=x2828.value;
IkReal x2826=(cj0*x2825);
IkReal x2827=(sj0*x2825);
cj1array[0]=((((-0.7284)*py*x2826))+((x2825*(py*py)))+(((0.7284)*px*x2827))+(((0.0619882)*x2825))+((x2825*(px*px)))+(((-0.08)*px*x2826))+(((-0.08)*py*x2827)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x2829=IKsin(j1);
IkReal x2830=IKcos(j1);
IkReal x2831=((1.0)*py*sj0);
IkReal x2832=((1.0)*cj0*px);
evalcond[0]=((((0.04)*x2829))+(((-1.0)*x2829*x2831))+(((-1.0)*x2829*x2832)));
evalcond[1]=((((0.04)*x2830))+(((-1.0)*x2830*x2832))+(((-1.0)*x2830*x2831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2833=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2833);
rxp0_1=(px*r20);
rxp1_0=(r21*x2833);
rxp1_1=(px*r21);
rxp2_0=(r22*x2833);
rxp2_1=(px*r22);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x2837=IKPowWithIntegerCheck(((-0.0026)+(((0.065)*cj0*px))+(((0.065)*py*sj0))),-1);
if(!x2837.valid){
continue;
}
IkReal x2834=x2837.value;
IkReal x2835=(px*x2834);
IkReal x2836=(py*x2834);
cj1array[0]=(((px*x2835))+((py*x2836))+(((-0.08)*cj0*x2835))+(((0.132)*cj0*x2836))+(((-0.06629744)*x2834))+(((-0.08)*sj0*x2836))+(((-0.132)*sj0*x2835)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x2838=IKsin(j1);
IkReal x2839=IKcos(j1);
IkReal x2840=(py*sj0);
IkReal x2841=(cj0*px);
IkReal x2842=((1.0)*x2839);
evalcond[0]=(((x2838*x2841))+((x2838*x2840))+(((-0.04)*x2838)));
evalcond[1]=((((-1.0)*x2840*x2842))+(((0.04)*x2839))+(((-1.0)*x2841*x2842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2843=py*py;
IkReal x2844=cj0*cj0;
IkReal x2845=px*px;
IkReal x2846=(px*sj0);
IkReal x2847=(px*py);
IkReal x2848=((0.011928)*cj2);
IkReal x2849=(cj2*py);
IkReal x2850=(cj0*px);
IkReal x2851=((1.0)*py);
IkReal x2852=((1.0)*cj2);
IkReal x2853=(cj0*py);
IkReal x2854=(cj2*x2845);
IkReal x2855=((0.065)*x2844);
IkReal x2856=(sj0*x2852);
IkReal x2857=(cj2*x2843);
IkReal x2858=((0.08)*x2844);
IkReal x2859=((0.4302)*cj0*sj0);
IkReal x2860=((0.2982)*cj0*sj0);
CheckValue<IkReal> x2861=IKPowWithIntegerCheck(((((0.04)*cj2))+(((-1.0)*x2850*x2852))+(((-1.0)*sj0*x2849))),-1);
if(!x2861.valid){
continue;
}
CheckValue<IkReal> x2862=IKPowWithIntegerCheck((((x2855*x2857))+(((-0.13)*cj0*x2846*x2849))+(((-0.065)*x2857))+(((0.0052)*cj2*x2850))+(((-1.0)*x2854*x2855))+(((0.0052)*sj0*x2849))+(((-0.000104)*cj2))),-1);
if(!x2862.valid){
continue;
}
if( IKabs(((x2861.value)*((((sj2*x2846))+(((-1.0)*cj0*sj2*x2851))+(((0.1491)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2862.value)*(((0.0025657128)+(((-0.06414282)*py*sj0))+((x2857*x2860))+(((-1.0)*x2845*x2859))+(((-0.00104538)*cj2*x2850))+(((0.8604)*x2844*x2847))+(((-1.0)*x2854*x2860))+(((-1.0)*x2850*x2852*(px*px)))+((x2846*x2848))+(((-1.0)*sj0*x2845*x2849))+(((-1.0)*py*sj0*x2849*x2851))+(((-0.2982)*cj2*x2847))+(((0.5964)*cj2*x2844*x2847))+((x2843*x2859))+(((-1.0)*x2843*x2850*x2852))+(((-1.0)*x2848*x2853))+(((-1.0)*x2857*x2858))+(((0.12)*x2857))+(((-0.00104538)*sj0*x2849))+(((-0.017208)*x2853))+(((0.017208)*x2846))+(((0.04)*x2854))+(((-0.4302)*x2847))+(((-0.06414282)*x2850))+((x2854*x2858))+(((-8.61848e-5)*cj2))+(((0.16)*cj0*x2846*x2849)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2861.value)*((((sj2*x2846))+(((-1.0)*cj0*sj2*x2851))+(((0.1491)*sj2))))))+IKsqr(((x2862.value)*(((0.0025657128)+(((-0.06414282)*py*sj0))+((x2857*x2860))+(((-1.0)*x2845*x2859))+(((-0.00104538)*cj2*x2850))+(((0.8604)*x2844*x2847))+(((-1.0)*x2854*x2860))+(((-1.0)*x2850*x2852*(px*px)))+((x2846*x2848))+(((-1.0)*sj0*x2845*x2849))+(((-1.0)*py*sj0*x2849*x2851))+(((-0.2982)*cj2*x2847))+(((0.5964)*cj2*x2844*x2847))+((x2843*x2859))+(((-1.0)*x2843*x2850*x2852))+(((-1.0)*x2848*x2853))+(((-1.0)*x2857*x2858))+(((0.12)*x2857))+(((-0.00104538)*sj0*x2849))+(((-0.017208)*x2853))+(((0.017208)*x2846))+(((0.04)*x2854))+(((-0.4302)*x2847))+(((-0.06414282)*x2850))+((x2854*x2858))+(((-8.61848e-5)*cj2))+(((0.16)*cj0*x2846*x2849))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2861.value)*((((sj2*x2846))+(((-1.0)*cj0*sj2*x2851))+(((0.1491)*sj2))))), ((x2862.value)*(((0.0025657128)+(((-0.06414282)*py*sj0))+((x2857*x2860))+(((-1.0)*x2845*x2859))+(((-0.00104538)*cj2*x2850))+(((0.8604)*x2844*x2847))+(((-1.0)*x2854*x2860))+(((-1.0)*x2850*x2852*(px*px)))+((x2846*x2848))+(((-1.0)*sj0*x2845*x2849))+(((-1.0)*py*sj0*x2849*x2851))+(((-0.2982)*cj2*x2847))+(((0.5964)*cj2*x2844*x2847))+((x2843*x2859))+(((-1.0)*x2843*x2850*x2852))+(((-1.0)*x2848*x2853))+(((-1.0)*x2857*x2858))+(((0.12)*x2857))+(((-0.00104538)*sj0*x2849))+(((-0.017208)*x2853))+(((0.017208)*x2846))+(((0.04)*x2854))+(((-0.4302)*x2847))+(((-0.06414282)*x2850))+((x2854*x2858))+(((-8.61848e-5)*cj2))+(((0.16)*cj0*x2846*x2849))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2863=IKcos(j1);
IkReal x2864=IKsin(j1);
IkReal x2865=(cj0*px);
IkReal x2866=(cj0*py);
IkReal x2867=(px*sj0);
IkReal x2868=((0.4302)*cj2);
IkReal x2869=(py*sj0);
IkReal x2870=((1.0)*cj2);
IkReal x2871=(sj2*x2864);
IkReal x2872=((1.0)*x2863);
IkReal x2873=((0.065)*x2863);
evalcond[0]=((-0.4839)*sj2*x2863);
evalcond[1]=((0.04)+(((-1.0)*x2869))+(((-1.0)*x2865))+(((0.4839)*x2871)));
evalcond[2]=((((-1.0)*x2865*x2872))+(((-1.0)*x2869*x2872))+(((0.04)*x2863)));
evalcond[3]=(((sj2*x2866))+(((-1.0)*sj2*x2867))+(((-1.0)*x2864*x2865*x2870))+(((0.04)*cj2*x2864))+(((-1.0)*x2864*x2869*x2870))+(((-0.1491)*sj2)));
evalcond[4]=((0.4839)+(((-1.0)*x2865*x2871))+(((0.04)*x2871))+(((0.1491)*cj2))+((cj2*x2867))+(((-1.0)*x2869*x2871))+(((-1.0)*x2866*x2870)));
evalcond[5]=((0.00215462)+((x2865*x2873))+(((-1.0)*(px*px)))+(((0.2982)*x2866))+((x2869*x2873))+(((0.08)*x2869))+(((0.08)*x2865))+((x2866*x2868))+(((-0.017208)*x2871))+(((0.4302)*x2869*x2871))+(((-0.0026)*x2863))+(((-1.0)*x2867*x2868))+(((0.4302)*x2865*x2871))+(((-0.2982)*x2867))+(((-1.0)*(py*py)))+(((-0.06414282)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2874=px*px;
IkReal x2875=cj0*cj0;
IkReal x2876=py*py;
IkReal x2877=(sj0*sj2);
IkReal x2878=((0.2982)*cj0);
IkReal x2879=(px*py);
IkReal x2880=((0.04)*sj2);
IkReal x2881=((1.0)*px);
IkReal x2882=((1.0)*py);
IkReal x2883=(cj0*py);
IkReal x2884=(cj0*sj2);
IkReal x2885=(sj2*x2875);
IkReal x2886=(sj2*x2876);
CheckValue<IkReal> x2887=IKPowWithIntegerCheck(((((-1.0)*x2877*x2882))+x2880+(((-1.0)*x2881*x2884))),-1);
if(!x2887.valid){
continue;
}
CheckValue<IkReal> x2888=IKPowWithIntegerCheck(((((-0.065)*x2874*x2885))+(((0.0052)*px*x2884))+(((-0.000104)*sj2))+(((-0.065)*x2886))+(((-0.13)*cj0*x2877*x2879))+(((0.065)*x2876*x2885))+(((0.0052)*py*x2877))),-1);
if(!x2888.valid){
continue;
}
if( IKabs(((x2887.value)*(((-0.4839)+(((-0.1491)*cj2))+((cj2*x2883))+(((-1.0)*cj2*sj0*x2881)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2888.value)*(((((0.12)*x2886))+(((0.5964)*x2879*x2885))+(((-0.2982)*sj2*x2879))+(((-0.008413136)*sj2))+(((-0.011928)*sj2*x2883))+(((0.16)*cj0*x2877*x2879))+(((0.2071284)*px*x2884))+((x2876*x2877*x2878))+(((-1.0)*x2876*x2881*x2884))+(((-0.08)*x2876*x2885))+(((-1.0)*x2874*x2877*x2878))+(((0.2071284)*py*x2877))+((x2874*x2880))+(((0.08)*x2874*x2885))+(((0.011928)*px*x2877))+(((-1.0)*x2881*x2884*(px*px)))+(((-1.0)*x2874*x2877*x2882))+(((-1.0)*x2877*x2882*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2887.value)*(((-0.4839)+(((-0.1491)*cj2))+((cj2*x2883))+(((-1.0)*cj2*sj0*x2881))))))+IKsqr(((x2888.value)*(((((0.12)*x2886))+(((0.5964)*x2879*x2885))+(((-0.2982)*sj2*x2879))+(((-0.008413136)*sj2))+(((-0.011928)*sj2*x2883))+(((0.16)*cj0*x2877*x2879))+(((0.2071284)*px*x2884))+((x2876*x2877*x2878))+(((-1.0)*x2876*x2881*x2884))+(((-0.08)*x2876*x2885))+(((-1.0)*x2874*x2877*x2878))+(((0.2071284)*py*x2877))+((x2874*x2880))+(((0.08)*x2874*x2885))+(((0.011928)*px*x2877))+(((-1.0)*x2881*x2884*(px*px)))+(((-1.0)*x2874*x2877*x2882))+(((-1.0)*x2877*x2882*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2887.value)*(((-0.4839)+(((-0.1491)*cj2))+((cj2*x2883))+(((-1.0)*cj2*sj0*x2881))))), ((x2888.value)*(((((0.12)*x2886))+(((0.5964)*x2879*x2885))+(((-0.2982)*sj2*x2879))+(((-0.008413136)*sj2))+(((-0.011928)*sj2*x2883))+(((0.16)*cj0*x2877*x2879))+(((0.2071284)*px*x2884))+((x2876*x2877*x2878))+(((-1.0)*x2876*x2881*x2884))+(((-0.08)*x2876*x2885))+(((-1.0)*x2874*x2877*x2878))+(((0.2071284)*py*x2877))+((x2874*x2880))+(((0.08)*x2874*x2885))+(((0.011928)*px*x2877))+(((-1.0)*x2881*x2884*(px*px)))+(((-1.0)*x2874*x2877*x2882))+(((-1.0)*x2877*x2882*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2889=IKcos(j1);
IkReal x2890=IKsin(j1);
IkReal x2891=(cj0*px);
IkReal x2892=(cj0*py);
IkReal x2893=(px*sj0);
IkReal x2894=((0.4302)*cj2);
IkReal x2895=(py*sj0);
IkReal x2896=((1.0)*cj2);
IkReal x2897=(sj2*x2890);
IkReal x2898=((1.0)*x2889);
IkReal x2899=((0.065)*x2889);
evalcond[0]=((-0.4839)*sj2*x2889);
evalcond[1]=((0.04)+(((0.4839)*x2897))+(((-1.0)*x2891))+(((-1.0)*x2895)));
evalcond[2]=((((0.04)*x2889))+(((-1.0)*x2891*x2898))+(((-1.0)*x2895*x2898)));
evalcond[3]=(((sj2*x2892))+(((-1.0)*x2890*x2891*x2896))+(((0.04)*cj2*x2890))+(((-1.0)*sj2*x2893))+(((-1.0)*x2890*x2895*x2896))+(((-0.1491)*sj2)));
evalcond[4]=((0.4839)+(((-1.0)*x2895*x2897))+(((0.04)*x2897))+(((-1.0)*x2892*x2896))+((cj2*x2893))+(((0.1491)*cj2))+(((-1.0)*x2891*x2897)));
evalcond[5]=((0.00215462)+((x2891*x2899))+(((-1.0)*(px*px)))+(((0.2982)*x2892))+((x2895*x2899))+((x2892*x2894))+(((0.4302)*x2895*x2897))+(((0.08)*x2891))+(((0.08)*x2895))+(((-1.0)*x2893*x2894))+(((0.4302)*x2891*x2897))+(((-0.2982)*x2893))+(((-1.0)*(py*py)))+(((-0.06414282)*cj2))+(((-0.0026)*x2889))+(((-0.017208)*x2897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2900=py*py;
IkReal x2901=cj0*cj0;
IkReal x2902=px*px;
IkReal x2903=(sj0*sj2);
IkReal x2904=(cj0*px);
IkReal x2905=((2081.7378)*cj2);
IkReal x2906=(sj2*x2900);
IkReal x2907=(sj2*x2902);
IkReal x2908=((4302.0)*x2901);
IkReal x2909=(cj0*py*sj2);
CheckValue<IkReal> x2910=IKPowWithIntegerCheck(sj2,-1);
if(!x2910.valid){
continue;
}
CheckValue<IkReal> x2911=IKPowWithIntegerCheck(((((-12.5814)*sj2))+(((314.535)*sj2*x2904))+(((314.535)*py*x2903))),-1);
if(!x2911.valid){
continue;
}
if( IKabs(((0.000206654267410622)*(x2910.value)*(((-400.0)+(((10000.0)*py*sj0))+(((10000.0)*x2904)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2911.value)*((((px*x2903*x2905))+(((-1.0)*x2905*x2909))+(((310.38710598)*cj2*sj2))+((x2906*x2908))+(((-1442.9898)*x2909))+(((537.0)*x2906))+(((-8604.0)*py*x2903*x2904))+(((-42.96)*py*x2903))+(((-1.0)*x2907*x2908))+(((-42.96)*sj2*x2904))+(((1442.9898)*px*x2903))+(((4839.0)*x2907))+(((-17.30940618)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000206654267410622)*(x2910.value)*(((-400.0)+(((10000.0)*py*sj0))+(((10000.0)*x2904))))))+IKsqr(((x2911.value)*((((px*x2903*x2905))+(((-1.0)*x2905*x2909))+(((310.38710598)*cj2*sj2))+((x2906*x2908))+(((-1442.9898)*x2909))+(((537.0)*x2906))+(((-8604.0)*py*x2903*x2904))+(((-42.96)*py*x2903))+(((-1.0)*x2907*x2908))+(((-42.96)*sj2*x2904))+(((1442.9898)*px*x2903))+(((4839.0)*x2907))+(((-17.30940618)*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.000206654267410622)*(x2910.value)*(((-400.0)+(((10000.0)*py*sj0))+(((10000.0)*x2904))))), ((x2911.value)*((((px*x2903*x2905))+(((-1.0)*x2905*x2909))+(((310.38710598)*cj2*sj2))+((x2906*x2908))+(((-1442.9898)*x2909))+(((537.0)*x2906))+(((-8604.0)*py*x2903*x2904))+(((-42.96)*py*x2903))+(((-1.0)*x2907*x2908))+(((-42.96)*sj2*x2904))+(((1442.9898)*px*x2903))+(((4839.0)*x2907))+(((-17.30940618)*sj2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2912=IKcos(j1);
IkReal x2913=IKsin(j1);
IkReal x2914=(cj0*px);
IkReal x2915=(cj0*py);
IkReal x2916=(px*sj0);
IkReal x2917=((0.4302)*cj2);
IkReal x2918=(py*sj0);
IkReal x2919=((1.0)*cj2);
IkReal x2920=(sj2*x2913);
IkReal x2921=((1.0)*x2912);
IkReal x2922=((0.065)*x2912);
evalcond[0]=((-0.4839)*sj2*x2912);
evalcond[1]=((0.04)+(((-1.0)*x2918))+(((-1.0)*x2914))+(((0.4839)*x2920)));
evalcond[2]=((((0.04)*x2912))+(((-1.0)*x2914*x2921))+(((-1.0)*x2918*x2921)));
evalcond[3]=((((-1.0)*x2913*x2914*x2919))+(((-1.0)*sj2*x2916))+(((0.04)*cj2*x2913))+(((-1.0)*x2913*x2918*x2919))+(((-0.1491)*sj2))+((sj2*x2915)));
evalcond[4]=((0.4839)+(((-1.0)*x2915*x2919))+((cj2*x2916))+(((0.1491)*cj2))+(((-1.0)*x2918*x2920))+(((0.04)*x2920))+(((-1.0)*x2914*x2920)));
evalcond[5]=((0.00215462)+(((-1.0)*(px*px)))+(((0.4302)*x2914*x2920))+((x2914*x2922))+((x2918*x2922))+((x2915*x2917))+(((0.08)*x2918))+(((0.08)*x2914))+(((-0.0026)*x2912))+(((-0.2982)*x2916))+(((-1.0)*(py*py)))+(((0.4302)*x2918*x2920))+(((-0.017208)*x2920))+(((0.2982)*x2915))+(((-0.06414282)*cj2))+(((-1.0)*x2916*x2917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=0;
sj2=0;
cj2=1.0;
j4=0;
sj4=0;
cj4=1.0;
j1eval[0]=IKabs(((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2923=((25.0)*py*sj0);
IkReal x2924=((25.0)*cj0*px);
IkReal x2925=(x2923+x2924);
op[0]=((-1.0)+x2925);
op[1]=0;
op[2]=((1.0)+(((-1.0)*x2925)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j4=0;
sj4=0;
cj4=1.0;
j1eval[0]=IKabs(((-1.0)+(((25.0)*py*sj0))+(((25.0)*cj0*px))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2926=((25.0)*py*sj0);
IkReal x2927=((25.0)*cj0*px);
IkReal x2928=(x2927+x2926);
op[0]=((-1.0)+x2928);
op[1]=0;
op[2]=((1.0)+(((-1.0)*x2928)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2929=cj0*cj0;
IkReal x2930=py*py;
IkReal x2931=px*px;
IkReal x2932=((0.0013)*cj2);
IkReal x2933=(py*sj0);
IkReal x2934=((0.0325)*cj2);
IkReal x2935=((1.0)*cj2);
IkReal x2936=((0.1491)*sj2);
IkReal x2937=(cj0*sj2);
IkReal x2938=(cj2*sj4);
IkReal x2939=((0.08)*cj2);
IkReal x2940=(cj0*px);
IkReal x2941=(px*sj0*sj2);
IkReal x2942=(px*py*sj2);
CheckValue<IkReal> x2943 = IKatan2WithCheck(IkReal(((((-2.0)*x2929*x2942))+((x2936*x2940))+(((0.04)*py*x2937))+(((-1.0)*sj0*x2930*x2937))+(((-0.04)*x2941))+((pz*x2934))+(((-0.2688)*pz*x2938))+(((-0.005964)*sj2))+((sj0*x2931*x2937))+(((-1.0)*cj4*pz*x2934))+((x2933*x2936))+x2942)),IkReal(((((-1.0)*x2934*x2940))+(((0.2688)*x2938*x2940))+(((-1.0)*x2933*x2934))+(((-1.0)*cj4*x2932))+((pz*x2936))+(((0.2688)*x2933*x2938))+((pz*x2941))+((cj4*x2934*x2940))+(((-1.0)*py*pz*x2937))+x2932+(((-0.010752)*x2938))+((cj4*x2933*x2934)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2943.valid){
continue;
}
CheckValue<IkReal> x2944=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2930*x2935))+((x2939*x2940))+(((-1.0)*x2929*x2931*x2935))+((cj2*x2929*x2930))+(((-0.0016)*cj2))+(((-1.0)*x2935*(pz*pz)))+(((-2.0)*cj2*x2933*x2940))+((x2933*x2939)))),-1);
if(!x2944.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2943.value)+(((1.5707963267949)*(x2944.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2945=IKcos(j1);
IkReal x2946=IKsin(j1);
IkReal x2947=(cj0*px);
IkReal x2948=(cj0*py);
IkReal x2949=(py*sj0);
IkReal x2950=((0.2688)*sj4);
IkReal x2951=((0.4302)*cj2);
IkReal x2952=((0.0325)*cj4);
IkReal x2953=((0.2688)*cj4);
IkReal x2954=((0.0325)*sj4);
IkReal x2955=(px*sj0);
IkReal x2956=(sj2*x2946);
IkReal x2957=((1.0)*x2945);
IkReal x2958=(sj2*x2945);
IkReal x2959=(pz*x2946);
IkReal x2960=(cj2*x2946);
IkReal x2961=((0.065)*x2945);
evalcond[0]=((0.0325)+(((-1.0)*x2947*x2957))+(((-1.0)*x2950))+(((-1.0)*x2952))+(((0.04)*x2945))+(((-1.0)*x2949*x2957))+x2959);
evalcond[1]=((((-1.0)*x2953*x2958))+((x2954*x2958))+(((-0.2151)*x2958))+pz+(((-1.0)*x2946*x2952))+(((-1.0)*x2946*x2950))+(((0.0325)*x2946)));
evalcond[2]=((((-1.0)*x2947*x2960))+(((-1.0)*sj2*x2955))+(((0.04)*x2960))+(((-1.0)*cj2*pz*x2957))+((sj2*x2948))+(((-0.1491)*sj2))+(((-1.0)*x2949*x2960)));
evalcond[3]=((0.04)+(((-1.0)*x2947))+(((-1.0)*x2949))+(((0.2151)*x2956))+(((-1.0)*x2954*x2956))+((x2953*x2956))+(((-1.0)*x2945*x2950))+(((-1.0)*x2945*x2952))+(((0.0325)*x2945)));
evalcond[4]=((0.2151)+(((-1.0)*cj2*x2948))+(((-1.0)*x2947*x2956))+(((-1.0)*x2954))+(((0.1491)*cj2))+(((-1.0)*pz*sj2*x2957))+(((0.04)*x2956))+(((-1.0)*x2949*x2956))+x2953+((cj2*x2955)));
evalcond[5]=((0.00215462)+((x2947*x2961))+(((-0.065)*x2959))+(((0.4302)*x2949*x2956))+(((0.08)*x2949))+(((0.08)*x2947))+((x2948*x2951))+(((-0.2982)*x2955))+(((-1.0)*pp))+((x2949*x2961))+(((0.4302)*pz*x2958))+(((-1.0)*x2951*x2955))+(((0.2982)*x2948))+(((-0.017208)*x2956))+(((-0.06414282)*cj2))+(((0.4302)*x2947*x2956))+(((-0.0026)*x2945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2962=py*py;
IkReal x2963=cj0*cj0;
IkReal x2964=cj4*cj4;
IkReal x2965=((0.2688)*cj4);
IkReal x2966=((0.017472)*sj4);
IkReal x2967=((0.0325)*sj4);
IkReal x2968=(cj0*px);
IkReal x2969=(sj2*sj4);
IkReal x2970=(py*sj0);
IkReal x2971=((0.0325)*pz);
IkReal x2972=(cj4*sj2);
IkReal x2973=((1.0)*pz);
IkReal x2974=(sj2*x2970);
CheckValue<IkReal> x2975 = IKatan2WithCheck(IkReal(((0.07170969)+(((0.08)*x2968))+(((-2.0)*x2968*x2970))+(((0.08)*x2970))+(((-1.0)*x2962))+(((-1.0)*x2963*(px*px)))+((cj4*x2966))+((x2962*x2963))+(((-1.0)*x2966))+(((-0.07119719)*x2964))+(((-0.0021125)*cj4)))),IkReal(((((0.04)*pz))+(((0.05887513)*x2969))+(((-0.00174525)*x2972))+(((0.07119719)*cj4*x2969))+(((-0.01572675)*sj2))+(((0.017472)*sj2*x2964))+(((-1.0)*x2968*x2973))+(((-1.0)*x2970*x2973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2975.valid){
continue;
}
CheckValue<IkReal> x2976=IKPowWithIntegerCheck(IKsign((((sj2*x2967*x2968))+(((-0.0013)*x2969))+(((-1.0)*x2965*x2974))+(((-0.2151)*x2974))+((cj4*x2971))+(((-0.2151)*sj2*x2968))+(((0.2688)*pz*sj4))+(((-1.0)*x2971))+(((0.008604)*sj2))+(((-1.0)*sj2*x2965*x2968))+(((0.010752)*x2972))+((x2967*x2974)))),-1);
if(!x2976.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2975.value)+(((1.5707963267949)*(x2976.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2977=IKcos(j1);
IkReal x2978=IKsin(j1);
IkReal x2979=(cj0*px);
IkReal x2980=(cj0*py);
IkReal x2981=(py*sj0);
IkReal x2982=((0.2688)*sj4);
IkReal x2983=((0.4302)*cj2);
IkReal x2984=((0.0325)*cj4);
IkReal x2985=((0.2688)*cj4);
IkReal x2986=((0.0325)*sj4);
IkReal x2987=(px*sj0);
IkReal x2988=(sj2*x2978);
IkReal x2989=((1.0)*x2977);
IkReal x2990=(sj2*x2977);
IkReal x2991=(pz*x2978);
IkReal x2992=(cj2*x2978);
IkReal x2993=((0.065)*x2977);
evalcond[0]=((0.0325)+(((-1.0)*x2979*x2989))+(((-1.0)*x2981*x2989))+(((-1.0)*x2984))+(((-1.0)*x2982))+(((0.04)*x2977))+x2991);
evalcond[1]=((((0.0325)*x2978))+(((-1.0)*x2978*x2984))+(((-1.0)*x2978*x2982))+(((-1.0)*x2985*x2990))+((x2986*x2990))+pz+(((-0.2151)*x2990)));
evalcond[2]=(((sj2*x2980))+(((-1.0)*cj2*pz*x2989))+(((-1.0)*x2979*x2992))+(((-1.0)*x2981*x2992))+(((-0.1491)*sj2))+(((-1.0)*sj2*x2987))+(((0.04)*x2992)));
evalcond[3]=((0.04)+(((0.0325)*x2977))+(((-1.0)*x2977*x2982))+(((-1.0)*x2977*x2984))+(((0.2151)*x2988))+(((-1.0)*x2979))+(((-1.0)*x2981))+(((-1.0)*x2986*x2988))+((x2985*x2988)));
evalcond[4]=((0.2151)+(((0.04)*x2988))+(((-1.0)*pz*sj2*x2989))+(((-1.0)*x2981*x2988))+((cj2*x2987))+(((-1.0)*x2986))+(((0.1491)*cj2))+(((-1.0)*x2979*x2988))+(((-1.0)*cj2*x2980))+x2985);
evalcond[5]=((0.00215462)+((x2981*x2993))+((x2979*x2993))+(((0.08)*x2979))+(((-0.2982)*x2987))+(((0.4302)*pz*x2990))+(((0.08)*x2981))+(((-0.065)*x2991))+(((-1.0)*pp))+((x2980*x2983))+(((0.2982)*x2980))+(((-0.017208)*x2988))+(((-1.0)*x2983*x2987))+(((0.4302)*x2981*x2988))+(((-0.06414282)*cj2))+(((-0.0026)*x2977))+(((0.4302)*x2979*x2988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2994=cj4*cj4;
IkReal x2995=((0.017472)*sj4);
IkReal x2996=(cj0*px);
IkReal x2997=((0.2688)*sj4);
IkReal x2998=(cj4*sj2);
IkReal x2999=((0.0325)*cj4);
IkReal x3000=(py*sj0);
IkReal x3001=(sj2*sj4);
CheckValue<IkReal> x3002=IKPowWithIntegerCheck(IKsign(((0.0013)+(((-0.0325)*pz*x3001))+((x2996*x2999))+((x2996*x2997))+((x2999*x3000))+(((-0.0013)*cj4))+(((0.2151)*pz*sj2))+(((0.2688)*pz*x2998))+(((-0.0325)*x2996))+(((-0.0325)*x3000))+(((-0.010752)*sj4))+((x2997*x3000)))),-1);
if(!x3002.valid){
continue;
}
CheckValue<IkReal> x3003 = IKatan2WithCheck(IkReal((((pz*x3000))+(((-0.01572675)*sj2))+(((-0.04)*pz))+(((-0.00174525)*x2998))+(((0.017472)*sj2*x2994))+(((0.05887513)*x3001))+(((0.07119719)*sj4*x2998))+((pz*x2996)))),IkReal(((-0.07330969)+(((0.07119719)*x2994))+(pz*pz)+(((0.0021125)*cj4))+(((-1.0)*cj4*x2995))+x2995)),IKFAST_ATAN2_MAGTHRESH);
if(!x3003.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3002.value)))+(x3003.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3004=IKcos(j1);
IkReal x3005=IKsin(j1);
IkReal x3006=(cj0*px);
IkReal x3007=(cj0*py);
IkReal x3008=(py*sj0);
IkReal x3009=((0.2688)*sj4);
IkReal x3010=((0.4302)*cj2);
IkReal x3011=((0.0325)*cj4);
IkReal x3012=((0.2688)*cj4);
IkReal x3013=((0.0325)*sj4);
IkReal x3014=(px*sj0);
IkReal x3015=(sj2*x3005);
IkReal x3016=((1.0)*x3004);
IkReal x3017=(sj2*x3004);
IkReal x3018=(pz*x3005);
IkReal x3019=(cj2*x3005);
IkReal x3020=((0.065)*x3004);
evalcond[0]=((0.0325)+x3018+(((-1.0)*x3009))+(((-1.0)*x3011))+(((-1.0)*x3006*x3016))+(((-1.0)*x3008*x3016))+(((0.04)*x3004)));
evalcond[1]=((((-0.2151)*x3017))+((x3013*x3017))+pz+(((-1.0)*x3005*x3009))+(((-1.0)*x3005*x3011))+(((-1.0)*x3012*x3017))+(((0.0325)*x3005)));
evalcond[2]=((((-1.0)*sj2*x3014))+(((-1.0)*cj2*pz*x3016))+((sj2*x3007))+(((-1.0)*x3006*x3019))+(((-0.1491)*sj2))+(((0.04)*x3019))+(((-1.0)*x3008*x3019)));
evalcond[3]=((0.04)+(((-1.0)*x3008))+(((-1.0)*x3006))+((x3012*x3015))+(((0.2151)*x3015))+(((-1.0)*x3004*x3011))+(((-1.0)*x3004*x3009))+(((0.0325)*x3004))+(((-1.0)*x3013*x3015)));
evalcond[4]=((0.2151)+x3012+(((0.1491)*cj2))+(((-1.0)*x3013))+((cj2*x3014))+(((-1.0)*cj2*x3007))+(((-1.0)*pz*sj2*x3016))+(((-1.0)*x3006*x3015))+(((0.04)*x3015))+(((-1.0)*x3008*x3015)));
evalcond[5]=((0.00215462)+(((-0.2982)*x3014))+((x3006*x3020))+(((-1.0)*pp))+((x3008*x3020))+(((0.2982)*x3007))+(((0.4302)*pz*x3017))+(((-1.0)*x3010*x3014))+(((-0.017208)*x3015))+((x3007*x3010))+(((0.08)*x3006))+(((0.08)*x3008))+(((0.4302)*x3008*x3015))+(((-0.0026)*x3004))+(((-0.065)*x3018))+(((0.4302)*x3006*x3015))+(((-0.06414282)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3021 = IKatan2WithCheck(IkReal(((-0.012906)+(((-1.0)*cj0*px*pz*sj2))+(((-0.2688)*cj0*cj2*py*sj3*sj4))+(((-0.0925)*cj2*px*sj0*sj3))+(((-1.0)*py*pz*sj0*sj2))+(((0.06)*cj0*cj2*py))+(((0.0925)*cj0*cj2*py*sj3))+(((-0.016128)*cj4))+(((0.06082513)*sj3*sj4))+(((0.2688)*cj2*px*sj0*sj3*sj4))+(((-0.0325)*cj0*cj2*cj4*py*sj3))+(((-0.06)*cj2*px*sj0))+(((0.04007808)*cj2*sj3*sj4))+(((-0.01379175)*cj2*sj3))+(((0.00195)*sj4))+(((-0.008946)*cj2))+(((0.017472)*sj3*(cj4*cj4)))+(((-0.02863275)*sj3))+(((0.0325)*cj2*cj4*px*sj0*sj3))+(((0.04)*pz*sj2))+(((0.00484575)*cj2*cj4*sj3))+(((0.07119719)*cj4*sj3*sj4))+(((-0.01787325)*cj4*sj3)))),IkReal(((((0.2688)*cj0*cj3*py*sj4*(cj2*cj2)))+(((0.01787325)*cj2*cj3*cj4))+(((0.02863275)*cj2*cj3))+(((0.0325)*cj2*px*sj0*sj2*sj4))+(((-0.06082513)*cj2*cj3*sj4))+(((-0.017472)*cj2*cj3*(cj4*cj4)))+(((0.01379175)*cj3*(cj2*cj2)))+(((-0.03207141)*cj2*sj2))+(((0.0139815)*sj2*sj4))+(((0.00484575)*cj2*sj2*sj4))+(((-0.00484575)*cj3*cj4*(cj2*cj2)))+(((-0.08)*py*sj0*sj2))+(((-0.07119719)*cj2*cj3*cj4*sj4))+(((-0.2151)*cj2*px*sj0*sj2))+(((0.0325)*cj0*cj3*cj4*py*(cj2*cj2)))+(((0.2688)*cj0*cj2*cj4*py*sj2))+(((-0.2688)*cj3*px*sj0*sj4*(cj2*cj2)))+(((-0.2688)*cj2*cj4*px*sj0*sj2))+(((-0.0925)*cj0*cj3*py*(cj2*cj2)))+(((0.017472)*cj4*sj2*sj4))+(((-0.08)*cj0*px*sj2))+((sj2*(cj0*cj0)*(px*px)))+(((-0.04572426)*sj2))+(((-0.0325)*cj0*cj2*py*sj2*sj4))+(((-0.0325)*cj3*cj4*px*sj0*(cj2*cj2)))+(((2.0)*cj0*px*py*sj0*sj2))+(((0.2151)*cj0*cj2*py*sj2))+(((-0.04007808)*cj2*cj4*sj2))+(((-1.0)*sj2*(cj0*cj0)*(py*py)))+(((-0.07119719)*sj2*(cj4*cj4)))+(((-0.11563776)*cj4*sj2))+(((-0.04007808)*cj3*sj4*(cj2*cj2)))+(((0.0925)*cj3*px*sj0*(cj2*cj2)))+((sj2*(py*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3021.valid){
continue;
}
CheckValue<IkReal> x3022=IKPowWithIntegerCheck(IKsign(((((-0.010752)*sj2*sj3*sj4))+(((-0.2688)*cj4*pz))+(((-0.06)*py*sj0*sj2))+(((-0.0325)*pz*sj4*(cj2*cj2)))+(((-0.06)*cj0*px*sj2))+(((0.0037)*sj2*sj3))+(((-0.0325)*cj2*cj3*cj4*pz*sj2))+(((-0.2688)*cj2*cj3*pz*sj2*sj4))+(((-0.0925)*cj0*px*sj2*sj3))+(((0.2151)*pz*(cj2*cj2)))+(((-0.2151)*pz))+(((0.0925)*cj2*cj3*pz*sj2))+(((-0.0013)*cj4*sj2*sj3))+(((0.0325)*cj0*cj4*px*sj2*sj3))+(((0.2688)*cj4*pz*(cj2*cj2)))+(((0.0325)*cj4*py*sj0*sj2*sj3))+(((-0.0925)*py*sj0*sj2*sj3))+(((0.2688)*cj0*px*sj2*sj3*sj4))+(((0.2688)*py*sj0*sj2*sj3*sj4))+(((0.0024)*sj2))+(((0.0325)*pz*sj4)))),-1);
if(!x3022.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3021.value)+(((1.5707963267949)*(x3022.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3023=IKsin(j1);
IkReal x3024=IKcos(j1);
IkReal x3025=(cj0*sj3);
IkReal x3026=(py*sj2);
IkReal x3027=((0.0325)*sj4);
IkReal x3028=((0.4302)*cj0);
IkReal x3029=(cj0*py);
IkReal x3030=((0.185)*cj3);
IkReal x3031=(py*sj0);
IkReal x3032=((0.2688)*sj4);
IkReal x3033=((1.0)*pz);
IkReal x3034=(sj2*sj3);
IkReal x3035=(px*sj0);
IkReal x3036=(cj2*pz);
IkReal x3037=((0.2688)*cj4);
IkReal x3038=(cj3*sj2);
IkReal x3039=((0.0325)*cj4);
IkReal x3040=(cj0*px);
IkReal x3041=(sj3*x3023);
IkReal x3042=(sj2*x3023);
IkReal x3043=(px*x3024);
IkReal x3044=(cj2*x3023);
IkReal x3045=(sj2*x3024);
IkReal x3046=(pz*x3023);
IkReal x3047=(cj3*x3024);
IkReal x3048=(sj3*x3024);
IkReal x3049=(sj0*x3023);
IkReal x3050=((1.0)*cj0*cj3);
evalcond[0]=((0.2151)+(((0.04)*x3042))+((cj2*x3035))+(((-1.0)*x3033*x3045))+x3037+(((-1.0)*x3027))+(((-1.0)*cj2*x3029))+(((0.1491)*cj2))+(((-1.0)*x3026*x3049))+(((-1.0)*x3040*x3042)));
evalcond[1]=(((x3032*x3041))+(((-1.0)*cj2*x3039*x3047))+((x3039*x3041))+(((-1.0)*cj2*x3032*x3047))+(((-0.2151)*x3045))+pz+(((-0.0925)*x3041))+(((0.0925)*cj2*x3047))+((x3027*x3045))+(((-0.06)*x3023))+(((-1.0)*x3037*x3045)));
evalcond[2]=((((0.04)*x3047))+((x3034*x3035))+(((-0.06)*cj3))+((px*x3025*x3044))+(((-1.0)*x3025*x3026))+((cj2*x3031*x3041))+(((0.1491)*x3034))+(((-0.04)*cj2*x3041))+((cj3*x3046))+(((-1.0)*x3040*x3047))+(((-1.0)*x3031*x3047))+((x3036*x3048)));
evalcond[3]=((0.04)+((x3037*x3042))+((x3032*x3048))+((x3039*x3048))+(((-1.0)*x3027*x3042))+(((0.2151)*x3042))+(((-1.0)*x3031))+((cj3*x3032*x3044))+(((-0.0925)*x3048))+(((-1.0)*x3040))+((cj3*x3039*x3044))+(((-0.0925)*cj3*x3044))+(((-0.06)*x3024)));
evalcond[4]=((0.0925)+((x3025*x3043))+(((-1.0)*x3033*x3041))+(((0.06)*sj3))+((cj3*x3040*x3044))+((x3035*x3038))+(((-0.04)*cj3*x3044))+((cj3*x3031*x3044))+(((0.1491)*x3038))+(((-1.0)*x3039))+(((-1.0)*x3032))+(((-1.0)*x3026*x3050))+(((-0.04)*x3048))+((x3036*x3047))+((x3031*x3048)));
evalcond[5]=((-0.00894538)+(((-0.2982)*x3035))+((cj0*x3026*x3030))+(((-1.0)*sj2*x3030*x3035))+(((-1.0)*x3030*x3031*x3044))+(((0.0074)*cj3*x3044))+(((-0.12)*x3024*x3040))+(((-0.0111)*sj3))+(((-0.4302)*cj2*x3035))+(((0.185)*pz*x3041))+((px*x3028*x3042))+(((0.0074)*x3048))+(((-0.12)*x3024*x3031))+(((-1.0)*x3024*x3030*x3036))+(((0.4302)*pz*x3045))+(((-0.0275835)*x3038))+(((-0.185)*x3031*x3048))+(((0.4302)*x3026*x3049))+(((-1.0)*pp))+(((0.08)*x3040))+((cj2*py*x3028))+(((-0.017208)*x3042))+(((0.08)*x3031))+(((0.12)*x3046))+(((-1.0)*x3030*x3040*x3044))+(((0.0048)*x3024))+(((-0.06414282)*cj2))+(((0.2982)*x3029))+(((-0.185)*x3025*x3043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3051=cj2*cj2;
IkReal x3052=cj4*cj4;
IkReal x3053=cj3*cj3;
IkReal x3054=(py*sj0);
IkReal x3055=(cj4*sj2);
IkReal x3056=(cj2*cj3);
IkReal x3057=(cj4*sj3);
IkReal x3058=(cj0*px);
IkReal x3059=((0.0925)*sj3);
IkReal x3060=(sj2*sj4);
IkReal x3061=((0.2688)*sj4);
IkReal x3062=((0.2151)*sj2);
IkReal x3063=((0.0325)*cj4);
IkReal x3064=((0.0325)*pz);
IkReal x3065=((0.010752)*sj4);
IkReal x3066=(cj4*x3051);
IkReal x3067=((0.0060125)*x3053);
IkReal x3068=(sj4*x3053);
IkReal x3069=((0.08080969)*x3053);
IkReal x3070=((0.07119719)*x3051*x3052);
CheckValue<IkReal> x3071 = IKatan2WithCheck(IkReal(((((-0.2688)*x3054*x3055))+(((0.0925)*x3056*x3058))+(((0.0325)*x3054*x3060))+(((-1.0)*x3054*x3062))+(((-1.0)*x3058*x3062))+(((0.010752)*x3055))+(((-0.06)*pz))+((pz*sj3*x3061))+(((-1.0)*pz*x3059))+(((0.0325)*x3058*x3060))+(((0.008604)*sj2))+(((-0.0013)*x3060))+(((0.0013)*cj4*x3056))+(((-1.0)*x3056*x3058*x3061))+(((-1.0)*x3056*x3058*x3063))+((x3057*x3064))+((x3056*x3065))+(((-0.0037)*x3056))+(((0.0925)*x3054*x3056))+(((-0.2688)*x3055*x3058))+(((-1.0)*x3054*x3056*x3061))+(((-1.0)*x3054*x3056*x3063)))),IkReal(((-0.0024)+(((-1.0)*sj3*x3054*x3061))+(((-1.0)*sj3*x3058*x3061))+(((0.0925)*pz*x3056))+(((-1.0)*pz*x3056*x3063))+(((-1.0)*pz*x3056*x3061))+(((-0.0325)*x3054*x3057))+((sj3*x3065))+(((0.06)*x3054))+(((0.06)*x3058))+(((-0.2688)*pz*x3055))+(((-0.0037)*sj3))+((x3058*x3059))+((x3054*x3059))+(((-1.0)*pz*x3062))+(((-0.0325)*x3057*x3058))+((x3060*x3064))+(((0.0013)*x3057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3071.valid){
continue;
}
CheckValue<IkReal> x3072=IKPowWithIntegerCheck(IKsign(((-0.13173395)+x3070+x3069+(((-0.0139815)*sj4*x3051))+(((-0.0111)*sj3))+(((-0.017472)*x3066*x3068))+(((0.032256)*sj3*sj4))+(((0.04732426)*x3051))+(((-0.049728)*x3068))+(((-0.10962526)*cj4))+(((0.0039)*x3057))+((x3053*x3070))+(((-0.14239438)*sj4*x3055*x3056))+(((0.049728)*x3051*x3068))+(((-0.12165026)*x3056*x3060))+(((0.017472)*cj4*x3068))+(((0.0572655)*sj2*x3056))+((x3066*x3067))+(((0.0357465)*x3055*x3056))+(((-1.0)*x3051*x3069))+(((-0.017472)*sj4*x3066))+(((-0.034944)*sj2*x3052*x3056))+(((0.0637095)*sj4))+(((-1.0)*cj4*x3067))+(((-0.07119719)*x3052*x3053))+(((0.11563776)*x3066)))),-1);
if(!x3072.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3071.value)+(((1.5707963267949)*(x3072.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3073=IKsin(j1);
IkReal x3074=IKcos(j1);
IkReal x3075=(cj0*sj3);
IkReal x3076=(py*sj2);
IkReal x3077=((0.0325)*sj4);
IkReal x3078=((0.4302)*cj0);
IkReal x3079=(cj0*py);
IkReal x3080=((0.185)*cj3);
IkReal x3081=(py*sj0);
IkReal x3082=((0.2688)*sj4);
IkReal x3083=((1.0)*pz);
IkReal x3084=(sj2*sj3);
IkReal x3085=(px*sj0);
IkReal x3086=(cj2*pz);
IkReal x3087=((0.2688)*cj4);
IkReal x3088=(cj3*sj2);
IkReal x3089=((0.0325)*cj4);
IkReal x3090=(cj0*px);
IkReal x3091=(sj3*x3073);
IkReal x3092=(sj2*x3073);
IkReal x3093=(px*x3074);
IkReal x3094=(cj2*x3073);
IkReal x3095=(sj2*x3074);
IkReal x3096=(pz*x3073);
IkReal x3097=(cj3*x3074);
IkReal x3098=(sj3*x3074);
IkReal x3099=(sj0*x3073);
IkReal x3100=((1.0)*cj0*cj3);
evalcond[0]=((0.2151)+(((-1.0)*x3076*x3099))+(((-1.0)*x3090*x3092))+((cj2*x3085))+x3087+(((-1.0)*x3083*x3095))+(((0.1491)*cj2))+(((-1.0)*x3077))+(((-1.0)*cj2*x3079))+(((0.04)*x3092)));
evalcond[1]=((((-1.0)*cj2*x3089*x3097))+(((-0.2151)*x3095))+(((-0.0925)*x3091))+(((-0.06)*x3073))+pz+((x3082*x3091))+((x3089*x3091))+(((-1.0)*x3087*x3095))+((x3077*x3095))+(((0.0925)*cj2*x3097))+(((-1.0)*cj2*x3082*x3097)));
evalcond[2]=((((-1.0)*x3090*x3097))+(((-0.06)*cj3))+((x3086*x3098))+(((-1.0)*x3081*x3097))+(((-0.04)*cj2*x3091))+(((0.1491)*x3084))+((x3084*x3085))+((cj3*x3096))+((cj2*x3081*x3091))+(((-1.0)*x3075*x3076))+((px*x3075*x3094))+(((0.04)*x3097)));
evalcond[3]=((0.04)+(((0.2151)*x3092))+((cj3*x3082*x3094))+((x3087*x3092))+(((-1.0)*x3081))+(((-0.0925)*x3098))+(((-0.06)*x3074))+((x3082*x3098))+((x3089*x3098))+(((-1.0)*x3090))+(((-0.0925)*cj3*x3094))+((cj3*x3089*x3094))+(((-1.0)*x3077*x3092)));
evalcond[4]=((0.0925)+(((-1.0)*x3089))+(((-1.0)*x3082))+(((0.06)*sj3))+((cj3*x3081*x3094))+((x3086*x3097))+(((-1.0)*x3083*x3091))+(((-0.04)*cj3*x3094))+(((-1.0)*x3076*x3100))+((x3085*x3088))+(((0.1491)*x3088))+((cj3*x3090*x3094))+((x3081*x3098))+(((-0.04)*x3098))+((x3075*x3093)));
evalcond[5]=((-0.00894538)+(((0.185)*pz*x3091))+(((-0.185)*x3075*x3093))+(((-0.12)*x3074*x3090))+(((-0.185)*x3081*x3098))+(((-0.0111)*sj3))+(((-0.12)*x3074*x3081))+(((-1.0)*sj2*x3080*x3085))+((cj2*py*x3078))+(((0.4302)*pz*x3095))+(((0.08)*x3081))+(((-1.0)*x3080*x3081*x3094))+(((0.0074)*x3098))+(((0.08)*x3090))+(((-1.0)*pp))+(((-0.4302)*cj2*x3085))+(((0.2982)*x3079))+(((-0.2982)*x3085))+(((0.0048)*x3074))+(((-1.0)*x3074*x3080*x3086))+(((0.12)*x3096))+(((-0.0275835)*x3088))+((px*x3078*x3092))+(((-1.0)*x3080*x3090*x3094))+(((-0.017208)*x3092))+(((-0.06414282)*cj2))+(((0.4302)*x3076*x3099))+(((0.0074)*cj3*x3094))+((cj0*x3076*x3080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3101=cj0*cj0;
IkReal x3102=py*py;
IkReal x3103=px*px;
IkReal x3104=(pz*sj3);
IkReal x3105=((0.0325)*sj4);
IkReal x3106=(cj0*py);
IkReal x3107=(cj0*px);
IkReal x3108=(cj3*sj2);
IkReal x3109=(cj2*sj3);
IkReal x3110=(cj2*cj3);
IkReal x3111=((0.2151)*cj3);
IkReal x3112=((0.010752)*cj4);
IkReal x3113=((0.04)*sj3);
IkReal x3114=(cj0*sj0);
IkReal x3115=(py*sj0);
IkReal x3116=(px*sj0);
IkReal x3117=((0.2688)*cj4);
IkReal x3118=(cj3*pz);
IkReal x3119=((0.0013)*sj4);
IkReal x3120=((0.1491)*sj3);
IkReal x3121=(px*py);
IkReal x3122=((1.0)*x3103);
IkReal x3123=((2.0)*x3101);
CheckValue<IkReal> x3124 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x3115*x3117))+(((0.005964)*x3110))+(((-1.0)*x3104*x3106))+(((-1.0)*x3110*x3114*x3122))+((cj3*x3112))+(((-0.1491)*x3110*x3115))+(((0.008604)*cj3))+((x3102*x3110*x3114))+(((0.2151)*cj2*x3104))+(((-0.1491)*x3107*x3110))+((cj2*x3104*x3117))+(((-0.04)*x3106*x3110))+(((-1.0)*cj3*x3119))+(((-1.0)*x3110*x3121))+((x3110*x3121*x3123))+(((-0.06)*pz*x3108))+((cj3*x3105*x3115))+((cj3*x3105*x3107))+(((-1.0)*cj2*x3104*x3105))+((x3104*x3116))+(((0.1491)*x3104))+(((-1.0)*cj3*x3107*x3117))+(((-1.0)*x3111*x3115))+(((0.04)*x3110*x3116))+(((-1.0)*x3107*x3111)))),IkReal(((((-1.0)*pz*x3110*x3116))+(((0.005964)*sj3))+(((-1.0)*x3107*x3109*x3117))+(((-1.0)*x3117*x3118))+((sj3*x3121*x3123))+((x3105*x3107*x3109))+(((-0.2151)*x3109*x3115))+(((0.008604)*x3109))+(((-0.1491)*pz*x3110))+(((-1.0)*pz*x3111))+(((-1.0)*x3109*x3119))+(((-1.0)*x3115*x3120))+(((-1.0)*sj3*x3114*x3122))+((x3113*x3116))+((sj3*x3102*x3114))+((x3109*x3112))+(((-1.0)*x3107*x3120))+((x3105*x3109*x3115))+(((0.06)*x3108*x3115))+(((-1.0)*x3106*x3113))+(((0.06)*x3107*x3108))+(((-0.2151)*x3107*x3109))+(((-1.0)*x3109*x3115*x3117))+((x3105*x3118))+(((-0.0024)*x3108))+((pz*x3106*x3110))+(((-1.0)*sj3*x3121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3124.valid){
continue;
}
CheckValue<IkReal> x3125=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3101*x3108*x3122))+(((0.08)*x3108*x3115))+(((-0.0016)*x3108))+((x3101*x3102*x3108))+(((0.08)*x3107*x3108))+(((-1.0)*x3108*(pz*pz)))+(((-2.0)*x3106*x3108*x3116))+(((-1.0)*x3102*x3108)))),-1);
if(!x3125.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3124.value)+(((1.5707963267949)*(x3125.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3126=IKsin(j1);
IkReal x3127=IKcos(j1);
IkReal x3128=(cj0*sj3);
IkReal x3129=(py*sj2);
IkReal x3130=((0.0325)*sj4);
IkReal x3131=((0.4302)*cj0);
IkReal x3132=(cj0*py);
IkReal x3133=((0.185)*cj3);
IkReal x3134=(py*sj0);
IkReal x3135=((0.2688)*sj4);
IkReal x3136=((1.0)*pz);
IkReal x3137=(sj2*sj3);
IkReal x3138=(px*sj0);
IkReal x3139=(cj2*pz);
IkReal x3140=((0.2688)*cj4);
IkReal x3141=(cj3*sj2);
IkReal x3142=((0.0325)*cj4);
IkReal x3143=(cj0*px);
IkReal x3144=(sj3*x3126);
IkReal x3145=(sj2*x3126);
IkReal x3146=(px*x3127);
IkReal x3147=(cj2*x3126);
IkReal x3148=(sj2*x3127);
IkReal x3149=(pz*x3126);
IkReal x3150=(cj3*x3127);
IkReal x3151=(sj3*x3127);
IkReal x3152=(sj0*x3126);
IkReal x3153=((1.0)*cj0*cj3);
evalcond[0]=((0.2151)+(((-1.0)*x3129*x3152))+x3140+(((-1.0)*x3136*x3148))+(((0.04)*x3145))+(((-1.0)*x3143*x3145))+((cj2*x3138))+(((0.1491)*cj2))+(((-1.0)*x3130))+(((-1.0)*cj2*x3132)));
evalcond[1]=(((x3142*x3144))+(((-0.0925)*x3144))+(((-1.0)*x3140*x3148))+((x3135*x3144))+(((0.0925)*cj2*x3150))+(((-1.0)*cj2*x3135*x3150))+(((-0.06)*x3126))+pz+((x3130*x3148))+(((-0.2151)*x3148))+(((-1.0)*cj2*x3142*x3150)));
evalcond[2]=((((-1.0)*x3134*x3150))+(((0.04)*x3150))+(((-0.04)*cj2*x3144))+((px*x3128*x3147))+(((-0.06)*cj3))+((x3137*x3138))+(((-1.0)*x3143*x3150))+((x3139*x3151))+((cj3*x3149))+(((-1.0)*x3128*x3129))+((cj2*x3134*x3144))+(((0.1491)*x3137)));
evalcond[3]=((0.04)+((x3142*x3151))+(((-1.0)*x3143))+(((-0.0925)*x3151))+((x3135*x3151))+(((-1.0)*x3134))+(((-0.06)*x3127))+((cj3*x3135*x3147))+(((0.2151)*x3145))+(((-1.0)*x3130*x3145))+((cj3*x3142*x3147))+((x3140*x3145))+(((-0.0925)*cj3*x3147)));
evalcond[4]=((0.0925)+(((-1.0)*x3142))+(((0.06)*sj3))+(((-1.0)*x3136*x3144))+((x3128*x3146))+(((-0.04)*cj3*x3147))+(((-0.04)*x3151))+(((0.1491)*x3141))+((x3139*x3150))+((cj3*x3143*x3147))+(((-1.0)*x3129*x3153))+((cj3*x3134*x3147))+((x3138*x3141))+(((-1.0)*x3135))+((x3134*x3151)));
evalcond[5]=((-0.00894538)+(((-0.0111)*sj3))+(((0.0074)*x3151))+(((0.4302)*pz*x3148))+((px*x3131*x3145))+(((-0.185)*x3128*x3146))+(((0.08)*x3143))+(((-1.0)*sj2*x3133*x3138))+(((-0.4302)*cj2*x3138))+(((0.185)*pz*x3144))+(((0.12)*x3149))+(((-1.0)*pp))+(((-0.017208)*x3145))+(((-0.0275835)*x3141))+(((-1.0)*x3133*x3134*x3147))+(((0.2982)*x3132))+(((-0.12)*x3127*x3134))+(((-1.0)*x3127*x3133*x3139))+(((-1.0)*x3133*x3143*x3147))+((cj2*py*x3131))+(((0.0048)*x3127))+(((0.0074)*cj3*x3147))+(((-0.185)*x3134*x3151))+(((0.4302)*x3129*x3152))+(((-0.2982)*x3138))+(((-0.12)*x3127*x3143))+(((0.08)*x3134))+(((-0.06414282)*cj2))+((cj0*x3129*x3133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x222=((1.0)*sj2);
IkReal x223=(cj2*cj4);
IkReal x224=(sj0*sj3);
IkReal x225=((1.0)*sj0);
IkReal x226=(cj4*sj3);
IkReal x227=((1.0)*cj2);
IkReal x228=(sj1*sj3);
IkReal x229=(cj3*sj4);
IkReal x230=((1.0)*sj1);
IkReal x231=(sj1*x226);
IkReal x232=((1.0)*cj1*sj3);
IkReal x233=((-1.0)*cj1);
IkReal x234=((((-1.0)*x227*x228))+((cj1*cj3)));
IkReal x235=(((cj3*x223))+(((-1.0)*sj4*x222)));
IkReal x236=(((cj2*sj4))+((cj3*cj4*sj2)));
IkReal x237=((((-1.0)*x222*x229))+x223);
IkReal x238=(cj0*x234);
IkReal x239=(cj0*x236);
IkReal x240=((1.0)*x235);
IkReal x241=((((-1.0)*cj1*sj3*x227))+(((-1.0)*cj3*x230)));
IkReal x242=((((-1.0)*cj4*x222))+(((-1.0)*x227*x229)));
IkReal x243=((-1.0)*sj0*x236);
IkReal x244=(((sj0*x234))+((cj0*sj2*sj3)));
IkReal x245=((((-1.0)*sj2*x224))+x238);
IkReal x246=(((x233*x235))+x231);
IkReal x247=((((-1.0)*cj1*x226))+(((-1.0)*x230*x235)));
IkReal x248=((((-1.0)*x230*x242))+((cj1*sj3*sj4)));
IkReal x249=(((x226*x233))+(((-1.0)*sj1*x235)));
IkReal x250=(cj0*x247);
IkReal x251=(((x233*x242))+(((-1.0)*sj4*x228)));
IkReal x252=(x239+((sj0*x247)));
IkReal x253=(((cj0*x248))+(((-1.0)*x225*x237)));
IkReal x254=(((cj0*x237))+((sj0*x248)));
new_r00=(((r00*x245))+((r10*x244))+((r20*x241)));
new_r01=(((r21*x241))+((r01*x245))+((r11*x244)));
new_r02=(((r22*x241))+((r02*(((((-1.0)*x222*x224))+x238))))+((r12*x244)));
new_r10=(((r10*((x239+((sj0*x249))))))+((r20*(((((-1.0)*cj1*x240))+x231))))+((r00*((((cj0*x249))+x243)))));
new_r11=(((r11*x252))+((r01*((x250+x243))))+((r21*x246)));
new_r12=(((r22*x246))+((r12*x252))+((r02*(((((-1.0)*x225*x236))+x250)))));
new_r20=(((r20*x251))+((r00*x253))+((r10*x254)));
new_r21=(((r21*x251))+((r11*x254))+((r01*x253)));
new_r22=(((r12*x254))+((r22*x251))+((r02*x253)));
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
sj6array[0]=((-1.0)*new_r22);
if( sj6array[0] >= -1-IKFAST_SINCOS_THRESH && sj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKasin(sj6array[0]);
    cj6array[0] = IKcos(j6array[0]);
    sj6array[1] = sj6array[0];
    j6array[1] = j6array[0] > 0 ? (IKPI-j6array[0]) : (-IKPI-j6array[0]);
    cj6array[1] = -cj6array[0];
}
else if( isnan(sj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
j7eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
j5eval[0]=cj6;
j5eval[1]=IKsign(cj6);
j5eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj6;
j5eval[1]=new_r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j7mul = 1;
j7=0;
j5mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].fmul = j7mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 7;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j7mul = 1;
j7=0;
j5mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5=IKatan2(((-1.0)*new_r01), new_r11);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].fmul = j7mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 7;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x255=new_r22*new_r22;
IkReal x256=((16.0)*new_r10);
IkReal x257=((16.0)*new_r01);
IkReal x258=((16.0)*new_r00);
IkReal x259=(new_r11*new_r22);
IkReal x260=((8.0)*new_r00);
IkReal x261=(x255*x256);
IkReal x262=(x255*x257);
j5eval[0]=((IKabs((x262+(((-1.0)*x257)))))+(IKabs((((new_r22*x260))+(((-8.0)*new_r11)))))+(IKabs((x256+(((-1.0)*x261)))))+(IKabs((x261+(((-1.0)*x256)))))+(IKabs(((((-32.0)*new_r11*x255))+((new_r22*x258))+(((16.0)*new_r11)))))+(IKabs(((((-8.0)*x259))+((x255*x260)))))+(IKabs((x257+(((-1.0)*x262)))))+(IKabs(((((32.0)*new_r00))+(((-1.0)*x255*x258))+(((-16.0)*x259))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5, j7]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j5evalpoly[1];
IkReal x263=new_r22*new_r22;
IkReal x264=((16.0)*new_r01);
IkReal x265=(new_r00*new_r22);
IkReal x266=(x263*x264);
IkReal x267=((((8.0)*x265))+(((-8.0)*new_r11)));
op[0]=x267;
op[1]=(x266+(((-1.0)*x264)));
op[2]=((((-32.0)*new_r11*x263))+(((16.0)*new_r11))+(((16.0)*x265)));
op[3]=(x264+(((-1.0)*x266)));
op[4]=x267;
polyroots4(op,zeror,numroots);
IkReal j5array[4], cj5array[4], sj5array[4], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[4]={true,true,true,true};
_nj5 = 4;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x268=new_r22*new_r22;
IkReal x269=((16.0)*new_r10);
IkReal x270=(new_r11*new_r22);
IkReal x271=((8.0)*x270);
IkReal x272=(new_r00*x268);
IkReal x273=((8.0)*x272);
IkReal x274=(x268*x269);
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*((x273+(((-1.0)*x271))))))+(((htj5*htj5*htj5)*((x269+(((-1.0)*x274))))))+((htj5*((x274+(((-1.0)*x269))))))+x273+(((-1.0)*x271))+(((htj5*htj5)*(((((32.0)*new_r00))+(((-16.0)*x272))+(((-16.0)*x270)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j7eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x275=cj5*cj5;
IkReal x276=new_r22*new_r22;
IkReal x277=(new_r22*sj5);
IkReal x278=(((x275*x276))+(((-1.0)*x275))+(((-1.0)*x276)));
j7eval[0]=x278;
j7eval[1]=((IKabs((((cj5*new_r01))+((new_r00*x277)))))+(IKabs(((((-1.0)*cj5*new_r00))+((new_r01*x277))))));
j7eval[2]=IKsign(x278);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=new_r22;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=cj5;
j7eval[1]=new_r22;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x279=IKsin(j7);
IkReal x280=IKcos(j7);
IkReal x281=((1.0)*new_r01);
IkReal x282=((1.0)*new_r00);
IkReal x283=((1.0)*x280);
IkReal x284=((1.0)*x279);
evalcond[0]=(x279+new_r11);
evalcond[1]=((((-1.0)*x283))+new_r10);
evalcond[2]=((((-1.0)*new_r22*x284))+(((-1.0)*x282)));
evalcond[3]=((((-1.0)*new_r22*x283))+(((-1.0)*x281)));
evalcond[4]=((((-1.0)*new_r22*x282))+(((-1.0)*x284)));
evalcond[5]=((((-1.0)*new_r22*x281))+(((-1.0)*x283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x285=IKsin(j7);
IkReal x286=IKcos(j7);
IkReal x287=((1.0)*x286);
IkReal x288=((1.0)*x285);
evalcond[0]=(x285+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*new_r22*x288))+new_r00);
evalcond[2]=((((-1.0)*new_r22*x287))+new_r01);
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x287)));
evalcond[4]=(((new_r00*new_r22))+(((-1.0)*x288)));
evalcond[5]=(((new_r01*new_r22))+(((-1.0)*x287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x289=new_r22*new_r22;
CheckValue<IkReal> x290=IKPowWithIntegerCheck(((-1.0)+x289),-1);
if(!x290.valid){
continue;
}
if(((x289*(x290.value))) < -0.00001)
continue;
IkReal gconst46=IKsqrt((x289*(x290.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj5)))))+(IKabs(((((-1.0)*gconst46))+cj5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
IkReal x291=IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))));
if( IKabs(((((-1.0)*gconst46*new_r01))+(((-1.0)*new_r11*x291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst46*new_r00))+((new_r10*x291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst46*new_r01))+(((-1.0)*new_r11*x291))))+IKsqr((((gconst46*new_r00))+((new_r10*x291))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*gconst46*new_r01))+(((-1.0)*new_r11*x291))), (((gconst46*new_r00))+((new_r10*x291))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x292=IKcos(j7);
IkReal x293=IKsin(j7);
IkReal x294=(gconst46*new_r11);
IkReal x295=(gconst46*new_r10);
IkReal x296=((1.0)*new_r22);
IkReal x297=((1.0)*x292);
IkReal x298=(gconst46*x293);
IkReal x299=(gconst46*x292);
IkReal x300=x291;
IkReal x301=((1.0)*x300);
IkReal x302=(new_r22*x300);
evalcond[0]=(((gconst46*new_r01))+((new_r11*x300))+x293);
evalcond[1]=(((gconst46*new_r00))+((new_r10*x300))+(((-1.0)*x297)));
evalcond[2]=(((x292*x302))+x298+new_r01);
evalcond[3]=((((-1.0)*x296*x299))+((x293*x300))+new_r11);
evalcond[4]=((((-1.0)*x293*x296))+x295+(((-1.0)*new_r00*x301)));
evalcond[5]=(x294+(((-1.0)*new_r01*x301))+(((-1.0)*x292*x296)));
evalcond[6]=(((x293*x302))+new_r00+(((-1.0)*gconst46*x297)));
evalcond[7]=((((-1.0)*x296*x298))+(((-1.0)*x297*x300))+new_r10);
evalcond[8]=((((-1.0)*x293))+((new_r22*x295))+(((-1.0)*new_r00*x296*x300)));
evalcond[9]=((((-1.0)*x297))+(((-1.0)*new_r01*x296*x300))+((new_r22*x294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x303=new_r22*new_r22;
CheckValue<IkReal> x304=IKPowWithIntegerCheck(((-1.0)+x303),-1);
if(!x304.valid){
continue;
}
if(((x303*(x304.value))) < -0.00001)
continue;
IkReal gconst46=IKsqrt((x303*(x304.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst46))+cj5)))+(IKabs(((1.0)+(IKsign(sj5)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst46*gconst46))))) < -0.00001)
continue;
IkReal x305=IKsqrt(((1.0)+(((-1.0)*(gconst46*gconst46)))));
if( IKabs((((new_r11*x305))+(((-1.0)*gconst46*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst46*new_r00))+(((-1.0)*new_r10*x305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*x305))+(((-1.0)*gconst46*new_r01))))+IKsqr((((gconst46*new_r00))+(((-1.0)*new_r10*x305))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((new_r11*x305))+(((-1.0)*gconst46*new_r01))), (((gconst46*new_r00))+(((-1.0)*new_r10*x305))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x306=IKsin(j7);
IkReal x307=IKcos(j7);
IkReal x308=(gconst46*new_r11);
IkReal x309=(gconst46*new_r10);
IkReal x310=(gconst46*new_r22);
IkReal x311=((1.0)*x307);
IkReal x312=((1.0)*x306);
IkReal x313=x305;
IkReal x314=(new_r00*x313);
IkReal x315=(new_r22*x313);
IkReal x316=((1.0)*x313);
evalcond[0]=(((gconst46*new_r01))+(((-1.0)*new_r11*x316))+x306);
evalcond[1]=(((gconst46*new_r00))+(((-1.0)*new_r10*x316))+(((-1.0)*x311)));
evalcond[2]=((((-1.0)*new_r22*x312))+x309+x314);
evalcond[3]=(((new_r01*x313))+(((-1.0)*new_r22*x311))+x308);
evalcond[4]=(new_r01+(((-1.0)*x311*x315))+((gconst46*x306)));
evalcond[5]=((((-1.0)*x310*x312))+((x307*x313))+new_r10);
evalcond[6]=(((new_r22*x309))+(((-1.0)*x312))+((new_r22*x314)));
evalcond[7]=(((new_r01*x315))+((new_r22*x308))+(((-1.0)*x311)));
evalcond[8]=((((-1.0)*x310*x311))+(((-1.0)*x312*x313))+new_r11);
evalcond[9]=((((-1.0)*x312*x315))+new_r00+(((-1.0)*gconst46*x311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x317=new_r22*new_r22;
CheckValue<IkReal> x318=IKPowWithIntegerCheck(((-1.0)+x317),-1);
if(!x318.valid){
continue;
}
if(((x317*(x318.value))) < -0.00001)
continue;
IkReal gconst47=((-1.0)*(IKsqrt((x317*(x318.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj5)))))+(IKabs(((((-1.0)*gconst47))+cj5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
IkReal x319=IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))));
if( IKabs(((((-1.0)*gconst47*new_r01))+(((-1.0)*new_r11*x319)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r10*x319))+((gconst47*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst47*new_r01))+(((-1.0)*new_r11*x319))))+IKsqr((((new_r10*x319))+((gconst47*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*gconst47*new_r01))+(((-1.0)*new_r11*x319))), (((new_r10*x319))+((gconst47*new_r00))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x320=IKsin(j7);
IkReal x321=IKcos(j7);
IkReal x322=(gconst47*new_r22);
IkReal x323=((1.0)*x321);
IkReal x324=(new_r22*x320);
IkReal x325=((1.0)*x320);
IkReal x326=x319;
IkReal x327=((1.0)*x326);
evalcond[0]=(x320+((new_r11*x326))+((gconst47*new_r01)));
evalcond[1]=((((-1.0)*x323))+((new_r10*x326))+((gconst47*new_r00)));
evalcond[2]=(((gconst47*x320))+((new_r22*x321*x326))+new_r01);
evalcond[3]=(((x320*x326))+(((-1.0)*x322*x323))+new_r11);
evalcond[4]=(((gconst47*new_r10))+(((-1.0)*x324))+(((-1.0)*new_r00*x327)));
evalcond[5]=(((gconst47*new_r11))+(((-1.0)*new_r22*x323))+(((-1.0)*new_r01*x327)));
evalcond[6]=((((-1.0)*gconst47*x323))+((x324*x326))+new_r00);
evalcond[7]=((((-1.0)*x322*x325))+(((-1.0)*x323*x326))+new_r10);
evalcond[8]=((((-1.0)*x325))+(((-1.0)*new_r00*new_r22*x327))+((new_r10*x322)));
evalcond[9]=((((-1.0)*x323))+(((-1.0)*new_r01*new_r22*x327))+((new_r11*x322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x328=new_r22*new_r22;
CheckValue<IkReal> x329=IKPowWithIntegerCheck(((-1.0)+x328),-1);
if(!x329.valid){
continue;
}
if(((x328*(x329.value))) < -0.00001)
continue;
IkReal gconst47=((-1.0)*(IKsqrt((x328*(x329.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst47))+cj5)))+(IKabs(((1.0)+(IKsign(sj5)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst47*gconst47))))) < -0.00001)
continue;
IkReal x330=IKsqrt(((1.0)+(((-1.0)*(gconst47*gconst47)))));
if( IKabs(((((-1.0)*gconst47*new_r01))+((new_r11*x330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r10*x330))+((gconst47*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst47*new_r01))+((new_r11*x330))))+IKsqr(((((-1.0)*new_r10*x330))+((gconst47*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*gconst47*new_r01))+((new_r11*x330))), ((((-1.0)*new_r10*x330))+((gconst47*new_r00))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x331=IKsin(j7);
IkReal x332=IKcos(j7);
IkReal x333=(gconst47*new_r22);
IkReal x334=((1.0)*new_r22);
IkReal x335=((1.0)*x332);
IkReal x336=((1.0)*x331);
IkReal x337=x330;
IkReal x338=((1.0)*x337);
IkReal x339=(new_r00*x337);
IkReal x340=(new_r01*x337);
IkReal x341=(x334*x337);
evalcond[0]=((((-1.0)*new_r11*x338))+x331+((gconst47*new_r01)));
evalcond[1]=((((-1.0)*new_r10*x338))+(((-1.0)*x335))+((gconst47*new_r00)));
evalcond[2]=(((gconst47*new_r10))+x339+(((-1.0)*x331*x334)));
evalcond[3]=(((gconst47*new_r11))+x340+(((-1.0)*x332*x334)));
evalcond[4]=((((-1.0)*x332*x341))+((gconst47*x331))+new_r01);
evalcond[5]=((((-1.0)*x333*x336))+((x332*x337))+new_r10);
evalcond[6]=(((new_r22*x339))+((new_r10*x333))+(((-1.0)*x336)));
evalcond[7]=(((new_r22*x340))+((new_r11*x333))+(((-1.0)*x335)));
evalcond[8]=((((-1.0)*x333*x335))+new_r11+(((-1.0)*x336*x337)));
evalcond[9]=((((-1.0)*x331*x341))+(((-1.0)*gconst47*x335))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x342=((1.0)*cj5*new_r01);
CheckValue<IkReal> x343=IKPowWithIntegerCheck(cj5,-1);
if(!x343.valid){
continue;
}
CheckValue<IkReal> x344=IKPowWithIntegerCheck(new_r22,-1);
if(!x344.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*sj5))+(((-1.0)*x342)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x343.value)*(x344.value)*(((((-1.0)*sj5*x342))+((new_r11*(cj5*cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj5))+(((-1.0)*x342))))+IKsqr(((x343.value)*(x344.value)*(((((-1.0)*sj5*x342))+((new_r11*(cj5*cj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r11*sj5))+(((-1.0)*x342))), ((x343.value)*(x344.value)*(((((-1.0)*sj5*x342))+((new_r11*(cj5*cj5)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x345=IKsin(j7);
IkReal x346=IKcos(j7);
IkReal x347=((1.0)*sj5);
IkReal x348=(cj5*new_r22);
IkReal x349=((1.0)*x346);
IkReal x350=((1.0)*x345);
IkReal x351=(sj5*x345);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x345);
evalcond[1]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x349)));
evalcond[2]=(((new_r22*sj5*x346))+((cj5*x345))+new_r01);
evalcond[3]=((((-1.0)*x348*x349))+x351+new_r11);
evalcond[4]=((((-1.0)*new_r22*x350))+((cj5*new_r10))+(((-1.0)*new_r00*x347)));
evalcond[5]=(((cj5*new_r11))+(((-1.0)*new_r01*x347))+(((-1.0)*new_r22*x349)));
evalcond[6]=(((new_r22*x351))+(((-1.0)*cj5*x349))+new_r00);
evalcond[7]=((((-1.0)*x348*x350))+(((-1.0)*x346*x347))+new_r10);
evalcond[8]=((((-1.0)*new_r00*new_r22*x347))+(((-1.0)*x350))+((new_r10*x348)));
evalcond[9]=((((-1.0)*new_r01*new_r22*x347))+((new_r11*x348))+(((-1.0)*x349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x352=((1.0)*new_r01);
CheckValue<IkReal> x353=IKPowWithIntegerCheck(new_r22,-1);
if(!x353.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*sj5))+(((-1.0)*cj5*x352)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x353.value)*((((cj5*new_r11))+(((-1.0)*sj5*x352)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj5))+(((-1.0)*cj5*x352))))+IKsqr(((x353.value)*((((cj5*new_r11))+(((-1.0)*sj5*x352))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r11*sj5))+(((-1.0)*cj5*x352))), ((x353.value)*((((cj5*new_r11))+(((-1.0)*sj5*x352))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x354=IKsin(j7);
IkReal x355=IKcos(j7);
IkReal x356=((1.0)*sj5);
IkReal x357=(cj5*new_r22);
IkReal x358=((1.0)*x355);
IkReal x359=((1.0)*x354);
IkReal x360=(sj5*x354);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x354);
evalcond[1]=(((new_r10*sj5))+(((-1.0)*x358))+((cj5*new_r00)));
evalcond[2]=(((new_r22*sj5*x355))+((cj5*x354))+new_r01);
evalcond[3]=((((-1.0)*x357*x358))+x360+new_r11);
evalcond[4]=((((-1.0)*new_r22*x359))+((cj5*new_r10))+(((-1.0)*new_r00*x356)));
evalcond[5]=((((-1.0)*new_r22*x358))+((cj5*new_r11))+(((-1.0)*new_r01*x356)));
evalcond[6]=(((new_r22*x360))+new_r00+(((-1.0)*cj5*x358)));
evalcond[7]=((((-1.0)*x357*x359))+new_r10+(((-1.0)*x355*x356)));
evalcond[8]=((((-1.0)*x359))+(((-1.0)*new_r00*new_r22*x356))+((new_r10*x357)));
evalcond[9]=((((-1.0)*x358))+(((-1.0)*new_r01*new_r22*x356))+((new_r11*x357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x361=cj5*cj5;
IkReal x362=new_r22*new_r22;
IkReal x363=(new_r22*sj5);
CheckValue<IkReal> x364=IKPowWithIntegerCheck(IKsign((((x361*x362))+(((-1.0)*x361))+(((-1.0)*x362)))),-1);
if(!x364.valid){
continue;
}
CheckValue<IkReal> x365 = IKatan2WithCheck(IkReal((((cj5*new_r01))+((new_r00*x363)))),IkReal(((((-1.0)*cj5*new_r00))+((new_r01*x363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x365.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x364.value)))+(x365.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x366=IKsin(j7);
IkReal x367=IKcos(j7);
IkReal x368=((1.0)*sj5);
IkReal x369=(cj5*new_r22);
IkReal x370=((1.0)*x367);
IkReal x371=((1.0)*x366);
IkReal x372=(sj5*x366);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x366);
evalcond[1]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x370)));
evalcond[2]=(((cj5*x366))+new_r01+((new_r22*sj5*x367)));
evalcond[3]=(x372+(((-1.0)*x369*x370))+new_r11);
evalcond[4]=((((-1.0)*new_r00*x368))+((cj5*new_r10))+(((-1.0)*new_r22*x371)));
evalcond[5]=(((cj5*new_r11))+(((-1.0)*new_r22*x370))+(((-1.0)*new_r01*x368)));
evalcond[6]=((((-1.0)*cj5*x370))+new_r00+((new_r22*x372)));
evalcond[7]=((((-1.0)*x367*x368))+(((-1.0)*x369*x371))+new_r10);
evalcond[8]=((((-1.0)*x371))+(((-1.0)*new_r00*new_r22*x368))+((new_r10*x369)));
evalcond[9]=((((-1.0)*x370))+((new_r11*x369))+(((-1.0)*new_r01*new_r22*x368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5, j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x374=IKPowWithIntegerCheck(cj6,-1);
if(!x374.valid){
continue;
}
IkReal x373=x374.value;
CheckValue<IkReal> x375=IKPowWithIntegerCheck(new_r02,-1);
if(!x375.valid){
continue;
}
CheckValue<IkReal> x376=IKPowWithIntegerCheck(x373,-2);
if(!x376.valid){
continue;
}
if( IKabs((x373*(x375.value)*(((x376.value)+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x373)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x373*(x375.value)*(((x376.value)+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x373))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x373*(x375.value)*(((x376.value)+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x373));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x377=IKsin(j5);
IkReal x378=IKcos(j5);
IkReal x379=(new_r12*x378);
IkReal x380=(cj6*x378);
IkReal x381=(new_r02*x377);
IkReal x382=((1.0)*cj6*x377);
evalcond[0]=(x380+new_r12);
evalcond[1]=((((-1.0)*x382))+new_r02);
evalcond[2]=(((new_r12*x377))+((new_r02*x378)));
evalcond[3]=(cj6+x379+(((-1.0)*x381)));
evalcond[4]=(((new_r20*sj6))+(((-1.0)*new_r00*x382))+((new_r10*x380)));
evalcond[5]=((((-1.0)*new_r01*x382))+((new_r11*x380))+((new_r21*sj6)));
evalcond[6]=(((sj6*x381))+(((-1.0)*sj6*x379))+((cj6*new_r22)));
evalcond[7]=((1.0)+((new_r22*sj6))+(((-1.0)*cj6*x381))+((cj6*x379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
j7eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj6;
j7eval[1]=sj5;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=sj5;
j7eval[2]=sj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x383=((1.0)*cj5);
if( IKabs(((((-1.0)*new_r01*x383))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x383))+((new_r01*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x383))+(((-1.0)*new_r11*sj5))))+IKsqr(((((-1.0)*new_r11*x383))+((new_r01*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r01*x383))+(((-1.0)*new_r11*sj5))), ((((-1.0)*new_r11*x383))+((new_r01*sj5))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x384=IKsin(j7);
IkReal x385=IKcos(j7);
IkReal x386=((1.0)*sj5);
IkReal x387=(cj5*x384);
IkReal x388=(cj5*x385);
IkReal x389=(x385*x386);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x384);
evalcond[1]=(((cj5*new_r10))+(((-1.0)*new_r00*x386))+x384);
evalcond[2]=(((cj5*new_r11))+(((-1.0)*new_r01*x386))+x385);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x385)));
evalcond[4]=(((sj5*x384))+x388+new_r11);
evalcond[5]=(x387+(((-1.0)*x389))+new_r01);
evalcond[6]=(x387+(((-1.0)*x389))+new_r10);
evalcond[7]=((((-1.0)*x384*x386))+(((-1.0)*x388))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x390=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj5*x390))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*new_r11))+(((-1.0)*sj5*x390)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x390))+(((-1.0)*new_r11*sj5))))+IKsqr((((cj5*new_r11))+(((-1.0)*sj5*x390))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj5*x390))+(((-1.0)*new_r11*sj5))), (((cj5*new_r11))+(((-1.0)*sj5*x390))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x391=IKsin(j7);
IkReal x392=IKcos(j7);
IkReal x393=((1.0)*sj5);
IkReal x394=((1.0)*x392);
IkReal x395=(sj5*x391);
IkReal x396=((1.0)*x391);
IkReal x397=(cj5*x394);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x391);
evalcond[1]=((((-1.0)*x394))+((new_r10*sj5))+((cj5*new_r00)));
evalcond[2]=(((cj5*x391))+((sj5*x392))+new_r01);
evalcond[3]=((((-1.0)*x397))+x395+new_r11);
evalcond[4]=((((-1.0)*x396))+((cj5*new_r10))+(((-1.0)*new_r00*x393)));
evalcond[5]=((((-1.0)*new_r01*x393))+(((-1.0)*x394))+((cj5*new_r11)));
evalcond[6]=((((-1.0)*x397))+x395+new_r00);
evalcond[7]=((((-1.0)*cj5*x396))+new_r10+(((-1.0)*x392*x393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x398=IKcos(j7);
IkReal x399=IKsin(j7);
IkReal x400=((1.0)*sj6);
IkReal x401=((1.0)*x398);
IkReal x402=((1.0)*x399);
evalcond[0]=(x399+new_r01);
evalcond[1]=(new_r00+(((-1.0)*x401)));
evalcond[2]=(((sj6*x398))+new_r11);
evalcond[3]=(((sj6*x399))+new_r10);
evalcond[4]=((((-1.0)*cj6*x402))+new_r20);
evalcond[5]=((((-1.0)*cj6*x401))+new_r21);
evalcond[6]=((((-1.0)*new_r10*x400))+(((-1.0)*x402))+((cj6*new_r20)));
evalcond[7]=((((-1.0)*new_r11*x400))+(((-1.0)*x401))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x403=IKsin(j7);
IkReal x404=IKcos(j7);
IkReal x405=((1.0)*x404);
IkReal x406=((1.0)*x403);
evalcond[0]=(x403+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*cj6*x406))+new_r20);
evalcond[2]=((((-1.0)*cj6*x405))+new_r21);
evalcond[3]=(new_r11+(((-1.0)*sj6*x405)));
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x405)));
evalcond[5]=(((sj6*x403))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r10*sj6))+(((-1.0)*x406))+((cj6*new_r20)));
evalcond[7]=(((new_r11*sj6))+(((-1.0)*x405))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r20, new_r21);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x407=IKsin(j7);
IkReal x408=IKcos(j7);
IkReal x409=((1.0)*x408);
evalcond[0]=(new_r20+(((-1.0)*x407)));
evalcond[1]=(new_r21+(((-1.0)*x409)));
evalcond[2]=(new_r11+((new_r02*x407)));
evalcond[3]=(((cj5*x407))+new_r01);
evalcond[4]=(new_r10+(((-1.0)*new_r02*x409)));
evalcond[5]=((((-1.0)*cj5*x409))+new_r00);
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x407);
evalcond[7]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x410=IKsin(j7);
IkReal x411=IKcos(j7);
IkReal x412=((1.0)*x411);
evalcond[0]=(x410+new_r20);
evalcond[1]=(x411+new_r21);
evalcond[2]=(((cj5*x410))+new_r01);
evalcond[3]=(new_r10+((new_r02*x411)));
evalcond[4]=((((-1.0)*new_r02*x410))+new_r11);
evalcond[5]=((((-1.0)*cj5*x412))+new_r00);
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x410);
evalcond[7]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x414=IKPowWithIntegerCheck(cj6,-1);
if(!x414.valid){
continue;
}
IkReal x413=x414.value;
CheckValue<IkReal> x415=IKPowWithIntegerCheck(sj5,-1);
if(!x415.valid){
continue;
}
CheckValue<IkReal> x416=IKPowWithIntegerCheck(sj6,-1);
if(!x416.valid){
continue;
}
if( IKabs((new_r20*x413)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x413*(x415.value)*(x416.value)*((((cj5*new_r20))+((cj6*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x413))+IKsqr((x413*(x415.value)*(x416.value)*((((cj5*new_r20))+((cj6*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x413), (x413*(x415.value)*(x416.value)*((((cj5*new_r20))+((cj6*new_r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x417=IKsin(j7);
IkReal x418=IKcos(j7);
IkReal x419=(new_r01*sj5);
IkReal x420=((1.0)*sj5);
IkReal x421=(cj5*sj6);
IkReal x422=(sj5*sj6);
IkReal x423=((1.0)*x418);
IkReal x424=(sj6*x417);
IkReal x425=((1.0)*x417);
evalcond[0]=((((-1.0)*cj6*x425))+new_r20);
evalcond[1]=((((-1.0)*cj6*x423))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x417);
evalcond[3]=(((new_r10*sj5))+(((-1.0)*x423))+((cj5*new_r00)));
evalcond[4]=(((sj5*x417))+((x418*x421))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x420))+((cj5*new_r10))+x424);
evalcond[6]=(((cj5*new_r11))+((sj6*x418))+(((-1.0)*x419)));
evalcond[7]=(((cj5*x417))+(((-1.0)*sj6*x418*x420))+new_r01);
evalcond[8]=((((-1.0)*x418*x420))+new_r10+((x417*x421)));
evalcond[9]=((((-1.0)*x420*x424))+(((-1.0)*cj5*x423))+new_r00);
evalcond[10]=((((-1.0)*x425))+(((-1.0)*new_r10*x421))+((new_r00*x422))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x423))+((sj6*x419))+(((-1.0)*new_r11*x421))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x427=IKPowWithIntegerCheck(cj6,-1);
if(!x427.valid){
continue;
}
IkReal x426=x427.value;
CheckValue<IkReal> x428=IKPowWithIntegerCheck(sj5,-1);
if(!x428.valid){
continue;
}
if( IKabs((new_r20*x426)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x426*(x428.value)*((((cj6*new_r10))+((cj5*new_r20*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x426))+IKsqr((x426*(x428.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x426), (x426*(x428.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x429=IKsin(j7);
IkReal x430=IKcos(j7);
IkReal x431=(new_r01*sj5);
IkReal x432=((1.0)*sj5);
IkReal x433=(cj5*sj6);
IkReal x434=(sj5*sj6);
IkReal x435=((1.0)*x430);
IkReal x436=(sj6*x429);
IkReal x437=((1.0)*x429);
evalcond[0]=((((-1.0)*cj6*x437))+new_r20);
evalcond[1]=((((-1.0)*cj6*x435))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x429);
evalcond[3]=((((-1.0)*x435))+((new_r10*sj5))+((cj5*new_r00)));
evalcond[4]=(((x430*x433))+((sj5*x429))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x432))+((cj5*new_r10))+x436);
evalcond[6]=((((-1.0)*x431))+((cj5*new_r11))+((sj6*x430)));
evalcond[7]=(((cj5*x429))+(((-1.0)*sj6*x430*x432))+new_r01);
evalcond[8]=((((-1.0)*x430*x432))+((x429*x433))+new_r10);
evalcond[9]=((((-1.0)*x432*x436))+(((-1.0)*cj5*x435))+new_r00);
evalcond[10]=((((-1.0)*x437))+((new_r00*x434))+(((-1.0)*new_r10*x433))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x435))+((sj6*x431))+(((-1.0)*new_r11*x433))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x438=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x438.valid){
continue;
}
CheckValue<IkReal> x439 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x439.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x438.value)))+(x439.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x440=IKsin(j7);
IkReal x441=IKcos(j7);
IkReal x442=(new_r01*sj5);
IkReal x443=((1.0)*sj5);
IkReal x444=(cj5*sj6);
IkReal x445=(sj5*sj6);
IkReal x446=((1.0)*x441);
IkReal x447=(sj6*x440);
IkReal x448=((1.0)*x440);
evalcond[0]=((((-1.0)*cj6*x448))+new_r20);
evalcond[1]=((((-1.0)*cj6*x446))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x440);
evalcond[3]=((((-1.0)*x446))+((new_r10*sj5))+((cj5*new_r00)));
evalcond[4]=(((x441*x444))+((sj5*x440))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x443))+((cj5*new_r10))+x447);
evalcond[6]=(((sj6*x441))+((cj5*new_r11))+(((-1.0)*x442)));
evalcond[7]=(((cj5*x440))+(((-1.0)*sj6*x441*x443))+new_r01);
evalcond[8]=(((x440*x444))+new_r10+(((-1.0)*x441*x443)));
evalcond[9]=((((-1.0)*x443*x447))+(((-1.0)*cj5*x446))+new_r00);
evalcond[10]=(((new_r00*x445))+(((-1.0)*x448))+(((-1.0)*new_r10*x444))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x446))+((sj6*x442))+(((-1.0)*new_r11*x444))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x449=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x449.valid){
continue;
}
CheckValue<IkReal> x450 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x450.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x449.value)))+(x450.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x451=IKsin(j5);
IkReal x452=IKcos(j5);
IkReal x453=(new_r12*x452);
IkReal x454=(cj6*x452);
IkReal x455=(new_r02*x451);
IkReal x456=((1.0)*cj6*x451);
evalcond[0]=(x454+new_r12);
evalcond[1]=((((-1.0)*x456))+new_r02);
evalcond[2]=(((new_r12*x451))+((new_r02*x452)));
evalcond[3]=(cj6+(((-1.0)*x455))+x453);
evalcond[4]=(((new_r10*x454))+((new_r20*sj6))+(((-1.0)*new_r00*x456)));
evalcond[5]=(((new_r11*x454))+(((-1.0)*new_r01*x456))+((new_r21*sj6)));
evalcond[6]=(((sj6*x455))+(((-1.0)*sj6*x453))+((cj6*new_r22)));
evalcond[7]=((1.0)+((cj6*x453))+((new_r22*sj6))+(((-1.0)*cj6*x455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
j7eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj6;
j7eval[1]=sj5;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=sj5;
j7eval[2]=sj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x457=((1.0)*cj5);
if( IKabs(((((-1.0)*new_r01*x457))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj5))+(((-1.0)*new_r11*x457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x457))+(((-1.0)*new_r11*sj5))))+IKsqr((((new_r01*sj5))+(((-1.0)*new_r11*x457))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r01*x457))+(((-1.0)*new_r11*sj5))), (((new_r01*sj5))+(((-1.0)*new_r11*x457))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x458=IKsin(j7);
IkReal x459=IKcos(j7);
IkReal x460=((1.0)*sj5);
IkReal x461=(cj5*x458);
IkReal x462=(cj5*x459);
IkReal x463=(x459*x460);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x458);
evalcond[1]=(((cj5*new_r10))+(((-1.0)*new_r00*x460))+x458);
evalcond[2]=(((cj5*new_r11))+(((-1.0)*new_r01*x460))+x459);
evalcond[3]=(((new_r10*sj5))+(((-1.0)*x459))+((cj5*new_r00)));
evalcond[4]=(x462+new_r11+((sj5*x458)));
evalcond[5]=((((-1.0)*x463))+x461+new_r01);
evalcond[6]=((((-1.0)*x463))+x461+new_r10);
evalcond[7]=((((-1.0)*x462))+(((-1.0)*x458*x460))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x464=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj5*x464))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*new_r11))+(((-1.0)*sj5*x464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x464))+(((-1.0)*new_r11*sj5))))+IKsqr((((cj5*new_r11))+(((-1.0)*sj5*x464))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj5*x464))+(((-1.0)*new_r11*sj5))), (((cj5*new_r11))+(((-1.0)*sj5*x464))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x465=IKsin(j7);
IkReal x466=IKcos(j7);
IkReal x467=((1.0)*sj5);
IkReal x468=((1.0)*x466);
IkReal x469=(sj5*x465);
IkReal x470=((1.0)*x465);
IkReal x471=(cj5*x468);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x465);
evalcond[1]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x468)));
evalcond[2]=(((cj5*x465))+new_r01+((sj5*x466)));
evalcond[3]=((((-1.0)*x471))+x469+new_r11);
evalcond[4]=(((cj5*new_r10))+(((-1.0)*x470))+(((-1.0)*new_r00*x467)));
evalcond[5]=(((cj5*new_r11))+(((-1.0)*new_r01*x467))+(((-1.0)*x468)));
evalcond[6]=((((-1.0)*x471))+x469+new_r00);
evalcond[7]=((((-1.0)*x466*x467))+(((-1.0)*cj5*x470))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x472=IKcos(j7);
IkReal x473=IKsin(j7);
IkReal x474=((1.0)*sj6);
IkReal x475=((1.0)*x472);
IkReal x476=((1.0)*x473);
evalcond[0]=(x473+new_r01);
evalcond[1]=((((-1.0)*x475))+new_r00);
evalcond[2]=(((sj6*x472))+new_r11);
evalcond[3]=(((sj6*x473))+new_r10);
evalcond[4]=(new_r20+(((-1.0)*cj6*x476)));
evalcond[5]=(new_r21+(((-1.0)*cj6*x475)));
evalcond[6]=((((-1.0)*x476))+(((-1.0)*new_r10*x474))+((cj6*new_r20)));
evalcond[7]=((((-1.0)*x475))+(((-1.0)*new_r11*x474))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x477=IKsin(j7);
IkReal x478=IKcos(j7);
IkReal x479=((1.0)*x478);
IkReal x480=((1.0)*x477);
evalcond[0]=(x477+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*cj6*x480))+new_r20);
evalcond[2]=(new_r21+(((-1.0)*cj6*x479)));
evalcond[3]=((((-1.0)*sj6*x479))+new_r11);
evalcond[4]=((((-1.0)*x479))+(((-1.0)*new_r00)));
evalcond[5]=(((sj6*x477))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r10*sj6))+(((-1.0)*x480))+((cj6*new_r20)));
evalcond[7]=(((new_r11*sj6))+(((-1.0)*x479))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r20, new_r21);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x481=IKsin(j7);
IkReal x482=IKcos(j7);
IkReal x483=((1.0)*x482);
evalcond[0]=((((-1.0)*x481))+new_r20);
evalcond[1]=((((-1.0)*x483))+new_r21);
evalcond[2]=(((new_r02*x481))+new_r11);
evalcond[3]=(((cj5*x481))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x483))+new_r10);
evalcond[5]=(new_r00+(((-1.0)*cj5*x483)));
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x481);
evalcond[7]=(((new_r10*sj5))+(((-1.0)*x483))+((cj5*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x484=IKsin(j7);
IkReal x485=IKcos(j7);
IkReal x486=((1.0)*x485);
evalcond[0]=(x484+new_r20);
evalcond[1]=(x485+new_r21);
evalcond[2]=(((cj5*x484))+new_r01);
evalcond[3]=(((new_r02*x485))+new_r10);
evalcond[4]=((((-1.0)*new_r02*x484))+new_r11);
evalcond[5]=(new_r00+(((-1.0)*cj5*x486)));
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x484);
evalcond[7]=(((new_r10*sj5))+(((-1.0)*x486))+((cj5*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x488=IKPowWithIntegerCheck(cj6,-1);
if(!x488.valid){
continue;
}
IkReal x487=x488.value;
CheckValue<IkReal> x489=IKPowWithIntegerCheck(sj5,-1);
if(!x489.valid){
continue;
}
CheckValue<IkReal> x490=IKPowWithIntegerCheck(sj6,-1);
if(!x490.valid){
continue;
}
if( IKabs((new_r20*x487)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x487*(x489.value)*(x490.value)*((((cj5*new_r20))+((cj6*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x487))+IKsqr((x487*(x489.value)*(x490.value)*((((cj5*new_r20))+((cj6*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x487), (x487*(x489.value)*(x490.value)*((((cj5*new_r20))+((cj6*new_r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x491=IKsin(j7);
IkReal x492=IKcos(j7);
IkReal x493=(new_r01*sj5);
IkReal x494=((1.0)*sj5);
IkReal x495=(cj5*sj6);
IkReal x496=(sj5*sj6);
IkReal x497=((1.0)*x492);
IkReal x498=(sj6*x491);
IkReal x499=((1.0)*x491);
evalcond[0]=((((-1.0)*cj6*x499))+new_r20);
evalcond[1]=((((-1.0)*cj6*x497))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x491);
evalcond[3]=((((-1.0)*x497))+((new_r10*sj5))+((cj5*new_r00)));
evalcond[4]=(new_r11+((sj5*x491))+((x492*x495)));
evalcond[5]=((((-1.0)*new_r00*x494))+((cj5*new_r10))+x498);
evalcond[6]=(((cj5*new_r11))+(((-1.0)*x493))+((sj6*x492)));
evalcond[7]=(((cj5*x491))+(((-1.0)*sj6*x492*x494))+new_r01);
evalcond[8]=(((x491*x495))+new_r10+(((-1.0)*x492*x494)));
evalcond[9]=((((-1.0)*x494*x498))+(((-1.0)*cj5*x497))+new_r00);
evalcond[10]=((((-1.0)*x499))+(((-1.0)*new_r10*x495))+((new_r00*x496))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x497))+(((-1.0)*new_r11*x495))+((sj6*x493))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x501=IKPowWithIntegerCheck(cj6,-1);
if(!x501.valid){
continue;
}
IkReal x500=x501.value;
CheckValue<IkReal> x502=IKPowWithIntegerCheck(sj5,-1);
if(!x502.valid){
continue;
}
if( IKabs((new_r20*x500)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x500*(x502.value)*((((cj6*new_r10))+((cj5*new_r20*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x500))+IKsqr((x500*(x502.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x500), (x500*(x502.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x503=IKsin(j7);
IkReal x504=IKcos(j7);
IkReal x505=(new_r01*sj5);
IkReal x506=((1.0)*sj5);
IkReal x507=(cj5*sj6);
IkReal x508=(sj5*sj6);
IkReal x509=((1.0)*x504);
IkReal x510=(sj6*x503);
IkReal x511=((1.0)*x503);
evalcond[0]=((((-1.0)*cj6*x511))+new_r20);
evalcond[1]=((((-1.0)*cj6*x509))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x503);
evalcond[3]=(((new_r10*sj5))+(((-1.0)*x509))+((cj5*new_r00)));
evalcond[4]=(((sj5*x503))+new_r11+((x504*x507)));
evalcond[5]=((((-1.0)*new_r00*x506))+((cj5*new_r10))+x510);
evalcond[6]=(((sj6*x504))+((cj5*new_r11))+(((-1.0)*x505)));
evalcond[7]=((((-1.0)*sj6*x504*x506))+((cj5*x503))+new_r01);
evalcond[8]=(((x503*x507))+(((-1.0)*x504*x506))+new_r10);
evalcond[9]=((((-1.0)*cj5*x509))+(((-1.0)*x506*x510))+new_r00);
evalcond[10]=((((-1.0)*new_r10*x507))+((new_r00*x508))+(((-1.0)*x511))+((cj6*new_r20)));
evalcond[11]=(((sj6*x505))+(((-1.0)*new_r11*x507))+(((-1.0)*x509))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x512=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x512.valid){
continue;
}
CheckValue<IkReal> x513 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x513.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x512.value)))+(x513.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x514=IKsin(j7);
IkReal x515=IKcos(j7);
IkReal x516=(new_r01*sj5);
IkReal x517=((1.0)*sj5);
IkReal x518=(cj5*sj6);
IkReal x519=(sj5*sj6);
IkReal x520=((1.0)*x515);
IkReal x521=(sj6*x514);
IkReal x522=((1.0)*x514);
evalcond[0]=((((-1.0)*cj6*x522))+new_r20);
evalcond[1]=((((-1.0)*cj6*x520))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x514);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x520)));
evalcond[4]=(((sj5*x514))+((x515*x518))+new_r11);
evalcond[5]=(((cj5*new_r10))+x521+(((-1.0)*new_r00*x517)));
evalcond[6]=(((cj5*new_r11))+(((-1.0)*x516))+((sj6*x515)));
evalcond[7]=(((cj5*x514))+(((-1.0)*sj6*x515*x517))+new_r01);
evalcond[8]=(((x514*x518))+(((-1.0)*x515*x517))+new_r10);
evalcond[9]=((((-1.0)*x517*x521))+new_r00+(((-1.0)*cj5*x520)));
evalcond[10]=(((new_r00*x519))+(((-1.0)*x522))+(((-1.0)*new_r10*x518))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x520))+(((-1.0)*new_r11*x518))+((sj6*x516))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x523=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x523.valid){
continue;
}
CheckValue<IkReal> x524 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x524.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x523.value)))+(x524.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x525=((1.0)*cj6);
evalcond[0]=((((-1.0)*x525*(IKsin(j7))))+new_r20);
evalcond[1]=((((-1.0)*x525*(IKcos(j7))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=cj6;
j5eval[1]=IKsign(cj6);
j5eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj6;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x526=((1.0)*sj7);
IkReal x527=(((new_r10*new_r11))+((new_r00*new_r01)));
j5eval[0]=x527;
j5eval[1]=IKsign(x527);
j5eval[2]=((IKabs(((((-1.0)*new_r00*x526))+(((-1.0)*new_r11*x526)))))+(IKabs((((new_r01*sj7))+(((-1.0)*new_r10*x526))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x528=((1.0)*new_r11);
IkReal x529=((new_r01*new_r01)+(new_r11*new_r11));
j5eval[0]=x529;
j5eval[1]=((IKabs(((((-1.0)*sj7*x528))+((cj7*new_r01)))))+(IKabs(((((-1.0)*new_r01*sj7))+(((-1.0)*cj7*x528))))));
j5eval[2]=IKsign(x529);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x530=(((new_r11*sj7))+((cj7*new_r01)));
j5eval[0]=x530;
j5eval[1]=IKsign(x530);
j5eval[2]=((IKabs(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj7*sj7)))))+(IKabs(((-1.0)+(cj7*cj7)+(new_r01*new_r01)))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x532 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x532)==0){
continue;
}
IkReal x531=pow(x532,-0.5);
CheckValue<IkReal> x533 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x533.valid){
continue;
}
IkReal gconst40=((-1.0)*(x533.value));
IkReal gconst41=((-1.0)*new_r01*x531);
IkReal gconst42=(new_r11*x531);
CheckValue<IkReal> x534 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x534.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x534.value)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x537 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x537.valid){
continue;
}
IkReal x535=((-1.0)*(x537.value));
IkReal x536=x531;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x535;
IkReal gconst40=x535;
IkReal gconst41=((-1.0)*new_r01*x536);
IkReal gconst42=(new_r11*x536);
IkReal x538=new_r01*new_r01;
IkReal x539=(new_r00*new_r01);
IkReal x540=(((new_r10*new_r11))+x539);
IkReal x541=x531;
IkReal x542=(new_r01*x541);
j5eval[0]=x540;
j5eval[1]=IKsign(x540);
j5eval[2]=((IKabs(((((-1.0)*x538*x541))+((new_r10*x542)))))+(IKabs((((x539*x541))+((new_r11*x542))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x545 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x545.valid){
continue;
}
IkReal x543=((-1.0)*(x545.value));
IkReal x544=x531;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x543;
IkReal gconst40=x543;
IkReal gconst41=((-1.0)*new_r01*x544);
IkReal gconst42=(new_r11*x544);
IkReal x546=((new_r01*new_r01)+(new_r11*new_r11));
j5eval[0]=x546;
j5eval[1]=IKsign(x546);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x549 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x549.valid){
continue;
}
IkReal x547=((-1.0)*(x549.value));
IkReal x548=x531;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x547;
IkReal gconst40=x547;
IkReal gconst41=((-1.0)*new_r01*x548);
IkReal gconst42=(new_r11*x548);
IkReal x550=new_r01*new_r01;
IkReal x551=new_r11*new_r11;
IkReal x552=((1.0)*x550);
CheckValue<IkReal> x558=IKPowWithIntegerCheck((x551+x550),-1);
if(!x558.valid){
continue;
}
IkReal x553=x558.value;
CheckValue<IkReal> x559=IKPowWithIntegerCheck(((((-1.0)*x551))+(((-1.0)*x552))),-1);
if(!x559.valid){
continue;
}
IkReal x554=x559.value;
IkReal x555=((1.0)*x554);
IkReal x556=(new_r11*x555);
IkReal x557=(new_r01*x555);
j5eval[0]=((IKabs((((x550*x551*x553))+((x553*(x551*x551)))+(((-1.0)*x552*x553)))))+(IKabs(((((-1.0)*x556*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x556))+(((-1.0)*new_r01*x556*(new_r11*new_r11)))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x561 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x561.valid){
continue;
}
IkReal x560=((-1.0)*(x561.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x560;
new_r11=0;
new_r00=0;
IkReal gconst40=x560;
IkReal x562 = new_r01*new_r01;
if(IKabs(x562)==0){
continue;
}
IkReal gconst41=((-1.0)*new_r01*(pow(x562,-0.5)));
IkReal gconst42=0;
j5eval[0]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x564 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x564.valid){
continue;
}
IkReal x563=((-1.0)*(x564.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x563;
new_r11=0;
new_r00=0;
IkReal gconst40=x563;
IkReal x565 = new_r01*new_r01;
if(IKabs(x565)==0){
continue;
}
IkReal gconst41=((-1.0)*new_r01*(pow(x565,-0.5)));
IkReal gconst42=0;
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x566=IKPowWithIntegerCheck(gconst41,-1);
if(!x566.valid){
continue;
}
cj5array[0]=((-1.0)*new_r01*(x566.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x567=IKsin(j5);
IkReal x568=IKcos(j5);
evalcond[0]=(new_r10*x567);
evalcond[1]=(gconst41*x567);
evalcond[2]=((-1.0)*new_r01*x567);
evalcond[3]=(gconst41+((new_r01*x568)));
evalcond[4]=(gconst41+((new_r10*x568)));
evalcond[5]=(new_r10+((gconst41*x568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x569=IKPowWithIntegerCheck(new_r10,-1);
if(!x569.valid){
continue;
}
cj5array[0]=((-1.0)*gconst41*(x569.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x570=IKsin(j5);
IkReal x571=IKcos(j5);
IkReal x572=(gconst41*x571);
evalcond[0]=(new_r10*x570);
evalcond[1]=(gconst41*x570);
evalcond[2]=((-1.0)*new_r01*x570);
evalcond[3]=(((new_r01*x571))+gconst41);
evalcond[4]=(x572+new_r01);
evalcond[5]=(x572+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x573=IKPowWithIntegerCheck(new_r01,-1);
if(!x573.valid){
continue;
}
cj5array[0]=((-1.0)*gconst41*(x573.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x574=IKsin(j5);
IkReal x575=IKcos(j5);
IkReal x576=(gconst41*x575);
evalcond[0]=(new_r10*x574);
evalcond[1]=(gconst41*x574);
evalcond[2]=((-1.0)*new_r01*x574);
evalcond[3]=(((new_r10*x575))+gconst41);
evalcond[4]=(x576+new_r01);
evalcond[5]=(x576+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst41;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x578 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x578.valid){
continue;
}
IkReal x577=((-1.0)*(x578.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x577;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst40=x577;
IkReal gconst41=((-1.0)*new_r01);
IkReal gconst42=new_r11;
j5eval[0]=-1.0;
j5eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j5eval[2]=-1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x580 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x580.valid){
continue;
}
IkReal x579=((-1.0)*(x580.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x579;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst40=x579;
IkReal gconst41=((-1.0)*new_r01);
IkReal gconst42=new_r11;
j5eval[0]=-1.0;
j5eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j5eval[2]=-1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x582 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x582.valid){
continue;
}
IkReal x581=((-1.0)*(x582.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x581;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst40=x581;
IkReal gconst41=((-1.0)*new_r01);
IkReal gconst42=new_r11;
j5eval[0]=1.0;
j5eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j5eval[2]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x583=((1.0)*gconst41);
CheckValue<IkReal> x584 = IKatan2WithCheck(IkReal((((gconst42*new_r01))+(((-1.0)*new_r11*x583)))),IkReal(((((-1.0)*new_r01*x583))+(((-1.0)*gconst42*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x584.valid){
continue;
}
CheckValue<IkReal> x585=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x585.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x584.value)+(((1.5707963267949)*(x585.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x586=IKcos(j5);
IkReal x587=IKsin(j5);
IkReal x588=(gconst41*x586);
IkReal x589=(gconst42*x586);
IkReal x590=((1.0)*x587);
IkReal x591=(gconst42*x590);
evalcond[0]=(gconst41+((new_r01*x586))+((new_r11*x587)));
evalcond[1]=(x589+((gconst41*x587))+new_r11);
evalcond[2]=((((-1.0)*x591))+x588);
evalcond[3]=((((-1.0)*new_r01*x590))+gconst42+((new_r11*x586)));
evalcond[4]=((((-1.0)*x591))+x588+new_r01);
evalcond[5]=((((-1.0)*x589))+(((-1.0)*gconst41*x590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x592=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst41*gconst41)))+(((-1.0)*(gconst42*gconst42))))),-1);
if(!x592.valid){
continue;
}
CheckValue<IkReal> x593 = IKatan2WithCheck(IkReal((gconst41*new_r11)),IkReal((gconst42*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x593.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x592.value)))+(x593.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x594=IKcos(j5);
IkReal x595=IKsin(j5);
IkReal x596=(gconst41*x594);
IkReal x597=(gconst42*x594);
IkReal x598=((1.0)*x595);
IkReal x599=(gconst42*x598);
evalcond[0]=(((new_r11*x595))+gconst41+((new_r01*x594)));
evalcond[1]=(x597+new_r11+((gconst41*x595)));
evalcond[2]=((((-1.0)*x599))+x596);
evalcond[3]=(((new_r11*x594))+(((-1.0)*new_r01*x598))+gconst42);
evalcond[4]=((((-1.0)*x599))+x596+new_r01);
evalcond[5]=((((-1.0)*gconst41*x598))+(((-1.0)*x597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x600 = IKatan2WithCheck(IkReal((gconst41*gconst42)),IkReal(((-1.0)*(gconst41*gconst41))),IKFAST_ATAN2_MAGTHRESH);
if(!x600.valid){
continue;
}
CheckValue<IkReal> x601=IKPowWithIntegerCheck(IKsign((((gconst41*new_r01))+(((-1.0)*gconst42*new_r11)))),-1);
if(!x601.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x600.value)+(((1.5707963267949)*(x601.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x602=IKcos(j5);
IkReal x603=IKsin(j5);
IkReal x604=(gconst41*x602);
IkReal x605=(gconst42*x602);
IkReal x606=((1.0)*x603);
IkReal x607=(gconst42*x606);
evalcond[0]=(gconst41+((new_r11*x603))+((new_r01*x602)));
evalcond[1]=(x605+new_r11+((gconst41*x603)));
evalcond[2]=(x604+(((-1.0)*x607)));
evalcond[3]=(gconst42+((new_r11*x602))+(((-1.0)*new_r01*x606)));
evalcond[4]=(x604+(((-1.0)*x607))+new_r01);
evalcond[5]=((((-1.0)*x605))+(((-1.0)*gconst41*x606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x608=IKPowWithIntegerCheck(gconst42,-1);
if(!x608.valid){
continue;
}
cj5array[0]=(new_r00*(x608.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x609=IKsin(j5);
IkReal x610=IKcos(j5);
IkReal x611=((-1.0)*x609);
evalcond[0]=(new_r11*x609);
evalcond[1]=(new_r00*x611);
evalcond[2]=(gconst42*x611);
evalcond[3]=(new_r11+((gconst42*x610)));
evalcond[4]=(gconst42+((new_r11*x610)));
evalcond[5]=((((-1.0)*gconst42))+((new_r00*x610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x613 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x613.valid){
continue;
}
IkReal x612=((-1.0)*(x613.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x612;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst40=x612;
IkReal gconst41=0;
IkReal x614 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x614)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x614,-0.5)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x616 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x616.valid){
continue;
}
IkReal x615=((-1.0)*(x616.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x615;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst40=x615;
IkReal gconst41=0;
IkReal x617 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x617)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x617,-0.5)));
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x619 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x619.valid){
continue;
}
IkReal x618=((-1.0)*(x619.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x618;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst40=x618;
IkReal gconst41=0;
IkReal x620 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x620)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x620,-0.5)));
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x621=IKPowWithIntegerCheck(new_r10,-1);
if(!x621.valid){
continue;
}
CheckValue<IkReal> x622=IKPowWithIntegerCheck(gconst42,-1);
if(!x622.valid){
continue;
}
if( IKabs((gconst42*(x621.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x622.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst42*(x621.value)))+IKsqr(((-1.0)*new_r11*(x622.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((gconst42*(x621.value)), ((-1.0)*new_r11*(x622.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x623=IKsin(j5);
IkReal x624=IKcos(j5);
IkReal x625=((1.0)*gconst42);
IkReal x626=(gconst42*x624);
evalcond[0]=(new_r11*x623);
evalcond[1]=(new_r10*x624);
evalcond[2]=((-1.0)*gconst42*x623);
evalcond[3]=((-1.0)*x626);
evalcond[4]=(x626+new_r11);
evalcond[5]=(gconst42+((new_r11*x624)));
evalcond[6]=((((-1.0)*x623*x625))+new_r10);
evalcond[7]=((((-1.0)*x625))+((new_r10*x623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x627=IKPowWithIntegerCheck(gconst42,-1);
if(!x627.valid){
continue;
}
CheckValue<IkReal> x628=IKPowWithIntegerCheck(new_r11,-1);
if(!x628.valid){
continue;
}
if( IKabs((new_r10*(x627.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst42*(x628.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x627.value)))+IKsqr(((-1.0)*gconst42*(x628.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r10*(x627.value)), ((-1.0)*gconst42*(x628.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x629=IKsin(j5);
IkReal x630=IKcos(j5);
IkReal x631=((1.0)*gconst42);
IkReal x632=(gconst42*x630);
evalcond[0]=(new_r11*x629);
evalcond[1]=(new_r10*x630);
evalcond[2]=((-1.0)*gconst42*x629);
evalcond[3]=((-1.0)*x632);
evalcond[4]=(x632+new_r11);
evalcond[5]=(gconst42+((new_r11*x630)));
evalcond[6]=((((-1.0)*x629*x631))+new_r10);
evalcond[7]=((((-1.0)*x631))+((new_r10*x629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x633=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x633.valid){
continue;
}
CheckValue<IkReal> x634 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x634.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x633.value)))+(x634.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x635=IKsin(j5);
IkReal x636=IKcos(j5);
IkReal x637=((1.0)*gconst42);
IkReal x638=(gconst42*x636);
evalcond[0]=(new_r11*x635);
evalcond[1]=(new_r10*x636);
evalcond[2]=((-1.0)*gconst42*x635);
evalcond[3]=((-1.0)*x638);
evalcond[4]=(x638+new_r11);
evalcond[5]=(gconst42+((new_r11*x636)));
evalcond[6]=((((-1.0)*x635*x637))+new_r10);
evalcond[7]=((((-1.0)*x637))+((new_r10*x635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x640 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x640.valid){
continue;
}
IkReal x639=((-1.0)*(x640.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x639;
new_r01=0;
IkReal gconst40=x639;
IkReal gconst41=0;
IkReal x641 = new_r11*new_r11;
if(IKabs(x641)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x641,-0.5)));
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x643 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x643.valid){
continue;
}
IkReal x642=((-1.0)*(x643.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x642;
new_r01=0;
IkReal gconst40=x642;
IkReal gconst41=0;
IkReal x644 = new_r11*new_r11;
if(IKabs(x644)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x644,-0.5)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x646 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x646.valid){
continue;
}
IkReal x645=((-1.0)*(x646.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst41;
cj7=gconst42;
j7=x645;
new_r01=0;
IkReal gconst40=x645;
IkReal gconst41=0;
IkReal x647 = new_r11*new_r11;
if(IKabs(x647)==0){
continue;
}
IkReal gconst42=(new_r11*(pow(x647,-0.5)));
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x648=IKPowWithIntegerCheck(gconst42,-1);
if(!x648.valid){
continue;
}
CheckValue<IkReal> x649=IKPowWithIntegerCheck(new_r11,-1);
if(!x649.valid){
continue;
}
if( IKabs((new_r10*(x648.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst42*(x649.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x648.value)))+IKsqr(((-1.0)*gconst42*(x649.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r10*(x648.value)), ((-1.0)*gconst42*(x649.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x650=IKsin(j5);
IkReal x651=IKcos(j5);
IkReal x652=((1.0)*gconst42);
evalcond[0]=(new_r11*x650);
evalcond[1]=((-1.0)*gconst42*x650);
evalcond[2]=(((gconst42*x651))+new_r11);
evalcond[3]=(gconst42+((new_r11*x651)));
evalcond[4]=((((-1.0)*x650*x652))+new_r10);
evalcond[5]=((((-1.0)*x651*x652))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x650))+((new_r10*x651)));
evalcond[7]=((((-1.0)*x652))+((new_r10*x650))+((new_r00*x651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x653=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x653.valid){
continue;
}
CheckValue<IkReal> x654 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x654.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x653.value)))+(x654.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x655=IKsin(j5);
IkReal x656=IKcos(j5);
IkReal x657=((1.0)*gconst42);
evalcond[0]=(new_r11*x655);
evalcond[1]=((-1.0)*gconst42*x655);
evalcond[2]=(((gconst42*x656))+new_r11);
evalcond[3]=(gconst42+((new_r11*x656)));
evalcond[4]=((((-1.0)*x655*x657))+new_r10);
evalcond[5]=((((-1.0)*x656*x657))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x655))+((new_r10*x656)));
evalcond[7]=((((-1.0)*x657))+((new_r10*x655))+((new_r00*x656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x658=IKPowWithIntegerCheck(IKsign(gconst42),-1);
if(!x658.valid){
continue;
}
CheckValue<IkReal> x659 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x659.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x658.value)))+(x659.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x660=IKsin(j5);
IkReal x661=IKcos(j5);
IkReal x662=((1.0)*gconst42);
evalcond[0]=(new_r11*x660);
evalcond[1]=((-1.0)*gconst42*x660);
evalcond[2]=(((gconst42*x661))+new_r11);
evalcond[3]=(gconst42+((new_r11*x661)));
evalcond[4]=((((-1.0)*x660*x662))+new_r10);
evalcond[5]=((((-1.0)*x661*x662))+new_r00);
evalcond[6]=(((new_r10*x661))+(((-1.0)*new_r00*x660)));
evalcond[7]=(((new_r10*x660))+(((-1.0)*x662))+((new_r00*x661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x663=((1.0)*new_r11);
CheckValue<IkReal> x664=IKPowWithIntegerCheck(IKsign((((gconst41*new_r01))+(((-1.0)*gconst42*x663)))),-1);
if(!x664.valid){
continue;
}
CheckValue<IkReal> x665 = IKatan2WithCheck(IkReal((((gconst41*gconst42))+(((-1.0)*new_r01*x663)))),IkReal(((((-1.0)*(gconst41*gconst41)))+(new_r11*new_r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x665.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x664.value)))+(x665.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x666=IKcos(j5);
IkReal x667=IKsin(j5);
IkReal x668=((1.0)*gconst42);
IkReal x669=(gconst41*x666);
IkReal x670=((1.0)*x667);
IkReal x671=(x667*x668);
evalcond[0]=(gconst41+((new_r11*x667))+((new_r01*x666)));
evalcond[1]=(((gconst41*x667))+((gconst42*x666))+new_r11);
evalcond[2]=((((-1.0)*new_r00*x670))+gconst41+((new_r10*x666)));
evalcond[3]=((((-1.0)*new_r01*x670))+gconst42+((new_r11*x666)));
evalcond[4]=(x669+new_r01+(((-1.0)*x671)));
evalcond[5]=(x669+new_r10+(((-1.0)*x671)));
evalcond[6]=(((new_r10*x667))+(((-1.0)*x668))+((new_r00*x666)));
evalcond[7]=((((-1.0)*x666*x668))+(((-1.0)*gconst41*x670))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x672=((1.0)*gconst41);
CheckValue<IkReal> x673=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x673.valid){
continue;
}
CheckValue<IkReal> x674 = IKatan2WithCheck(IkReal((((gconst42*new_r01))+(((-1.0)*new_r11*x672)))),IkReal(((((-1.0)*new_r01*x672))+(((-1.0)*gconst42*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x674.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x673.value)))+(x674.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x675=IKcos(j5);
IkReal x676=IKsin(j5);
IkReal x677=((1.0)*gconst42);
IkReal x678=(gconst41*x675);
IkReal x679=((1.0)*x676);
IkReal x680=(x676*x677);
evalcond[0]=(((new_r11*x676))+((new_r01*x675))+gconst41);
evalcond[1]=(((gconst41*x676))+((gconst42*x675))+new_r11);
evalcond[2]=(((new_r10*x675))+(((-1.0)*new_r00*x679))+gconst41);
evalcond[3]=(((new_r11*x675))+(((-1.0)*new_r01*x679))+gconst42);
evalcond[4]=((((-1.0)*x680))+x678+new_r01);
evalcond[5]=((((-1.0)*x680))+x678+new_r10);
evalcond[6]=(((new_r00*x675))+((new_r10*x676))+(((-1.0)*x677)));
evalcond[7]=((((-1.0)*x675*x677))+(((-1.0)*gconst41*x679))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x681=((1.0)*gconst41);
CheckValue<IkReal> x682 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x681))+((gconst41*new_r01)))),IkReal(((((-1.0)*new_r11*x681))+(((-1.0)*new_r00*x681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x682.valid){
continue;
}
CheckValue<IkReal> x683=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x683.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x682.value)+(((1.5707963267949)*(x683.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x684=IKcos(j5);
IkReal x685=IKsin(j5);
IkReal x686=((1.0)*gconst42);
IkReal x687=(gconst41*x684);
IkReal x688=((1.0)*x685);
IkReal x689=(x685*x686);
evalcond[0]=(gconst41+((new_r01*x684))+((new_r11*x685)));
evalcond[1]=(((gconst42*x684))+((gconst41*x685))+new_r11);
evalcond[2]=(gconst41+((new_r10*x684))+(((-1.0)*new_r00*x688)));
evalcond[3]=((((-1.0)*new_r01*x688))+gconst42+((new_r11*x684)));
evalcond[4]=((((-1.0)*x689))+x687+new_r01);
evalcond[5]=((((-1.0)*x689))+x687+new_r10);
evalcond[6]=((((-1.0)*x686))+((new_r00*x684))+((new_r10*x685)));
evalcond[7]=((((-1.0)*x684*x686))+new_r00+(((-1.0)*gconst41*x688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x691 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x691)==0){
continue;
}
IkReal x690=pow(x691,-0.5);
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
IkReal gconst43=((3.14159265358979)+(((-1.0)*(x692.value))));
IkReal gconst44=((1.0)*new_r01*x690);
IkReal gconst45=((-1.0)*new_r11*x690);
CheckValue<IkReal> x693 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x693.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x693.value)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
IkReal x694=((1.0)*(x696.value));
IkReal x695=x690;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x694)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x694)));
IkReal gconst44=((1.0)*new_r01*x695);
IkReal gconst45=((-1.0)*new_r11*x695);
IkReal x697=new_r01*new_r01;
IkReal x698=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x699=x690;
IkReal x700=((1.0)*new_r01*x699);
j5eval[0]=x698;
j5eval[1]=((IKabs(((((-1.0)*new_r11*x700))+(((-1.0)*new_r00*x700)))))+(IKabs((((x697*x699))+(((-1.0)*new_r10*x700))))));
j5eval[2]=IKsign(x698);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x703 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x703.valid){
continue;
}
IkReal x701=((1.0)*(x703.value));
IkReal x702=x690;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x701)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x701)));
IkReal gconst44=((1.0)*new_r01*x702);
IkReal gconst45=((-1.0)*new_r11*x702);
IkReal x704=((new_r01*new_r01)+(new_r11*new_r11));
j5eval[0]=x704;
j5eval[1]=IKsign(x704);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x707 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x707.valid){
continue;
}
IkReal x705=((1.0)*(x707.value));
IkReal x706=x690;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x705)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x705)));
IkReal gconst44=((1.0)*new_r01*x706);
IkReal gconst45=((-1.0)*new_r11*x706);
IkReal x708=new_r01*new_r01;
IkReal x709=new_r11*new_r11;
IkReal x710=((1.0)*x708);
CheckValue<IkReal> x716=IKPowWithIntegerCheck((x708+x709),-1);
if(!x716.valid){
continue;
}
IkReal x711=x716.value;
CheckValue<IkReal> x717=IKPowWithIntegerCheck(((((-1.0)*x709))+(((-1.0)*x710))),-1);
if(!x717.valid){
continue;
}
IkReal x712=x717.value;
IkReal x713=((1.0)*x712);
IkReal x714=(new_r11*x713);
IkReal x715=(new_r01*x713);
j5eval[0]=((IKabs(((((-1.0)*x710*x711))+((x708*x709*x711))+((x711*(x709*x709))))))+(IKabs(((((-1.0)*new_r01*x714*(new_r11*new_r11)))+(((-1.0)*new_r01*x714))+(((-1.0)*x714*(new_r01*new_r01*new_r01)))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x719 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x719.valid){
continue;
}
IkReal x718=((1.0)*(x719.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x718)));
new_r11=0;
new_r00=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x718)));
IkReal x720 = new_r01*new_r01;
if(IKabs(x720)==0){
continue;
}
IkReal gconst44=((1.0)*new_r01*(pow(x720,-0.5)));
IkReal gconst45=0;
j5eval[0]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x722 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x722.valid){
continue;
}
IkReal x721=((1.0)*(x722.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x721)));
new_r11=0;
new_r00=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x721)));
IkReal x723 = new_r01*new_r01;
if(IKabs(x723)==0){
continue;
}
IkReal gconst44=((1.0)*new_r01*(pow(x723,-0.5)));
IkReal gconst45=0;
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x724=IKPowWithIntegerCheck(gconst44,-1);
if(!x724.valid){
continue;
}
cj5array[0]=((-1.0)*new_r01*(x724.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x725=IKsin(j5);
IkReal x726=IKcos(j5);
evalcond[0]=(new_r10*x725);
evalcond[1]=(gconst44*x725);
evalcond[2]=((-1.0)*new_r01*x725);
evalcond[3]=(gconst44+((new_r01*x726)));
evalcond[4]=(gconst44+((new_r10*x726)));
evalcond[5]=(((gconst44*x726))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x727=IKPowWithIntegerCheck(new_r10,-1);
if(!x727.valid){
continue;
}
cj5array[0]=((-1.0)*gconst44*(x727.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x728=IKsin(j5);
IkReal x729=IKcos(j5);
IkReal x730=(gconst44*x729);
evalcond[0]=(new_r10*x728);
evalcond[1]=(gconst44*x728);
evalcond[2]=((-1.0)*new_r01*x728);
evalcond[3]=(gconst44+((new_r01*x729)));
evalcond[4]=(x730+new_r01);
evalcond[5]=(x730+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x731=IKPowWithIntegerCheck(new_r01,-1);
if(!x731.valid){
continue;
}
cj5array[0]=((-1.0)*gconst44*(x731.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x732=IKsin(j5);
IkReal x733=IKcos(j5);
IkReal x734=(gconst44*x733);
evalcond[0]=(new_r10*x732);
evalcond[1]=(gconst44*x732);
evalcond[2]=((-1.0)*new_r01*x732);
evalcond[3]=(gconst44+((new_r10*x733)));
evalcond[4]=(x734+new_r01);
evalcond[5]=(x734+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst44;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[4];
CheckValue<IkReal> x736 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x736.valid){
continue;
}
IkReal x735=((1.0)*(x736.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x735)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x735)));
IkReal gconst44=((1.0)*new_r01);
IkReal gconst45=((-1.0)*new_r11);
j5eval[0]=1.0;
j5eval[1]=new_r01;
j5eval[2]=1.0;
j5eval[3]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x738 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x738.valid){
continue;
}
IkReal x737=((1.0)*(x738.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x737)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x737)));
IkReal gconst44=((1.0)*new_r01);
IkReal gconst45=((-1.0)*new_r11);
j5eval[0]=-1.0;
j5eval[1]=-1.0;
j5eval[2]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x740 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x740.valid){
continue;
}
IkReal x739=((1.0)*(x740.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x739)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x739)));
IkReal gconst44=((1.0)*new_r01);
IkReal gconst45=((-1.0)*new_r11);
j5eval[0]=1.0;
j5eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j5eval[2]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x741=((1.0)*new_r11);
CheckValue<IkReal> x742 = IKatan2WithCheck(IkReal(((((-1.0)*gconst44*x741))+((gconst45*new_r01)))),IkReal(((((-1.0)*gconst44*new_r01))+(((-1.0)*gconst45*x741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x742.valid){
continue;
}
CheckValue<IkReal> x743=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x743.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x742.value)+(((1.5707963267949)*(x743.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x744=IKsin(j5);
IkReal x745=IKcos(j5);
IkReal x746=((1.0)*gconst45);
IkReal x747=(gconst44*x745);
IkReal x748=(gconst44*x744);
IkReal x749=(x744*x746);
evalcond[0]=(gconst44+((new_r01*x745))+((new_r11*x744)));
evalcond[1]=(((gconst45*x745))+x748+new_r11);
evalcond[2]=(x747+(((-1.0)*x749)));
evalcond[3]=(gconst45+((new_r11*x745))+(((-1.0)*new_r01*x744)));
evalcond[4]=(x747+new_r01+(((-1.0)*x749)));
evalcond[5]=((((-1.0)*x745*x746))+(((-1.0)*x748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x750 = IKatan2WithCheck(IkReal((gconst44*new_r11)),IkReal((gconst45*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x750.valid){
continue;
}
CheckValue<IkReal> x751=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst45*gconst45)))+(((-1.0)*(gconst44*gconst44))))),-1);
if(!x751.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x750.value)+(((1.5707963267949)*(x751.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x752=IKsin(j5);
IkReal x753=IKcos(j5);
IkReal x754=((1.0)*gconst45);
IkReal x755=(gconst44*x753);
IkReal x756=(gconst44*x752);
IkReal x757=(x752*x754);
evalcond[0]=(gconst44+((new_r11*x752))+((new_r01*x753)));
evalcond[1]=(((gconst45*x753))+x756+new_r11);
evalcond[2]=(x755+(((-1.0)*x757)));
evalcond[3]=(gconst45+((new_r11*x753))+(((-1.0)*new_r01*x752)));
evalcond[4]=(x755+new_r01+(((-1.0)*x757)));
evalcond[5]=((((-1.0)*x753*x754))+(((-1.0)*x756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x758 = IKatan2WithCheck(IkReal((gconst44*gconst45)),IkReal(((-1.0)*(gconst44*gconst44))),IKFAST_ATAN2_MAGTHRESH);
if(!x758.valid){
continue;
}
CheckValue<IkReal> x759=IKPowWithIntegerCheck(IKsign((((gconst44*new_r01))+(((-1.0)*gconst45*new_r11)))),-1);
if(!x759.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x758.value)+(((1.5707963267949)*(x759.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x760=IKsin(j5);
IkReal x761=IKcos(j5);
IkReal x762=((1.0)*gconst45);
IkReal x763=(gconst44*x761);
IkReal x764=(gconst44*x760);
IkReal x765=(x760*x762);
evalcond[0]=(((new_r11*x760))+gconst44+((new_r01*x761)));
evalcond[1]=(((gconst45*x761))+x764+new_r11);
evalcond[2]=((((-1.0)*x765))+x763);
evalcond[3]=(((new_r11*x761))+(((-1.0)*new_r01*x760))+gconst45);
evalcond[4]=((((-1.0)*x765))+x763+new_r01);
evalcond[5]=((((-1.0)*x764))+(((-1.0)*x761*x762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x766=IKPowWithIntegerCheck(gconst45,-1);
if(!x766.valid){
continue;
}
cj5array[0]=(new_r00*(x766.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x767=IKsin(j5);
IkReal x768=IKcos(j5);
IkReal x769=((-1.0)*x767);
evalcond[0]=(new_r11*x767);
evalcond[1]=(new_r00*x769);
evalcond[2]=(gconst45*x769);
evalcond[3]=(((gconst45*x768))+new_r11);
evalcond[4]=(((new_r11*x768))+gconst45);
evalcond[5]=((((-1.0)*gconst45))+((new_r00*x768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x771 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x771.valid){
continue;
}
IkReal x770=((1.0)*(x771.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x770)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x770)));
IkReal gconst44=0;
IkReal x772 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x772)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x772,-0.5)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x774 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x774.valid){
continue;
}
IkReal x773=((1.0)*(x774.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x773)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x773)));
IkReal gconst44=0;
IkReal x775 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x775)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x775,-0.5)));
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x777 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x777.valid){
continue;
}
IkReal x776=((1.0)*(x777.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x776)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x776)));
IkReal gconst44=0;
IkReal x778 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x778)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x778,-0.5)));
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x779=IKPowWithIntegerCheck(new_r10,-1);
if(!x779.valid){
continue;
}
CheckValue<IkReal> x780=IKPowWithIntegerCheck(gconst45,-1);
if(!x780.valid){
continue;
}
if( IKabs((gconst45*(x779.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x780.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst45*(x779.value)))+IKsqr(((-1.0)*new_r11*(x780.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((gconst45*(x779.value)), ((-1.0)*new_r11*(x780.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x781=IKsin(j5);
IkReal x782=IKcos(j5);
IkReal x783=((1.0)*gconst45);
IkReal x784=(gconst45*x782);
evalcond[0]=(new_r11*x781);
evalcond[1]=(new_r10*x782);
evalcond[2]=((-1.0)*gconst45*x781);
evalcond[3]=((-1.0)*x784);
evalcond[4]=(x784+new_r11);
evalcond[5]=(((new_r11*x782))+gconst45);
evalcond[6]=((((-1.0)*x781*x783))+new_r10);
evalcond[7]=(((new_r10*x781))+(((-1.0)*x783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x785=IKPowWithIntegerCheck(gconst45,-1);
if(!x785.valid){
continue;
}
CheckValue<IkReal> x786=IKPowWithIntegerCheck(new_r11,-1);
if(!x786.valid){
continue;
}
if( IKabs((new_r10*(x785.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst45*(x786.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x785.value)))+IKsqr(((-1.0)*gconst45*(x786.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r10*(x785.value)), ((-1.0)*gconst45*(x786.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x787=IKsin(j5);
IkReal x788=IKcos(j5);
IkReal x789=((1.0)*gconst45);
IkReal x790=(gconst45*x788);
evalcond[0]=(new_r11*x787);
evalcond[1]=(new_r10*x788);
evalcond[2]=((-1.0)*gconst45*x787);
evalcond[3]=((-1.0)*x790);
evalcond[4]=(x790+new_r11);
evalcond[5]=(((new_r11*x788))+gconst45);
evalcond[6]=((((-1.0)*x787*x789))+new_r10);
evalcond[7]=(((new_r10*x787))+(((-1.0)*x789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x791 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x791.valid){
continue;
}
CheckValue<IkReal> x792=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x792.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x791.value)+(((1.5707963267949)*(x792.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x793=IKsin(j5);
IkReal x794=IKcos(j5);
IkReal x795=((1.0)*gconst45);
IkReal x796=(gconst45*x794);
evalcond[0]=(new_r11*x793);
evalcond[1]=(new_r10*x794);
evalcond[2]=((-1.0)*gconst45*x793);
evalcond[3]=((-1.0)*x796);
evalcond[4]=(x796+new_r11);
evalcond[5]=(((new_r11*x794))+gconst45);
evalcond[6]=((((-1.0)*x793*x795))+new_r10);
evalcond[7]=((((-1.0)*x795))+((new_r10*x793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x798 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x798.valid){
continue;
}
IkReal x797=((1.0)*(x798.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x797)));
new_r01=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x797)));
IkReal gconst44=0;
IkReal x799 = new_r11*new_r11;
if(IKabs(x799)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x799,-0.5)));
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x801 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x801.valid){
continue;
}
IkReal x800=((1.0)*(x801.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x800)));
new_r01=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x800)));
IkReal gconst44=0;
IkReal x802 = new_r11*new_r11;
if(IKabs(x802)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x802,-0.5)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x804 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x804.valid){
continue;
}
IkReal x803=((1.0)*(x804.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst44;
cj7=gconst45;
j7=((3.14159265)+(((-1.0)*x803)));
new_r01=0;
IkReal gconst43=((3.14159265358979)+(((-1.0)*x803)));
IkReal gconst44=0;
IkReal x805 = new_r11*new_r11;
if(IKabs(x805)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x805,-0.5)));
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x806=IKPowWithIntegerCheck(gconst45,-1);
if(!x806.valid){
continue;
}
CheckValue<IkReal> x807=IKPowWithIntegerCheck(new_r11,-1);
if(!x807.valid){
continue;
}
if( IKabs((new_r10*(x806.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst45*(x807.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x806.value)))+IKsqr(((-1.0)*gconst45*(x807.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r10*(x806.value)), ((-1.0)*gconst45*(x807.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x808=IKsin(j5);
IkReal x809=IKcos(j5);
IkReal x810=((1.0)*gconst45);
evalcond[0]=(new_r11*x808);
evalcond[1]=((-1.0)*gconst45*x808);
evalcond[2]=(((gconst45*x809))+new_r11);
evalcond[3]=(gconst45+((new_r11*x809)));
evalcond[4]=((((-1.0)*x808*x810))+new_r10);
evalcond[5]=((((-1.0)*x809*x810))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x808))+((new_r10*x809)));
evalcond[7]=((((-1.0)*x810))+((new_r00*x809))+((new_r10*x808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x811 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x811.valid){
continue;
}
CheckValue<IkReal> x812=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x812.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x811.value)+(((1.5707963267949)*(x812.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x813=IKsin(j5);
IkReal x814=IKcos(j5);
IkReal x815=((1.0)*gconst45);
evalcond[0]=(new_r11*x813);
evalcond[1]=((-1.0)*gconst45*x813);
evalcond[2]=(new_r11+((gconst45*x814)));
evalcond[3]=(((new_r11*x814))+gconst45);
evalcond[4]=((((-1.0)*x813*x815))+new_r10);
evalcond[5]=((((-1.0)*x814*x815))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x813))+((new_r10*x814)));
evalcond[7]=(((new_r00*x814))+((new_r10*x813))+(((-1.0)*x815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x816=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x816.valid){
continue;
}
CheckValue<IkReal> x817 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x817.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x816.value)))+(x817.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x818=IKsin(j5);
IkReal x819=IKcos(j5);
IkReal x820=((1.0)*gconst45);
evalcond[0]=(new_r11*x818);
evalcond[1]=((-1.0)*gconst45*x818);
evalcond[2]=(new_r11+((gconst45*x819)));
evalcond[3]=(((new_r11*x819))+gconst45);
evalcond[4]=((((-1.0)*x818*x820))+new_r10);
evalcond[5]=((((-1.0)*x819*x820))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x818))+((new_r10*x819)));
evalcond[7]=(((new_r00*x819))+((new_r10*x818))+(((-1.0)*x820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x821=((1.0)*new_r11);
CheckValue<IkReal> x822 = IKatan2WithCheck(IkReal((((gconst44*gconst45))+(((-1.0)*new_r01*x821)))),IkReal(((new_r11*new_r11)+(((-1.0)*(gconst44*gconst44))))),IKFAST_ATAN2_MAGTHRESH);
if(!x822.valid){
continue;
}
CheckValue<IkReal> x823=IKPowWithIntegerCheck(IKsign((((gconst44*new_r01))+(((-1.0)*gconst45*x821)))),-1);
if(!x823.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x822.value)+(((1.5707963267949)*(x823.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x824=IKsin(j5);
IkReal x825=IKcos(j5);
IkReal x826=((1.0)*gconst45);
IkReal x827=(gconst44*x825);
IkReal x828=(gconst44*x824);
IkReal x829=((1.0)*x824);
IkReal x830=(x824*x826);
evalcond[0]=(((new_r01*x825))+gconst44+((new_r11*x824)));
evalcond[1]=(((gconst45*x825))+new_r11+x828);
evalcond[2]=(((new_r10*x825))+gconst44+(((-1.0)*new_r00*x829)));
evalcond[3]=(gconst45+((new_r11*x825))+(((-1.0)*new_r01*x829)));
evalcond[4]=((((-1.0)*x830))+new_r01+x827);
evalcond[5]=((((-1.0)*x830))+new_r10+x827);
evalcond[6]=(((new_r10*x824))+(((-1.0)*x826))+((new_r00*x825)));
evalcond[7]=((((-1.0)*x828))+new_r00+(((-1.0)*x825*x826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x831=((1.0)*new_r11);
CheckValue<IkReal> x832 = IKatan2WithCheck(IkReal(((((-1.0)*gconst44*x831))+((gconst45*new_r01)))),IkReal(((((-1.0)*gconst44*new_r01))+(((-1.0)*gconst45*x831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x832.valid){
continue;
}
CheckValue<IkReal> x833=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x833.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x832.value)+(((1.5707963267949)*(x833.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x834=IKsin(j5);
IkReal x835=IKcos(j5);
IkReal x836=((1.0)*gconst45);
IkReal x837=(gconst44*x835);
IkReal x838=(gconst44*x834);
IkReal x839=((1.0)*x834);
IkReal x840=(x834*x836);
evalcond[0]=(((new_r11*x834))+((new_r01*x835))+gconst44);
evalcond[1]=(((gconst45*x835))+new_r11+x838);
evalcond[2]=(gconst44+(((-1.0)*new_r00*x839))+((new_r10*x835)));
evalcond[3]=(((new_r11*x835))+gconst45+(((-1.0)*new_r01*x839)));
evalcond[4]=((((-1.0)*x840))+new_r01+x837);
evalcond[5]=((((-1.0)*x840))+new_r10+x837);
evalcond[6]=(((new_r00*x835))+(((-1.0)*x836))+((new_r10*x834)));
evalcond[7]=((((-1.0)*x835*x836))+(((-1.0)*x838))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x841=((1.0)*gconst44);
CheckValue<IkReal> x842 = IKatan2WithCheck(IkReal((((gconst44*new_r01))+(((-1.0)*new_r10*x841)))),IkReal(((((-1.0)*new_r11*x841))+(((-1.0)*new_r00*x841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x842.valid){
continue;
}
CheckValue<IkReal> x843=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x843.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x842.value)+(((1.5707963267949)*(x843.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x844=IKsin(j5);
IkReal x845=IKcos(j5);
IkReal x846=((1.0)*gconst45);
IkReal x847=(gconst44*x845);
IkReal x848=(gconst44*x844);
IkReal x849=((1.0)*x844);
IkReal x850=(x844*x846);
evalcond[0]=(gconst44+((new_r01*x845))+((new_r11*x844)));
evalcond[1]=(new_r11+x848+((gconst45*x845)));
evalcond[2]=(((new_r10*x845))+gconst44+(((-1.0)*new_r00*x849)));
evalcond[3]=(gconst45+(((-1.0)*new_r01*x849))+((new_r11*x845)));
evalcond[4]=((((-1.0)*x850))+new_r01+x847);
evalcond[5]=((((-1.0)*x850))+new_r10+x847);
evalcond[6]=(((new_r10*x844))+((new_r00*x845))+(((-1.0)*x846)));
evalcond[7]=((((-1.0)*x848))+(((-1.0)*x845*x846))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r11=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x852 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x852.valid){
continue;
}
IkReal x851=x852.value;
j5array[0]=((-1.0)*x851);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x851)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j5))))+((new_r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x853=IKcos(j5);
IkReal x854=IKsin(j5);
IkReal x855=((1.0)*x854);
evalcond[0]=(new_r11+x853);
evalcond[1]=((((-1.0)*x855))+new_r01);
evalcond[2]=((((-1.0)*x855))+new_r10);
evalcond[3]=((((-1.0)*x853))+new_r00);
evalcond[4]=(((new_r11*x854))+((new_r01*x853)));
evalcond[5]=((-1.0)+((new_r10*x854))+((new_r00*x853)));
evalcond[6]=((((-1.0)*new_r00*x855))+((new_r10*x853)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x855))+((new_r11*x853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x856=IKsin(j5);
IkReal x857=IKcos(j5);
IkReal x858=((1.0)*x856);
evalcond[0]=(new_r01+x856);
evalcond[1]=(new_r10+x856);
evalcond[2]=(new_r00+x857);
evalcond[3]=((((-1.0)*x857))+new_r11);
evalcond[4]=(((new_r11*x856))+((new_r01*x857)));
evalcond[5]=((1.0)+((new_r10*x856))+((new_r00*x857)));
evalcond[6]=((((-1.0)*new_r00*x858))+((new_r10*x857)));
evalcond[7]=((-1.0)+(((-1.0)*new_r01*x858))+((new_r11*x857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r11=0;
new_r00=0;
j5eval[0]=new_r01;
j5eval[1]=IKsign(new_r01);
j5eval[2]=((IKabs(cj7))+(IKabs(sj7)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r11=0;
new_r00=0;
j5eval[0]=new_r01;
j5eval[1]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x859=IKPowWithIntegerCheck(new_r01,-1);
if(!x859.valid){
continue;
}
CheckValue<IkReal> x860=IKPowWithIntegerCheck(new_r10,-1);
if(!x860.valid){
continue;
}
if( IKabs((cj7*(x859.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj7*(x860.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*(x859.value)))+IKsqr(((-1.0)*sj7*(x860.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj7*(x859.value)), ((-1.0)*sj7*(x860.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x861=IKcos(j5);
IkReal x862=IKsin(j5);
IkReal x863=((1.0)*cj7);
IkReal x864=(sj7*x861);
IkReal x865=(x862*x863);
evalcond[0]=(((new_r01*x861))+sj7);
evalcond[1]=(sj7+((new_r10*x861)));
evalcond[2]=(cj7+(((-1.0)*new_r01*x862)));
evalcond[3]=((((-1.0)*x863))+((new_r10*x862)));
evalcond[4]=(((sj7*x862))+((cj7*x861)));
evalcond[5]=((((-1.0)*x865))+new_r01+x864);
evalcond[6]=((((-1.0)*x865))+new_r10+x864);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x866=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x866.valid){
continue;
}
CheckValue<IkReal> x867 = IKatan2WithCheck(IkReal(cj7),IkReal(((-1.0)*sj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x867.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x866.value)))+(x867.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x868=IKcos(j5);
IkReal x869=IKsin(j5);
IkReal x870=((1.0)*cj7);
IkReal x871=(sj7*x868);
IkReal x872=(x869*x870);
evalcond[0]=(((new_r01*x868))+sj7);
evalcond[1]=(sj7+((new_r10*x868)));
evalcond[2]=(cj7+(((-1.0)*new_r01*x869)));
evalcond[3]=(((new_r10*x869))+(((-1.0)*x870)));
evalcond[4]=(((sj7*x869))+((cj7*x868)));
evalcond[5]=(new_r01+x871+(((-1.0)*x872)));
evalcond[6]=(new_r10+x871+(((-1.0)*x872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x874 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x874.valid){
continue;
}
IkReal x873=x874.value;
j5array[0]=((-1.0)*x873);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x873)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j5))))+((new_r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x876 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x876.valid){
continue;
}
IkReal x875=x876.value;
j5array[0]=((-1.0)*x875);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x875)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j5))))+(((-1.0)*new_r01*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r10=0;
j5eval[0]=new_r11;
j5eval[1]=((IKabs(cj7))+(IKabs(sj7)));
j5eval[2]=IKsign(new_r11);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r10=0;
j5eval[0]=new_r00;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r10=0;
j5eval[0]=new_r11;
j5eval[1]=cj7;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
sj5array[0]=new_r00;
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x877=IKcos(j5);
IkReal x878=IKsin(j5);
evalcond[0]=x877;
evalcond[1]=(new_r00*x877);
evalcond[2]=(new_r11+x878);
evalcond[3]=(new_r11*x877);
evalcond[4]=((1.0)+((new_r11*x878)));
evalcond[5]=((1.0)+(((-1.0)*new_r00*x878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
sj5array[0]=new_r11;
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x879=IKcos(j5);
IkReal x880=IKsin(j5);
evalcond[0]=(new_r00*x879);
evalcond[1]=(new_r11*x879);
evalcond[2]=((-1.0)*x879);
evalcond[3]=(new_r00+x880);
evalcond[4]=((-1.0)+((new_r11*x880)));
evalcond[5]=((-1.0)+(((-1.0)*new_r00*x880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x882=IKPowWithIntegerCheck(new_r11,-1);
if(!x882.valid){
continue;
}
IkReal x881=x882.value;
CheckValue<IkReal> x883=IKPowWithIntegerCheck(cj7,-1);
if(!x883.valid){
continue;
}
CheckValue<IkReal> x884=IKPowWithIntegerCheck(x881,-2);
if(!x884.valid){
continue;
}
if( IKabs(((-1.0)*sj7*x881)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x881*(x883.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(x884.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj7*x881))+IKsqr((x881*(x883.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(x884.value)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj7*x881), (x881*(x883.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(x884.value)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x885=IKsin(j5);
IkReal x886=IKcos(j5);
IkReal x887=((1.0)*cj7);
IkReal x888=((1.0)*x885);
evalcond[0]=(sj7+((new_r11*x885)));
evalcond[1]=(cj7+((new_r11*x886)));
evalcond[2]=(sj7+(((-1.0)*new_r00*x888)));
evalcond[3]=(((new_r00*x886))+(((-1.0)*x887)));
evalcond[4]=(((cj7*x886))+((sj7*x885))+new_r11);
evalcond[5]=(((sj7*x886))+(((-1.0)*x885*x887)));
evalcond[6]=((((-1.0)*x886*x887))+new_r00+(((-1.0)*sj7*x888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x889=IKPowWithIntegerCheck(new_r00,-1);
if(!x889.valid){
continue;
}
CheckValue<IkReal> x890=IKPowWithIntegerCheck(new_r11,-1);
if(!x890.valid){
continue;
}
if( IKabs((sj7*(x889.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj7*(x890.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj7*(x889.value)))+IKsqr(((-1.0)*cj7*(x890.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj7*(x889.value)), ((-1.0)*cj7*(x890.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x891=IKsin(j5);
IkReal x892=IKcos(j5);
IkReal x893=((1.0)*cj7);
IkReal x894=((1.0)*x891);
evalcond[0]=(sj7+((new_r11*x891)));
evalcond[1]=(((new_r11*x892))+cj7);
evalcond[2]=(sj7+(((-1.0)*new_r00*x894)));
evalcond[3]=(((new_r00*x892))+(((-1.0)*x893)));
evalcond[4]=(((cj7*x892))+((sj7*x891))+new_r11);
evalcond[5]=(((sj7*x892))+(((-1.0)*x891*x893)));
evalcond[6]=((((-1.0)*x892*x893))+new_r00+(((-1.0)*sj7*x894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x895 = IKatan2WithCheck(IkReal(((-1.0)*sj7)),IkReal(((-1.0)*cj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x895.valid){
continue;
}
CheckValue<IkReal> x896=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x896.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x895.value)+(((1.5707963267949)*(x896.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x897=IKsin(j5);
IkReal x898=IKcos(j5);
IkReal x899=((1.0)*cj7);
IkReal x900=((1.0)*x897);
evalcond[0]=(sj7+((new_r11*x897)));
evalcond[1]=(((new_r11*x898))+cj7);
evalcond[2]=(sj7+(((-1.0)*new_r00*x900)));
evalcond[3]=(((new_r00*x898))+(((-1.0)*x899)));
evalcond[4]=(((cj7*x898))+((sj7*x897))+new_r11);
evalcond[5]=(((sj7*x898))+(((-1.0)*x897*x899)));
evalcond[6]=((((-1.0)*x898*x899))+(((-1.0)*sj7*x900))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x901 = IKatan2WithCheck(IkReal(((-1.0)+(cj7*cj7)+(new_r01*new_r01))),IkReal(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj7*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x901.valid){
continue;
}
CheckValue<IkReal> x902=IKPowWithIntegerCheck(IKsign((((new_r11*sj7))+((cj7*new_r01)))),-1);
if(!x902.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x901.value)+(((1.5707963267949)*(x902.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x903=IKcos(j5);
IkReal x904=IKsin(j5);
IkReal x905=((1.0)*cj7);
IkReal x906=(sj7*x903);
IkReal x907=((1.0)*x904);
IkReal x908=(x904*x905);
evalcond[0]=(sj7+((new_r11*x904))+((new_r01*x903)));
evalcond[1]=(((sj7*x904))+((cj7*x903))+new_r11);
evalcond[2]=(sj7+((new_r10*x903))+(((-1.0)*new_r00*x907)));
evalcond[3]=(cj7+((new_r11*x903))+(((-1.0)*new_r01*x907)));
evalcond[4]=((((-1.0)*x908))+new_r01+x906);
evalcond[5]=((((-1.0)*x908))+new_r10+x906);
evalcond[6]=((((-1.0)*x905))+((new_r10*x904))+((new_r00*x903)));
evalcond[7]=((((-1.0)*x903*x905))+(((-1.0)*sj7*x907))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x909=((1.0)*sj7);
CheckValue<IkReal> x910 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x909))+((cj7*new_r01)))),IkReal(((((-1.0)*cj7*new_r11))+(((-1.0)*new_r01*x909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x910.valid){
continue;
}
CheckValue<IkReal> x911=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x911.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x910.value)+(((1.5707963267949)*(x911.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x912=IKcos(j5);
IkReal x913=IKsin(j5);
IkReal x914=((1.0)*cj7);
IkReal x915=(sj7*x912);
IkReal x916=((1.0)*x913);
IkReal x917=(x913*x914);
evalcond[0]=(sj7+((new_r11*x913))+((new_r01*x912)));
evalcond[1]=(((cj7*x912))+((sj7*x913))+new_r11);
evalcond[2]=(sj7+((new_r10*x912))+(((-1.0)*new_r00*x916)));
evalcond[3]=(cj7+((new_r11*x912))+(((-1.0)*new_r01*x916)));
evalcond[4]=((((-1.0)*x917))+new_r01+x915);
evalcond[5]=((((-1.0)*x917))+new_r10+x915);
evalcond[6]=((((-1.0)*x914))+((new_r10*x913))+((new_r00*x912)));
evalcond[7]=((((-1.0)*sj7*x916))+(((-1.0)*x912*x914))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x918=((1.0)*sj7);
CheckValue<IkReal> x919 = IKatan2WithCheck(IkReal((((new_r01*sj7))+(((-1.0)*new_r10*x918)))),IkReal(((((-1.0)*new_r11*x918))+(((-1.0)*new_r00*x918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x919.valid){
continue;
}
CheckValue<IkReal> x920=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x920.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x919.value)+(((1.5707963267949)*(x920.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x921=IKcos(j5);
IkReal x922=IKsin(j5);
IkReal x923=((1.0)*cj7);
IkReal x924=(sj7*x921);
IkReal x925=((1.0)*x922);
IkReal x926=(x922*x923);
evalcond[0]=(sj7+((new_r01*x921))+((new_r11*x922)));
evalcond[1]=(((cj7*x921))+new_r11+((sj7*x922)));
evalcond[2]=(sj7+(((-1.0)*new_r00*x925))+((new_r10*x921)));
evalcond[3]=(cj7+(((-1.0)*new_r01*x925))+((new_r11*x921)));
evalcond[4]=((((-1.0)*x926))+new_r01+x924);
evalcond[5]=((((-1.0)*x926))+new_r10+x924);
evalcond[6]=((((-1.0)*x923))+((new_r00*x921))+((new_r10*x922)));
evalcond[7]=((((-1.0)*x921*x923))+new_r00+(((-1.0)*sj7*x925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x927=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r11*sj7))+(((-1.0)*cj7*x927)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj7*x927))+((cj7*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj7))+(((-1.0)*cj7*x927))))+IKsqr(((((-1.0)*sj7*x927))+((cj7*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r11*sj7))+(((-1.0)*cj7*x927))), ((((-1.0)*sj7*x927))+((cj7*new_r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x928=IKcos(j5);
IkReal x929=IKsin(j5);
IkReal x930=((1.0)*cj7);
IkReal x931=((1.0)*sj7);
IkReal x932=(sj7*x929);
IkReal x933=((1.0)*x929);
IkReal x934=(x928*x930);
evalcond[0]=(sj7+((new_r01*x928))+((new_r11*x929)));
evalcond[1]=(((cj7*x929))+new_r01+((sj7*x928)));
evalcond[2]=(new_r11+x932+(((-1.0)*x934)));
evalcond[3]=(new_r00+x932+(((-1.0)*x934)));
evalcond[4]=(((new_r00*x928))+((new_r10*x929))+(((-1.0)*x930)));
evalcond[5]=((((-1.0)*x928*x931))+(((-1.0)*x929*x930))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x933))+((new_r10*x928))+(((-1.0)*x931)));
evalcond[7]=((((-1.0)*new_r01*x933))+((new_r11*x928))+(((-1.0)*x930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x936 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x936.valid){
continue;
}
IkReal x935=x936.value;
j5array[0]=((-1.0)*x935);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x935)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x937=IKsin(j5);
IkReal x938=IKcos(j5);
IkReal x939=((1.0)*x937);
IkReal x940=(new_r11*x938);
evalcond[0]=(((new_r01*x938))+((new_r11*x937)));
evalcond[1]=(((new_r00*x938))+((new_r10*x937)));
evalcond[2]=((((-1.0)*new_r00*x939))+((new_r10*x938)));
evalcond[3]=((((-1.0)*new_r01*x939))+x940);
evalcond[4]=(((new_r22*x940))+(((-1.0)*new_r01*new_r22*x939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x942 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x942.valid){
continue;
}
IkReal x941=x942.value;
j5array[0]=((-1.0)*x941);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x941)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x943=IKcos(j5);
IkReal x944=IKsin(j5);
IkReal x945=(new_r11*x943);
IkReal x946=((1.0)*x944);
IkReal x947=(new_r10*x943);
IkReal x948=(new_r22*x946);
evalcond[0]=(((new_r01*x943))+((new_r11*x944)));
evalcond[1]=((((-1.0)*new_r00*x946))+x947);
evalcond[2]=((((-1.0)*new_r01*x946))+x945);
evalcond[3]=(((new_r22*x947))+(((-1.0)*new_r00*x948)));
evalcond[4]=(((new_r22*x945))+(((-1.0)*new_r01*x948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x950 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x950.valid){
continue;
}
IkReal x949=x950.value;
j5array[0]=((-1.0)*x949);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x949)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x951=IKcos(j5);
IkReal x952=IKsin(j5);
IkReal x953=(new_r11*x951);
IkReal x954=((1.0)*x952);
IkReal x955=(new_r10*x951);
IkReal x956=(new_r22*x954);
evalcond[0]=(((new_r10*x952))+((new_r00*x951)));
evalcond[1]=((((-1.0)*new_r00*x954))+x955);
evalcond[2]=((((-1.0)*new_r01*x954))+x953);
evalcond[3]=(((new_r22*x955))+(((-1.0)*new_r00*x956)));
evalcond[4]=(((new_r22*x953))+(((-1.0)*new_r01*x956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x958=IKPowWithIntegerCheck(cj6,-1);
if(!x958.valid){
continue;
}
IkReal x957=x958.value;
CheckValue<IkReal> x959=IKPowWithIntegerCheck(new_r11,-1);
if(!x959.valid){
continue;
}
if( IKabs((x957*(x959.value)*((((new_r01*new_r12))+(((-1.0)*cj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x957)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x957*(x959.value)*((((new_r01*new_r12))+(((-1.0)*cj6*sj7))))))+IKsqr(((-1.0)*new_r12*x957))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x957*(x959.value)*((((new_r01*new_r12))+(((-1.0)*cj6*sj7))))), ((-1.0)*new_r12*x957));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x960=IKsin(j5);
IkReal x961=IKcos(j5);
IkReal x962=((1.0)*cj7);
IkReal x963=(cj7*sj6);
IkReal x964=((1.0)*x961);
IkReal x965=(new_r11*x961);
IkReal x966=(sj7*x961);
IkReal x967=(new_r00*x960);
IkReal x968=(sj7*x960);
IkReal x969=(new_r12*x961);
IkReal x970=(sj6*x960);
IkReal x971=(cj6*x961);
IkReal x972=((1.0)*x960);
IkReal x973=(cj6*x972);
evalcond[0]=(new_r12+x971);
evalcond[1]=(new_r02+(((-1.0)*x973)));
evalcond[2]=(((new_r02*x961))+((new_r12*x960)));
evalcond[3]=(((new_r11*x960))+((new_r01*x961))+sj7);
evalcond[4]=((((-1.0)*new_r02*x972))+cj6+x969);
evalcond[5]=(((x961*x963))+new_r11+x968);
evalcond[6]=(((new_r00*x961))+(((-1.0)*x962))+((new_r10*x960)));
evalcond[7]=((((-1.0)*x962*x970))+new_r01+x966);
evalcond[8]=((((-1.0)*x960*x962))+((sj6*x966))+new_r10);
evalcond[9]=((((-1.0)*x967))+((sj6*sj7))+((new_r10*x961)));
evalcond[10]=((((-1.0)*new_r01*x972))+x963+x965);
evalcond[11]=((((-1.0)*x961*x962))+(((-1.0)*sj6*x968))+new_r00);
evalcond[12]=((((-1.0)*cj6*x967))+((new_r20*sj6))+((new_r10*x971)));
evalcond[13]=((((-1.0)*new_r01*x973))+((cj6*x965))+((new_r21*sj6)));
evalcond[14]=(((new_r02*x970))+(((-1.0)*new_r12*sj6*x964))+((cj6*new_r22)));
evalcond[15]=((1.0)+(((-1.0)*new_r02*x973))+((new_r22*sj6))+((cj6*x969)));
evalcond[16]=((((-1.0)*sj7))+((sj6*x967))+(((-1.0)*new_r10*sj6*x964))+((cj6*new_r20)));
evalcond[17]=(((new_r01*x970))+(((-1.0)*x962))+(((-1.0)*new_r11*sj6*x964))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x974=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x974.valid){
continue;
}
CheckValue<IkReal> x975 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x975.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x974.value)))+(x975.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x976=IKsin(j5);
IkReal x977=IKcos(j5);
IkReal x978=((1.0)*cj7);
IkReal x979=(cj7*sj6);
IkReal x980=((1.0)*x977);
IkReal x981=(new_r11*x977);
IkReal x982=(sj7*x977);
IkReal x983=(new_r00*x976);
IkReal x984=(sj7*x976);
IkReal x985=(new_r12*x977);
IkReal x986=(sj6*x976);
IkReal x987=(cj6*x977);
IkReal x988=((1.0)*x976);
IkReal x989=(cj6*x988);
evalcond[0]=(new_r12+x987);
evalcond[1]=((((-1.0)*x989))+new_r02);
evalcond[2]=(((new_r02*x977))+((new_r12*x976)));
evalcond[3]=(((new_r01*x977))+sj7+((new_r11*x976)));
evalcond[4]=((((-1.0)*new_r02*x988))+cj6+x985);
evalcond[5]=(((x977*x979))+new_r11+x984);
evalcond[6]=(((new_r10*x976))+(((-1.0)*x978))+((new_r00*x977)));
evalcond[7]=((((-1.0)*x978*x986))+new_r01+x982);
evalcond[8]=(((sj6*x982))+(((-1.0)*x976*x978))+new_r10);
evalcond[9]=((((-1.0)*x983))+((new_r10*x977))+((sj6*sj7)));
evalcond[10]=((((-1.0)*new_r01*x988))+x981+x979);
evalcond[11]=((((-1.0)*sj6*x984))+new_r00+(((-1.0)*x977*x978)));
evalcond[12]=(((new_r20*sj6))+((new_r10*x987))+(((-1.0)*cj6*x983)));
evalcond[13]=((((-1.0)*new_r01*x989))+((cj6*x981))+((new_r21*sj6)));
evalcond[14]=(((new_r02*x986))+(((-1.0)*new_r12*sj6*x980))+((cj6*new_r22)));
evalcond[15]=((1.0)+(((-1.0)*new_r02*x989))+((new_r22*sj6))+((cj6*x985)));
evalcond[16]=((((-1.0)*sj7))+((sj6*x983))+(((-1.0)*new_r10*sj6*x980))+((cj6*new_r20)));
evalcond[17]=((((-1.0)*new_r11*sj6*x980))+((new_r01*x986))+(((-1.0)*x978))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "286622dfd4db5ebca14dfdbea0cb60b8"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
