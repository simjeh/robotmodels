/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2023-04-17 06:43:27.074294
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[1]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=IKcos(j[7]);
x13=IKsin(j[6]);
x14=IKsin(j[7]);
x15=IKcos(j[6]);
x16=((1.0)*x11);
x17=((0.0375)*x13);
x18=((1.0)*x9);
x19=((1.0)*x10);
x20=((0.0375)*x11);
x21=((1.0)*x7);
x22=((1.0)*x6);
x23=((1.0)*x4);
x24=((0.0375)*x15);
x25=((0.2151)*x4);
x26=((0.0375)*x10);
x27=(x1*x5);
x28=(x0*x3);
x29=((-1.0)*x10);
x30=(x1*x3);
x31=(x4*x7);
x32=(x0*x2);
x33=(x5*x7);
x34=((-1.0)*x0);
x35=((-1.0)*x11);
x36=((-0.2688)*x6);
x37=(x1*x2);
x38=((-1.0)*x6);
x39=((-1.0)*x7);
x40=(x3*x5);
x41=(x5*x6);
x42=(x2*x5);
x43=((0.2688)*x2*x4);
x44=(x42*x8);
x45=(x0*x21*x5);
x46=(x21*x27);
x47=(x22*x40);
x48=((((-1.0)*x30))+((x32*x4)));
x49=(x32+(((-1.0)*x23*x30)));
x50=(x28+((x37*x4)));
x51=((((-1.0)*x21*x4))+x47);
x52=((((-1.0)*x37))+(((-1.0)*x23*x28)));
x53=(x48*x9);
x54=(x50*x9);
x55=(x49*x6);
x56=(x50*x8);
x57=(((x22*x4))+((x21*x40)));
x58=((-1.0)*x57);
x59=(x48*x8);
x60=(x52*x6);
x61=((-1.0)*x52);
x62=(((x27*x6))+((x49*x7)));
x63=(((x42*x9))+((x8*(((((-1.0)*x47))+x31)))));
x64=((((-1.0)*x22*x49))+x46);
x65=(((x51*x9))+x44);
x66=(((x52*x7))+((x0*x41)));
x67=(x10*x62);
x68=(x11*x63);
x69=(x15*x65);
x70=(x64*x9);
x71=(((x38*x52))+x45);
x72=(x10*x66);
x73=(((x39*x52))+((x34*x41)));
x74=(x71*x9);
x75=(x35*((((x27*x38))+((x39*x49)))));
x76=(((x8*(((((-1.0)*x46))+x55))))+x54);
x77=(x54+((x8*((((x27*x39))+x55)))));
x78=(((x8*(((((-1.0)*x45))+x60))))+x53);
x79=(((x8*((x60+((x33*x34))))))+x53);
x80=(x74+x59);
x81=(x15*((x56+((x9*((((x38*x49))+x46)))))));
x82=((((-1.0)*x16*x57))+(((-1.0)*x19*x63)));
x83=(((x29*x63))+((x35*x57)));
x84=(x15*x80);
x85=(x13*x83);
x86=(((x29*x77))+x75);
x87=((((-1.0)*x19*x78))+(((-1.0)*x16*x73)));
x88=(((x29*x79))+((x35*x73)));
eerot[0]=(((x14*((((x13*x88))+x84))))+((x12*((x72+((x11*x79)))))));
eerot[1]=(((x12*((((x13*x87))+x84))))+((x14*((((x29*x66))+((x35*x78)))))));
eerot[2]=(((x15*x87))+((x13*(((((-1.0)*x74))+(((-1.0)*x59)))))));
eetrans[0]=((0.038)+((x14*(((((-1.0)*x20*x79))+(((-1.0)*x26*x66))))))+(((-0.2151)*x30))+((x8*(((((0.2688)*x32*x4))+(((-0.2688)*x30))))))+((x12*((((x24*x80))+((x17*x88))))))+((x25*x32))+((x9*((((x36*x52))+(((0.2688)*x0*x33))))))+(((-0.1491)*x1)));
eerot[3]=(((x14*((((x13*((((x29*x76))+x75))))+x81))))+((x12*((x67+((x11*x76)))))));
eerot[4]=(((x12*(((((-1.0)*x13*((((x16*(((((-1.0)*x21*x49))+(((-1.0)*x22*x27))))))+((x19*x77))))))+x81))))+((x14*((((x29*x62))+((x35*x77)))))));
eerot[5]=(((x15*x86))+((x13*(((((-1.0)*x18*x64))+(((-1.0)*x56)))))));
eetrans[1]=((0.124)+(((0.1491)*x0))+((x14*(((((-0.0375)*x11*x77))+(((-0.0375)*x67))))))+((x8*(((((0.2688)*x37*x4))+(((0.2688)*x28))))))+((x12*((((x17*x86))+((x24*((x70+x56))))))))+(((0.2151)*x28))+((x25*x37))+((x9*((((x36*x49))+(((0.2688)*x27*x7)))))));
eerot[6]=(((x12*((((x10*x58))+x68))))+((x14*((x69+x85)))));
eerot[7]=(((x12*((((x13*x82))+x69))))+((x14*((((x35*x63))+((x29*x58)))))));
eerot[8]=(((x13*(((((-1.0)*x44))+(((-1.0)*x18*x51))))))+((x15*x82)));
eetrans[2]=((0.3125)+(((0.2688)*x44))+((x14*(((((-1.0)*x20*x63))+(((-1.0)*x26*x58))))))+((x12*((((x17*x83))+((x24*x65))))))+((x9*(((((-0.2688)*x31))+(((0.2688)*x40*x6))))))+(((0.2151)*x42)));
}

IKFAST_API int GetNumFreeParameters() { return 2; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2, 3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 8; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij2[2], _nj2,_ij3[2], _nj3;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
j3=pfree[1]; cj3=cos(pfree[1]); sj3=sin(pfree[1]), htj3=tan(pfree[1]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.038)+px+(((-0.0375)*r01)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.124)+py+(((-0.0375)*r11)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.3125)+(((-0.0375)*r21))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x89=((1.0)*px);
IkReal x90=((1.0)*pz);
IkReal x91=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x91))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x90)));
rxp0_2=((((-1.0)*r10*x89))+((py*r00)));
rxp1_0=((((-1.0)*r21*x91))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x90)));
rxp1_2=((((-1.0)*r11*x89))+((py*r01)));
rxp2_0=((((-1.0)*r22*x91))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x90)));
rxp2_2=((((-1.0)*r12*x89))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x92=((0.2982)*py);
IkReal x93=((1.0)*pp);
IkReal x94=((1.0)*py);
IkReal x95=((0.4839)*cj2);
IkReal x96=((0.0537)*cj2);
IkReal x97=((0.1491)+py+(((-1.0)*x96)));
IkReal x98=((0.1491)+x95);
IkReal x99=((0.2119284)+x92+(((-1.0)*x93)));
IkReal x100=((-0.01934712)+x92+(((-1.0)*x93)));
IkReal x101=(x98+(((-1.0)*x94)));
IkReal x102=((0.1491)+(((-1.0)*x96))+(((-1.0)*x94)));
IkReal x103=(x93+x92);
IkReal x104=((0.2119284)+(((-1.0)*x103)));
IkReal x105=((-0.01934712)+(((-1.0)*x103)));
IkReal x106=(py+x98);
IkReal gconst0=x99;
IkReal gconst1=x100;
IkReal gconst2=x101;
IkReal gconst3=x102;
IkReal gconst4=x99;
IkReal gconst5=x100;
IkReal gconst6=x101;
IkReal gconst7=x102;
IkReal gconst8=x104;
IkReal gconst9=x105;
IkReal gconst10=x106;
IkReal gconst11=x97;
IkReal gconst12=x104;
IkReal gconst13=x105;
IkReal gconst14=x106;
IkReal gconst15=x97;
IkReal x107=cj3*cj3;
IkReal x108=sj2*sj2;
IkReal x109=px*px;
IkReal x110=(gconst0*gconst4);
IkReal x111=((2.0)*px);
IkReal x112=(gconst0*gconst11);
IkReal x113=(gconst5*gconst6);
IkReal x114=((1.0)*gconst12);
IkReal x115=(gconst1*gconst2);
IkReal x116=(gconst11*gconst15);
IkReal x117=(gconst10*gconst12);
IkReal x118=(gconst12*gconst8);
IkReal x119=(gconst10*gconst5);
IkReal x120=(gconst1*gconst13);
IkReal x121=((0.5964)*px);
IkReal x122=(gconst12*gconst2);
IkReal x123=(gconst13*gconst14);
IkReal x124=(gconst7*gconst9);
IkReal x125=(gconst10*gconst9);
IkReal x126=(gconst11*gconst8);
IkReal x127=(gconst13*gconst3);
IkReal x128=(gconst0*gconst7);
IkReal x129=(gconst0*gconst3);
IkReal x130=(gconst10*gconst14);
IkReal x131=(gconst14*gconst5);
IkReal x132=(gconst15*gconst4);
IkReal x133=(gconst13*gconst6);
IkReal x134=(gconst10*gconst7);
IkReal x135=(gconst4*gconst7);
IkReal x136=(gconst10*gconst13);
IkReal x137=(gconst11*gconst12);
IkReal x138=(gconst1*gconst10);
IkReal x139=(gconst9*px);
IkReal x140=(gconst1*gconst4);
IkReal x141=((1.0)*gconst7);
IkReal x142=(gconst12*gconst15);
IkReal x143=(gconst2*gconst9);
IkReal x144=(gconst3*gconst8);
IkReal x145=(gconst11*gconst13);
IkReal x146=(gconst3*gconst5);
IkReal x147=(gconst1*gconst12);
IkReal x148=(gconst1*px);
IkReal x149=(gconst14*gconst9);
IkReal x150=((0.28901376)*gconst9);
IkReal x151=(gconst12*gconst9);
IkReal x152=(gconst15*gconst9);
IkReal x153=(gconst0*gconst6);
IkReal x154=((0.172367806464)*px);
IkReal x155=(gconst12*gconst7);
IkReal x156=(gconst2*gconst5);
IkReal x157=((0.344735612928)*px);
IkReal x158=((4.0)*x109);
IkReal x159=(gconst14*x121);
IkReal x160=((0.35569296)*x109);
IkReal x161=((1.1928)*x109);
IkReal x162=(gconst4*x161);
IkReal x163=(x107*x108);
IkReal x164=(gconst12*x154*x163);
IkReal x165=((0.172367806464)*x139*x163);
IkReal x166=(gconst4*x150*x163);
IkReal x167=((0.10280015977513)*x109*x163);
IkReal x168=((0.28901376)*x147*x163);
IkReal x169=((0.172367806464)*x148*x163);
IkReal x170=(gconst4*x154*x163);
IkReal x171=(x170+x169);
IkReal x172=(x164+x165);
IkReal x173=(x168+x166+x167);
op[0]=((((-1.0)*x123*x125))+((x117*x152))+(((-1.0)*gconst8*x114*x116))+((x123*x126))+(((-1.0)*gconst12*x150*x163)));
op[1]=((((-1.0)*gconst15*x117*x121))+((gconst10*x121*x123))+((gconst9*x111*x117))+(((-1.0)*gconst13*x111*x125))+(((-1.0)*gconst15*x111*x118))+(((-1.0)*gconst11*x111*x118))+(((-1.0)*gconst9*x111*x123))+((gconst8*x116*x121))+x172+(((-1.0)*gconst11*x121*x123))+(((-1.0)*x126*x159))+((gconst12*x116*x121))+((gconst9*x111*x142))+((gconst13*x111*x126))+((gconst8*x111*x123))+(((-1.0)*gconst15*x121*x125))+((x125*x159)));
op[2]=(((x117*x124))+((x112*x123))+((x136*x161))+(((-1.0)*x125*x133))+((gconst13*gconst8*x158))+(((-1.0)*x130*x160))+((x137*x161))+((x123*x144))+(((-0.57802752)*x151*x163))+((gconst15*gconst8*x161))+((gconst10*gconst15*x160))+((x122*x152))+(((-1.0)*x173))+(((-1.0)*x152*x161))+((x149*x161))+((x151*x158))+(((-1.0)*gconst7*x114*x126))+((gconst11*gconst14*x160))+((x125*x132))+(((-1.0)*x145*x161))+(((-1.0)*x116*x160))+((x126*x131))+((x126*x133))+(((-1.0)*x123*x143))+(((-1.0)*x120*x130))+(((-1.0)*gconst4*gconst8*x116))+(((-1.0)*x117*x161))+((gconst1*gconst15*x117))+(((-1.0)*x118*x158))+(((-1.0)*x119*x149))+(((-1.0)*gconst15*x112*x114))+(((-1.0)*gconst14*gconst8*x161))+(((-1.0)*gconst15*x114*x144))+(((-1.0)*gconst13*gconst9*x158)));
op[3]=((((-1.0)*gconst14*x111*x120))+(((-1.0)*gconst10*x121*x124))+(((0.344735612928)*x139*x163))+(((-1.0)*gconst10*x121*x132))+(((-1.0)*gconst7*x111*x118))+((gconst15*x121*x144))+(((-1.0)*gconst0*x111*x142))+((gconst12*x111*x124))+(((-1.0)*gconst9*x111*x131))+(((-1.0)*gconst9*x111*x133))+((gconst7*x121*x126))+(((-1.0)*x144*x159))+((gconst7*x121*x137))+((gconst5*x111*x126))+(((-1.0)*gconst11*x121*x131))+(((-1.0)*gconst11*x121*x133))+(((-1.0)*gconst4*x111*x126))+x171+(((-1.0)*gconst9*x111*x119))+(((-1.0)*gconst15*x121*x143))+(((-1.0)*gconst8*x111*x132))+((x119*x159))+(((-1.0)*gconst12*x111*x112))+((gconst2*x121*x123))+(((-1.0)*gconst10*x111*x120))+((gconst3*x121*x142))+((gconst1*x111*x117))+((gconst13*x111*x112))+(((-1.0)*gconst7*x117*x121))+((gconst12*x157*x163))+(((-1.0)*x112*x159))+((gconst9*x111*x122))+((gconst15*x112*x121))+((gconst4*x116*x121))+(((-1.0)*gconst15*x121*x138))+((gconst9*x111*x132))+((gconst8*x111*x131))+((gconst8*x111*x133))+((x143*x159))+((gconst0*x111*x123))+(((-1.0)*gconst13*x111*x143))+(((-1.0)*gconst3*x121*x123))+((gconst8*x111*x127))+(((-1.0)*gconst6*x121*x126))+(((-1.0)*gconst15*x121*x122))+((gconst1*x121*x130))+((gconst1*x111*x142))+((gconst10*x121*x133))+((gconst6*x121*x125))+(((-1.0)*gconst3*x111*x118))+((gconst4*x111*x125)));
op[4]=((((1.1928)*gconst12*gconst3*(px*px)))+(((0.35569296)*gconst11*gconst6*(px*px)))+(((-1.0)*gconst0*gconst11*gconst12*gconst7))+(((4.0)*gconst5*gconst8*(px*px)))+((gconst1*gconst10*gconst12*gconst7))+(((-0.35569296)*gconst14*gconst2*(px*px)))+(((-1.1928)*gconst0*gconst14*(px*px)))+(((1.1928)*gconst11*gconst4*(px*px)))+(((-1.1928)*gconst6*gconst8*(px*px)))+(((1.1928)*gconst7*gconst8*(px*px)))+(((-1.1928)*gconst11*gconst5*(px*px)))+(((-0.28901376)*gconst12*gconst9*(cj3*cj3)*(sj2*sj2)))+(((-1.0)*gconst1*gconst10*gconst13*gconst6))+(((-0.205600319550259)*(cj3*cj3)*(px*px)*(sj2*sj2)))+(((1.1928)*gconst0*gconst15*(px*px)))+((gconst11*gconst5*gconst6*gconst8))+(((-1.0)*gconst0*gconst12*gconst15*gconst3))+((gconst0*gconst11*gconst14*gconst5))+(((1.1928)*gconst10*gconst5*(px*px)))+((gconst12*gconst2*gconst7*gconst9))+(((-1.0)*gconst12*gconst3*gconst7*gconst8))+(((0.35569296)*gconst14*gconst3*(px*px)))+(((-1.0)*gconst10*gconst5*gconst6*gconst9))+(((-1.0)*gconst14*gconst2*gconst5*gconst9))+(((0.35569296)*gconst15*gconst2*(px*px)))+(((-1.1928)*gconst1*gconst15*(px*px)))+(((-0.35569296)*gconst10*gconst6*(px*px)))+(((-1.1928)*gconst13*gconst3*(px*px)))+(((-4.0)*gconst1*gconst13*(px*px)))+(((-1.0)*gconst13*gconst2*gconst6*gconst9))+(((-1.1928)*gconst12*gconst2*(px*px)))+(((0.35569296)*gconst10*gconst7*(px*px)))+((gconst15*gconst2*gconst4*gconst9))+((gconst10*gconst4*gconst7*gconst9))+(((-1.1928)*gconst10*gconst4*(px*px)))+((gconst0*gconst13*gconst14*gconst3))+(((-0.28901376)*gconst1*gconst4*(cj3*cj3)*(sj2*sj2)))+((gconst0*gconst11*gconst13*gconst6))+(((-1.1928)*gconst7*gconst9*(px*px)))+(((4.0)*gconst4*gconst9*(px*px)))+(((1.1928)*gconst1*gconst14*(px*px)))+((gconst1*gconst10*gconst15*gconst4))+(((-0.57802752)*gconst4*gconst9*(cj3*cj3)*(sj2*sj2)))+(((-0.35569296)*gconst15*gconst3*(px*px)))+(((-1.0)*gconst1*gconst13*gconst14*gconst2))+((gconst14*gconst3*gconst5*gconst8))+(((-1.0)*gconst0*gconst11*gconst15*gconst4))+((gconst13*gconst3*gconst6*gconst8))+((gconst1*gconst12*gconst15*gconst2))+(((-4.0)*gconst4*gconst8*(px*px)))+(((-4.0)*gconst0*gconst12*(px*px)))+(((1.1928)*gconst6*gconst9*(px*px)))+(((-0.35569296)*gconst11*gconst7*(px*px)))+(((-0.57802752)*gconst1*gconst12*(cj3*cj3)*(sj2*sj2)))+(((1.1928)*gconst13*gconst2*(px*px)))+(((-4.0)*gconst5*gconst9*(px*px)))+(((-1.0)*gconst1*gconst10*gconst14*gconst5))+(((4.0)*gconst0*gconst13*(px*px)))+(((-1.0)*gconst11*gconst4*gconst7*gconst8))+(((4.0)*gconst1*gconst12*(px*px)))+(((-1.0)*gconst15*gconst3*gconst4*gconst8)));
op[5]=(((gconst6*x121*x138))+(((-1.0)*gconst11*x113*x121))+((gconst10*x113*x121))+(((-1.0)*gconst2*x121*x132))+((gconst4*x111*x138))+((gconst7*x112*x121))+(((-1.0)*gconst6*x121*x144))+(((-1.0)*gconst6*x111*x120))+(((-1.0)*gconst2*x121*x124))+(((-1.0)*gconst13*x111*x115))+(((-1.0)*gconst6*x112*x121))+(((-1.0)*gconst15*x110*x111))+(((-1.0)*gconst4*x111*x144))+(((-1.0)*gconst15*x115*x121))+(((-1.0)*gconst5*x111*x143))+((gconst5*x111*x112))+(((-1.0)*x129*x159))+((gconst11*x121*x135))+((gconst3*x121*x132))+((gconst6*x121*x143))+((gconst12*x111*x115))+((gconst1*x111*x132))+x172+(((-1.0)*gconst9*x111*x113))+(((-1.0)*gconst12*x111*x128))+(((-1.0)*gconst12*x111*x129))+(((-1.0)*gconst8*x111*x135))+((gconst2*x121*x133))+((gconst2*x121*x131))+((gconst3*x121*x155))+(((-1.0)*gconst4*x121*x134))+(((-1.0)*gconst1*x121*x134))+((gconst5*x111*x144))+((x115*x159))+((gconst15*x121*x129))+(((-1.0)*gconst11*x110*x111))+(((0.344735612928)*x148*x163))+((gconst7*x111*x147))+(((-1.0)*gconst7*x121*x122))+((gconst7*x121*x144))+(((-1.0)*gconst1*x111*x131))+((gconst8*x111*x113))+(((-1.0)*gconst3*x121*x131))+((gconst4*x111*x143))+(((-1.0)*gconst1*x111*x119))+((gconst0*x111*x127))+(((-1.0)*gconst6*x121*x127))+((gconst0*x111*x133))+((gconst0*x111*x131))+((gconst4*x157*x163))+((gconst4*x111*x124)));
op[6]=(((x113*x144))+(((-1.0)*x115*x133))+(((-1.0)*x115*x131))+((gconst3*x162))+((gconst2*gconst4*x124))+(((-1.0)*gconst1*gconst7*x161))+((x140*x158))+((x128*x161))+((x112*x113))+((x129*x131))+(((-1.0)*x173))+(((-1.0)*gconst3*gconst7*x160))+((gconst2*gconst7*x160))+(((-1.0)*gconst1*gconst5*x158))+(((-1.0)*x113*x138))+((x156*x161))+(((-0.57802752)*x140*x163))+(((-1.0)*x146*x161))+((x115*x155))+((x127*x153))+(((-1.0)*gconst3*x114*x128))+((gconst0*gconst5*x158))+(((-1.0)*gconst2*x162))+((x134*x140))+(((-1.0)*x113*x143))+((gconst1*gconst6*x161))+(((-1.0)*x110*x158))+(((-1.0)*gconst15*gconst3*x110))+((x115*x132))+((gconst3*gconst6*x160))+(((-1.0)*gconst11*x110*x141))+(((-1.0)*x135*x144))+(((-1.0)*gconst2*gconst6*x160))+(((-1.0)*x153*x161)));
op[7]=((((-1.0)*gconst2*x121*x135))+((gconst2*x113*x121))+((gconst0*x111*x113))+((gconst4*x111*x115))+(((-1.0)*gconst3*x113*x121))+((gconst6*x115*x121))+((gconst3*x121*x135))+(((-1.0)*gconst3*x110*x111))+((gconst5*x111*x129))+(((-1.0)*gconst7*x110*x111))+((gconst1*x111*x135))+x171+((gconst3*x121*x128))+(((-1.0)*gconst7*x115*x121))+(((-1.0)*gconst5*x111*x115))+(((-1.0)*gconst1*x111*x113))+(((-1.0)*gconst6*x121*x129)));
op[8]=((((-1.0)*gconst3*x110*x141))+(((-1.0)*x113*x115))+((x113*x129))+(((-0.28901376)*x140*x163))+((x115*x135)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j1eval[2];
IkReal x174=cj0*cj0;
IkReal x175=py*py;
IkReal x176=px*px;
IkReal x177=pz*pz;
IkReal x178=(cj3*sj2);
IkReal x179=((2151.0)*x175);
IkReal x180=(x174*x178);
IkReal x181=(cj0*px*py*sj0);
j1eval[0]=((((-1.0)*x177*x178))+((x175*x180))+(((-2.0)*x178*x181))+(((-1.0)*x175*x178))+(((-1.0)*x176*x180)));
j1eval[1]=IKsign(((((-2151.0)*x177*x178))+((x179*x180))+(((-2151.0)*x176*x180))+(((-1.0)*x178*x179))+(((-4302.0)*x178*x181))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((-0.832692020322773)+(((8.64769431715038)*pp))+(((-2.57874244537424)*cj0*py))+(((2.57874244537424)*px*sj0)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((0.1491)+(((0.2688)*cj2*(IKcos(j4))))+(((0.2151)*cj2))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x182=cj2*cj2;
IkReal x183=cj4*cj4;
IkReal x184=((84023.4375)*sj2);
IkReal x185=(py*sj0);
IkReal x186=(cj0*px);
IkReal x187=((105000.0)*sj4);
IkReal x188=(cj4*x182);
IkReal x189=((105000.0)*cj4*sj2);
IkReal x190=(x182*x183);
j1eval[0]=((-2.56162843398711)+(((1.56162843398711)*x190))+x182+(((-2.49930264993026)*cj4))+(((2.49930264993026)*x188)));
j1eval[1]=IKsign(((-46297.44140625)+(((28224.0)*x190))+(((-45171.0)*cj4))+(((18073.44140625)*x182))+(((45171.0)*x188))));
j1eval[2]=((IKabs(((((-1.0)*x186*x187))+(((-1.0)*pz*x189))+(((-1.0)*pz*x184))+(((-1.0)*x185*x187)))))+(IKabs((((pz*x187))+(((-1.0)*x186*x189))+(((-1.0)*x184*x185))+(((-1.0)*x184*x186))+(((-1.0)*x185*x189))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x191=(py*sj0);
IkReal x192=(cj0*px);
IkReal x193=(cj2*sj2);
IkReal x194=((1.24965132496513)*cj4);
IkReal x195=((134.4375)*x193);
IkReal x196=(cj2*pz*sj4);
IkReal x197=((168.0)*cj4*x193);
j1eval[0]=(((x192*x193*x194))+(((1.24965132496513)*x196))+((x191*x193*x194))+((x192*x193))+((x191*x193)));
j1eval[1]=IKsign(((((168.0)*x196))+((x192*x197))+((x192*x195))+((x191*x197))+((x191*x195))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x198=(pz*sj2);
IkReal x199=((1.24965132496513)*sj4);
j1eval[0]=((((-1.0)*cj0*px*x199))+x198+(((1.24965132496513)*cj4*x198))+(((-1.0)*py*sj0*x199)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x200=(py*sj0);
IkReal x201=(cj0*px);
IkReal x202=((105000.0)*sj4);
IkReal x203=((105000.0)*cj4);
j1eval[0]=((-1.02493726962542)+(((-1.0)*cj4)));
j1eval[1]=((IKabs(((((-1.0)*x200*x203))+(((-1.0)*x201*x203))+((pz*x202))+(((-84023.4375)*x200))+(((-84023.4375)*x201)))))+(IKabs(((((-1.0)*x200*x202))+(((-1.0)*x201*x202))+(((-1.0)*pz*x203))+(((-84023.4375)*pz))))));
j1eval[2]=IKsign(((-46297.44140625)+(((-45171.0)*cj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x204=(py*sj0);
IkReal x205=((1.24965132496513)*cj4);
IkReal x206=((168.0)*cj4);
IkReal x207=(cj0*px);
IkReal x208=((625.0)*pz);
IkReal x209=(pz*sj4);
j1eval[0]=((((-1.0)*x204*x205))+(((-1.0)*x205*x207))+(((-1.24965132496513)*x209))+(((-1.0)*x204))+(((-1.0)*x207)));
j1eval[1]=((IKabs(((-28.91750625)+(((-45.1584)*(cj4*cj4)))+((pz*x208))+(((-72.2736)*cj4)))))+(IKabs(((((-1.0)*x204*x208))+(((-1.0)*x207*x208))+(((-45.1584)*cj4*sj4))+(((-36.1368)*sj4))))));
j1eval[2]=IKsign(((((-1.0)*x204*x206))+(((-134.4375)*x204))+(((-134.4375)*x207))+(((-168.0)*x209))+(((-1.0)*x206*x207))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x210=py*py;
IkReal x211=cj0*cj0;
IkReal x212=px*px;
IkReal x213=pz*pz;
IkReal x214=(py*sj0);
IkReal x215=((168.0)*cj4);
IkReal x216=(cj0*px);
IkReal x217=((168.0)*sj4);
IkReal x218=(x210*x211);
IkReal x219=(x211*x212);
j1eval[0]=((((-2.0)*x214*x216))+x218+(((-1.0)*x219))+(((-1.0)*x213))+(((-1.0)*x210)));
j1eval[1]=IKsign(((((-1250.0)*x214*x216))+(((625.0)*x218))+(((-625.0)*x219))+(((-625.0)*x213))+(((-625.0)*x210))));
j1eval[2]=((IKabs(((((-1.0)*pz*x215))+(((-134.4375)*pz))+(((-1.0)*x214*x217))+(((-1.0)*x216*x217)))))+(IKabs((((pz*x217))+(((-134.4375)*x214))+(((-134.4375)*x216))+(((-1.0)*x214*x215))+(((-1.0)*x215*x216))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x220=cj0*cj0;
IkReal x221=py*py;
IkReal x222=((168.0)*cj4);
IkReal x223=(cj0*px);
IkReal x224=(py*sj0);
IkReal x225=((168.0)*sj4);
IkReal x226=((625.0)*x221);
CheckValue<IkReal> x227 = IKatan2WithCheck(IkReal(((((-134.4375)*x224))+(((-134.4375)*x223))+((pz*x225))+(((-1.0)*x222*x223))+(((-1.0)*x222*x224)))),IkReal(((((-1.0)*x224*x225))+(((-134.4375)*pz))+(((-1.0)*x223*x225))+(((-1.0)*pz*x222)))),IKFAST_ATAN2_MAGTHRESH);
if(!x227.valid){
continue;
}
CheckValue<IkReal> x228=IKPowWithIntegerCheck(IKsign(((((-625.0)*x220*(px*px)))+((x220*x226))+(((-1250.0)*x223*x224))+(((-1.0)*x226))+(((-625.0)*(pz*pz))))),-1);
if(!x228.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x227.value)+(((1.5707963267949)*(x228.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x229=IKcos(j1);
IkReal x230=IKsin(j1);
IkReal x231=(cj0*px);
IkReal x232=(py*sj0);
IkReal x233=((0.2688)*sj4);
IkReal x234=((0.2688)*cj4);
IkReal x235=((1.0)*x230);
IkReal x236=((0.4302)*x230);
IkReal x237=(pz*x229);
evalcond[0]=(((x230*x233))+pz+(((-1.0)*x229*x234))+(((-0.2151)*x229)));
evalcond[1]=(((x229*x231))+((x229*x232))+(((-1.0)*pz*x235))+(((-1.0)*x233)));
evalcond[2]=((0.2151)+x234+(((-1.0)*x231*x235))+(((-1.0)*x237))+(((-1.0)*x232*x235)));
evalcond[3]=(((x229*x233))+((x230*x234))+(((0.2151)*x230))+(((-1.0)*x231))+(((-1.0)*x232)));
evalcond[4]=((0.00375462)+(((-0.2982)*px*sj0))+((x232*x236))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x231*x236))+(((0.4302)*x237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x793=(py*sj0);
IkReal x794=(cj0*px);
IkReal x795=((625.0)*pz);
IkReal x796=((168.0)*cj4);
CheckValue<IkReal> x797=IKPowWithIntegerCheck(IKsign(((((-168.0)*pz*sj4))+(((-1.0)*x794*x796))+(((-1.0)*x793*x796))+(((-134.4375)*x793))+(((-134.4375)*x794)))),-1);
if(!x797.valid){
continue;
}
CheckValue<IkReal> x798 = IKatan2WithCheck(IkReal(((-28.91750625)+(((-45.1584)*(cj4*cj4)))+((pz*x795))+(((-72.2736)*cj4)))),IkReal(((((-1.0)*x794*x795))+(((-1.0)*x793*x795))+(((-45.1584)*cj4*sj4))+(((-36.1368)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x798.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x797.value)))+(x798.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x799=IKcos(j1);
IkReal x800=IKsin(j1);
IkReal x801=(cj0*px);
IkReal x802=(py*sj0);
IkReal x803=((0.2688)*sj4);
IkReal x804=((0.2688)*cj4);
IkReal x805=((1.0)*x800);
IkReal x806=((0.4302)*x800);
IkReal x807=(pz*x799);
evalcond[0]=((((-1.0)*x799*x804))+(((-0.2151)*x799))+((x800*x803))+pz);
evalcond[1]=(((x799*x802))+((x799*x801))+(((-1.0)*x803))+(((-1.0)*pz*x805)));
evalcond[2]=((0.2151)+(((-1.0)*x807))+x804+(((-1.0)*x801*x805))+(((-1.0)*x802*x805)));
evalcond[3]=((((-1.0)*x802))+(((-1.0)*x801))+((x800*x804))+((x799*x803))+(((0.2151)*x800)));
evalcond[4]=((0.00375462)+(((-0.2982)*px*sj0))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x801*x806))+(((0.4302)*x807))+((x802*x806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x808=(py*sj0);
IkReal x809=(cj0*px);
IkReal x810=((105000.0)*sj4);
IkReal x811=((105000.0)*cj4);
CheckValue<IkReal> x812=IKPowWithIntegerCheck(IKsign(((-46297.44140625)+(((-45171.0)*cj4)))),-1);
if(!x812.valid){
continue;
}
CheckValue<IkReal> x813 = IKatan2WithCheck(IkReal(((((-1.0)*x808*x811))+((pz*x810))+(((-1.0)*x809*x811))+(((-84023.4375)*x809))+(((-84023.4375)*x808)))),IkReal(((((-1.0)*x808*x810))+(((-1.0)*x809*x810))+(((-1.0)*pz*x811))+(((-84023.4375)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x813.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x812.value)))+(x813.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x814=IKcos(j1);
IkReal x815=IKsin(j1);
IkReal x816=(cj0*px);
IkReal x817=(py*sj0);
IkReal x818=((0.2688)*sj4);
IkReal x819=((0.2688)*cj4);
IkReal x820=((1.0)*x815);
IkReal x821=((0.4302)*x815);
IkReal x822=(pz*x814);
evalcond[0]=(((x815*x818))+(((-1.0)*x814*x819))+pz+(((-0.2151)*x814)));
evalcond[1]=((((-1.0)*pz*x820))+(((-1.0)*x818))+((x814*x817))+((x814*x816)));
evalcond[2]=((0.2151)+(((-1.0)*x816*x820))+(((-1.0)*x817*x820))+(((-1.0)*x822))+x819);
evalcond[3]=(((x815*x819))+(((0.2151)*x815))+((x814*x818))+(((-1.0)*x817))+(((-1.0)*x816)));
evalcond[4]=((0.00375462)+(((-0.2982)*px*sj0))+(((0.4302)*x822))+((x817*x821))+(((0.2982)*cj0*py))+((x816*x821))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x823=(py*sj0);
IkReal x824=((105000.0)*sj4);
IkReal x825=((105000.0)*cj4);
IkReal x826=(cj0*px);
j1eval[0]=((-1.02493726962542)+(((-1.0)*cj4)));
j1eval[1]=((IKabs((((pz*x825))+(((-1.0)*x823*x824))+(((84023.4375)*pz))+(((-1.0)*x824*x826)))))+(IKabs((((pz*x824))+((x825*x826))+(((84023.4375)*x823))+(((84023.4375)*x826))+((x823*x825))))));
j1eval[2]=IKsign(((-46297.44140625)+(((-45171.0)*cj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x827=(cj0*px);
IkReal x828=((625.0)*pz);
IkReal x829=(py*sj0);
IkReal x830=(pz*sj4);
IkReal x831=(cj4*x829);
j1eval[0]=((((-1.24965132496513)*x830))+(((1.24965132496513)*x831))+(((1.24965132496513)*cj4*x827))+x829+x827);
j1eval[1]=((IKabs(((((36.1368)*sj4))+(((-1.0)*x828*x829))+(((-1.0)*x827*x828))+(((45.1584)*cj4*sj4)))))+(IKabs(((-28.91750625)+((pz*x828))+(((-45.1584)*(cj4*cj4)))+(((-72.2736)*cj4))))));
j1eval[2]=IKsign(((((168.0)*x831))+(((168.0)*cj4*x827))+(((-168.0)*x830))+(((134.4375)*x827))+(((134.4375)*x829))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x832=py*py;
IkReal x833=cj0*cj0;
IkReal x834=px*px;
IkReal x835=pz*pz;
IkReal x836=(py*sj0);
IkReal x837=((168.0)*cj4);
IkReal x838=(cj0*px);
IkReal x839=((168.0)*sj4);
IkReal x840=(x832*x833);
IkReal x841=(x833*x834);
j1eval[0]=((((-2.0)*x836*x838))+(((-1.0)*x832))+(((-1.0)*x835))+(((-1.0)*x841))+x840);
j1eval[1]=IKsign(((((625.0)*x840))+(((-625.0)*x832))+(((-625.0)*x835))+(((-625.0)*x841))+(((-1250.0)*x836*x838))));
j1eval[2]=((IKabs(((((-1.0)*x836*x839))+((pz*x837))+(((-1.0)*x838*x839))+(((134.4375)*pz)))))+(IKabs((((pz*x839))+((x836*x837))+((x837*x838))+(((134.4375)*x836))+(((134.4375)*x838))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x842=cj0*cj0;
IkReal x843=py*py;
IkReal x844=((168.0)*cj4);
IkReal x845=(cj0*px);
IkReal x846=(py*sj0);
IkReal x847=((168.0)*sj4);
IkReal x848=((625.0)*x843);
CheckValue<IkReal> x849 = IKatan2WithCheck(IkReal((((pz*x847))+(((134.4375)*x846))+(((134.4375)*x845))+((x844*x846))+((x844*x845)))),IkReal((((pz*x844))+(((-1.0)*x846*x847))+(((134.4375)*pz))+(((-1.0)*x845*x847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x849.valid){
continue;
}
CheckValue<IkReal> x850=IKPowWithIntegerCheck(IKsign(((((-1250.0)*x845*x846))+(((-625.0)*x842*(px*px)))+(((-1.0)*x848))+((x842*x848))+(((-625.0)*(pz*pz))))),-1);
if(!x850.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x849.value)+(((1.5707963267949)*(x850.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x851=IKcos(j1);
IkReal x852=IKsin(j1);
IkReal x853=(cj0*px);
IkReal x854=((0.2688)*sj4);
IkReal x855=(py*sj0);
IkReal x856=((0.2688)*cj4);
IkReal x857=(pz*x851);
IkReal x858=(x852*x855);
evalcond[0]=(pz+((x851*x856))+((x852*x854))+(((0.2151)*x851)));
evalcond[1]=((0.2151)+((x852*x853))+x856+x857+x858);
evalcond[2]=((((-1.0)*x854))+(((-1.0)*pz*x852))+((x851*x853))+((x851*x855)));
evalcond[3]=((((-0.2151)*x852))+(((-1.0)*x855))+(((-1.0)*x853))+(((-1.0)*x852*x856))+((x851*x854)));
evalcond[4]=((0.00375462)+(((-0.2982)*px*sj0))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.4302)*x852*x853))+(((-0.4302)*x858))+(((-0.4302)*x857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x859=(cj0*px);
IkReal x860=((625.0)*pz);
IkReal x861=((168.0)*cj4);
IkReal x862=(py*sj0);
CheckValue<IkReal> x863=IKPowWithIntegerCheck(IKsign(((((-168.0)*pz*sj4))+(((134.4375)*x862))+((x859*x861))+((x861*x862))+(((134.4375)*x859)))),-1);
if(!x863.valid){
continue;
}
CheckValue<IkReal> x864 = IKatan2WithCheck(IkReal(((-28.91750625)+(((-45.1584)*(cj4*cj4)))+(((-72.2736)*cj4))+((pz*x860)))),IkReal(((((36.1368)*sj4))+(((-1.0)*x860*x862))+(((45.1584)*cj4*sj4))+(((-1.0)*x859*x860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x864.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x863.value)))+(x864.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x865=IKcos(j1);
IkReal x866=IKsin(j1);
IkReal x867=(cj0*px);
IkReal x868=((0.2688)*sj4);
IkReal x869=(py*sj0);
IkReal x870=((0.2688)*cj4);
IkReal x871=(pz*x865);
IkReal x872=(x866*x869);
evalcond[0]=(((x866*x868))+pz+(((0.2151)*x865))+((x865*x870)));
evalcond[1]=((0.2151)+((x866*x867))+x870+x871+x872);
evalcond[2]=((((-1.0)*x868))+(((-1.0)*pz*x866))+((x865*x867))+((x865*x869)));
evalcond[3]=((((-0.2151)*x866))+(((-1.0)*x866*x870))+(((-1.0)*x869))+(((-1.0)*x867))+((x865*x868)));
evalcond[4]=((0.00375462)+(((-0.2982)*px*sj0))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.4302)*x871))+(((-0.4302)*x872))+(((-0.4302)*x866*x867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x873=(py*sj0);
IkReal x874=(cj0*px);
IkReal x875=((105000.0)*sj4);
IkReal x876=((105000.0)*cj4);
CheckValue<IkReal> x877=IKPowWithIntegerCheck(IKsign(((-46297.44140625)+(((-45171.0)*cj4)))),-1);
if(!x877.valid){
continue;
}
CheckValue<IkReal> x878 = IKatan2WithCheck(IkReal((((x874*x876))+(((84023.4375)*x874))+(((84023.4375)*x873))+((x873*x876))+((pz*x875)))),IkReal(((((84023.4375)*pz))+(((-1.0)*x873*x875))+(((-1.0)*x874*x875))+((pz*x876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x878.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x877.value)))+(x878.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x879=IKcos(j1);
IkReal x880=IKsin(j1);
IkReal x881=(cj0*px);
IkReal x882=((0.2688)*sj4);
IkReal x883=(py*sj0);
IkReal x884=((0.2688)*cj4);
IkReal x885=(pz*x879);
IkReal x886=(x880*x883);
evalcond[0]=(((x879*x884))+((x880*x882))+pz+(((0.2151)*x879)));
evalcond[1]=((0.2151)+((x880*x881))+x885+x884+x886);
evalcond[2]=(((x879*x883))+((x879*x881))+(((-1.0)*x882))+(((-1.0)*pz*x880)));
evalcond[3]=(((x879*x882))+(((-1.0)*x881))+(((-1.0)*x883))+(((-0.2151)*x880))+(((-1.0)*x880*x884)));
evalcond[4]=((0.00375462)+(((-0.2982)*px*sj0))+(((-0.4302)*x880*x881))+(((-0.4302)*x885))+(((-0.4302)*x886))+(((0.2982)*cj0*py))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=0;
sj2=0;
cj2=1.0;
j4=0;
sj4=0;
cj4=1.0;
j1eval[0]=IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x887=(cj0*px);
IkReal x888=(py*sj0);
op[0]=((((-1.0)*x888))+(((-1.0)*x887)));
op[1]=0;
op[2]=(x887+x888);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j4, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=0;
sj2=0;
cj2=1.0;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j1eval[0]=IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x889=(cj0*px);
IkReal x890=(py*sj0);
op[0]=((((-1.0)*x889))+(((-1.0)*x890)));
op[1]=0;
op[2]=(x889+x890);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j4=0;
sj4=0;
cj4=1.0;
j1eval[0]=IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x891=(cj0*px);
IkReal x892=(py*sj0);
op[0]=((((-1.0)*x892))+(((-1.0)*x891)));
op[1]=0;
op[2]=(x892+x891);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j4, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j1eval[0]=IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x893=(cj0*px);
IkReal x894=(py*sj0);
op[0]=((((-1.0)*x893))+(((-1.0)*x894)));
op[1]=0;
op[2]=(x894+x893);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x895=((625.0)*pz);
IkReal x896=(cj0*px);
IkReal x897=(pz*sj2);
IkReal x898=(py*sj0);
IkReal x899=((105000.0)*sj4);
IkReal x900=((168.0)*sj4);
IkReal x901=(sj2*sj4);
CheckValue<IkReal> x902=IKPowWithIntegerCheck(((((-1.0)*x896*x900))+(((-1.0)*x898*x900))+(((134.4375)*x897))+(((168.0)*cj4*x897))),-1);
if(!x902.valid){
continue;
}
CheckValue<IkReal> x903=IKPowWithIntegerCheck((((x898*x899))+(((-105000.0)*cj4*x897))+((x896*x899))+(((-84023.4375)*x897))),-1);
if(!x903.valid){
continue;
}
if( IKabs(((x902.value)*(((((-45.1584)*cj4*x901))+((x895*x898))+((x895*x896))+(((-36.1368)*x901)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x903.value)*(((28224.0)+(((-28224.0)*(cj4*cj4)))+(((-390625.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x902.value)*(((((-45.1584)*cj4*x901))+((x895*x898))+((x895*x896))+(((-36.1368)*x901))))))+IKsqr(((x903.value)*(((28224.0)+(((-28224.0)*(cj4*cj4)))+(((-390625.0)*(pz*pz)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x902.value)*(((((-45.1584)*cj4*x901))+((x895*x898))+((x895*x896))+(((-36.1368)*x901))))), ((x903.value)*(((28224.0)+(((-28224.0)*(cj4*cj4)))+(((-390625.0)*(pz*pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x904=IKcos(j1);
IkReal x905=IKsin(j1);
IkReal x906=(px*sj2);
IkReal x907=((0.4302)*cj0);
IkReal x908=(cj0*px);
IkReal x909=((0.2151)*sj2);
IkReal x910=(cj0*py);
IkReal x911=((0.4302)*sj2);
IkReal x912=((0.2688)*sj4);
IkReal x913=(cj2*py);
IkReal x914=(py*sj0);
IkReal x915=((0.2688)*cj4);
IkReal x916=(px*sj0);
IkReal x917=((1.0)*sj2);
IkReal x918=(pz*x904);
IkReal x919=((1.0)*x905);
evalcond[0]=(pz+(((-1.0)*sj2*x904*x915))+(((-1.0)*x904*x909))+((x905*x912)));
evalcond[1]=((((-1.0)*x912))+(((-1.0)*pz*x919))+((x904*x914))+((x904*x908)));
evalcond[2]=(((x905*x909))+(((-1.0)*x914))+(((-1.0)*x908))+((sj2*x905*x915))+((x904*x912)));
evalcond[3]=(((sj0*x906))+((cj2*x918))+(((-1.0)*x910*x917))+((sj0*x905*x913))+((cj2*x905*x908))+(((0.1491)*sj2)));
evalcond[4]=((0.2151)+(((-1.0)*x905*x914*x917))+(((-1.0)*cj0*x906*x919))+(((0.1491)*cj2))+((cj2*x916))+(((-1.0)*cj2*x910))+x915+(((-1.0)*x917*x918)));
evalcond[5]=((0.00375462)+(((0.2982)*x910))+(((-0.4302)*cj2*x916))+(((-0.2982)*x916))+((x911*x918))+(((-1.0)*pp))+((x907*x913))+((x905*x911*x914))+((x905*x906*x907))+(((-0.06414282)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x920=cj2*cj2;
IkReal x921=(cj2*pz);
IkReal x922=(py*sj0);
IkReal x923=(cj2*sj2);
IkReal x924=((168.0)*sj4);
IkReal x925=(cj0*py);
IkReal x926=((168.0)*cj4);
IkReal x927=(px*sj0);
IkReal x928=(cj0*px);
IkReal x929=((25.0488)*cj4);
IkReal x930=(cj0*x926);
IkReal x931=(x920*x927);
CheckValue<IkReal> x932 = IKatan2WithCheck(IkReal(((-20.04463125)+(((-1.0)*x929))+((x920*x929))+(((-1.0)*x920*x925*x926))+(((-625.0)*pz*x921))+(((-1.0)*x926*x927))+(((134.4375)*x931))+(((134.4375)*x925))+((x925*x926))+((x926*x931))+(((20.04463125)*x920))+(((-134.4375)*x920*x925))+(((-134.4375)*x927)))),IkReal(((((-25.0488)*sj2*sj4))+((sj2*x924*x925))+(((625.0)*x921*x928))+(((625.0)*x921*x922))+(((-1.0)*sj2*x924*x927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x932.valid){
continue;
}
CheckValue<IkReal> x933=IKPowWithIntegerCheck(IKsign(((((134.4375)*x923*x928))+((x922*x923*x926))+((x923*x926*x928))+((x921*x924))+(((134.4375)*x922*x923)))),-1);
if(!x933.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x932.value)+(((1.5707963267949)*(x933.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x934=IKcos(j1);
IkReal x935=IKsin(j1);
IkReal x936=(px*sj2);
IkReal x937=((0.4302)*cj0);
IkReal x938=(cj0*px);
IkReal x939=((0.2151)*sj2);
IkReal x940=(cj0*py);
IkReal x941=((0.4302)*sj2);
IkReal x942=((0.2688)*sj4);
IkReal x943=(cj2*py);
IkReal x944=(py*sj0);
IkReal x945=((0.2688)*cj4);
IkReal x946=(px*sj0);
IkReal x947=((1.0)*sj2);
IkReal x948=(pz*x934);
IkReal x949=((1.0)*x935);
evalcond[0]=((((-1.0)*sj2*x934*x945))+(((-1.0)*x934*x939))+pz+((x935*x942)));
evalcond[1]=((((-1.0)*x942))+(((-1.0)*pz*x949))+((x934*x944))+((x934*x938)));
evalcond[2]=(((sj2*x935*x945))+((x935*x939))+(((-1.0)*x944))+(((-1.0)*x938))+((x934*x942)));
evalcond[3]=(((sj0*x936))+((sj0*x935*x943))+((cj2*x948))+((cj2*x935*x938))+(((0.1491)*sj2))+(((-1.0)*x940*x947)));
evalcond[4]=((0.2151)+(((-1.0)*x947*x948))+(((0.1491)*cj2))+((cj2*x946))+(((-1.0)*cj0*x936*x949))+(((-1.0)*x935*x944*x947))+(((-1.0)*cj2*x940))+x945);
evalcond[5]=((0.00375462)+(((0.2982)*x940))+((x935*x941*x944))+((x937*x943))+((x941*x948))+(((-0.2982)*x946))+(((-1.0)*pp))+((x935*x936*x937))+(((-0.4302)*cj2*x946))+(((-0.06414282)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x950=cj2*cj2;
IkReal x951=((45171.0)*cj4);
IkReal x952=((84023.4375)*sj2);
IkReal x953=(py*sj0);
IkReal x954=(cj0*px);
IkReal x955=((105000.0)*sj4);
IkReal x956=((105000.0)*cj4*sj2);
CheckValue<IkReal> x957 = IKatan2WithCheck(IkReal((((pz*x955))+(((-1.0)*x953*x956))+(((-1.0)*x954*x956))+(((-1.0)*x952*x954))+(((-1.0)*x952*x953)))),IkReal(((((-1.0)*pz*x952))+(((-1.0)*pz*x956))+(((-1.0)*x953*x955))+(((-1.0)*x954*x955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x957.valid){
continue;
}
CheckValue<IkReal> x958=IKPowWithIntegerCheck(IKsign(((-46297.44140625)+(((28224.0)*x950*(cj4*cj4)))+(((18073.44140625)*x950))+(((-1.0)*x951))+((x950*x951)))),-1);
if(!x958.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x957.value)+(((1.5707963267949)*(x958.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x959=IKcos(j1);
IkReal x960=IKsin(j1);
IkReal x961=(px*sj2);
IkReal x962=((0.4302)*cj0);
IkReal x963=(cj0*px);
IkReal x964=((0.2151)*sj2);
IkReal x965=(cj0*py);
IkReal x966=((0.4302)*sj2);
IkReal x967=((0.2688)*sj4);
IkReal x968=(cj2*py);
IkReal x969=(py*sj0);
IkReal x970=((0.2688)*cj4);
IkReal x971=(px*sj0);
IkReal x972=((1.0)*sj2);
IkReal x973=(pz*x959);
IkReal x974=((1.0)*x960);
evalcond[0]=((((-1.0)*sj2*x959*x970))+((x960*x967))+(((-1.0)*x959*x964))+pz);
evalcond[1]=((((-1.0)*pz*x974))+((x959*x969))+((x959*x963))+(((-1.0)*x967)));
evalcond[2]=((((-1.0)*x969))+(((-1.0)*x963))+((sj2*x960*x970))+((x960*x964))+((x959*x967)));
evalcond[3]=((((-1.0)*x965*x972))+((sj0*x960*x968))+((cj2*x960*x963))+((sj0*x961))+(((0.1491)*sj2))+((cj2*x973)));
evalcond[4]=((0.2151)+(((-1.0)*cj0*x961*x974))+(((-1.0)*cj2*x965))+(((0.1491)*cj2))+(((-1.0)*x972*x973))+((cj2*x971))+(((-1.0)*x960*x969*x972))+x970);
evalcond[5]=((0.00375462)+((x960*x961*x962))+((x960*x966*x969))+((x962*x968))+(((-0.4302)*cj2*x971))+(((-1.0)*pp))+((x966*x973))+(((-0.2982)*x971))+(((0.2982)*x965))+(((-0.06414282)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((-0.832692020322773)+(((8.64769431715038)*pp))+(((-2.57874244537424)*cj0*py))+(((2.57874244537424)*px*sj0)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((0.1491)+(((0.2688)*cj2*(IKcos(j4))))+(((0.2151)*cj2))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x975=cj2*cj2;
IkReal x976=cj4*cj4;
IkReal x977=((84023.4375)*sj2);
IkReal x978=(py*sj0);
IkReal x979=(cj0*px);
IkReal x980=((105000.0)*sj4);
IkReal x981=(cj4*x975);
IkReal x982=((105000.0)*cj4*sj2);
IkReal x983=(x975*x976);
j1eval[0]=((2.56162843398711)+(((-2.49930264993026)*x981))+(((2.49930264993026)*cj4))+(((-1.56162843398711)*x983))+(((-1.0)*x975)));
j1eval[1]=((IKabs(((((-1.0)*x978*x980))+((pz*x982))+((pz*x977))+(((-1.0)*x979*x980)))))+(IKabs((((x977*x978))+((x977*x979))+((x979*x982))+((pz*x980))+((x978*x982))))));
j1eval[2]=IKsign(((46297.44140625)+(((-45171.0)*x981))+(((45171.0)*cj4))+(((-18073.44140625)*x975))+(((-28224.0)*x983))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x984=(py*sj0);
IkReal x985=(cj0*px);
IkReal x986=((1.24965132496513)*cj2);
IkReal x987=(pz*sj4);
IkReal x988=(cj4*sj2);
IkReal x989=((134.4375)*cj2*sj2);
IkReal x990=((1.0)*cj2*sj2);
IkReal x991=((168.0)*cj2*x988);
j1eval[0]=(((x986*x987))+(((-1.0)*x985*x990))+(((-1.0)*x984*x990))+(((-1.0)*x984*x986*x988))+(((-1.0)*x985*x986*x988)));
j1eval[1]=IKsign(((((168.0)*cj2*x987))+(((-1.0)*x985*x991))+(((-1.0)*x984*x991))+(((-1.0)*x984*x989))+(((-1.0)*x985*x989))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x992=((1.24965132496513)*sj4);
IkReal x993=(pz*sj2);
j1eval[0]=((((-1.0)*x993))+(((-1.24965132496513)*cj4*x993))+(((-1.0)*py*sj0*x992))+(((-1.0)*cj0*px*x992)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x994=(py*sj0);
IkReal x995=((105000.0)*sj4);
IkReal x996=((105000.0)*cj4);
IkReal x997=(cj0*px);
j1eval[0]=((-1.02493726962542)+(((-1.0)*cj4)));
j1eval[1]=IKsign(((-46297.44140625)+(((-45171.0)*cj4))));
j1eval[2]=((IKabs(((((-1.0)*x994*x996))+(((-1.0)*x996*x997))+(((-1.0)*pz*x995))+(((-84023.4375)*x997))+(((-84023.4375)*x994)))))+(IKabs((((x994*x995))+(((-1.0)*pz*x996))+((x995*x997))+(((-84023.4375)*pz))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x998=(py*sj0);
IkReal x999=((1.24965132496513)*cj4);
IkReal x1000=((168.0)*cj4);
IkReal x1001=(cj0*px);
IkReal x1002=((625.0)*pz);
IkReal x1003=(pz*sj4);
j1eval[0]=((((-1.0)*x998))+(((-1.0)*x1001))+(((-1.0)*x1001*x999))+(((1.24965132496513)*x1003))+(((-1.0)*x998*x999)));
j1eval[1]=((IKabs(((((36.1368)*sj4))+(((-1.0)*x1002*x998))+(((45.1584)*cj4*sj4))+(((-1.0)*x1001*x1002)))))+(IKabs(((-28.91750625)+(((-45.1584)*(cj4*cj4)))+((pz*x1002))+(((-72.2736)*cj4))))));
j1eval[2]=IKsign(((((168.0)*x1003))+(((-134.4375)*x1001))+(((-134.4375)*x998))+(((-1.0)*x1000*x998))+(((-1.0)*x1000*x1001))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1004=cj0*cj0;
IkReal x1005=py*py;
IkReal x1006=px*px;
IkReal x1007=pz*pz;
IkReal x1008=((168.0)*cj4);
IkReal x1009=(cj0*px);
IkReal x1010=(py*sj0);
IkReal x1011=((168.0)*sj4);
IkReal x1012=(x1004*x1005);
IkReal x1013=(x1004*x1006);
j1eval[0]=(x1013+x1007+x1005+(((2.0)*x1009*x1010))+(((-1.0)*x1012)));
j1eval[1]=IKsign(((((-625.0)*x1012))+(((1250.0)*x1009*x1010))+(((625.0)*x1013))+(((625.0)*x1007))+(((625.0)*x1005))));
j1eval[2]=((IKabs(((((-1.0)*x1010*x1011))+(((-1.0)*x1009*x1011))+((pz*x1008))+(((134.4375)*pz)))))+(IKabs(((((134.4375)*x1009))+((x1008*x1009))+((pz*x1011))+((x1008*x1010))+(((134.4375)*x1010))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1014=cj0*cj0;
IkReal x1015=py*py;
IkReal x1016=((168.0)*cj4);
IkReal x1017=(cj0*px);
IkReal x1018=(py*sj0);
IkReal x1019=((168.0)*sj4);
IkReal x1020=((625.0)*x1015);
CheckValue<IkReal> x1021 = IKatan2WithCheck(IkReal((((x1016*x1017))+((x1016*x1018))+((pz*x1019))+(((134.4375)*x1018))+(((134.4375)*x1017)))),IkReal(((((-1.0)*x1018*x1019))+(((-1.0)*x1017*x1019))+((pz*x1016))+(((134.4375)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1021.valid){
continue;
}
CheckValue<IkReal> x1022=IKPowWithIntegerCheck(IKsign(((((1250.0)*x1017*x1018))+x1020+(((625.0)*x1014*(px*px)))+(((-1.0)*x1014*x1020))+(((625.0)*(pz*pz))))),-1);
if(!x1022.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1021.value)+(((1.5707963267949)*(x1022.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1023=IKcos(j1);
IkReal x1024=IKsin(j1);
IkReal x1025=(cj0*px);
IkReal x1026=(py*sj0);
IkReal x1027=((0.2688)*sj4);
IkReal x1028=((0.2688)*cj4);
IkReal x1029=((1.0)*x1024);
IkReal x1030=((0.4302)*x1024);
IkReal x1031=((1.0)*x1023);
evalcond[0]=((((-1.0)*x1023*x1028))+(((-0.2151)*x1023))+pz+(((-1.0)*x1024*x1027)));
evalcond[1]=((((-1.0)*x1025*x1031))+(((-1.0)*x1026*x1031))+(((-1.0)*x1027))+((pz*x1024)));
evalcond[2]=((0.2151)+x1028+(((-1.0)*pz*x1031))+(((-1.0)*x1026*x1029))+(((-1.0)*x1025*x1029)));
evalcond[3]=((((-1.0)*x1023*x1027))+(((-1.0)*x1026))+(((-1.0)*x1025))+(((0.2151)*x1024))+((x1024*x1028)));
evalcond[4]=((0.00375462)+(((-0.2982)*px*sj0))+((x1026*x1030))+(((0.4302)*pz*x1023))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x1025*x1030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1032=(py*sj0);
IkReal x1033=(cj0*px);
IkReal x1034=((625.0)*pz);
IkReal x1035=((168.0)*cj4);
CheckValue<IkReal> x1036=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1033*x1035))+(((-1.0)*x1032*x1035))+(((-134.4375)*x1033))+(((-134.4375)*x1032))+(((168.0)*pz*sj4)))),-1);
if(!x1036.valid){
continue;
}
CheckValue<IkReal> x1037 = IKatan2WithCheck(IkReal(((-28.91750625)+(((-45.1584)*(cj4*cj4)))+((pz*x1034))+(((-72.2736)*cj4)))),IkReal(((((-1.0)*x1033*x1034))+(((36.1368)*sj4))+(((-1.0)*x1032*x1034))+(((45.1584)*cj4*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1037.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1036.value)))+(x1037.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1038=IKcos(j1);
IkReal x1039=IKsin(j1);
IkReal x1040=(cj0*px);
IkReal x1041=(py*sj0);
IkReal x1042=((0.2688)*sj4);
IkReal x1043=((0.2688)*cj4);
IkReal x1044=((1.0)*x1039);
IkReal x1045=((0.4302)*x1039);
IkReal x1046=((1.0)*x1038);
evalcond[0]=((((-1.0)*x1038*x1043))+(((-0.2151)*x1038))+(((-1.0)*x1039*x1042))+pz);
evalcond[1]=((((-1.0)*x1041*x1046))+((pz*x1039))+(((-1.0)*x1040*x1046))+(((-1.0)*x1042)));
evalcond[2]=((0.2151)+x1043+(((-1.0)*x1041*x1044))+(((-1.0)*pz*x1046))+(((-1.0)*x1040*x1044)));
evalcond[3]=((((-1.0)*x1038*x1042))+(((0.2151)*x1039))+((x1039*x1043))+(((-1.0)*x1041))+(((-1.0)*x1040)));
evalcond[4]=((0.00375462)+(((-0.2982)*px*sj0))+(((0.4302)*pz*x1038))+((x1040*x1045))+((x1041*x1045))+(((0.2982)*cj0*py))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1047=(py*sj0);
IkReal x1048=(cj0*px);
IkReal x1049=((105000.0)*sj4);
IkReal x1050=((105000.0)*cj4);
CheckValue<IkReal> x1051=IKPowWithIntegerCheck(IKsign(((-46297.44140625)+(((-45171.0)*cj4)))),-1);
if(!x1051.valid){
continue;
}
CheckValue<IkReal> x1052 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x1049))+(((-1.0)*x1048*x1050))+(((-1.0)*x1047*x1050))+(((-84023.4375)*x1047))+(((-84023.4375)*x1048)))),IkReal((((x1048*x1049))+(((-1.0)*pz*x1050))+((x1047*x1049))+(((-84023.4375)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1052.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1051.value)))+(x1052.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1053=IKcos(j1);
IkReal x1054=IKsin(j1);
IkReal x1055=(cj0*px);
IkReal x1056=(py*sj0);
IkReal x1057=((0.2688)*sj4);
IkReal x1058=((0.2688)*cj4);
IkReal x1059=((1.0)*x1054);
IkReal x1060=((0.4302)*x1054);
IkReal x1061=((1.0)*x1053);
evalcond[0]=((((-1.0)*x1054*x1057))+pz+(((-0.2151)*x1053))+(((-1.0)*x1053*x1058)));
evalcond[1]=((((-1.0)*x1057))+((pz*x1054))+(((-1.0)*x1056*x1061))+(((-1.0)*x1055*x1061)));
evalcond[2]=((0.2151)+x1058+(((-1.0)*pz*x1061))+(((-1.0)*x1055*x1059))+(((-1.0)*x1056*x1059)));
evalcond[3]=((((0.2151)*x1054))+((x1054*x1058))+(((-1.0)*x1055))+(((-1.0)*x1056))+(((-1.0)*x1053*x1057)));
evalcond[4]=((0.00375462)+(((0.4302)*pz*x1053))+((x1056*x1060))+(((-0.2982)*px*sj0))+((x1055*x1060))+(((0.2982)*cj0*py))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1062=(py*sj0);
IkReal x1063=((105000.0)*sj4);
IkReal x1064=((105000.0)*cj4);
IkReal x1065=(cj0*px);
j1eval[0]=((-1.02493726962542)+(((-1.0)*cj4)));
j1eval[1]=((IKabs(((((-1.0)*pz*x1063))+((x1062*x1064))+(((84023.4375)*x1062))+(((84023.4375)*x1065))+((x1064*x1065)))))+(IKabs(((((84023.4375)*pz))+((pz*x1064))+((x1062*x1063))+((x1063*x1065))))));
j1eval[2]=IKsign(((-46297.44140625)+(((-45171.0)*cj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1066=(cj0*px);
IkReal x1067=((625.0)*pz);
IkReal x1068=(py*sj0);
IkReal x1069=(pz*sj4);
IkReal x1070=(cj4*x1068);
j1eval[0]=(x1068+x1066+(((1.24965132496513)*x1069))+(((1.24965132496513)*x1070))+(((1.24965132496513)*cj4*x1066)));
j1eval[1]=IKsign(((((168.0)*cj4*x1066))+(((134.4375)*x1068))+(((134.4375)*x1066))+(((168.0)*x1069))+(((168.0)*x1070))));
j1eval[2]=((IKabs(((-28.91750625)+(((-45.1584)*(cj4*cj4)))+((pz*x1067))+(((-72.2736)*cj4)))))+(IKabs(((((-45.1584)*cj4*sj4))+(((-1.0)*x1066*x1067))+(((-36.1368)*sj4))+(((-1.0)*x1067*x1068))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1071=cj0*cj0;
IkReal x1072=py*py;
IkReal x1073=px*px;
IkReal x1074=pz*pz;
IkReal x1075=((168.0)*cj4);
IkReal x1076=(cj0*px);
IkReal x1077=(py*sj0);
IkReal x1078=((168.0)*sj4);
IkReal x1079=(x1071*x1072);
IkReal x1080=(x1071*x1073);
j1eval[0]=((((2.0)*x1076*x1077))+x1074+x1072+x1080+(((-1.0)*x1079)));
j1eval[1]=((IKabs(((((-1.0)*x1077*x1078))+(((-1.0)*x1076*x1078))+(((-134.4375)*pz))+(((-1.0)*pz*x1075)))))+(IKabs(((((-1.0)*x1075*x1077))+(((-1.0)*x1075*x1076))+((pz*x1078))+(((-134.4375)*x1076))+(((-134.4375)*x1077))))));
j1eval[2]=IKsign(((((1250.0)*x1076*x1077))+(((625.0)*x1072))+(((625.0)*x1074))+(((625.0)*x1080))+(((-625.0)*x1079))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1081=cj0*cj0;
IkReal x1082=py*py;
IkReal x1083=((168.0)*cj4);
IkReal x1084=(cj0*px);
IkReal x1085=(py*sj0);
IkReal x1086=((168.0)*sj4);
IkReal x1087=((625.0)*x1082);
CheckValue<IkReal> x1088=IKPowWithIntegerCheck(IKsign((x1087+(((1250.0)*x1084*x1085))+(((-1.0)*x1081*x1087))+(((625.0)*(pz*pz)))+(((625.0)*x1081*(px*px))))),-1);
if(!x1088.valid){
continue;
}
CheckValue<IkReal> x1089 = IKatan2WithCheck(IkReal((((pz*x1086))+(((-1.0)*x1083*x1085))+(((-1.0)*x1083*x1084))+(((-134.4375)*x1085))+(((-134.4375)*x1084)))),IkReal(((((-1.0)*pz*x1083))+(((-134.4375)*pz))+(((-1.0)*x1085*x1086))+(((-1.0)*x1084*x1086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1089.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1088.value)))+(x1089.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1090=IKcos(j1);
IkReal x1091=IKsin(j1);
IkReal x1092=((0.2688)*sj4);
IkReal x1093=((0.2688)*cj4);
IkReal x1094=(cj0*px);
IkReal x1095=((1.0)*py*sj0);
IkReal x1096=(pz*x1090);
IkReal x1097=(py*sj0*x1091);
evalcond[0]=((((-1.0)*x1091*x1092))+(((0.2151)*x1090))+pz+((x1090*x1093)));
evalcond[1]=((0.2151)+x1096+x1097+x1093+((x1091*x1094)));
evalcond[2]=((((-1.0)*x1090*x1094))+(((-1.0)*x1090*x1095))+(((-1.0)*x1092))+((pz*x1091)));
evalcond[3]=((((-0.2151)*x1091))+(((-1.0)*x1091*x1093))+(((-1.0)*x1090*x1092))+(((-1.0)*x1095))+(((-1.0)*x1094)));
evalcond[4]=((0.00375462)+(((-0.2982)*px*sj0))+(((-0.4302)*x1096))+(((-0.4302)*x1097))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.4302)*x1091*x1094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1098=(cj0*px);
IkReal x1099=((625.0)*pz);
IkReal x1100=((168.0)*cj4);
IkReal x1101=(py*sj0);
CheckValue<IkReal> x1102 = IKatan2WithCheck(IkReal(((-28.91750625)+(((-45.1584)*(cj4*cj4)))+(((-72.2736)*cj4))+((pz*x1099)))),IkReal(((((-45.1584)*cj4*sj4))+(((-1.0)*x1099*x1101))+(((-36.1368)*sj4))+(((-1.0)*x1098*x1099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1102.valid){
continue;
}
CheckValue<IkReal> x1103=IKPowWithIntegerCheck(IKsign((((x1098*x1100))+(((168.0)*pz*sj4))+(((134.4375)*x1101))+(((134.4375)*x1098))+((x1100*x1101)))),-1);
if(!x1103.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1102.value)+(((1.5707963267949)*(x1103.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1104=IKcos(j1);
IkReal x1105=IKsin(j1);
IkReal x1106=((0.2688)*sj4);
IkReal x1107=((0.2688)*cj4);
IkReal x1108=(cj0*px);
IkReal x1109=((1.0)*py*sj0);
IkReal x1110=(pz*x1104);
IkReal x1111=(py*sj0*x1105);
evalcond[0]=((((0.2151)*x1104))+((x1104*x1107))+pz+(((-1.0)*x1105*x1106)));
evalcond[1]=((0.2151)+x1107+x1111+x1110+((x1105*x1108)));
evalcond[2]=((((-1.0)*x1104*x1108))+((pz*x1105))+(((-1.0)*x1104*x1109))+(((-1.0)*x1106)));
evalcond[3]=((((-1.0)*x1108))+(((-1.0)*x1104*x1106))+(((-0.2151)*x1105))+(((-1.0)*x1109))+(((-1.0)*x1105*x1107)));
evalcond[4]=((0.00375462)+(((-0.2982)*px*sj0))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.4302)*x1111))+(((-0.4302)*x1110))+(((-0.4302)*x1105*x1108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1112=(py*sj0);
IkReal x1113=(cj0*px);
IkReal x1114=((105000.0)*sj4);
IkReal x1115=((105000.0)*cj4);
CheckValue<IkReal> x1116=IKPowWithIntegerCheck(IKsign(((-46297.44140625)+(((-45171.0)*cj4)))),-1);
if(!x1116.valid){
continue;
}
CheckValue<IkReal> x1117 = IKatan2WithCheck(IkReal((((x1113*x1115))+((x1112*x1115))+(((-1.0)*pz*x1114))+(((84023.4375)*x1112))+(((84023.4375)*x1113)))),IkReal((((x1113*x1114))+((x1112*x1114))+(((84023.4375)*pz))+((pz*x1115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1117.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1116.value)))+(x1117.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1118=IKcos(j1);
IkReal x1119=IKsin(j1);
IkReal x1120=((0.2688)*sj4);
IkReal x1121=((0.2688)*cj4);
IkReal x1122=(cj0*px);
IkReal x1123=((1.0)*py*sj0);
IkReal x1124=(pz*x1118);
IkReal x1125=(py*sj0*x1119);
evalcond[0]=((((0.2151)*x1118))+pz+(((-1.0)*x1119*x1120))+((x1118*x1121)));
evalcond[1]=((0.2151)+x1121+x1124+x1125+((x1119*x1122)));
evalcond[2]=((((-1.0)*x1118*x1122))+(((-1.0)*x1120))+((pz*x1119))+(((-1.0)*x1118*x1123)));
evalcond[3]=((((-1.0)*x1122))+(((-1.0)*x1123))+(((-0.2151)*x1119))+(((-1.0)*x1119*x1121))+(((-1.0)*x1118*x1120)));
evalcond[4]=((0.00375462)+(((-0.2982)*px*sj0))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.4302)*x1124))+(((-0.4302)*x1125))+(((-0.4302)*x1119*x1122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=0;
sj2=0;
cj2=1.0;
j4=0;
sj4=0;
cj4=1.0;
j1eval[0]=IKabs((((cj0*px))+((py*sj0))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1126=(cj0*px);
IkReal x1127=(py*sj0);
op[0]=(x1126+x1127);
op[1]=0;
op[2]=((((-1.0)*x1126))+(((-1.0)*x1127)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j4, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=0;
sj2=0;
cj2=1.0;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j1eval[0]=IKabs((((cj0*px))+((py*sj0))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1128=(cj0*px);
IkReal x1129=(py*sj0);
op[0]=(x1128+x1129);
op[1]=0;
op[2]=((((-1.0)*x1129))+(((-1.0)*x1128)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j4=0;
sj4=0;
cj4=1.0;
j1eval[0]=IKabs((((cj0*px))+((py*sj0))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1130=(cj0*px);
IkReal x1131=(py*sj0);
op[0]=(x1131+x1130);
op[1]=0;
op[2]=((((-1.0)*x1131))+(((-1.0)*x1130)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j4, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j4=3.14159265358979;
sj4=0;
cj4=-1.0;
j1eval[0]=IKabs((((cj0*px))+((py*sj0))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1132=(cj0*px);
IkReal x1133=(py*sj0);
op[0]=(x1133+x1132);
op[1]=0;
op[2]=((((-1.0)*x1132))+(((-1.0)*x1133)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1134=((625.0)*pz);
IkReal x1135=(cj0*px);
IkReal x1136=(pz*sj2);
IkReal x1137=(py*sj0);
IkReal x1138=((105000.0)*sj4);
IkReal x1139=((168.0)*sj4);
IkReal x1140=(sj2*sj4);
CheckValue<IkReal> x1141=IKPowWithIntegerCheck(((((-168.0)*cj4*x1136))+(((-1.0)*x1135*x1139))+(((-1.0)*x1137*x1139))+(((-134.4375)*x1136))),-1);
if(!x1141.valid){
continue;
}
CheckValue<IkReal> x1142=IKPowWithIntegerCheck(((((-105000.0)*cj4*x1136))+(((-1.0)*x1135*x1138))+(((-1.0)*x1137*x1138))+(((-84023.4375)*x1136))),-1);
if(!x1142.valid){
continue;
}
if( IKabs(((x1141.value)*(((((-36.1368)*x1140))+(((-45.1584)*cj4*x1140))+(((-1.0)*x1134*x1137))+(((-1.0)*x1134*x1135)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1142.value)*(((28224.0)+(((-28224.0)*(cj4*cj4)))+(((-390625.0)*(pz*pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1141.value)*(((((-36.1368)*x1140))+(((-45.1584)*cj4*x1140))+(((-1.0)*x1134*x1137))+(((-1.0)*x1134*x1135))))))+IKsqr(((x1142.value)*(((28224.0)+(((-28224.0)*(cj4*cj4)))+(((-390625.0)*(pz*pz)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1141.value)*(((((-36.1368)*x1140))+(((-45.1584)*cj4*x1140))+(((-1.0)*x1134*x1137))+(((-1.0)*x1134*x1135))))), ((x1142.value)*(((28224.0)+(((-28224.0)*(cj4*cj4)))+(((-390625.0)*(pz*pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1143=IKcos(j1);
IkReal x1144=IKsin(j1);
IkReal x1145=(cj0*px);
IkReal x1146=(cj0*py);
IkReal x1147=((0.2688)*sj4);
IkReal x1148=(py*sj0);
IkReal x1149=((0.4302)*cj2);
IkReal x1150=((0.2688)*cj4);
IkReal x1151=(px*sj0);
IkReal x1152=(sj2*x1144);
IkReal x1153=((1.0)*x1143);
IkReal x1154=(sj2*x1143);
IkReal x1155=((1.0)*cj2*x1144);
evalcond[0]=((((-0.2151)*x1154))+pz+(((-1.0)*x1144*x1147))+(((-1.0)*x1150*x1154)));
evalcond[1]=(((pz*x1144))+(((-1.0)*x1147))+(((-1.0)*x1148*x1153))+(((-1.0)*x1145*x1153)));
evalcond[2]=((((-1.0)*x1143*x1147))+(((-1.0)*x1148))+(((-1.0)*x1145))+((x1150*x1152))+(((0.2151)*x1152)));
evalcond[3]=(((sj2*x1146))+(((-1.0)*cj2*pz*x1153))+(((-1.0)*x1148*x1155))+(((-1.0)*x1145*x1155))+(((-1.0)*sj2*x1151))+(((-0.1491)*sj2)));
evalcond[4]=((0.2151)+x1150+((cj2*x1151))+(((-1.0)*pz*sj2*x1153))+(((-1.0)*cj2*x1146))+(((0.1491)*cj2))+(((-1.0)*x1148*x1152))+(((-1.0)*x1145*x1152)));
evalcond[5]=((0.00375462)+(((-1.0)*x1149*x1151))+((x1146*x1149))+(((0.4302)*x1145*x1152))+(((-1.0)*pp))+(((0.4302)*x1148*x1152))+(((-0.2982)*x1151))+(((0.4302)*pz*x1154))+(((0.2982)*x1146))+(((-0.06414282)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1156=cj2*cj2;
IkReal x1157=(cj2*pz);
IkReal x1158=(py*sj0);
IkReal x1159=(cj2*sj2);
IkReal x1160=((134.4375)*px);
IkReal x1161=((168.0)*sj4);
IkReal x1162=(cj0*py);
IkReal x1163=((168.0)*cj4);
IkReal x1164=((25.0488)*cj4);
IkReal x1165=(px*x1163);
IkReal x1166=(sj0*x1156);
CheckValue<IkReal> x1167=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1158*x1159*x1163))+((x1157*x1161))+(((-1.0)*cj0*x1159*x1165))+(((-1.0)*cj0*x1159*x1160))+(((-134.4375)*x1158*x1159)))),-1);
if(!x1167.valid){
continue;
}
CheckValue<IkReal> x1168 = IKatan2WithCheck(IkReal(((20.04463125)+(((-1.0)*x1156*x1164))+x1164+((sj0*x1165))+((sj0*x1160))+(((-1.0)*x1162*x1163))+(((134.4375)*x1156*x1162))+(((-134.4375)*x1162))+(((625.0)*pz*x1157))+(((-1.0)*x1160*x1166))+((x1156*x1162*x1163))+(((-20.04463125)*x1156))+(((-1.0)*x1165*x1166)))),IkReal(((((-25.0488)*sj2*sj4))+(((-625.0)*cj0*px*x1157))+((sj2*x1161*x1162))+(((-1.0)*px*sj0*sj2*x1161))+(((-625.0)*x1157*x1158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1168.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1167.value)))+(x1168.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1169=IKcos(j1);
IkReal x1170=IKsin(j1);
IkReal x1171=(cj0*px);
IkReal x1172=(cj0*py);
IkReal x1173=((0.2688)*sj4);
IkReal x1174=(py*sj0);
IkReal x1175=((0.4302)*cj2);
IkReal x1176=((0.2688)*cj4);
IkReal x1177=(px*sj0);
IkReal x1178=(sj2*x1170);
IkReal x1179=((1.0)*x1169);
IkReal x1180=(sj2*x1169);
IkReal x1181=((1.0)*cj2*x1170);
evalcond[0]=((((-1.0)*x1176*x1180))+(((-0.2151)*x1180))+pz+(((-1.0)*x1170*x1173)));
evalcond[1]=((((-1.0)*x1171*x1179))+((pz*x1170))+(((-1.0)*x1173))+(((-1.0)*x1174*x1179)));
evalcond[2]=(((x1176*x1178))+(((0.2151)*x1178))+(((-1.0)*x1169*x1173))+(((-1.0)*x1171))+(((-1.0)*x1174)));
evalcond[3]=((((-1.0)*x1171*x1181))+(((-1.0)*sj2*x1177))+(((-1.0)*cj2*pz*x1179))+(((-0.1491)*sj2))+(((-1.0)*x1174*x1181))+((sj2*x1172)));
evalcond[4]=((0.2151)+x1176+(((0.1491)*cj2))+(((-1.0)*pz*sj2*x1179))+(((-1.0)*x1174*x1178))+((cj2*x1177))+(((-1.0)*x1171*x1178))+(((-1.0)*cj2*x1172)));
evalcond[5]=((0.00375462)+(((0.4302)*x1171*x1178))+(((-0.2982)*x1177))+(((0.4302)*pz*x1180))+(((0.2982)*x1172))+(((-1.0)*pp))+((x1172*x1175))+(((-1.0)*x1175*x1177))+(((0.4302)*x1174*x1178))+(((-0.06414282)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1182=cj2*cj2;
IkReal x1183=((45171.0)*cj4);
IkReal x1184=((84023.4375)*sj2);
IkReal x1185=(py*sj0);
IkReal x1186=(cj0*px);
IkReal x1187=((105000.0)*sj4);
IkReal x1188=((105000.0)*cj4*sj2);
CheckValue<IkReal> x1189 = IKatan2WithCheck(IkReal((((x1186*x1188))+((x1184*x1185))+((x1184*x1186))+((pz*x1187))+((x1185*x1188)))),IkReal((((pz*x1188))+((pz*x1184))+(((-1.0)*x1186*x1187))+(((-1.0)*x1185*x1187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1189.valid){
continue;
}
CheckValue<IkReal> x1190=IKPowWithIntegerCheck(IKsign(((46297.44140625)+x1183+(((-18073.44140625)*x1182))+(((-28224.0)*x1182*(cj4*cj4)))+(((-1.0)*x1182*x1183)))),-1);
if(!x1190.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1189.value)+(((1.5707963267949)*(x1190.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1191=IKcos(j1);
IkReal x1192=IKsin(j1);
IkReal x1193=(cj0*px);
IkReal x1194=(cj0*py);
IkReal x1195=((0.2688)*sj4);
IkReal x1196=(py*sj0);
IkReal x1197=((0.4302)*cj2);
IkReal x1198=((0.2688)*cj4);
IkReal x1199=(px*sj0);
IkReal x1200=(sj2*x1192);
IkReal x1201=((1.0)*x1191);
IkReal x1202=(sj2*x1191);
IkReal x1203=((1.0)*cj2*x1192);
evalcond[0]=(pz+(((-0.2151)*x1202))+(((-1.0)*x1192*x1195))+(((-1.0)*x1198*x1202)));
evalcond[1]=((((-1.0)*x1196*x1201))+((pz*x1192))+(((-1.0)*x1195))+(((-1.0)*x1193*x1201)));
evalcond[2]=((((-1.0)*x1191*x1195))+(((0.2151)*x1200))+(((-1.0)*x1193))+(((-1.0)*x1196))+((x1198*x1200)));
evalcond[3]=((((-1.0)*x1196*x1203))+(((-1.0)*cj2*pz*x1201))+((sj2*x1194))+(((-1.0)*sj2*x1199))+(((-0.1491)*sj2))+(((-1.0)*x1193*x1203)));
evalcond[4]=((0.2151)+(((-1.0)*x1193*x1200))+x1198+(((0.1491)*cj2))+(((-1.0)*cj2*x1194))+(((-1.0)*pz*sj2*x1201))+((cj2*x1199))+(((-1.0)*x1196*x1200)));
evalcond[5]=((0.00375462)+(((0.2982)*x1194))+(((0.4302)*x1193*x1200))+((x1194*x1197))+(((-1.0)*x1197*x1199))+(((0.4302)*x1196*x1200))+(((-0.2982)*x1199))+(((-1.0)*pp))+(((0.4302)*pz*x1202))+(((-0.06414282)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((-1.35491071428571)+(((-3.7202380952381)*px*sj0))+(((3.7202380952381)*cj0*py)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((0.15667884)+(((-0.4302)*cj0*py))+(((0.11563776)*(IKcos(j4))))+(((0.4302)*px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1204=((625.0)*cj3);
IkReal x1205=(py*sj0);
IkReal x1206=((625.0)*sj3);
IkReal x1207=(cj0*px);
j1eval[0]=sj4;
j1eval[1]=IKsign(sj4);
j1eval[2]=((IKabs((((x1204*x1205))+((x1204*x1207))+(((-1.0)*pz*x1206)))))+(IKabs((((x1205*x1206))+((pz*x1204))+((x1206*x1207))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1208=(pz*sj4);
IkReal x1209=pz*pz;
IkReal x1210=(py*pz*sj0);
IkReal x1211=(cj0*px*pz);
j1eval[0]=x1208;
j1eval[1]=IKsign(x1208);
j1eval[2]=((IKabs(((((-1.0)*sj3*x1209))+((cj3*x1211))+((cj3*x1210)))))+(IKabs((((sj3*x1211))+((sj3*x1210))+((cj3*x1209))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1212=cj4*cj4;
IkReal x1213=pz*pz;
IkReal x1214=(cj0*px);
IkReal x1215=((390625.0)*sj3);
IkReal x1216=((28224.0)*cj3);
IkReal x1217=((390625.0)*cj3);
IkReal x1218=((28224.0)*sj3);
IkReal x1219=(py*sj0*sj4);
IkReal x1220=(py*pz*sj0);
j1eval[0]=(x1219+((sj4*x1214)));
j1eval[1]=((IKabs((x1216+(((-1.0)*x1212*x1216))+(((-1.0)*x1215*x1220))+(((-1.0)*x1213*x1217))+(((-1.0)*pz*x1214*x1215)))))+(IKabs((x1218+((x1217*x1220))+(((-1.0)*x1212*x1218))+(((-1.0)*x1213*x1215))+((pz*x1214*x1217))))));
j1eval[2]=IKsign(((((105000.0)*sj4*x1214))+(((105000.0)*x1219))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1221=(py*sj0);
IkReal x1222=(cj0*px);
j1eval[0]=((IKabs((((sj3*x1221))+((sj3*x1222)))))+(IKabs((((cj3*x1221))+((cj3*x1222))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1223=(py*sj0);
IkReal x1224=((1.0)*cj3);
IkReal x1225=(cj0*px);
j1eval[0]=((IKabs(((((-1.0)*x1224*x1225))+(((-1.0)*x1223*x1224)))))+(IKabs((((sj3*x1223))+((sj3*x1225))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1226=(py*sj0);
IkReal x1227=((1.0)*cj3);
IkReal x1228=(cj0*px);
CheckValue<IkReal> x1230 = IKatan2WithCheck(IkReal(((((-1.0)*x1226*x1227))+(((-1.0)*x1227*x1228)))),IkReal((((sj3*x1226))+((sj3*x1228)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1230.valid){
continue;
}
IkReal x1229=x1230.value;
j1array[0]=((-1.0)*x1229);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1229)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1231=IKcos(j1);
IkReal x1232=IKsin(j1);
IkReal x1233=(py*sj0);
IkReal x1234=(cj0*px);
IkReal x1235=(sj3*x1231);
IkReal x1236=(cj3*x1232);
evalcond[0]=(((x1234*x1235))+((x1234*x1236))+((x1233*x1236))+((x1233*x1235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1237=(cj0*px);
IkReal x1238=(py*sj0);
CheckValue<IkReal> x1240 = IKatan2WithCheck(IkReal((((sj3*x1237))+((sj3*x1238)))),IkReal((((cj3*x1237))+((cj3*x1238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1240.valid){
continue;
}
IkReal x1239=x1240.value;
j1array[0]=((-1.0)*x1239);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1239)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1241=IKsin(j1);
IkReal x1242=IKcos(j1);
IkReal x1243=(cj0*px);
IkReal x1244=(py*sj0);
IkReal x1245=(sj3*x1241);
IkReal x1246=((1.0)*cj3*x1242);
evalcond[0]=((((-1.0)*x1244*x1246))+(((-1.0)*x1243*x1246))+((x1244*x1245))+((x1243*x1245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1247=(py*sj0);
IkReal x1248=(cj0*px);
j1eval[0]=((IKabs((((sj3*x1247))+((sj3*x1248)))))+(IKabs((((cj3*x1247))+((cj3*x1248))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1249=(py*sj0);
IkReal x1250=((1.0)*cj3);
IkReal x1251=(cj0*px);
j1eval[0]=((IKabs((((sj3*x1249))+((sj3*x1251)))))+(IKabs(((((-1.0)*x1249*x1250))+(((-1.0)*x1250*x1251))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1252=(py*sj0);
IkReal x1253=((1.0)*cj3);
IkReal x1254=(cj0*px);
CheckValue<IkReal> x1256 = IKatan2WithCheck(IkReal(((((-1.0)*x1253*x1254))+(((-1.0)*x1252*x1253)))),IkReal((((sj3*x1254))+((sj3*x1252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1256.valid){
continue;
}
IkReal x1255=x1256.value;
j1array[0]=((-1.0)*x1255);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1255)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1257=IKcos(j1);
IkReal x1258=IKsin(j1);
IkReal x1259=(py*sj0);
IkReal x1260=(cj0*px);
IkReal x1261=(sj3*x1257);
IkReal x1262=(cj3*x1258);
evalcond[0]=(((x1259*x1261))+((x1259*x1262))+((x1260*x1261))+((x1260*x1262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1263=(cj0*px);
IkReal x1264=(py*sj0);
CheckValue<IkReal> x1266 = IKatan2WithCheck(IkReal((((sj3*x1264))+((sj3*x1263)))),IkReal((((cj3*x1263))+((cj3*x1264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1266.valid){
continue;
}
IkReal x1265=x1266.value;
j1array[0]=((-1.0)*x1265);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1265)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1267=IKsin(j1);
IkReal x1268=IKcos(j1);
IkReal x1269=(cj0*px);
IkReal x1270=(py*sj0);
IkReal x1271=(sj3*x1267);
IkReal x1272=((1.0)*cj3*x1268);
evalcond[0]=(((x1269*x1271))+(((-1.0)*x1270*x1272))+(((-1.0)*x1269*x1272))+((x1270*x1271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1273=cj4*cj4;
IkReal x1274=pz*pz;
IkReal x1275=((390625.0)*sj3);
IkReal x1276=(cj0*px);
IkReal x1277=((28224.0)*cj3);
IkReal x1278=(py*sj0);
IkReal x1279=((105000.0)*sj4);
IkReal x1280=((390625.0)*cj3);
IkReal x1281=((28224.0)*sj3);
CheckValue<IkReal> x1282=IKPowWithIntegerCheck(IKsign((((x1276*x1279))+((x1278*x1279)))),-1);
if(!x1282.valid){
continue;
}
CheckValue<IkReal> x1283 = IKatan2WithCheck(IkReal((x1277+(((-1.0)*pz*x1275*x1276))+(((-1.0)*pz*x1275*x1278))+(((-1.0)*x1273*x1277))+(((-1.0)*x1274*x1280)))),IkReal((x1281+((pz*x1278*x1280))+(((-1.0)*x1273*x1281))+(((-1.0)*x1274*x1275))+((pz*x1276*x1280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1283.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1282.value)))+(x1283.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1284=IKcos(j1);
IkReal x1285=IKsin(j1);
IkReal x1286=(cj0*px);
IkReal x1287=((0.2688)*sj4);
IkReal x1288=(cj3*pz);
IkReal x1289=(py*sj0);
IkReal x1290=(sj3*x1284);
IkReal x1291=(sj3*x1285);
IkReal x1292=(cj3*x1285);
IkReal x1293=((1.0)*cj3*x1284);
evalcond[0]=((((-1.0)*cj3*x1284*x1287))+((x1287*x1291))+pz);
evalcond[1]=((((-1.0)*x1289))+(((-1.0)*x1286))+((x1287*x1292))+((x1287*x1290)));
evalcond[2]=(((x1285*x1288))+(((-1.0)*x1286*x1293))+((x1286*x1291))+(((-1.0)*x1289*x1293))+((pz*x1290))+((x1289*x1291)));
evalcond[3]=(((x1286*x1292))+((x1286*x1290))+((x1284*x1288))+(((-1.0)*pz*x1291))+(((-1.0)*x1287))+((x1289*x1290))+((x1289*x1292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1294=pz*pz;
IkReal x1295=((625.0)*sj3);
IkReal x1296=((625.0)*cj3);
IkReal x1297=(py*pz*sj0);
IkReal x1298=((625.0)*cj0*px*pz);
CheckValue<IkReal> x1299 = IKatan2WithCheck(IkReal((((x1296*x1297))+((cj0*px*pz*x1296))+(((-1.0)*x1294*x1295)))),IkReal((((x1295*x1297))+((x1294*x1296))+((cj0*px*pz*x1295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1299.valid){
continue;
}
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(IKsign((pz*sj4)),-1);
if(!x1300.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1299.value)+(((1.5707963267949)*(x1300.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1301=IKcos(j1);
IkReal x1302=IKsin(j1);
IkReal x1303=(cj0*px);
IkReal x1304=((0.2688)*sj4);
IkReal x1305=(cj3*pz);
IkReal x1306=(py*sj0);
IkReal x1307=(sj3*x1301);
IkReal x1308=(sj3*x1302);
IkReal x1309=(cj3*x1302);
IkReal x1310=((1.0)*cj3*x1301);
evalcond[0]=(((x1304*x1308))+pz+(((-1.0)*cj3*x1301*x1304)));
evalcond[1]=((((-1.0)*x1303))+(((-1.0)*x1306))+((x1304*x1307))+((x1304*x1309)));
evalcond[2]=(((x1306*x1308))+(((-1.0)*x1306*x1310))+((pz*x1307))+((x1303*x1308))+(((-1.0)*x1303*x1310))+((x1302*x1305)));
evalcond[3]=(((x1306*x1309))+((x1306*x1307))+(((-1.0)*pz*x1308))+(((-1.0)*x1304))+((x1303*x1309))+((x1303*x1307))+((x1301*x1305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1311=((625.0)*cj3);
IkReal x1312=(py*sj0);
IkReal x1313=((625.0)*sj3);
IkReal x1314=(cj0*px);
CheckValue<IkReal> x1315=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1315.valid){
continue;
}
CheckValue<IkReal> x1316 = IKatan2WithCheck(IkReal((((x1311*x1314))+((x1311*x1312))+(((-1.0)*pz*x1313)))),IkReal((((pz*x1311))+((x1313*x1314))+((x1312*x1313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1316.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1315.value)))+(x1316.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1317=IKcos(j1);
IkReal x1318=IKsin(j1);
IkReal x1319=(cj0*px);
IkReal x1320=((0.2688)*sj4);
IkReal x1321=(cj3*pz);
IkReal x1322=(py*sj0);
IkReal x1323=(sj3*x1317);
IkReal x1324=(sj3*x1318);
IkReal x1325=(cj3*x1318);
IkReal x1326=((1.0)*cj3*x1317);
evalcond[0]=(((x1320*x1324))+(((-1.0)*cj3*x1317*x1320))+pz);
evalcond[1]=(((x1320*x1325))+((x1320*x1323))+(((-1.0)*x1319))+(((-1.0)*x1322)));
evalcond[2]=((((-1.0)*x1319*x1326))+((pz*x1323))+(((-1.0)*x1322*x1326))+((x1322*x1324))+((x1319*x1324))+((x1318*x1321)));
evalcond[3]=((((-1.0)*x1320))+((x1322*x1325))+((x1322*x1323))+((x1319*x1325))+((x1319*x1323))+(((-1.0)*pz*x1324))+((x1317*x1321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((-0.245535714285714)+(((3.7202380952381)*px*sj0))+(((-3.7202380952381)*cj0*py)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((0.0283932)+(((0.11563776)*(IKcos(j4))))+(((0.4302)*cj0*py))+(((-0.4302)*px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1327=((625.0)*cj3);
IkReal x1328=(py*sj0);
IkReal x1329=((625.0)*sj3);
IkReal x1330=(cj0*px);
j1eval[0]=sj4;
j1eval[1]=IKsign(sj4);
j1eval[2]=((IKabs(((((-1.0)*x1327*x1330))+(((-1.0)*x1327*x1328))+(((-1.0)*pz*x1329)))))+(IKabs((((x1329*x1330))+((x1328*x1329))+(((-1.0)*pz*x1327))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1331=(pz*sj4);
IkReal x1332=pz*pz;
IkReal x1333=((1.0)*cj3);
IkReal x1334=(py*pz*sj0);
IkReal x1335=(cj0*px*pz);
j1eval[0]=x1331;
j1eval[1]=IKsign(x1331);
j1eval[2]=((IKabs((((sj3*x1335))+((sj3*x1334))+(((-1.0)*x1332*x1333)))))+(IKabs(((((-1.0)*sj3*x1332))+(((-1.0)*x1333*x1334))+(((-1.0)*x1333*x1335))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1336=cj4*cj4;
IkReal x1337=pz*pz;
IkReal x1338=((390625.0)*sj3);
IkReal x1339=(cj0*px);
IkReal x1340=(py*sj0);
IkReal x1341=((1.0)*sj4);
IkReal x1342=((390625.0)*cj3);
IkReal x1343=((105000.0)*sj4);
IkReal x1344=((28224.0)*x1336);
j1eval[0]=((((-1.0)*x1340*x1341))+(((-1.0)*x1339*x1341)));
j1eval[1]=IKsign(((((-1.0)*x1340*x1343))+(((-1.0)*x1339*x1343))));
j1eval[2]=((IKabs((((x1337*x1338))+((pz*x1340*x1342))+(((-28224.0)*sj3))+((pz*x1339*x1342))+((sj3*x1344)))))+(IKabs((((pz*x1338*x1340))+(((-1.0)*cj3*x1344))+((pz*x1338*x1339))+(((28224.0)*cj3))+(((-1.0)*x1337*x1342))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1345=(py*sj0);
IkReal x1346=((1.0)*cj3);
IkReal x1347=(cj0*px);
j1eval[0]=((IKabs((((sj3*x1345))+((sj3*x1347)))))+(IKabs(((((-1.0)*x1346*x1347))+(((-1.0)*x1345*x1346))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1348=((1.0)*py*sj0);
IkReal x1349=((1.0)*cj0*px);
j1eval[0]=((IKabs(((((-1.0)*sj3*x1349))+(((-1.0)*sj3*x1348)))))+(IKabs(((((-1.0)*cj3*x1348))+(((-1.0)*cj3*x1349))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1350=((1.0)*cj3);
IkReal x1351=(cj0*px);
IkReal x1352=(py*sj0);
IkReal x1353=((1.0)*sj3);
CheckValue<IkReal> x1355 = IKatan2WithCheck(IkReal(((((-1.0)*x1350*x1352))+(((-1.0)*x1350*x1351)))),IkReal(((((-1.0)*x1352*x1353))+(((-1.0)*x1351*x1353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1355.valid){
continue;
}
IkReal x1354=x1355.value;
j1array[0]=((-1.0)*x1354);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1354)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1356=IKcos(j1);
IkReal x1357=IKsin(j1);
IkReal x1358=(py*sj0);
IkReal x1359=(cj0*px);
IkReal x1360=(sj3*x1356);
IkReal x1361=((1.0)*cj3*x1357);
evalcond[0]=(((x1358*x1360))+((x1359*x1360))+(((-1.0)*x1359*x1361))+(((-1.0)*x1358*x1361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1362=(py*sj0);
IkReal x1363=((1.0)*cj3);
IkReal x1364=(cj0*px);
CheckValue<IkReal> x1366 = IKatan2WithCheck(IkReal((((sj3*x1362))+((sj3*x1364)))),IkReal(((((-1.0)*x1362*x1363))+(((-1.0)*x1363*x1364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1366.valid){
continue;
}
IkReal x1365=x1366.value;
j1array[0]=((-1.0)*x1365);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1365)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1367=IKcos(j1);
IkReal x1368=IKsin(j1);
IkReal x1369=(cj0*px);
IkReal x1370=(py*sj0);
IkReal x1371=((1.0)*cj3*x1367);
IkReal x1372=((1.0)*sj3*x1368);
evalcond[0]=((((-1.0)*x1370*x1372))+(((-1.0)*x1370*x1371))+(((-1.0)*x1369*x1372))+(((-1.0)*x1369*x1371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1373=(py*sj0);
IkReal x1374=((1.0)*cj3);
IkReal x1375=(cj0*px);
j1eval[0]=((IKabs((((sj3*x1375))+((sj3*x1373)))))+(IKabs(((((-1.0)*x1374*x1375))+(((-1.0)*x1373*x1374))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1376=((1.0)*py*sj0);
IkReal x1377=((1.0)*cj0*px);
j1eval[0]=((IKabs(((((-1.0)*cj3*x1377))+(((-1.0)*cj3*x1376)))))+(IKabs(((((-1.0)*sj3*x1376))+(((-1.0)*sj3*x1377))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1378=((1.0)*cj3);
IkReal x1379=(cj0*px);
IkReal x1380=(py*sj0);
IkReal x1381=((1.0)*sj3);
CheckValue<IkReal> x1383 = IKatan2WithCheck(IkReal(((((-1.0)*x1378*x1380))+(((-1.0)*x1378*x1379)))),IkReal(((((-1.0)*x1380*x1381))+(((-1.0)*x1379*x1381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1383.valid){
continue;
}
IkReal x1382=x1383.value;
j1array[0]=((-1.0)*x1382);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1382)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1384=IKcos(j1);
IkReal x1385=IKsin(j1);
IkReal x1386=(py*sj0);
IkReal x1387=(cj0*px);
IkReal x1388=(sj3*x1384);
IkReal x1389=((1.0)*cj3*x1385);
evalcond[0]=(((x1387*x1388))+((x1386*x1388))+(((-1.0)*x1386*x1389))+(((-1.0)*x1387*x1389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1390=(py*sj0);
IkReal x1391=((1.0)*cj3);
IkReal x1392=(cj0*px);
CheckValue<IkReal> x1394 = IKatan2WithCheck(IkReal((((sj3*x1392))+((sj3*x1390)))),IkReal(((((-1.0)*x1391*x1392))+(((-1.0)*x1390*x1391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1394.valid){
continue;
}
IkReal x1393=x1394.value;
j1array[0]=((-1.0)*x1393);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1393)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1395=IKcos(j1);
IkReal x1396=IKsin(j1);
IkReal x1397=(cj0*px);
IkReal x1398=(py*sj0);
IkReal x1399=((1.0)*cj3*x1395);
IkReal x1400=((1.0)*sj3*x1396);
evalcond[0]=((((-1.0)*x1397*x1399))+(((-1.0)*x1398*x1400))+(((-1.0)*x1398*x1399))+(((-1.0)*x1397*x1400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1401=cj4*cj4;
IkReal x1402=pz*pz;
IkReal x1403=((390625.0)*sj3);
IkReal x1404=(cj0*px);
IkReal x1405=((390625.0)*cj3);
IkReal x1406=(py*sj0);
IkReal x1407=((105000.0)*sj4);
IkReal x1408=((28224.0)*x1401);
CheckValue<IkReal> x1409 = IKatan2WithCheck(IkReal((((pz*x1403*x1404))+((pz*x1403*x1406))+(((-1.0)*cj3*x1408))+(((-1.0)*x1402*x1405))+(((28224.0)*cj3)))),IkReal((((pz*x1405*x1406))+((pz*x1404*x1405))+(((-28224.0)*sj3))+((sj3*x1408))+((x1402*x1403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1409.valid){
continue;
}
CheckValue<IkReal> x1410=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1406*x1407))+(((-1.0)*x1404*x1407)))),-1);
if(!x1410.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1409.value)+(((1.5707963267949)*(x1410.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1411=IKcos(j1);
IkReal x1412=IKsin(j1);
IkReal x1413=((1.0)*cj3);
IkReal x1414=(cj0*px);
IkReal x1415=((1.0)*sj3);
IkReal x1416=((0.2688)*sj4);
IkReal x1417=(py*sj0);
IkReal x1418=(sj3*x1416);
IkReal x1419=(pz*x1412);
IkReal x1420=(pz*x1411);
IkReal x1421=(sj3*x1411);
IkReal x1422=(x1412*x1417);
evalcond[0]=(((cj3*x1411*x1416))+((x1412*x1418))+pz);
evalcond[1]=((((-1.0)*cj3*x1412*x1416))+((x1411*x1418))+(((-1.0)*x1417))+(((-1.0)*x1414)));
evalcond[2]=((((-1.0)*x1415*x1420))+(((-1.0)*x1415*x1422))+(((-1.0)*x1411*x1413*x1417))+(((-1.0)*x1411*x1413*x1414))+(((-1.0)*x1412*x1414*x1415))+((cj3*x1419)));
evalcond[3]=((((-1.0)*x1415*x1419))+(((-1.0)*x1416))+((x1414*x1421))+(((-1.0)*x1412*x1413*x1414))+(((-1.0)*x1413*x1422))+(((-1.0)*x1413*x1420))+((x1417*x1421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1423=pz*pz;
IkReal x1424=((625.0)*sj3);
IkReal x1425=((625.0)*cj3);
IkReal x1426=(py*pz*sj0);
IkReal x1427=((625.0)*cj0*px*pz);
CheckValue<IkReal> x1428 = IKatan2WithCheck(IkReal(((((-1.0)*x1425*x1426))+(((-1.0)*x1423*x1424))+(((-1.0)*cj0*px*pz*x1425)))),IkReal((((x1424*x1426))+((cj0*px*pz*x1424))+(((-1.0)*x1423*x1425)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1428.valid){
continue;
}
CheckValue<IkReal> x1429=IKPowWithIntegerCheck(IKsign((pz*sj4)),-1);
if(!x1429.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1428.value)+(((1.5707963267949)*(x1429.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1430=IKcos(j1);
IkReal x1431=IKsin(j1);
IkReal x1432=((1.0)*cj3);
IkReal x1433=(cj0*px);
IkReal x1434=((1.0)*sj3);
IkReal x1435=((0.2688)*sj4);
IkReal x1436=(py*sj0);
IkReal x1437=(sj3*x1435);
IkReal x1438=(pz*x1431);
IkReal x1439=(pz*x1430);
IkReal x1440=(sj3*x1430);
IkReal x1441=(x1431*x1436);
evalcond[0]=(((cj3*x1430*x1435))+pz+((x1431*x1437)));
evalcond[1]=((((-1.0)*x1433))+(((-1.0)*x1436))+((x1430*x1437))+(((-1.0)*cj3*x1431*x1435)));
evalcond[2]=((((-1.0)*x1434*x1439))+(((-1.0)*x1430*x1432*x1433))+(((-1.0)*x1430*x1432*x1436))+(((-1.0)*x1434*x1441))+(((-1.0)*x1431*x1433*x1434))+((cj3*x1438)));
evalcond[3]=((((-1.0)*x1434*x1438))+(((-1.0)*x1435))+((x1436*x1440))+((x1433*x1440))+(((-1.0)*x1432*x1441))+(((-1.0)*x1432*x1439))+(((-1.0)*x1431*x1432*x1433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1442=((625.0)*cj3);
IkReal x1443=(py*sj0);
IkReal x1444=((625.0)*sj3);
IkReal x1445=(cj0*px);
CheckValue<IkReal> x1446=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1446.valid){
continue;
}
CheckValue<IkReal> x1447 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x1444))+(((-1.0)*x1442*x1443))+(((-1.0)*x1442*x1445)))),IkReal((((x1444*x1445))+((x1443*x1444))+(((-1.0)*pz*x1442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1447.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1446.value)))+(x1447.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1448=IKcos(j1);
IkReal x1449=IKsin(j1);
IkReal x1450=((1.0)*cj3);
IkReal x1451=(cj0*px);
IkReal x1452=((1.0)*sj3);
IkReal x1453=((0.2688)*sj4);
IkReal x1454=(py*sj0);
IkReal x1455=(sj3*x1453);
IkReal x1456=(pz*x1449);
IkReal x1457=(pz*x1448);
IkReal x1458=(sj3*x1448);
IkReal x1459=(x1449*x1454);
evalcond[0]=(((cj3*x1448*x1453))+pz+((x1449*x1455)));
evalcond[1]=((((-1.0)*x1451))+(((-1.0)*x1454))+((x1448*x1455))+(((-1.0)*cj3*x1449*x1453)));
evalcond[2]=((((-1.0)*x1449*x1451*x1452))+(((-1.0)*x1448*x1450*x1454))+(((-1.0)*x1448*x1450*x1451))+((cj3*x1456))+(((-1.0)*x1452*x1457))+(((-1.0)*x1452*x1459)));
evalcond[3]=(((x1454*x1458))+(((-1.0)*x1453))+(((-1.0)*x1452*x1456))+(((-1.0)*x1449*x1450*x1451))+((x1451*x1458))+(((-1.0)*x1450*x1459))+(((-1.0)*x1450*x1457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1460=(cj0*py);
IkReal x1461=((931875.0)*cj2);
IkReal x1462=(px*sj0);
CheckValue<IkReal> x1463=IKPowWithIntegerCheck(cj3,-1);
if(!x1463.valid){
continue;
}
CheckValue<IkReal> x1464=IKPowWithIntegerCheck(sj2,-1);
if(!x1464.valid){
continue;
}
if( IKabs(((2.76726218148812e-6)*(x1463.value)*(x1464.value)*(((200446.3125)+(((-1344375.0)*x1460))+((x1461*x1462))+(((1344375.0)*x1462))+(((-11733.1875)*cj2))+(((-1.0)*x1460*x1461))+(((3125000.0)*cj2*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x1462))+(((-2.57874244537424)*x1460)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.76726218148812e-6)*(x1463.value)*(x1464.value)*(((200446.3125)+(((-1344375.0)*x1460))+((x1461*x1462))+(((1344375.0)*x1462))+(((-11733.1875)*cj2))+(((-1.0)*x1460*x1461))+(((3125000.0)*cj2*pp))))))+IKsqr(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x1462))+(((-2.57874244537424)*x1460))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.76726218148812e-6)*(x1463.value)*(x1464.value)*(((200446.3125)+(((-1344375.0)*x1460))+((x1461*x1462))+(((1344375.0)*x1462))+(((-11733.1875)*cj2))+(((-1.0)*x1460*x1461))+(((3125000.0)*cj2*pp))))), ((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x1462))+(((-2.57874244537424)*x1460))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1465=IKcos(j4);
IkReal x1466=(px*sj0);
IkReal x1467=(cj0*py);
evalcond[0]=((0.09629064)+(((0.2982)*x1467))+(((-0.2982)*x1466))+(((-1.0)*pp))+(((0.11563776)*x1465)));
evalcond[1]=((0.1491)+(((-0.2688)*cj3*sj2*(IKsin(j4))))+(((0.2688)*cj2*x1465))+x1466+(((0.2151)*cj2))+(((-1.0)*x1467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x1468=cj2*cj2;
IkReal x1469=cj3*cj3;
IkReal x1470=cj4*cj4;
IkReal x1471=(cj4*x1468);
IkReal x1472=((1.56162843398711)*x1470);
IkReal x1473=(cj2*cj3*sj2*sj4);
IkReal x1474=(x1468*x1469);
IkReal x1475=((28224.0)*x1469*x1470);
j1eval[0]=((-2.56162843398711)+(((-2.49930264993026)*x1473))+(((1.56162843398711)*x1469))+(((-3.12325686797422)*cj4*x1473))+((x1472*x1474))+(((-2.49930264993026)*cj4))+(((-1.56162843398711)*x1474))+(((-1.0)*x1469*x1472))+x1468+(((2.49930264993026)*x1471))+((x1468*x1472)));
j1eval[1]=IKsign(((-46297.44140625)+(((18073.44140625)*x1468))+(((28224.0)*x1468*x1470))+(((28224.0)*x1469))+(((-45171.0)*cj4))+(((-28224.0)*x1474))+(((-1.0)*x1475))+(((28224.0)*x1470*x1474))+(((-45171.0)*x1473))+(((45171.0)*x1471))+(((-56448.0)*cj4*x1473))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1476=cj2*cj2;
IkReal x1477=(sj2*sj4);
IkReal x1478=((168.0)*pz);
IkReal x1479=(cj2*cj3);
IkReal x1480=((1.24965132496513)*sj3);
IkReal x1481=(cj0*px);
IkReal x1482=((134.4375)*pz);
IkReal x1483=(py*sj0);
IkReal x1484=((168.0)*sj3);
IkReal x1485=((1.24965132496513)*cj4*pz);
j1eval[0]=(((x1476*x1485))+(((-1.0)*x1485))+(((-1.24965132496513)*pz*x1477*x1479))+(((-1.0)*pz))+((pz*x1476))+((x1477*x1480*x1483))+((x1477*x1480*x1481)));
j1eval[1]=IKsign((((x1477*x1481*x1484))+((x1476*x1482))+(((-1.0)*x1482))+((cj4*x1476*x1478))+(((-1.0)*cj4*x1478))+(((-1.0)*x1477*x1478*x1479))+((x1477*x1483*x1484))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1486=cj2*cj2;
IkReal x1487=(sj2*sj4);
IkReal x1488=(cj2*cj3);
IkReal x1489=(pz*sj3);
IkReal x1490=((168.0)*cj4);
IkReal x1491=(py*sj0);
IkReal x1492=((1.24965132496513)*cj4);
IkReal x1493=(cj0*px);
IkReal x1494=((1.24965132496513)*x1491);
IkReal x1495=(x1486*x1493);
j1eval[0]=((((-1.0)*x1487*x1488*x1494))+(((-1.24965132496513)*x1487*x1489))+(((-1.0)*x1492*x1493))+(((-1.0)*x1491))+(((-1.0)*x1493))+((x1486*x1491))+(((-1.24965132496513)*x1487*x1488*x1493))+((x1492*x1495))+(((-1.0)*x1491*x1492))+x1495+((x1486*x1491*x1492)));
j1eval[1]=IKsign(((((-134.4375)*x1491))+(((-134.4375)*x1493))+(((-168.0)*x1487*x1489))+(((-168.0)*x1487*x1488*x1491))+(((-168.0)*x1487*x1488*x1493))+(((134.4375)*x1495))+((x1486*x1490*x1491))+(((-1.0)*x1490*x1493))+(((-1.0)*x1490*x1491))+(((134.4375)*x1486*x1491))+((x1490*x1495))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1496=((625.0)*cj3);
IkReal x1497=(py*sj0);
IkReal x1498=((625.0)*sj3);
IkReal x1499=(cj0*px);
j1eval[0]=sj4;
j1eval[1]=IKsign(sj4);
j1eval[2]=((IKabs((((x1498*x1499))+((pz*x1496))+((x1497*x1498)))))+(IKabs((((x1496*x1497))+((x1496*x1499))+(((-1.0)*pz*x1498))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1500=(pz*sj4);
IkReal x1501=pz*pz;
IkReal x1502=(py*pz*sj0);
IkReal x1503=(cj0*px*pz);
j1eval[0]=x1500;
j1eval[1]=IKsign(x1500);
j1eval[2]=((IKabs((((cj3*x1502))+((cj3*x1503))+(((-1.0)*sj3*x1501)))))+(IKabs((((sj3*x1503))+((sj3*x1502))+((cj3*x1501))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1504=cj4*cj4;
IkReal x1505=pz*pz;
IkReal x1506=(cj0*px);
IkReal x1507=((390625.0)*sj3);
IkReal x1508=((28224.0)*cj3);
IkReal x1509=((390625.0)*cj3);
IkReal x1510=((28224.0)*sj3);
IkReal x1511=(py*sj0*sj4);
IkReal x1512=(py*pz*sj0);
j1eval[0]=(x1511+((sj4*x1506)));
j1eval[1]=((IKabs(((((-1.0)*x1504*x1508))+(((-1.0)*x1507*x1512))+x1508+(((-1.0)*x1505*x1509))+(((-1.0)*pz*x1506*x1507)))))+(IKabs((((x1509*x1512))+(((-1.0)*x1504*x1510))+((pz*x1506*x1509))+x1510+(((-1.0)*x1505*x1507))))));
j1eval[2]=IKsign(((((105000.0)*x1511))+(((105000.0)*sj4*x1506))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1513=(py*sj0);
IkReal x1514=(cj0*px);
j1eval[0]=((IKabs((((sj3*x1514))+((sj3*x1513)))))+(IKabs((((cj3*x1514))+((cj3*x1513))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1515=(py*sj0);
IkReal x1516=((1.0)*cj3);
IkReal x1517=(cj0*px);
j1eval[0]=((IKabs(((((-1.0)*x1516*x1517))+(((-1.0)*x1515*x1516)))))+(IKabs((((sj3*x1515))+((sj3*x1517))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1518=(py*sj0);
IkReal x1519=((1.0)*cj3);
IkReal x1520=(cj0*px);
CheckValue<IkReal> x1522 = IKatan2WithCheck(IkReal(((((-1.0)*x1519*x1520))+(((-1.0)*x1518*x1519)))),IkReal((((sj3*x1518))+((sj3*x1520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1522.valid){
continue;
}
IkReal x1521=x1522.value;
j1array[0]=((-1.0)*x1521);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1521)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1523=IKcos(j1);
IkReal x1524=IKsin(j1);
IkReal x1525=(py*sj0);
IkReal x1526=(cj0*px);
IkReal x1527=(sj3*x1523);
IkReal x1528=(cj3*x1524);
evalcond[0]=(((x1525*x1528))+((x1525*x1527))+((x1526*x1528))+((x1526*x1527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1529=(cj0*px);
IkReal x1530=(py*sj0);
CheckValue<IkReal> x1532 = IKatan2WithCheck(IkReal((((sj3*x1529))+((sj3*x1530)))),IkReal((((cj3*x1529))+((cj3*x1530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1532.valid){
continue;
}
IkReal x1531=x1532.value;
j1array[0]=((-1.0)*x1531);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1531)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1533=IKsin(j1);
IkReal x1534=IKcos(j1);
IkReal x1535=(cj0*px);
IkReal x1536=(py*sj0);
IkReal x1537=(sj3*x1533);
IkReal x1538=((1.0)*cj3*x1534);
evalcond[0]=(((x1536*x1537))+(((-1.0)*x1535*x1538))+((x1535*x1537))+(((-1.0)*x1536*x1538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1539=(py*sj0);
IkReal x1540=(cj0*px);
j1eval[0]=((IKabs((((sj3*x1539))+((sj3*x1540)))))+(IKabs((((cj3*x1539))+((cj3*x1540))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1541=(py*sj0);
IkReal x1542=((1.0)*cj3);
IkReal x1543=(cj0*px);
j1eval[0]=((IKabs(((((-1.0)*x1542*x1543))+(((-1.0)*x1541*x1542)))))+(IKabs((((sj3*x1541))+((sj3*x1543))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1544=(py*sj0);
IkReal x1545=((1.0)*cj3);
IkReal x1546=(cj0*px);
CheckValue<IkReal> x1548 = IKatan2WithCheck(IkReal(((((-1.0)*x1545*x1546))+(((-1.0)*x1544*x1545)))),IkReal((((sj3*x1546))+((sj3*x1544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1548.valid){
continue;
}
IkReal x1547=x1548.value;
j1array[0]=((-1.0)*x1547);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1547)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1549=IKcos(j1);
IkReal x1550=IKsin(j1);
IkReal x1551=(py*sj0);
IkReal x1552=(cj0*px);
IkReal x1553=(sj3*x1549);
IkReal x1554=(cj3*x1550);
evalcond[0]=(((x1551*x1553))+((x1551*x1554))+((x1552*x1553))+((x1552*x1554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1555=(cj0*px);
IkReal x1556=(py*sj0);
CheckValue<IkReal> x1558 = IKatan2WithCheck(IkReal((((sj3*x1555))+((sj3*x1556)))),IkReal((((cj3*x1555))+((cj3*x1556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1558.valid){
continue;
}
IkReal x1557=x1558.value;
j1array[0]=((-1.0)*x1557);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1557)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1559=IKsin(j1);
IkReal x1560=IKcos(j1);
IkReal x1561=(cj0*px);
IkReal x1562=(py*sj0);
IkReal x1563=(sj3*x1559);
IkReal x1564=((1.0)*cj3*x1560);
evalcond[0]=((((-1.0)*x1562*x1564))+((x1561*x1563))+((x1562*x1563))+(((-1.0)*x1561*x1564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1565=cj4*cj4;
IkReal x1566=pz*pz;
IkReal x1567=((390625.0)*sj3);
IkReal x1568=(cj0*px);
IkReal x1569=((28224.0)*cj3);
IkReal x1570=(py*sj0);
IkReal x1571=((105000.0)*sj4);
IkReal x1572=((390625.0)*cj3);
IkReal x1573=((28224.0)*sj3);
CheckValue<IkReal> x1574 = IKatan2WithCheck(IkReal(((((-1.0)*x1565*x1569))+(((-1.0)*x1566*x1572))+(((-1.0)*pz*x1567*x1568))+(((-1.0)*pz*x1567*x1570))+x1569)),IkReal(((((-1.0)*x1565*x1573))+((pz*x1570*x1572))+(((-1.0)*x1566*x1567))+x1573+((pz*x1568*x1572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1574.valid){
continue;
}
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(IKsign((((x1570*x1571))+((x1568*x1571)))),-1);
if(!x1575.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1574.value)+(((1.5707963267949)*(x1575.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1576=IKcos(j1);
IkReal x1577=IKsin(j1);
IkReal x1578=(cj0*px);
IkReal x1579=((0.2688)*sj4);
IkReal x1580=(cj3*pz);
IkReal x1581=(py*sj0);
IkReal x1582=(sj3*x1576);
IkReal x1583=(sj3*x1577);
IkReal x1584=(cj3*x1577);
IkReal x1585=((1.0)*cj3*x1576);
evalcond[0]=((((-1.0)*cj3*x1576*x1579))+pz+((x1579*x1583)));
evalcond[1]=((((-1.0)*x1581))+((x1579*x1584))+((x1579*x1582))+(((-1.0)*x1578)));
evalcond[2]=((((-1.0)*x1578*x1585))+((pz*x1582))+((x1577*x1580))+(((-1.0)*x1581*x1585))+((x1578*x1583))+((x1581*x1583)));
evalcond[3]=(((x1576*x1580))+(((-1.0)*pz*x1583))+(((-1.0)*x1579))+((x1578*x1582))+((x1578*x1584))+((x1581*x1582))+((x1581*x1584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1586=pz*pz;
IkReal x1587=((625.0)*sj3);
IkReal x1588=((625.0)*cj3);
IkReal x1589=(py*pz*sj0);
IkReal x1590=((625.0)*cj0*px*pz);
CheckValue<IkReal> x1591=IKPowWithIntegerCheck(IKsign((pz*sj4)),-1);
if(!x1591.valid){
continue;
}
CheckValue<IkReal> x1592 = IKatan2WithCheck(IkReal((((x1588*x1589))+(((-1.0)*x1586*x1587))+((cj0*px*pz*x1588)))),IkReal((((x1586*x1588))+((x1587*x1589))+((cj0*px*pz*x1587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1592.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1591.value)))+(x1592.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1593=IKcos(j1);
IkReal x1594=IKsin(j1);
IkReal x1595=(cj0*px);
IkReal x1596=((0.2688)*sj4);
IkReal x1597=(cj3*pz);
IkReal x1598=(py*sj0);
IkReal x1599=(sj3*x1593);
IkReal x1600=(sj3*x1594);
IkReal x1601=(cj3*x1594);
IkReal x1602=((1.0)*cj3*x1593);
evalcond[0]=((((-1.0)*cj3*x1593*x1596))+pz+((x1596*x1600)));
evalcond[1]=(((x1596*x1599))+((x1596*x1601))+(((-1.0)*x1598))+(((-1.0)*x1595)));
evalcond[2]=(((x1595*x1600))+((x1594*x1597))+(((-1.0)*x1595*x1602))+((pz*x1599))+((x1598*x1600))+(((-1.0)*x1598*x1602)));
evalcond[3]=((((-1.0)*x1596))+((x1595*x1601))+((x1593*x1597))+((x1598*x1599))+((x1598*x1601))+((x1595*x1599))+(((-1.0)*pz*x1600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1603=((625.0)*cj3);
IkReal x1604=(py*sj0);
IkReal x1605=((625.0)*sj3);
IkReal x1606=(cj0*px);
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x1605))+((x1603*x1604))+((x1603*x1606)))),IkReal((((x1605*x1606))+((x1604*x1605))+((pz*x1603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
CheckValue<IkReal> x1608=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1608.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1607.value)+(((1.5707963267949)*(x1608.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1609=IKcos(j1);
IkReal x1610=IKsin(j1);
IkReal x1611=(cj0*px);
IkReal x1612=((0.2688)*sj4);
IkReal x1613=(cj3*pz);
IkReal x1614=(py*sj0);
IkReal x1615=(sj3*x1609);
IkReal x1616=(sj3*x1610);
IkReal x1617=(cj3*x1610);
IkReal x1618=((1.0)*cj3*x1609);
evalcond[0]=((((-1.0)*cj3*x1609*x1612))+pz+((x1612*x1616)));
evalcond[1]=((((-1.0)*x1614))+(((-1.0)*x1611))+((x1612*x1615))+((x1612*x1617)));
evalcond[2]=(((pz*x1615))+(((-1.0)*x1611*x1618))+((x1614*x1616))+(((-1.0)*x1614*x1618))+((x1610*x1613))+((x1611*x1616)));
evalcond[3]=((((-1.0)*x1612))+((x1609*x1613))+((x1614*x1615))+((x1614*x1617))+(((-1.0)*pz*x1616))+((x1611*x1615))+((x1611*x1617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1619=((625.0)*cj3);
IkReal x1620=(py*sj0);
IkReal x1621=((625.0)*sj3);
IkReal x1622=(cj0*px);
j1eval[0]=sj4;
j1eval[1]=IKsign(sj4);
j1eval[2]=((IKabs((((x1620*x1621))+(((-1.0)*pz*x1619))+((x1621*x1622)))))+(IKabs(((((-1.0)*x1619*x1620))+(((-1.0)*x1619*x1622))+(((-1.0)*pz*x1621))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1623=(pz*sj4);
IkReal x1624=pz*pz;
IkReal x1625=((1.0)*cj3);
IkReal x1626=(py*pz*sj0);
IkReal x1627=(cj0*px*pz);
j1eval[0]=x1623;
j1eval[1]=IKsign(x1623);
j1eval[2]=((IKabs((((sj3*x1626))+((sj3*x1627))+(((-1.0)*x1624*x1625)))))+(IKabs(((((-1.0)*x1625*x1627))+(((-1.0)*x1625*x1626))+(((-1.0)*sj3*x1624))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1628=cj4*cj4;
IkReal x1629=pz*pz;
IkReal x1630=((390625.0)*sj3);
IkReal x1631=(cj0*px);
IkReal x1632=(py*sj0);
IkReal x1633=((1.0)*sj4);
IkReal x1634=((390625.0)*cj3);
IkReal x1635=((105000.0)*sj4);
IkReal x1636=((28224.0)*x1628);
j1eval[0]=((((-1.0)*x1632*x1633))+(((-1.0)*x1631*x1633)));
j1eval[1]=IKsign(((((-1.0)*x1632*x1635))+(((-1.0)*x1631*x1635))));
j1eval[2]=((IKabs(((((-1.0)*cj3*x1636))+(((28224.0)*cj3))+(((-1.0)*x1629*x1634))+((pz*x1630*x1632))+((pz*x1630*x1631)))))+(IKabs((((sj3*x1636))+((x1629*x1630))+(((-28224.0)*sj3))+((pz*x1632*x1634))+((pz*x1631*x1634))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1637=(py*sj0);
IkReal x1638=((1.0)*cj3);
IkReal x1639=(cj0*px);
j1eval[0]=((IKabs(((((-1.0)*x1638*x1639))+(((-1.0)*x1637*x1638)))))+(IKabs((((sj3*x1639))+((sj3*x1637))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1640=((1.0)*py*sj0);
IkReal x1641=((1.0)*cj0*px);
j1eval[0]=((IKabs(((((-1.0)*cj3*x1641))+(((-1.0)*cj3*x1640)))))+(IKabs(((((-1.0)*sj3*x1641))+(((-1.0)*sj3*x1640))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1642=((1.0)*cj3);
IkReal x1643=(cj0*px);
IkReal x1644=(py*sj0);
IkReal x1645=((1.0)*sj3);
CheckValue<IkReal> x1647 = IKatan2WithCheck(IkReal(((((-1.0)*x1642*x1643))+(((-1.0)*x1642*x1644)))),IkReal(((((-1.0)*x1644*x1645))+(((-1.0)*x1643*x1645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1647.valid){
continue;
}
IkReal x1646=x1647.value;
j1array[0]=((-1.0)*x1646);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1646)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1648=IKcos(j1);
IkReal x1649=IKsin(j1);
IkReal x1650=(py*sj0);
IkReal x1651=(cj0*px);
IkReal x1652=(sj3*x1648);
IkReal x1653=((1.0)*cj3*x1649);
evalcond[0]=(((x1650*x1652))+(((-1.0)*x1650*x1653))+((x1651*x1652))+(((-1.0)*x1651*x1653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1654=(py*sj0);
IkReal x1655=((1.0)*cj3);
IkReal x1656=(cj0*px);
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal((((sj3*x1656))+((sj3*x1654)))),IkReal(((((-1.0)*x1654*x1655))+(((-1.0)*x1655*x1656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
IkReal x1657=x1658.value;
j1array[0]=((-1.0)*x1657);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1657)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1659=IKcos(j1);
IkReal x1660=IKsin(j1);
IkReal x1661=(cj0*px);
IkReal x1662=(py*sj0);
IkReal x1663=((1.0)*cj3*x1659);
IkReal x1664=((1.0)*sj3*x1660);
evalcond[0]=((((-1.0)*x1662*x1664))+(((-1.0)*x1662*x1663))+(((-1.0)*x1661*x1664))+(((-1.0)*x1661*x1663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1665=(py*sj0);
IkReal x1666=((1.0)*cj3);
IkReal x1667=(cj0*px);
j1eval[0]=((IKabs(((((-1.0)*x1666*x1667))+(((-1.0)*x1665*x1666)))))+(IKabs((((sj3*x1665))+((sj3*x1667))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1668=((1.0)*py*sj0);
IkReal x1669=((1.0)*cj0*px);
j1eval[0]=((IKabs(((((-1.0)*sj3*x1668))+(((-1.0)*sj3*x1669)))))+(IKabs(((((-1.0)*cj3*x1669))+(((-1.0)*cj3*x1668))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1670=((1.0)*cj3);
IkReal x1671=(cj0*px);
IkReal x1672=(py*sj0);
IkReal x1673=((1.0)*sj3);
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal(((((-1.0)*x1670*x1672))+(((-1.0)*x1670*x1671)))),IkReal(((((-1.0)*x1672*x1673))+(((-1.0)*x1671*x1673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
IkReal x1674=x1675.value;
j1array[0]=((-1.0)*x1674);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1674)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1676=IKcos(j1);
IkReal x1677=IKsin(j1);
IkReal x1678=(py*sj0);
IkReal x1679=(cj0*px);
IkReal x1680=(sj3*x1676);
IkReal x1681=((1.0)*cj3*x1677);
evalcond[0]=((((-1.0)*x1678*x1681))+(((-1.0)*x1679*x1681))+((x1679*x1680))+((x1678*x1680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1682=(py*sj0);
IkReal x1683=((1.0)*cj3);
IkReal x1684=(cj0*px);
CheckValue<IkReal> x1686 = IKatan2WithCheck(IkReal((((sj3*x1684))+((sj3*x1682)))),IkReal(((((-1.0)*x1682*x1683))+(((-1.0)*x1683*x1684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1686.valid){
continue;
}
IkReal x1685=x1686.value;
j1array[0]=((-1.0)*x1685);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1685)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1687=IKcos(j1);
IkReal x1688=IKsin(j1);
IkReal x1689=(cj0*px);
IkReal x1690=(py*sj0);
IkReal x1691=((1.0)*cj3*x1687);
IkReal x1692=((1.0)*sj3*x1688);
evalcond[0]=((((-1.0)*x1690*x1692))+(((-1.0)*x1690*x1691))+(((-1.0)*x1689*x1692))+(((-1.0)*x1689*x1691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1693=cj4*cj4;
IkReal x1694=pz*pz;
IkReal x1695=((390625.0)*sj3);
IkReal x1696=(cj0*px);
IkReal x1697=((390625.0)*cj3);
IkReal x1698=(py*sj0);
IkReal x1699=((105000.0)*sj4);
IkReal x1700=((28224.0)*x1693);
CheckValue<IkReal> x1701=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1696*x1699))+(((-1.0)*x1698*x1699)))),-1);
if(!x1701.valid){
continue;
}
CheckValue<IkReal> x1702 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x1700))+((pz*x1695*x1696))+((pz*x1695*x1698))+(((-1.0)*x1694*x1697))+(((28224.0)*cj3)))),IkReal(((((-28224.0)*sj3))+((pz*x1697*x1698))+((pz*x1696*x1697))+((sj3*x1700))+((x1694*x1695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1702.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1701.value)))+(x1702.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1703=IKcos(j1);
IkReal x1704=IKsin(j1);
IkReal x1705=((1.0)*cj3);
IkReal x1706=(cj0*px);
IkReal x1707=((1.0)*sj3);
IkReal x1708=((0.2688)*sj4);
IkReal x1709=(py*sj0);
IkReal x1710=(sj3*x1708);
IkReal x1711=(pz*x1704);
IkReal x1712=(pz*x1703);
IkReal x1713=(sj3*x1703);
IkReal x1714=(x1704*x1709);
evalcond[0]=(((cj3*x1703*x1708))+pz+((x1704*x1710)));
evalcond[1]=((((-1.0)*cj3*x1704*x1708))+((x1703*x1710))+(((-1.0)*x1709))+(((-1.0)*x1706)));
evalcond[2]=((((-1.0)*x1703*x1705*x1706))+(((-1.0)*x1703*x1705*x1709))+(((-1.0)*x1707*x1712))+(((-1.0)*x1707*x1714))+((cj3*x1711))+(((-1.0)*x1704*x1706*x1707)));
evalcond[3]=((((-1.0)*x1707*x1711))+((x1709*x1713))+(((-1.0)*x1708))+((x1706*x1713))+(((-1.0)*x1705*x1714))+(((-1.0)*x1705*x1712))+(((-1.0)*x1704*x1705*x1706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1715=pz*pz;
IkReal x1716=((625.0)*sj3);
IkReal x1717=((625.0)*cj3);
IkReal x1718=(py*pz*sj0);
IkReal x1719=((625.0)*cj0*px*pz);
CheckValue<IkReal> x1720 = IKatan2WithCheck(IkReal(((((-1.0)*x1715*x1716))+(((-1.0)*cj0*px*pz*x1717))+(((-1.0)*x1717*x1718)))),IkReal((((cj0*px*pz*x1716))+((x1716*x1718))+(((-1.0)*x1715*x1717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1720.valid){
continue;
}
CheckValue<IkReal> x1721=IKPowWithIntegerCheck(IKsign((pz*sj4)),-1);
if(!x1721.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1720.value)+(((1.5707963267949)*(x1721.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1722=IKcos(j1);
IkReal x1723=IKsin(j1);
IkReal x1724=((1.0)*cj3);
IkReal x1725=(cj0*px);
IkReal x1726=((1.0)*sj3);
IkReal x1727=((0.2688)*sj4);
IkReal x1728=(py*sj0);
IkReal x1729=(sj3*x1727);
IkReal x1730=(pz*x1723);
IkReal x1731=(pz*x1722);
IkReal x1732=(sj3*x1722);
IkReal x1733=(x1723*x1728);
evalcond[0]=(((x1723*x1729))+pz+((cj3*x1722*x1727)));
evalcond[1]=(((x1722*x1729))+(((-1.0)*cj3*x1723*x1727))+(((-1.0)*x1725))+(((-1.0)*x1728)));
evalcond[2]=((((-1.0)*x1726*x1733))+(((-1.0)*x1726*x1731))+((cj3*x1730))+(((-1.0)*x1723*x1725*x1726))+(((-1.0)*x1722*x1724*x1725))+(((-1.0)*x1722*x1724*x1728)));
evalcond[3]=(((x1728*x1732))+(((-1.0)*x1723*x1724*x1725))+((x1725*x1732))+(((-1.0)*x1726*x1730))+(((-1.0)*x1724*x1733))+(((-1.0)*x1724*x1731))+(((-1.0)*x1727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1734=((625.0)*cj3);
IkReal x1735=(py*sj0);
IkReal x1736=((625.0)*sj3);
IkReal x1737=(cj0*px);
CheckValue<IkReal> x1738 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x1736))+(((-1.0)*x1734*x1735))+(((-1.0)*x1734*x1737)))),IkReal((((x1736*x1737))+(((-1.0)*pz*x1734))+((x1735*x1736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1738.valid){
continue;
}
CheckValue<IkReal> x1739=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1739.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1738.value)+(((1.5707963267949)*(x1739.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1740=IKcos(j1);
IkReal x1741=IKsin(j1);
IkReal x1742=((1.0)*cj3);
IkReal x1743=(cj0*px);
IkReal x1744=((1.0)*sj3);
IkReal x1745=((0.2688)*sj4);
IkReal x1746=(py*sj0);
IkReal x1747=(sj3*x1745);
IkReal x1748=(pz*x1741);
IkReal x1749=(pz*x1740);
IkReal x1750=(sj3*x1740);
IkReal x1751=(x1741*x1746);
evalcond[0]=(((cj3*x1740*x1745))+pz+((x1741*x1747)));
evalcond[1]=((((-1.0)*cj3*x1741*x1745))+(((-1.0)*x1743))+(((-1.0)*x1746))+((x1740*x1747)));
evalcond[2]=(((cj3*x1748))+(((-1.0)*x1744*x1751))+(((-1.0)*x1744*x1749))+(((-1.0)*x1740*x1742*x1746))+(((-1.0)*x1740*x1742*x1743))+(((-1.0)*x1741*x1743*x1744)));
evalcond[3]=(((x1746*x1750))+(((-1.0)*x1745))+((x1743*x1750))+(((-1.0)*x1744*x1748))+(((-1.0)*x1742*x1749))+(((-1.0)*x1742*x1751))+(((-1.0)*x1741*x1742*x1743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1752=cj2*cj2;
IkReal x1753=(sj3*sj4);
IkReal x1754=(cj2*cj4);
IkReal x1755=(cj3*sj4);
IkReal x1756=(px*sj2);
IkReal x1757=((625.0)*pz);
IkReal x1758=((168.0)*sj0);
IkReal x1759=((168.0)*cj4);
IkReal x1760=(cj2*sj2);
IkReal x1761=((134.4375)*sj0);
IkReal x1762=((168.0)*cj0);
IkReal x1763=((134.4375)*cj0);
IkReal x1764=(py*sj2);
IkReal x1765=(py*x1752);
IkReal x1766=(cj0*px*x1752);
CheckValue<IkReal> x1767=IKPowWithIntegerCheck(IKsign(((((-168.0)*pz*sj2*x1753))+((x1759*x1766))+(((-1.0)*cj2*x1755*x1756*x1762))+((cj4*x1758*x1765))+(((-1.0)*px*x1763))+(((-1.0)*py*x1755*x1758*x1760))+(((-1.0)*cj0*px*x1759))+(((-1.0)*cj4*py*x1758))+((px*x1752*x1763))+((x1761*x1765))+(((-1.0)*py*x1761)))),-1);
if(!x1767.valid){
continue;
}
CheckValue<IkReal> x1768 = IKatan2WithCheck(IkReal(((((-45.1584)*x1754*x1755))+((x1755*x1762*x1765))+((x1754*x1762*x1764))+(((-20.04463125)*x1760))+(((-72.2736)*cj4*sj2))+(((-36.1368)*cj2*x1755))+(((-1.0)*cj2*x1756*x1761))+((pz*sj2*x1757))+((py*x1760*x1763))+(((-28.91750625)*sj2))+(((-25.0488)*sj2*x1754))+(((-25.0488)*x1752*x1755))+(((-1.0)*x1754*x1756*x1758))+(((-45.1584)*sj2*(cj4*cj4)))+(((-1.0)*px*x1752*x1755*x1758)))),IkReal(((((-1.0)*sj0*x1757*x1764))+(((-36.1368)*x1753))+(((-1.0)*cj0*x1756*x1757))+(((-25.0488)*cj2*x1753))+(((-1.0)*cj2*px*x1753*x1758))+(((-45.1584)*cj4*x1753))+((cj2*py*x1753*x1762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1768.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1767.value)))+(x1768.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1769=IKcos(j1);
IkReal x1770=IKsin(j1);
IkReal x1771=((0.2688)*sj4);
IkReal x1772=((1.0)*cj0);
IkReal x1773=(sj2*sj3);
IkReal x1774=(cj3*px);
IkReal x1775=((0.4302)*sj2);
IkReal x1776=(py*sj0);
IkReal x1777=(cj2*sj3);
IkReal x1778=((1.0)*pz);
IkReal x1779=((0.2151)*sj2);
IkReal x1780=(px*sj0);
IkReal x1781=(cj0*py);
IkReal x1782=((0.4302)*cj2);
IkReal x1783=(cj3*sj2);
IkReal x1784=((0.2688)*cj4);
IkReal x1785=(cj0*px);
IkReal x1786=(sj3*x1770);
IkReal x1787=(cj3*x1769);
IkReal x1788=(pz*x1769);
IkReal x1789=(sj3*x1769);
IkReal x1790=(sj2*x1770);
IkReal x1791=(sj2*x1769);
IkReal x1792=(cj2*cj3*x1770);
IkReal x1793=(x1770*x1785);
evalcond[0]=((((-1.0)*cj2*x1771*x1787))+pz+(((-1.0)*x1784*x1791))+((x1771*x1786))+(((-1.0)*x1769*x1779)));
evalcond[1]=((((-1.0)*x1776))+((x1770*x1779))+(((-1.0)*px*x1772))+((x1784*x1790))+((x1771*x1789))+((x1771*x1792)));
evalcond[2]=((0.2151)+x1784+(((-1.0)*x1776*x1790))+((cj2*x1780))+(((0.1491)*cj2))+(((-1.0)*cj2*py*x1772))+(((-1.0)*x1778*x1791))+(((-1.0)*px*x1772*x1790)));
evalcond[3]=((0.00375462)+((x1775*x1793))+((x1775*x1788))+((x1770*x1775*x1776))+(((-0.2982)*x1780))+(((-1.0)*pp))+(((0.2982)*x1781))+(((-1.0)*x1780*x1782))+((x1781*x1782))+(((-0.06414282)*cj2)));
evalcond[4]=(((cj3*pz*x1770))+((x1777*x1793))+((x1777*x1788))+(((-1.0)*x1776*x1787))+((x1770*x1776*x1777))+(((0.1491)*x1773))+(((-1.0)*x1769*x1772*x1774))+((x1773*x1780))+(((-1.0)*py*x1772*x1773)));
evalcond[5]=(((cj2*pz*x1787))+(((0.1491)*x1783))+((sj0*sj2*x1774))+(((-1.0)*py*x1772*x1783))+(((-1.0)*x1771))+((cj0*cj2*x1770*x1774))+((x1785*x1789))+((x1776*x1789))+(((-1.0)*x1778*x1786))+((x1776*x1792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1794=cj2*cj2;
IkReal x1795=cj0*cj0;
IkReal x1796=py*py;
IkReal x1797=(sj3*sj4);
IkReal x1798=((168.0)*cj4);
IkReal x1799=(cj3*sj4);
IkReal x1800=((45.1584)*cj4);
IkReal x1801=(cj0*sj2);
IkReal x1802=(cj2*py);
IkReal x1803=((625.0)*pz);
IkReal x1804=((168.0)*py);
IkReal x1805=(sj0*sj2);
IkReal x1806=((625.0)*sj2);
IkReal x1807=(cj4*sj2);
IkReal x1808=((25.0488)*cj2);
IkReal x1809=(cj2*sj2);
IkReal x1810=((168.0)*px);
IkReal x1811=(pz*x1794);
IkReal x1812=(cj2*px*sj0);
CheckValue<IkReal> x1813 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1803*x1805))+((cj2*sj0*x1797*x1810))+(((36.1368)*x1797))+(((-1.0)*px*x1801*x1803))+((x1797*x1808))+((x1797*x1800))+(((-168.0)*cj0*x1797*x1802)))),IkReal(((((-36.1368)*cj2*x1799))+(((-1.0)*x1795*x1796*x1806))+(((-1.0)*cj2*px*x1798*x1805))+((cj0*x1794*x1799*x1804))+((x1798*x1801*x1802))+(((1250.0)*px*py*sj0*x1801))+(((-1.0)*x1800*x1807))+(((-25.0488)*x1794*x1799))+((x1796*x1806))+(((-1.0)*sj0*x1794*x1799*x1810))+(((-20.04463125)*x1809))+(((-28.91750625)*sj2))+(((-72.2736)*x1807))+(((-134.4375)*cj2*px*x1805))+((x1795*x1806*(px*px)))+(((-1.0)*cj2*x1799*x1800))+(((134.4375)*x1801*x1802))+(((-1.0)*x1807*x1808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1813.valid){
continue;
}
CheckValue<IkReal> x1814=IKPowWithIntegerCheck(IKsign((((x1797*x1804*x1805))+(((134.4375)*x1811))+((x1798*x1811))+(((-134.4375)*pz))+(((-1.0)*pz*x1798))+(((-168.0)*pz*x1799*x1809))+((x1797*x1801*x1810)))),-1);
if(!x1814.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1813.value)+(((1.5707963267949)*(x1814.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1815=IKcos(j1);
IkReal x1816=IKsin(j1);
IkReal x1817=((0.2688)*sj4);
IkReal x1818=((1.0)*cj0);
IkReal x1819=(sj2*sj3);
IkReal x1820=(cj3*px);
IkReal x1821=((0.4302)*sj2);
IkReal x1822=(py*sj0);
IkReal x1823=(cj2*sj3);
IkReal x1824=((1.0)*pz);
IkReal x1825=((0.2151)*sj2);
IkReal x1826=(px*sj0);
IkReal x1827=(cj0*py);
IkReal x1828=((0.4302)*cj2);
IkReal x1829=(cj3*sj2);
IkReal x1830=((0.2688)*cj4);
IkReal x1831=(cj0*px);
IkReal x1832=(sj3*x1816);
IkReal x1833=(cj3*x1815);
IkReal x1834=(pz*x1815);
IkReal x1835=(sj3*x1815);
IkReal x1836=(sj2*x1816);
IkReal x1837=(sj2*x1815);
IkReal x1838=(cj2*cj3*x1816);
IkReal x1839=(x1816*x1831);
evalcond[0]=((((-1.0)*cj2*x1817*x1833))+pz+((x1817*x1832))+(((-1.0)*x1815*x1825))+(((-1.0)*x1830*x1837)));
evalcond[1]=((((-1.0)*x1822))+((x1830*x1836))+((x1816*x1825))+((x1817*x1835))+((x1817*x1838))+(((-1.0)*px*x1818)));
evalcond[2]=((0.2151)+(((-1.0)*px*x1818*x1836))+(((-1.0)*x1822*x1836))+(((0.1491)*cj2))+(((-1.0)*cj2*py*x1818))+x1830+((cj2*x1826))+(((-1.0)*x1824*x1837)));
evalcond[3]=((0.00375462)+(((0.2982)*x1827))+((x1821*x1839))+((x1821*x1834))+((x1827*x1828))+(((-1.0)*x1826*x1828))+(((-1.0)*pp))+((x1816*x1821*x1822))+(((-0.2982)*x1826))+(((-0.06414282)*cj2)));
evalcond[4]=(((cj3*pz*x1816))+(((0.1491)*x1819))+(((-1.0)*x1822*x1833))+((x1819*x1826))+(((-1.0)*py*x1818*x1819))+((x1823*x1834))+((x1823*x1839))+((x1816*x1822*x1823))+(((-1.0)*x1815*x1818*x1820)));
evalcond[5]=((((-1.0)*x1817))+((sj0*sj2*x1820))+((x1822*x1835))+((x1822*x1838))+(((0.1491)*x1829))+((x1831*x1835))+((cj0*cj2*x1816*x1820))+(((-1.0)*x1824*x1832))+((cj2*pz*x1833))+(((-1.0)*py*x1818*x1829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1840=cj2*cj2;
IkReal x1841=cj3*cj3;
IkReal x1842=cj4*cj4;
IkReal x1843=((45171.0)*cj4);
IkReal x1844=((105000.0)*sj4);
IkReal x1845=(py*sj0);
IkReal x1846=(cj0*px);
IkReal x1847=(cj2*cj3);
IkReal x1848=(cj4*sj2);
IkReal x1849=((84023.4375)*sj2);
IkReal x1850=((28224.0)*x1842);
IkReal x1851=((28224.0)*x1841);
CheckValue<IkReal> x1852 = IKatan2WithCheck(IkReal(((((-105000.0)*x1846*x1848))+(((-1.0)*x1844*x1845*x1847))+(((-1.0)*x1844*x1846*x1847))+(((-105000.0)*x1845*x1848))+(((-1.0)*x1845*x1849))+((pz*sj3*x1844))+(((-1.0)*x1846*x1849)))),IkReal(((((-1.0)*pz*x1844*x1847))+(((-105000.0)*pz*x1848))+(((-1.0)*pz*x1849))+(((-1.0)*sj3*x1844*x1845))+(((-1.0)*sj3*x1844*x1846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1852.valid){
continue;
}
CheckValue<IkReal> x1853=IKPowWithIntegerCheck(IKsign(((-46297.44140625)+(((-1.0)*x1840*x1851))+((x1840*x1841*x1850))+(((18073.44140625)*x1840))+(((-1.0)*x1843))+((x1840*x1843))+((x1840*x1850))+(((-1.0)*x1841*x1850))+x1851+(((-45171.0)*sj2*sj4*x1847))+(((-56448.0)*sj4*x1847*x1848)))),-1);
if(!x1853.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1852.value)+(((1.5707963267949)*(x1853.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1854=IKcos(j1);
IkReal x1855=IKsin(j1);
IkReal x1856=((0.2688)*sj4);
IkReal x1857=((1.0)*cj0);
IkReal x1858=(sj2*sj3);
IkReal x1859=(cj3*px);
IkReal x1860=((0.4302)*sj2);
IkReal x1861=(py*sj0);
IkReal x1862=(cj2*sj3);
IkReal x1863=((1.0)*pz);
IkReal x1864=((0.2151)*sj2);
IkReal x1865=(px*sj0);
IkReal x1866=(cj0*py);
IkReal x1867=((0.4302)*cj2);
IkReal x1868=(cj3*sj2);
IkReal x1869=((0.2688)*cj4);
IkReal x1870=(cj0*px);
IkReal x1871=(sj3*x1855);
IkReal x1872=(cj3*x1854);
IkReal x1873=(pz*x1854);
IkReal x1874=(sj3*x1854);
IkReal x1875=(sj2*x1855);
IkReal x1876=(sj2*x1854);
IkReal x1877=(cj2*cj3*x1855);
IkReal x1878=(x1855*x1870);
evalcond[0]=((((-1.0)*x1869*x1876))+(((-1.0)*x1854*x1864))+((x1856*x1871))+(((-1.0)*cj2*x1856*x1872))+pz);
evalcond[1]=(((x1856*x1874))+((x1856*x1877))+((x1869*x1875))+(((-1.0)*px*x1857))+((x1855*x1864))+(((-1.0)*x1861)));
evalcond[2]=((0.2151)+(((-1.0)*x1861*x1875))+(((0.1491)*cj2))+(((-1.0)*x1863*x1876))+x1869+(((-1.0)*px*x1857*x1875))+((cj2*x1865))+(((-1.0)*cj2*py*x1857)));
evalcond[3]=((0.00375462)+((x1860*x1873))+((x1860*x1878))+((x1866*x1867))+((x1855*x1860*x1861))+(((-1.0)*x1865*x1867))+(((-1.0)*pp))+(((-0.06414282)*cj2))+(((-0.2982)*x1865))+(((0.2982)*x1866)));
evalcond[4]=(((x1862*x1873))+((x1862*x1878))+((cj3*pz*x1855))+(((-1.0)*x1861*x1872))+(((-1.0)*py*x1857*x1858))+(((0.1491)*x1858))+((x1858*x1865))+((x1855*x1861*x1862))+(((-1.0)*x1854*x1857*x1859)));
evalcond[5]=((((-1.0)*py*x1857*x1868))+((x1861*x1877))+((x1861*x1874))+((sj0*sj2*x1859))+((cj2*pz*x1872))+((cj0*cj2*x1855*x1859))+(((-1.0)*x1863*x1871))+((x1870*x1874))+(((0.1491)*x1868))+(((-1.0)*x1856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1879=cj0*cj0;
IkReal x1880=py*py;
IkReal x1881=px*px;
IkReal x1882=(sj0*sj3);
IkReal x1883=((320.7141)*py);
IkReal x1884=(cj0*cj3);
IkReal x1885=((1491.0)*pz);
IkReal x1886=((18.7731)*px);
IkReal x1887=(cj2*sj0);
IkReal x1888=(cj2*px);
IkReal x1889=(cj0*sj3);
IkReal x1890=(cj3*sj2);
IkReal x1891=(cj3*pz);
IkReal x1892=((2151.0)*px);
IkReal x1893=((5000.0)*pp);
IkReal x1894=(cj3*py);
IkReal x1895=(cj2*pz);
IkReal x1896=((2151.0)*py);
IkReal x1897=((1491.0)*sj0);
IkReal x1898=(cj2*py);
IkReal x1899=(py*sj3);
IkReal x1900=(px*sj0);
IkReal x1901=((2151.0)*x1880);
IkReal x1902=((2151.0)*x1881);
IkReal x1903=((4302.0)*x1879);
IkReal x1904=((2982.0)*x1879);
IkReal x1905=((1491.0)*cj0*cj2);
CheckValue<IkReal> x1906 = IKatan2WithCheck(IkReal(((((-1.0)*x1884*x1887*x1902))+(((-1.0)*sj0*x1893*x1894))+(((-1.0)*cj3*x1883*x1887))+(((-18.7731)*sj3*x1895))+((x1882*x1885*x1888))+((x1880*x1884*x1897))+(((-320.7141)*x1884*x1888))+((sj3*x1893*x1895))+((px*x1894*x1904))+(((-1.0)*x1881*x1884*x1897))+(((-1.0)*pz*x1889*x1896))+(((320.7141)*pz*sj3))+((x1884*x1887*x1901))+((x1888*x1894*x1903))+(((-1.0)*x1885*x1889*x1898))+(((-1491.0)*px*x1894))+((pz*x1882*x1892))+(((-1.0)*px*x1884*x1893))+(((-2151.0)*x1888*x1894))+(((18.7731)*sj0*x1894))+((x1884*x1886)))),IkReal(((((-1.0)*x1892*x1899))+(((-1.0)*cj0*x1882*x1902))+(((-1.0)*x1882*x1883))+((x1880*x1882*x1905))+(((18.7731)*x1882*x1898))+(((-320.7141)*px*x1889))+(((-1.0)*cj3*x1885*x1900))+((x1888*x1899*x1904))+(((-1.0)*x1881*x1882*x1905))+(((-1.0)*x1887*x1891*x1892))+(((18.7731)*x1891))+(((-1.0)*x1888*x1889*x1893))+(((-1491.0)*x1888*x1899))+(((-1.0)*x1891*x1893))+((py*x1884*x1885))+((cj2*x1886*x1889))+(((-1.0)*x1882*x1893*x1898))+((cj0*x1882*x1901))+(((-320.7141)*cj2*x1891))+((px*x1899*x1903))+((x1884*x1895*x1896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1906.valid){
continue;
}
CheckValue<IkReal> x1907=IKPowWithIntegerCheck(IKsign((((x1879*x1890*x1901))+(((-1.0)*x1879*x1890*x1902))+(((-4302.0)*py*sj2*x1884*x1900))+(((-1.0)*x1890*x1901))+(((-2151.0)*x1890*(pz*pz))))),-1);
if(!x1907.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1906.value)+(((1.5707963267949)*(x1907.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x1908=IKsin(j1);
IkReal x1909=IKcos(j1);
IkReal x1910=((0.4302)*sj2);
IkReal x1911=(py*sj0);
IkReal x1912=((1.0)*cj0);
IkReal x1913=(sj2*sj3);
IkReal x1914=(px*sj0);
IkReal x1915=((0.4302)*cj2);
IkReal x1916=(cj0*py);
IkReal x1917=(cj2*sj3);
IkReal x1918=(pz*x1909);
IkReal x1919=(cj3*x1909);
IkReal x1920=(cj0*px*x1908);
evalcond[0]=((0.00375462)+(((-1.0)*x1914*x1915))+((x1908*x1910*x1911))+((x1910*x1918))+(((-1.0)*pp))+((x1910*x1920))+(((-0.2982)*x1914))+((x1915*x1916))+(((0.2982)*x1916))+(((-0.06414282)*cj2)));
evalcond[1]=(((x1913*x1914))+(((-1.0)*x1911*x1919))+((cj3*pz*x1908))+((x1917*x1918))+(((-1.0)*px*x1912*x1919))+(((0.1491)*x1913))+((x1917*x1920))+(((-1.0)*py*x1912*x1913))+((x1908*x1911*x1917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
j4eval[0]=((((-1.0)*cj1*cj2*cj3))+((sj1*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j4eval[0]=(((cj1*sj3))+((cj2*cj3*sj1)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1921=((3.7202380952381)*cj1);
if( IKabs(((((-3.7202380952381)*pz*sj1))+((py*sj0*x1921))+((cj0*px*x1921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.832692020322773)+(((8.64769431715038)*pp))+(((-2.57874244537424)*cj0*py))+(((2.57874244537424)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.7202380952381)*pz*sj1))+((py*sj0*x1921))+((cj0*px*x1921))))+IKsqr(((-0.832692020322773)+(((8.64769431715038)*pp))+(((-2.57874244537424)*cj0*py))+(((2.57874244537424)*px*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-3.7202380952381)*pz*sj1))+((py*sj0*x1921))+((cj0*px*x1921))), ((-0.832692020322773)+(((8.64769431715038)*pp))+(((-2.57874244537424)*cj0*py))+(((2.57874244537424)*px*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1922=IKcos(j4);
IkReal x1923=IKsin(j4);
IkReal x1924=(cj1*sj2);
IkReal x1925=((1.0)*pz);
IkReal x1926=(px*sj0);
IkReal x1927=(sj1*sj2);
IkReal x1928=(cj0*py);
IkReal x1929=(cj0*px);
IkReal x1930=(py*sj0);
IkReal x1931=((0.2688)*x1922);
IkReal x1932=((0.2688)*x1923);
evalcond[0]=((0.09629064)+(((-0.2982)*x1926))+(((0.2982)*x1928))+(((-1.0)*pp))+(((0.11563776)*x1922)));
evalcond[1]=((0.1491)+(((-1.0)*x1928))+((cj2*x1931))+x1926+(((0.2151)*cj2)));
evalcond[2]=(((cj1*x1929))+((cj1*x1930))+(((-1.0)*sj1*x1925))+(((-1.0)*x1932)));
evalcond[3]=((((-0.2151)*x1924))+(((-1.0)*x1924*x1931))+((sj1*x1932))+pz);
evalcond[4]=(((cj1*x1932))+(((-1.0)*x1929))+(((-1.0)*x1930))+(((0.2151)*x1927))+((x1927*x1931)));
evalcond[5]=((0.2151)+(((-1.0)*x1927*x1930))+(((0.1491)*cj2))+(((-1.0)*x1927*x1929))+((cj2*x1926))+x1931+(((-1.0)*x1924*x1925))+(((-1.0)*cj2*x1928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1933=((3.7202380952381)*cj1);
if( IKabs(((((-1.0)*py*sj0*x1933))+(((3.7202380952381)*pz*sj1))+(((-1.0)*cj0*px*x1933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.832692020322773)+(((8.64769431715038)*pp))+(((-2.57874244537424)*cj0*py))+(((2.57874244537424)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*sj0*x1933))+(((3.7202380952381)*pz*sj1))+(((-1.0)*cj0*px*x1933))))+IKsqr(((-0.832692020322773)+(((8.64769431715038)*pp))+(((-2.57874244537424)*cj0*py))+(((2.57874244537424)*px*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*py*sj0*x1933))+(((3.7202380952381)*pz*sj1))+(((-1.0)*cj0*px*x1933))), ((-0.832692020322773)+(((8.64769431715038)*pp))+(((-2.57874244537424)*cj0*py))+(((2.57874244537424)*px*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1934=IKcos(j4);
IkReal x1935=IKsin(j4);
IkReal x1936=(cj1*sj2);
IkReal x1937=(px*sj0);
IkReal x1938=(sj1*sj2);
IkReal x1939=(cj0*py);
IkReal x1940=((0.2688)*x1934);
IkReal x1941=((0.2688)*x1935);
IkReal x1942=((1.0)*cj0*px);
IkReal x1943=((1.0)*py*sj0);
evalcond[0]=((0.09629064)+(((0.11563776)*x1934))+(((-1.0)*pp))+(((-0.2982)*x1937))+(((0.2982)*x1939)));
evalcond[1]=((0.1491)+((cj2*x1940))+(((-1.0)*x1939))+x1937+(((0.2151)*cj2)));
evalcond[2]=((((-0.2151)*x1936))+(((-1.0)*sj1*x1941))+pz+(((-1.0)*x1936*x1940)));
evalcond[3]=((((-1.0)*x1941))+((pz*sj1))+(((-1.0)*cj1*x1942))+(((-1.0)*cj1*x1943)));
evalcond[4]=(((x1938*x1940))+(((-1.0)*x1942))+(((-1.0)*x1943))+(((0.2151)*x1938))+(((-1.0)*cj1*x1941)));
evalcond[5]=((0.2151)+(((-1.0)*cj2*x1939))+(((-1.0)*pz*x1936))+(((0.1491)*cj2))+((cj2*x1937))+x1940+(((-1.0)*x1938*x1942))+(((-1.0)*x1938*x1943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=((((-1.0)*cj1*cj3))+((sj1*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=(((cj1*sj3))+((cj3*sj1)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.7202380952381)*pz))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.7202380952381)*pz), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1944=IKcos(j4);
evalcond[0]=((((-0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.121012992059308)+(((0.11563776)*x1944))+(((-0.590609555189456)*pp)));
evalcond[2]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.7202380952381)*pz))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.7202380952381)*pz), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1945=IKcos(j4);
evalcond[0]=((((0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.121012992059308)+(((0.11563776)*x1945))+(((-0.590609555189456)*pp)));
evalcond[2]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.7202380952381)*pz))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.7202380952381)*pz), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1946=IKcos(j4);
evalcond[0]=((((0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.121012992059308)+(((0.11563776)*x1946))+(((-0.590609555189456)*pp)));
evalcond[2]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.7202380952381)*pz))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.7202380952381)*pz), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1947=IKcos(j4);
evalcond[0]=((((-0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.121012992059308)+(((0.11563776)*x1947))+(((-0.590609555189456)*pp)));
evalcond[2]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.7202380952381)*pz))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.7202380952381)*pz), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1948=IKcos(j4);
evalcond[0]=((((0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.121012992059308)+(((0.11563776)*x1948))+(((-0.590609555189456)*pp)));
evalcond[2]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.7202380952381)*pz))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.7202380952381)*pz), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1949=IKcos(j4);
evalcond[0]=((((-0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.121012992059308)+(((0.11563776)*x1949))+(((-0.590609555189456)*pp)));
evalcond[2]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.7202380952381)*pz))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.7202380952381)*pz), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1950=IKcos(j4);
evalcond[0]=((((-0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.121012992059308)+(((0.11563776)*x1950))+(((-0.590609555189456)*pp)));
evalcond[2]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.7202380952381)*pz))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.7202380952381)*pz), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1951=IKcos(j4);
evalcond[0]=((((0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.121012992059308)+(((0.11563776)*x1951))+(((-0.590609555189456)*pp)));
evalcond[2]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1952=IKcos(j4);
evalcond[0]=((0.121012992059308)+(((0.11563776)*x1952))+(((-0.590609555189456)*pp)));
evalcond[1]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1952)));
evalcond[2]=((((0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1953=IKcos(j4);
evalcond[0]=((0.121012992059308)+(((0.11563776)*x1953))+(((-0.590609555189456)*pp)));
evalcond[1]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1953)));
evalcond[2]=((((-0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1954=IKcos(j4);
evalcond[0]=((0.121012992059308)+(((0.11563776)*x1954))+(((-0.590609555189456)*pp)));
evalcond[1]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1954)));
evalcond[2]=((((0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1955=IKcos(j4);
evalcond[0]=((0.121012992059308)+(((0.11563776)*x1955))+(((-0.590609555189456)*pp)));
evalcond[1]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1955)));
evalcond[2]=((((-0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1956=IKcos(j4);
evalcond[0]=((0.121012992059308)+(((0.11563776)*x1956))+(((-0.590609555189456)*pp)));
evalcond[1]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1956)));
evalcond[2]=((((-0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1957=IKcos(j4);
evalcond[0]=((0.121012992059308)+(((0.11563776)*x1957))+(((-0.590609555189456)*pp)));
evalcond[1]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1957)));
evalcond[2]=((((0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1958=IKcos(j4);
evalcond[0]=((0.121012992059308)+(((0.11563776)*x1958))+(((-0.590609555189456)*pp)));
evalcond[1]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1958)));
evalcond[2]=((((-0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1959=IKcos(j4);
evalcond[0]=((0.121012992059308)+(((0.11563776)*x1959))+(((-0.590609555189456)*pp)));
evalcond[1]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1959)));
evalcond[2]=((((0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1960=IKPowWithIntegerCheck(((((0.2688)*cj1*sj3))+(((0.2688)*cj3*sj1))),-1);
if(!x1960.valid){
continue;
}
if( IKabs(((x1960.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1960.value)*((((cj0*px))+((py*sj0))))))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1960.value)*((((cj0*px))+((py*sj0))))), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1961=IKcos(j4);
IkReal x1962=IKsin(j4);
IkReal x1963=(cj3*sj1);
IkReal x1964=(py*sj0);
IkReal x1965=(sj1*sj3);
IkReal x1966=(cj1*sj3);
IkReal x1967=(cj0*px);
IkReal x1968=(cj1*cj3);
IkReal x1969=((0.2688)*x1962);
evalcond[0]=((0.121012992059308)+(((0.11563776)*x1961))+(((-0.590609555189456)*pp)));
evalcond[1]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1961)));
evalcond[2]=((((-1.0)*x1968*x1969))+pz+((x1965*x1969)));
evalcond[3]=((((-1.0)*x1967))+(((-1.0)*x1964))+((x1966*x1969))+((x1963*x1969)));
evalcond[4]=(((x1964*x1966))+(((-1.0)*x1969))+((pz*x1968))+((x1966*x1967))+((x1963*x1967))+((x1963*x1964))+(((-1.0)*pz*x1965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1970=IKPowWithIntegerCheck(((((0.2688)*sj1*sj3))+(((-0.2688)*cj1*cj3))),-1);
if(!x1970.valid){
continue;
}
if( IKabs(((-1.0)*pz*(x1970.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.04648336373264)+(((5.10741089406658)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*pz*(x1970.value)))+IKsqr(((-1.04648336373264)+(((5.10741089406658)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*pz*(x1970.value)), ((-1.04648336373264)+(((5.10741089406658)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1971=IKcos(j4);
IkReal x1972=IKsin(j4);
IkReal x1973=(cj3*sj1);
IkReal x1974=(py*sj0);
IkReal x1975=(sj1*sj3);
IkReal x1976=(cj1*sj3);
IkReal x1977=(cj0*px);
IkReal x1978=(cj1*cj3);
IkReal x1979=((0.2688)*x1972);
evalcond[0]=((0.121012992059308)+(((0.11563776)*x1971))+(((-0.590609555189456)*pp)));
evalcond[1]=((0.281294728171334)+(((-1.3728720483251)*pp))+(((0.2688)*x1971)));
evalcond[2]=(((x1975*x1979))+(((-1.0)*x1978*x1979))+pz);
evalcond[3]=(((x1976*x1979))+(((-1.0)*x1974))+(((-1.0)*x1977))+((x1973*x1979)));
evalcond[4]=(((x1976*x1977))+(((-1.0)*x1979))+((pz*x1978))+((x1974*x1976))+((x1973*x1977))+((x1973*x1974))+(((-1.0)*pz*x1975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=(((sj1*sj3))+((cj1*cj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=(((cj1*sj3))+(((-1.0)*cj3*sj1)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.7202380952381)*pz))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.7202380952381)*pz), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1980=IKcos(j4);
evalcond[0]=((((0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1980)));
evalcond[2]=((-0.580374545454545)+(((7.57575757575758)*pp))+(((-0.2688)*x1980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.7202380952381)*pz))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.7202380952381)*pz), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1981=IKcos(j4);
evalcond[0]=((((-0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1981)));
evalcond[2]=((-0.580374545454545)+(((7.57575757575758)*pp))+(((-0.2688)*x1981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.7202380952381)*pz))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.7202380952381)*pz), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1982=IKcos(j4);
evalcond[0]=((((0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1982)));
evalcond[2]=((-0.580374545454545)+(((7.57575757575758)*pp))+(((-0.2688)*x1982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.7202380952381)*pz))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.7202380952381)*pz), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1983=IKcos(j4);
evalcond[0]=((((-0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1983)));
evalcond[2]=((-0.580374545454545)+(((7.57575757575758)*pp))+(((-0.2688)*x1983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.7202380952381)*pz))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.7202380952381)*pz), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1984=IKcos(j4);
evalcond[0]=((((-0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1984)));
evalcond[2]=((-0.580374545454545)+(((7.57575757575758)*pp))+(((-0.2688)*x1984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.7202380952381)*pz))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.7202380952381)*pz), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1985=IKcos(j4);
evalcond[0]=((((0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1985)));
evalcond[2]=((-0.580374545454545)+(((7.57575757575758)*pp))+(((-0.2688)*x1985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.7202380952381)*pz))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.7202380952381)*pz), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1986=IKcos(j4);
evalcond[0]=((((-0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1986)));
evalcond[2]=((-0.580374545454545)+(((7.57575757575758)*pp))+(((-0.2688)*x1986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-3.7202380952381)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.7202380952381)*pz))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.7202380952381)*pz), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1987=IKcos(j4);
evalcond[0]=((((0.2688)*(IKsin(j4))))+pz);
evalcond[1]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1987)));
evalcond[2]=((-0.580374545454545)+(((7.57575757575758)*pp))+(((-0.2688)*x1987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1988=IKcos(j4);
evalcond[0]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1988)));
evalcond[1]=((-0.580374545454545)+(((7.57575757575758)*pp))+(((-0.2688)*x1988)));
evalcond[2]=((((-0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1989=IKcos(j4);
evalcond[0]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1989)));
evalcond[1]=((-0.580374545454545)+(((7.57575757575758)*pp))+(((-0.2688)*x1989)));
evalcond[2]=((((0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1990=IKcos(j4);
evalcond[0]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1990)));
evalcond[1]=((-0.580374545454545)+(((-0.2688)*x1990))+(((7.57575757575758)*pp)));
evalcond[2]=((((0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1991=IKcos(j4);
evalcond[0]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1991)));
evalcond[1]=((-0.580374545454545)+(((-0.2688)*x1991))+(((7.57575757575758)*pp)));
evalcond[2]=((((-0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1992=IKcos(j4);
evalcond[0]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1992)));
evalcond[1]=((-0.580374545454545)+(((-0.2688)*x1992))+(((7.57575757575758)*pp)));
evalcond[2]=((((0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1993=IKcos(j4);
evalcond[0]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1993)));
evalcond[1]=((-0.580374545454545)+(((-0.2688)*x1993))+(((7.57575757575758)*pp)));
evalcond[2]=((((-0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1994=IKcos(j4);
evalcond[0]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1994)));
evalcond[1]=((-0.580374545454545)+(((-0.2688)*x1994))+(((7.57575757575758)*pp)));
evalcond[2]=((((-0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1995=IKcos(j4);
evalcond[0]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1995)));
evalcond[1]=((-0.580374545454545)+(((-0.2688)*x1995))+(((7.57575757575758)*pp)));
evalcond[2]=((((0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1996=IKPowWithIntegerCheck(((((0.2688)*cj1*sj3))+(((-0.2688)*cj3*sj1))),-1);
if(!x1996.valid){
continue;
}
if( IKabs(((x1996.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1996.value)*((((cj0*px))+((py*sj0))))))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1996.value)*((((cj0*px))+((py*sj0))))), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1997=IKcos(j4);
IkReal x1998=IKsin(j4);
IkReal x1999=((1.0)*cj3);
IkReal x2000=(py*sj0);
IkReal x2001=(sj1*sj3);
IkReal x2002=(cj1*sj3);
IkReal x2003=(cj0*px);
IkReal x2004=((0.2688)*x1998);
evalcond[0]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x1997)));
evalcond[1]=((-0.580374545454545)+(((-0.2688)*x1997))+(((7.57575757575758)*pp)));
evalcond[2]=(((cj1*cj3*x2004))+pz+((x2001*x2004)));
evalcond[3]=(((x2002*x2004))+(((-1.0)*cj3*sj1*x2004))+(((-1.0)*x2000))+(((-1.0)*x2003)));
evalcond[4]=((((-1.0)*sj1*x1999*x2003))+(((-1.0)*sj1*x1999*x2000))+((x2002*x2003))+(((-1.0)*cj1*pz*x1999))+((x2000*x2002))+(((-1.0)*pz*x2001))+(((-1.0)*x2004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2005=IKPowWithIntegerCheck(((((0.2688)*sj1*sj3))+(((0.2688)*cj1*cj3))),-1);
if(!x2005.valid){
continue;
}
if( IKabs(((-1.0)*pz*(x2005.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.15913149350649)+(((28.1836219336219)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*pz*(x2005.value)))+IKsqr(((-2.15913149350649)+(((28.1836219336219)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*pz*(x2005.value)), ((-2.15913149350649)+(((28.1836219336219)*pp))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2006=IKcos(j4);
IkReal x2007=IKsin(j4);
IkReal x2008=((1.0)*cj3);
IkReal x2009=(py*sj0);
IkReal x2010=(sj1*sj3);
IkReal x2011=(cj1*sj3);
IkReal x2012=(cj0*px);
IkReal x2013=((0.2688)*x2007);
evalcond[0]=((0.249677129454545)+(((-3.25909090909091)*pp))+(((0.11563776)*x2006)));
evalcond[1]=((-0.580374545454545)+(((7.57575757575758)*pp))+(((-0.2688)*x2006)));
evalcond[2]=(((x2010*x2013))+pz+((cj1*cj3*x2013)));
evalcond[3]=((((-1.0)*cj3*sj1*x2013))+((x2011*x2013))+(((-1.0)*x2009))+(((-1.0)*x2012)));
evalcond[4]=((((-1.0)*x2013))+(((-1.0)*sj1*x2008*x2009))+(((-1.0)*pz*x2010))+((x2011*x2012))+((x2009*x2011))+(((-1.0)*sj1*x2008*x2012))+(((-1.0)*cj1*pz*x2008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2014=(cj0*py);
IkReal x2015=(px*sj0);
if( IKabs(((0.5546875)+(((-3.7202380952381)*x2014))+(((3.7202380952381)*x2015)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2015))+(((-2.57874244537424)*x2014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.5546875)+(((-3.7202380952381)*x2014))+(((3.7202380952381)*x2015))))+IKsqr(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2015))+(((-2.57874244537424)*x2014))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.5546875)+(((-3.7202380952381)*x2014))+(((3.7202380952381)*x2015))), ((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2015))+(((-2.57874244537424)*x2014))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2016=IKcos(j4);
IkReal x2017=(px*sj0);
IkReal x2018=(cj0*py);
IkReal x2019=((0.2688)*x2016);
IkReal x2020=((1.0)*cj0*px);
IkReal x2021=((1.0)*py*sj0);
evalcond[0]=((((-1.0)*cj1*x2019))+pz+(((-0.2151)*cj1)));
evalcond[1]=((0.1491)+x2017+(((-0.2688)*(IKsin(j4))))+(((-1.0)*x2018)));
evalcond[2]=((0.09629064)+(((-0.2982)*x2017))+(((0.11563776)*x2016))+(((0.2982)*x2018))+(((-1.0)*pp)));
evalcond[3]=(((sj1*x2019))+(((-1.0)*x2021))+(((-1.0)*x2020))+(((0.2151)*sj1)));
evalcond[4]=((0.2151)+x2019+(((-1.0)*cj1*pz))+(((-1.0)*sj1*x2020))+(((-1.0)*sj1*x2021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2022=(cj0*py);
IkReal x2023=(px*sj0);
if( IKabs(((-0.5546875)+(((-3.7202380952381)*x2023))+(((3.7202380952381)*x2022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2023))+(((-2.57874244537424)*x2022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.5546875)+(((-3.7202380952381)*x2023))+(((3.7202380952381)*x2022))))+IKsqr(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2023))+(((-2.57874244537424)*x2022))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-0.5546875)+(((-3.7202380952381)*x2023))+(((3.7202380952381)*x2022))), ((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2023))+(((-2.57874244537424)*x2022))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2024=IKcos(j4);
IkReal x2025=(px*sj0);
IkReal x2026=(cj0*py);
IkReal x2027=((0.2688)*x2024);
IkReal x2028=((1.0)*cj0*px);
IkReal x2029=((1.0)*py*sj0);
evalcond[0]=((((-1.0)*cj1*x2027))+pz+(((-0.2151)*cj1)));
evalcond[1]=((0.1491)+x2025+(((0.2688)*(IKsin(j4))))+(((-1.0)*x2026)));
evalcond[2]=((0.09629064)+(((0.2982)*x2026))+(((-0.2982)*x2025))+(((-1.0)*pp))+(((0.11563776)*x2024)));
evalcond[3]=(((sj1*x2027))+(((-1.0)*x2028))+(((-1.0)*x2029))+(((0.2151)*sj1)));
evalcond[4]=((0.2151)+x2027+(((-1.0)*cj1*pz))+(((-1.0)*sj1*x2028))+(((-1.0)*sj1*x2029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=0;
sj1=0;
cj1=1.0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=0;
sj1=0;
cj1=1.0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))))+IKsqr(((-0.800223214285714)+(((3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))), ((-0.800223214285714)+(((3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2030=IKcos(j4);
evalcond[0]=((-0.2151)+pz+(((-0.2688)*x2030)));
evalcond[1]=((0.09253602)+(((0.11563776)*x2030))+(((-0.4302)*pz)));
evalcond[2]=((((0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))))+IKsqr(((-0.800223214285714)+(((3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))), ((-0.800223214285714)+(((3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2031=IKcos(j4);
evalcond[0]=((-0.2151)+pz+(((-0.2688)*x2031)));
evalcond[1]=((0.09253602)+(((0.11563776)*x2031))+(((-0.4302)*pz)));
evalcond[2]=((((-0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((0.5546875)+(((3.7202380952381)*px*sj0))+(((-3.7202380952381)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.5546875)+(((3.7202380952381)*px*sj0))+(((-3.7202380952381)*cj0*py))))+IKsqr(((-0.800223214285714)+(((3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.5546875)+(((3.7202380952381)*px*sj0))+(((-3.7202380952381)*cj0*py))), ((-0.800223214285714)+(((3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2032=IKcos(j4);
evalcond[0]=((-0.2151)+pz+(((-0.2688)*x2032)));
evalcond[1]=((0.09253602)+(((0.11563776)*x2032))+(((-0.4302)*pz)));
evalcond[2]=((0.1491)+(((-0.2688)*(IKsin(j4))))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-0.5546875)+(((-3.7202380952381)*px*sj0))+(((3.7202380952381)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.5546875)+(((-3.7202380952381)*px*sj0))+(((3.7202380952381)*cj0*py))))+IKsqr(((-0.800223214285714)+(((3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-0.5546875)+(((-3.7202380952381)*px*sj0))+(((3.7202380952381)*cj0*py))), ((-0.800223214285714)+(((3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2033=IKcos(j4);
evalcond[0]=((-0.2151)+pz+(((-0.2688)*x2033)));
evalcond[1]=((0.09253602)+(((0.11563776)*x2033))+(((-0.4302)*pz)));
evalcond[2]=((0.1491)+(((0.2688)*(IKsin(j4))))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2034=IKPowWithIntegerCheck(cj3,-1);
if(!x2034.valid){
continue;
}
if( IKabs(((0.00595238095238095)*(x2034.value)*(((93.1875)+(((625.0)*px*sj0))+(((-625.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00595238095238095)*(x2034.value)*(((93.1875)+(((625.0)*px*sj0))+(((-625.0)*cj0*py))))))+IKsqr(((-0.800223214285714)+(((3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.00595238095238095)*(x2034.value)*(((93.1875)+(((625.0)*px*sj0))+(((-625.0)*cj0*py))))), ((-0.800223214285714)+(((3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2035=IKcos(j4);
IkReal x2036=IKsin(j4);
IkReal x2037=((1.0)*cj0);
IkReal x2038=(px*sj0);
IkReal x2039=(py*sj0);
IkReal x2040=((0.2688)*x2036);
evalcond[0]=((-0.2151)+pz+(((-0.2688)*x2035)));
evalcond[1]=((0.09253602)+(((0.11563776)*x2035))+(((-0.4302)*pz)));
evalcond[2]=((0.1491)+(((-1.0)*cj3*x2040))+x2038+(((-1.0)*py*x2037)));
evalcond[3]=((((-1.0)*px*x2037))+(((-1.0)*x2039))+((sj3*x2040)));
evalcond[4]=((((-1.0)*cj3*py*x2037))+((sj3*x2039))+(((-1.0)*x2040))+(((0.1491)*cj3))+((cj0*px*sj3))+((cj3*x2038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2041=IKPowWithIntegerCheck(sj3,-1);
if(!x2041.valid){
continue;
}
if( IKabs(((0.00595238095238095)*(x2041.value)*(((((625.0)*cj0*px))+(((625.0)*py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00595238095238095)*(x2041.value)*(((((625.0)*cj0*px))+(((625.0)*py*sj0))))))+IKsqr(((-0.800223214285714)+(((3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.00595238095238095)*(x2041.value)*(((((625.0)*cj0*px))+(((625.0)*py*sj0))))), ((-0.800223214285714)+(((3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2042=IKcos(j4);
IkReal x2043=IKsin(j4);
IkReal x2044=((1.0)*cj0);
IkReal x2045=(px*sj0);
IkReal x2046=(py*sj0);
IkReal x2047=((0.2688)*x2043);
evalcond[0]=((-0.2151)+pz+(((-0.2688)*x2042)));
evalcond[1]=((0.09253602)+(((0.11563776)*x2042))+(((-0.4302)*pz)));
evalcond[2]=((0.1491)+(((-1.0)*cj3*x2047))+x2045+(((-1.0)*py*x2044)));
evalcond[3]=((((-1.0)*x2046))+(((-1.0)*px*x2044))+((sj3*x2047)));
evalcond[4]=((((-1.0)*x2047))+(((0.1491)*cj3))+((cj0*px*sj3))+((cj3*x2045))+(((-1.0)*cj3*py*x2044))+((sj3*x2046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((-3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))))+IKsqr(((-0.800223214285714)+(((-3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))), ((-0.800223214285714)+(((-3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2048=IKcos(j4);
evalcond[0]=((0.2151)+(((0.2688)*x2048))+pz);
evalcond[1]=((0.09253602)+(((0.4302)*pz))+(((0.11563776)*x2048)));
evalcond[2]=((((-0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((-3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))))+IKsqr(((-0.800223214285714)+(((-3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))), ((-0.800223214285714)+(((-3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2049=IKcos(j4);
evalcond[0]=((0.2151)+(((0.2688)*x2049))+pz);
evalcond[1]=((0.09253602)+(((0.4302)*pz))+(((0.11563776)*x2049)));
evalcond[2]=((((0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((0.5546875)+(((3.7202380952381)*px*sj0))+(((-3.7202380952381)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((-3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.5546875)+(((3.7202380952381)*px*sj0))+(((-3.7202380952381)*cj0*py))))+IKsqr(((-0.800223214285714)+(((-3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.5546875)+(((3.7202380952381)*px*sj0))+(((-3.7202380952381)*cj0*py))), ((-0.800223214285714)+(((-3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2050=IKcos(j4);
evalcond[0]=((0.2151)+pz+(((0.2688)*x2050)));
evalcond[1]=((0.09253602)+(((0.4302)*pz))+(((0.11563776)*x2050)));
evalcond[2]=((0.1491)+(((-0.2688)*(IKsin(j4))))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-0.5546875)+(((-3.7202380952381)*px*sj0))+(((3.7202380952381)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((-3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.5546875)+(((-3.7202380952381)*px*sj0))+(((3.7202380952381)*cj0*py))))+IKsqr(((-0.800223214285714)+(((-3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-0.5546875)+(((-3.7202380952381)*px*sj0))+(((3.7202380952381)*cj0*py))), ((-0.800223214285714)+(((-3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2051=IKcos(j4);
evalcond[0]=((0.2151)+pz+(((0.2688)*x2051)));
evalcond[1]=((0.09253602)+(((0.4302)*pz))+(((0.11563776)*x2051)));
evalcond[2]=((0.1491)+(((0.2688)*(IKsin(j4))))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2052=IKPowWithIntegerCheck(cj3,-1);
if(!x2052.valid){
continue;
}
if( IKabs(((0.00595238095238095)*(x2052.value)*(((93.1875)+(((625.0)*px*sj0))+(((-625.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((-3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00595238095238095)*(x2052.value)*(((93.1875)+(((625.0)*px*sj0))+(((-625.0)*cj0*py))))))+IKsqr(((-0.800223214285714)+(((-3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.00595238095238095)*(x2052.value)*(((93.1875)+(((625.0)*px*sj0))+(((-625.0)*cj0*py))))), ((-0.800223214285714)+(((-3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2053=IKcos(j4);
IkReal x2054=IKsin(j4);
IkReal x2055=((1.0)*cj0);
IkReal x2056=(px*sj0);
IkReal x2057=((0.2688)*x2054);
IkReal x2058=((1.0)*py*sj0);
evalcond[0]=((0.2151)+pz+(((0.2688)*x2053)));
evalcond[1]=((0.09253602)+(((0.4302)*pz))+(((0.11563776)*x2053)));
evalcond[2]=((0.1491)+(((-1.0)*cj3*x2057))+x2056+(((-1.0)*py*x2055)));
evalcond[3]=((((-1.0)*px*x2055))+(((-1.0)*sj3*x2057))+(((-1.0)*x2058)));
evalcond[4]=((((0.1491)*cj3))+(((-1.0)*sj3*x2058))+((cj3*x2056))+(((-1.0)*px*sj3*x2055))+(((-1.0)*x2057))+(((-1.0)*cj3*py*x2055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2059=IKPowWithIntegerCheck(sj3,-1);
if(!x2059.valid){
continue;
}
if( IKabs(((0.00595238095238095)*(x2059.value)*(((((-625.0)*py*sj0))+(((-625.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((-3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00595238095238095)*(x2059.value)*(((((-625.0)*py*sj0))+(((-625.0)*cj0*px))))))+IKsqr(((-0.800223214285714)+(((-3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.00595238095238095)*(x2059.value)*(((((-625.0)*py*sj0))+(((-625.0)*cj0*px))))), ((-0.800223214285714)+(((-3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2060=IKcos(j4);
IkReal x2061=IKsin(j4);
IkReal x2062=((1.0)*cj0);
IkReal x2063=(px*sj0);
IkReal x2064=((0.2688)*x2061);
IkReal x2065=((1.0)*py*sj0);
evalcond[0]=((0.2151)+pz+(((0.2688)*x2060)));
evalcond[1]=((0.09253602)+(((0.4302)*pz))+(((0.11563776)*x2060)));
evalcond[2]=((0.1491)+(((-1.0)*cj3*x2064))+x2063+(((-1.0)*py*x2062)));
evalcond[3]=((((-1.0)*px*x2062))+(((-1.0)*sj3*x2064))+(((-1.0)*x2065)));
evalcond[4]=((((-1.0)*px*sj3*x2062))+(((-1.0)*sj3*x2065))+(((0.1491)*cj3))+(((-1.0)*x2064))+(((-1.0)*cj3*py*x2062))+((cj3*x2063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2066=(cj0*py);
IkReal x2067=(px*sj0);
if( IKabs(((-0.5546875)+(((3.7202380952381)*x2066))+(((-3.7202380952381)*x2067)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2067))+(((-2.57874244537424)*x2066)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.5546875)+(((3.7202380952381)*x2066))+(((-3.7202380952381)*x2067))))+IKsqr(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2067))+(((-2.57874244537424)*x2066))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-0.5546875)+(((3.7202380952381)*x2066))+(((-3.7202380952381)*x2067))), ((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2067))+(((-2.57874244537424)*x2066))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2068=IKcos(j4);
IkReal x2069=(px*sj0);
IkReal x2070=(cj0*py);
IkReal x2071=(cj0*px);
IkReal x2072=(py*sj0);
IkReal x2073=((0.2688)*x2068);
evalcond[0]=(pz+((cj1*x2073))+(((0.2151)*cj1)));
evalcond[1]=((0.1491)+x2069+(((0.2688)*(IKsin(j4))))+(((-1.0)*x2070)));
evalcond[2]=((0.09629064)+(((0.2982)*x2070))+(((-1.0)*pp))+(((-0.2982)*x2069))+(((0.11563776)*x2068)));
evalcond[3]=((((-1.0)*sj1*x2073))+(((-1.0)*x2072))+(((-1.0)*x2071))+(((-0.2151)*sj1)));
evalcond[4]=((0.2151)+x2073+((cj1*pz))+((sj1*x2071))+((sj1*x2072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2074=(cj0*py);
IkReal x2075=(px*sj0);
if( IKabs(((0.5546875)+(((3.7202380952381)*x2075))+(((-3.7202380952381)*x2074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2075))+(((-2.57874244537424)*x2074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.5546875)+(((3.7202380952381)*x2075))+(((-3.7202380952381)*x2074))))+IKsqr(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2075))+(((-2.57874244537424)*x2074))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.5546875)+(((3.7202380952381)*x2075))+(((-3.7202380952381)*x2074))), ((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2075))+(((-2.57874244537424)*x2074))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2076=IKcos(j4);
IkReal x2077=(px*sj0);
IkReal x2078=(cj0*py);
IkReal x2079=(cj0*px);
IkReal x2080=(py*sj0);
IkReal x2081=((0.2688)*x2076);
evalcond[0]=(((cj1*x2081))+pz+(((0.2151)*cj1)));
evalcond[1]=((0.1491)+x2077+(((-0.2688)*(IKsin(j4))))+(((-1.0)*x2078)));
evalcond[2]=((0.09629064)+(((0.2982)*x2078))+(((-1.0)*pp))+(((-0.2982)*x2077))+(((0.11563776)*x2076)));
evalcond[3]=((((-1.0)*sj1*x2081))+(((-1.0)*x2080))+(((-1.0)*x2079))+(((-0.2151)*sj1)));
evalcond[4]=((0.2151)+x2081+((sj1*x2080))+((cj1*pz))+((sj1*x2079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=0;
sj1=0;
cj1=1.0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=0;
sj1=0;
cj1=1.0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((-3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))))+IKsqr(((-0.800223214285714)+(((-3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))), ((-0.800223214285714)+(((-3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2082=IKcos(j4);
evalcond[0]=((0.2151)+pz+(((0.2688)*x2082)));
evalcond[1]=((0.09253602)+(((0.4302)*pz))+(((0.11563776)*x2082)));
evalcond[2]=((((0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((-3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))))+IKsqr(((-0.800223214285714)+(((-3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))), ((-0.800223214285714)+(((-3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2083=IKcos(j4);
evalcond[0]=((0.2151)+pz+(((0.2688)*x2083)));
evalcond[1]=((0.09253602)+(((0.4302)*pz))+(((0.11563776)*x2083)));
evalcond[2]=((((-0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-0.5546875)+(((-3.7202380952381)*px*sj0))+(((3.7202380952381)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((-3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.5546875)+(((-3.7202380952381)*px*sj0))+(((3.7202380952381)*cj0*py))))+IKsqr(((-0.800223214285714)+(((-3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-0.5546875)+(((-3.7202380952381)*px*sj0))+(((3.7202380952381)*cj0*py))), ((-0.800223214285714)+(((-3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2084=IKcos(j4);
evalcond[0]=((0.2151)+pz+(((0.2688)*x2084)));
evalcond[1]=((0.09253602)+(((0.4302)*pz))+(((0.11563776)*x2084)));
evalcond[2]=((0.1491)+(((0.2688)*(IKsin(j4))))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((0.5546875)+(((3.7202380952381)*px*sj0))+(((-3.7202380952381)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((-3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.5546875)+(((3.7202380952381)*px*sj0))+(((-3.7202380952381)*cj0*py))))+IKsqr(((-0.800223214285714)+(((-3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.5546875)+(((3.7202380952381)*px*sj0))+(((-3.7202380952381)*cj0*py))), ((-0.800223214285714)+(((-3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2085=IKcos(j4);
evalcond[0]=((0.2151)+pz+(((0.2688)*x2085)));
evalcond[1]=((0.09253602)+(((0.4302)*pz))+(((0.11563776)*x2085)));
evalcond[2]=((0.1491)+(((-0.2688)*(IKsin(j4))))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2086=IKPowWithIntegerCheck(cj3,-1);
if(!x2086.valid){
continue;
}
if( IKabs(((0.00595238095238095)*(x2086.value)*(((-93.1875)+(((625.0)*cj0*py))+(((-625.0)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((-3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00595238095238095)*(x2086.value)*(((-93.1875)+(((625.0)*cj0*py))+(((-625.0)*px*sj0))))))+IKsqr(((-0.800223214285714)+(((-3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.00595238095238095)*(x2086.value)*(((-93.1875)+(((625.0)*cj0*py))+(((-625.0)*px*sj0))))), ((-0.800223214285714)+(((-3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2087=IKcos(j4);
IkReal x2088=IKsin(j4);
IkReal x2089=(py*sj0);
IkReal x2090=((1.0)*px);
IkReal x2091=(cj0*py);
IkReal x2092=((0.2688)*x2088);
evalcond[0]=((0.2151)+pz+(((0.2688)*x2087)));
evalcond[1]=((0.09253602)+(((0.4302)*pz))+(((0.11563776)*x2087)));
evalcond[2]=((0.1491)+((cj3*x2092))+((px*sj0))+(((-1.0)*x2091)));
evalcond[3]=((((-1.0)*x2089))+((sj3*x2092))+(((-1.0)*cj0*x2090)));
evalcond[4]=((((-1.0)*x2092))+(((-0.1491)*cj3))+(((-1.0)*cj3*sj0*x2090))+((cj0*px*sj3))+((cj3*x2091))+((sj3*x2089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2093=IKPowWithIntegerCheck(sj3,-1);
if(!x2093.valid){
continue;
}
if( IKabs(((0.00595238095238095)*(x2093.value)*(((((625.0)*cj0*px))+(((625.0)*py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((-3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00595238095238095)*(x2093.value)*(((((625.0)*cj0*px))+(((625.0)*py*sj0))))))+IKsqr(((-0.800223214285714)+(((-3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.00595238095238095)*(x2093.value)*(((((625.0)*cj0*px))+(((625.0)*py*sj0))))), ((-0.800223214285714)+(((-3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2094=IKcos(j4);
IkReal x2095=IKsin(j4);
IkReal x2096=(py*sj0);
IkReal x2097=((1.0)*px);
IkReal x2098=(cj0*py);
IkReal x2099=((0.2688)*x2095);
evalcond[0]=((0.2151)+(((0.2688)*x2094))+pz);
evalcond[1]=((0.09253602)+(((0.11563776)*x2094))+(((0.4302)*pz)));
evalcond[2]=((0.1491)+((cj3*x2099))+((px*sj0))+(((-1.0)*x2098)));
evalcond[3]=(((sj3*x2099))+(((-1.0)*x2096))+(((-1.0)*cj0*x2097)));
evalcond[4]=((((-1.0)*x2099))+(((-0.1491)*cj3))+(((-1.0)*cj3*sj0*x2097))+((cj0*px*sj3))+((cj3*x2098))+((sj3*x2096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))))+IKsqr(((-0.800223214285714)+(((3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-3.7202380952381)*py*sj0))+(((-3.7202380952381)*cj0*px))), ((-0.800223214285714)+(((3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2100=IKcos(j4);
evalcond[0]=((-0.2151)+(((-0.2688)*x2100))+pz);
evalcond[1]=((0.09253602)+(((0.11563776)*x2100))+(((-0.4302)*pz)));
evalcond[2]=((((-0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))))+IKsqr(((-0.800223214285714)+(((3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((3.7202380952381)*cj0*px))+(((3.7202380952381)*py*sj0))), ((-0.800223214285714)+(((3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2101=IKcos(j4);
evalcond[0]=((-0.2151)+(((-0.2688)*x2101))+pz);
evalcond[1]=((0.09253602)+(((0.11563776)*x2101))+(((-0.4302)*pz)));
evalcond[2]=((((0.2688)*(IKsin(j4))))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-0.5546875)+(((-3.7202380952381)*px*sj0))+(((3.7202380952381)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.5546875)+(((-3.7202380952381)*px*sj0))+(((3.7202380952381)*cj0*py))))+IKsqr(((-0.800223214285714)+(((3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-0.5546875)+(((-3.7202380952381)*px*sj0))+(((3.7202380952381)*cj0*py))), ((-0.800223214285714)+(((3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2102=IKcos(j4);
evalcond[0]=((-0.2151)+(((-0.2688)*x2102))+pz);
evalcond[1]=((0.09253602)+(((0.11563776)*x2102))+(((-0.4302)*pz)));
evalcond[2]=((0.1491)+(((0.2688)*(IKsin(j4))))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((0.5546875)+(((3.7202380952381)*px*sj0))+(((-3.7202380952381)*cj0*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.5546875)+(((3.7202380952381)*px*sj0))+(((-3.7202380952381)*cj0*py))))+IKsqr(((-0.800223214285714)+(((3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.5546875)+(((3.7202380952381)*px*sj0))+(((-3.7202380952381)*cj0*py))), ((-0.800223214285714)+(((3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2103=IKcos(j4);
evalcond[0]=((-0.2151)+(((-0.2688)*x2103))+pz);
evalcond[1]=((0.09253602)+(((0.11563776)*x2103))+(((-0.4302)*pz)));
evalcond[2]=((0.1491)+(((-0.2688)*(IKsin(j4))))+((px*sj0))+(((-1.0)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2104=IKPowWithIntegerCheck(cj3,-1);
if(!x2104.valid){
continue;
}
if( IKabs(((0.00595238095238095)*(x2104.value)*(((-93.1875)+(((625.0)*cj0*py))+(((-625.0)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00595238095238095)*(x2104.value)*(((-93.1875)+(((625.0)*cj0*py))+(((-625.0)*px*sj0))))))+IKsqr(((-0.800223214285714)+(((3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.00595238095238095)*(x2104.value)*(((-93.1875)+(((625.0)*cj0*py))+(((-625.0)*px*sj0))))), ((-0.800223214285714)+(((3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2105=IKcos(j4);
IkReal x2106=IKsin(j4);
IkReal x2107=((1.0)*px);
IkReal x2108=(cj0*py);
IkReal x2109=((0.2688)*x2106);
IkReal x2110=((1.0)*py*sj0);
evalcond[0]=((-0.2151)+(((-0.2688)*x2105))+pz);
evalcond[1]=((0.09253602)+(((0.11563776)*x2105))+(((-0.4302)*pz)));
evalcond[2]=((0.1491)+((cj3*x2109))+(((-1.0)*x2108))+((px*sj0)));
evalcond[3]=((((-1.0)*sj3*x2109))+(((-1.0)*x2110))+(((-1.0)*cj0*x2107)));
evalcond[4]=((((-1.0)*cj0*sj3*x2107))+(((-0.1491)*cj3))+(((-1.0)*sj3*x2110))+(((-1.0)*x2109))+((cj3*x2108))+(((-1.0)*cj3*sj0*x2107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2111=IKPowWithIntegerCheck(sj3,-1);
if(!x2111.valid){
continue;
}
if( IKabs(((0.00595238095238095)*(x2111.value)*(((((-625.0)*py*sj0))+(((-625.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((3.7202380952381)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00595238095238095)*(x2111.value)*(((((-625.0)*py*sj0))+(((-625.0)*cj0*px))))))+IKsqr(((-0.800223214285714)+(((3.7202380952381)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.00595238095238095)*(x2111.value)*(((((-625.0)*py*sj0))+(((-625.0)*cj0*px))))), ((-0.800223214285714)+(((3.7202380952381)*pz))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2112=IKcos(j4);
IkReal x2113=IKsin(j4);
IkReal x2114=((1.0)*px);
IkReal x2115=(cj0*py);
IkReal x2116=((0.2688)*x2113);
IkReal x2117=((1.0)*py*sj0);
evalcond[0]=((-0.2151)+(((-0.2688)*x2112))+pz);
evalcond[1]=((0.09253602)+(((-0.4302)*pz))+(((0.11563776)*x2112)));
evalcond[2]=((0.1491)+((px*sj0))+(((-1.0)*x2115))+((cj3*x2116)));
evalcond[3]=((((-1.0)*sj3*x2116))+(((-1.0)*cj0*x2114))+(((-1.0)*x2117)));
evalcond[4]=((((-1.0)*cj3*sj0*x2114))+(((-0.1491)*cj3))+(((-1.0)*sj3*x2117))+(((-1.0)*cj0*sj3*x2114))+(((-1.0)*x2116))+((cj3*x2115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2118=(cj0*py);
IkReal x2119=((3.7202380952381)*sj2);
IkReal x2120=(px*sj0);
IkReal x2121=((3.7202380952381)*cj2);
if( IKabs(((((-1.0)*x2118*x2119))+(((0.5546875)*sj2))+((x2119*x2120))+((cj0*px*x2121))+((py*sj0*x2121)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2120))+(((-2.57874244537424)*x2118)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2118*x2119))+(((0.5546875)*sj2))+((x2119*x2120))+((cj0*px*x2121))+((py*sj0*x2121))))+IKsqr(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2120))+(((-2.57874244537424)*x2118))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2118*x2119))+(((0.5546875)*sj2))+((x2119*x2120))+((cj0*px*x2121))+((py*sj0*x2121))), ((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2120))+(((-2.57874244537424)*x2118))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2122=IKcos(j4);
IkReal x2123=IKsin(j4);
IkReal x2124=(px*sj0);
IkReal x2125=(cj0*py);
IkReal x2126=((0.2688)*x2123);
IkReal x2127=((0.2688)*x2122);
IkReal x2128=((1.0)*py*sj0);
IkReal x2129=((1.0)*cj0*px);
evalcond[0]=((0.09629064)+(((0.11563776)*x2122))+(((-1.0)*pp))+(((0.2982)*x2125))+(((-0.2982)*x2124)));
evalcond[1]=((0.1491)+((cj2*x2127))+x2124+(((-1.0)*x2125))+(((0.2151)*cj2))+(((-1.0)*sj2*x2126)));
evalcond[2]=(((sj2*x2127))+((cj2*x2126))+(((-1.0)*x2129))+(((-1.0)*x2128))+(((0.2151)*sj2)));
evalcond[3]=(((sj2*x2124))+(((-1.0)*sj2*x2125))+((cj2*py*sj0))+(((-1.0)*x2126))+(((0.1491)*sj2))+((cj0*cj2*px)));
evalcond[4]=((0.2151)+(((-1.0)*cj2*x2125))+((cj2*x2124))+x2127+(((0.1491)*cj2))+(((-1.0)*sj2*x2128))+(((-1.0)*sj2*x2129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2130=((3.7202380952381)*cj2);
IkReal x2131=(px*sj0);
IkReal x2132=(cj0*px);
IkReal x2133=((3.7202380952381)*sj2);
IkReal x2134=(py*x2133);
if( IKabs((((x2131*x2133))+(((-1.0)*py*sj0*x2130))+(((0.5546875)*sj2))+(((-1.0)*x2130*x2132))+(((-1.0)*cj0*x2134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+(((-1.0)*sj0*x2134))+(((-0.5546875)*cj2))+(((-1.0)*x2132*x2133))+(((-1.0)*x2130*x2131))+((cj0*py*x2130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2131*x2133))+(((-1.0)*py*sj0*x2130))+(((0.5546875)*sj2))+(((-1.0)*x2130*x2132))+(((-1.0)*cj0*x2134))))+IKsqr(((-0.800223214285714)+(((-1.0)*sj0*x2134))+(((-0.5546875)*cj2))+(((-1.0)*x2132*x2133))+(((-1.0)*x2130*x2131))+((cj0*py*x2130))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x2131*x2133))+(((-1.0)*py*sj0*x2130))+(((0.5546875)*sj2))+(((-1.0)*x2130*x2132))+(((-1.0)*cj0*x2134))), ((-0.800223214285714)+(((-1.0)*sj0*x2134))+(((-0.5546875)*cj2))+(((-1.0)*x2132*x2133))+(((-1.0)*x2130*x2131))+((cj0*py*x2130))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2135=IKcos(j4);
IkReal x2136=IKsin(j4);
IkReal x2137=(px*sj2);
IkReal x2138=((1.0)*cj2);
IkReal x2139=(py*sj0);
IkReal x2140=(cj0*px);
IkReal x2141=(cj0*py);
IkReal x2142=(px*sj0);
IkReal x2143=((0.2688)*x2136);
IkReal x2144=((0.2688)*x2135);
evalcond[0]=((0.09629064)+(((-0.2982)*x2142))+(((0.2982)*x2141))+(((-1.0)*pp))+(((0.11563776)*x2135)));
evalcond[1]=((0.1491)+(((-1.0)*x2141))+((cj2*x2144))+x2142+(((-1.0)*sj2*x2143))+(((0.2151)*cj2)));
evalcond[2]=((((-1.0)*x2140))+(((-1.0)*sj2*x2144))+(((-1.0)*x2139))+(((-0.2151)*sj2))+(((-1.0)*cj2*x2143)));
evalcond[3]=((0.2151)+(((-1.0)*x2138*x2141))+((cj0*x2137))+((cj2*x2142))+x2144+(((0.1491)*cj2))+((sj2*x2139)));
evalcond[4]=((((-1.0)*x2138*x2140))+(((-1.0)*sj2*x2141))+(((-1.0)*x2143))+(((-1.0)*x2138*x2139))+(((0.1491)*sj2))+((sj0*x2137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2145=((3.7202380952381)*cj2);
IkReal x2146=(px*sj0);
IkReal x2147=(cj0*px);
IkReal x2148=((3.7202380952381)*sj2);
IkReal x2149=(py*x2148);
if( IKabs(((((-1.0)*py*sj0*x2145))+(((-0.5546875)*sj2))+((cj0*x2149))+(((-1.0)*x2145*x2147))+(((-1.0)*x2146*x2148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.800223214285714)+((sj0*x2149))+(((-0.5546875)*cj2))+((cj0*py*x2145))+(((-1.0)*x2145*x2146))+((x2147*x2148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*py*sj0*x2145))+(((-0.5546875)*sj2))+((cj0*x2149))+(((-1.0)*x2145*x2147))+(((-1.0)*x2146*x2148))))+IKsqr(((-0.800223214285714)+((sj0*x2149))+(((-0.5546875)*cj2))+((cj0*py*x2145))+(((-1.0)*x2145*x2146))+((x2147*x2148))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*py*sj0*x2145))+(((-0.5546875)*sj2))+((cj0*x2149))+(((-1.0)*x2145*x2147))+(((-1.0)*x2146*x2148))), ((-0.800223214285714)+((sj0*x2149))+(((-0.5546875)*cj2))+((cj0*py*x2145))+(((-1.0)*x2145*x2146))+((x2147*x2148))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2150=IKcos(j4);
IkReal x2151=IKsin(j4);
IkReal x2152=((1.0)*cj2);
IkReal x2153=(py*sj0);
IkReal x2154=(px*sj0);
IkReal x2155=(cj0*px);
IkReal x2156=(cj0*py);
IkReal x2157=((1.0)*sj2);
IkReal x2158=((0.2688)*x2151);
IkReal x2159=((0.2688)*x2150);
evalcond[0]=((0.09629064)+(((0.2982)*x2156))+(((0.11563776)*x2150))+(((-1.0)*pp))+(((-0.2982)*x2154)));
evalcond[1]=((0.1491)+((sj2*x2158))+x2154+((cj2*x2159))+(((0.2151)*cj2))+(((-1.0)*x2156)));
evalcond[2]=(((sj2*x2159))+(((0.2151)*sj2))+(((-1.0)*cj2*x2158))+(((-1.0)*x2153))+(((-1.0)*x2155)));
evalcond[3]=(((sj2*x2156))+(((-1.0)*x2152*x2153))+(((-1.0)*x2152*x2155))+(((-1.0)*x2158))+(((-1.0)*x2154*x2157))+(((-0.1491)*sj2)));
evalcond[4]=((0.2151)+x2159+((cj2*x2154))+(((-1.0)*x2152*x2156))+(((0.1491)*cj2))+(((-1.0)*x2153*x2157))+(((-1.0)*x2155*x2157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2160=(cj0*py);
IkReal x2161=((3.7202380952381)*sj2);
IkReal x2162=(px*sj0);
IkReal x2163=((3.7202380952381)*cj2);
if( IKabs((((cj0*px*x2163))+(((-0.5546875)*sj2))+((py*sj0*x2163))+(((-1.0)*x2161*x2162))+((x2160*x2161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2162))+(((-2.57874244537424)*x2160)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*px*x2163))+(((-0.5546875)*sj2))+((py*sj0*x2163))+(((-1.0)*x2161*x2162))+((x2160*x2161))))+IKsqr(((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2162))+(((-2.57874244537424)*x2160))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj0*px*x2163))+(((-0.5546875)*sj2))+((py*sj0*x2163))+(((-1.0)*x2161*x2162))+((x2160*x2161))), ((-0.832692020322773)+(((8.64769431715038)*pp))+(((2.57874244537424)*x2162))+(((-2.57874244537424)*x2160))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2164=IKcos(j4);
IkReal x2165=IKsin(j4);
IkReal x2166=(cj0*py);
IkReal x2167=(px*sj0);
IkReal x2168=(py*sj0);
IkReal x2169=(cj0*px);
IkReal x2170=((0.2688)*x2165);
IkReal x2171=((0.2688)*x2164);
evalcond[0]=((0.09629064)+(((-1.0)*pp))+(((-0.2982)*x2167))+(((0.2982)*x2166))+(((0.11563776)*x2164)));
evalcond[1]=((0.1491)+((cj2*x2171))+x2167+((sj2*x2170))+(((0.2151)*cj2))+(((-1.0)*x2166)));
evalcond[2]=(((cj2*x2170))+(((-1.0)*sj2*x2171))+(((-0.2151)*sj2))+(((-1.0)*x2169))+(((-1.0)*x2168)));
evalcond[3]=(((sj2*x2166))+(((-1.0)*x2170))+(((-1.0)*sj2*x2167))+(((-0.1491)*sj2))+((cj2*x2169))+((cj2*x2168)));
evalcond[4]=((0.2151)+(((-1.0)*cj2*x2166))+x2171+((sj2*x2168))+((sj2*x2169))+(((0.1491)*cj2))+((cj2*x2167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2172=(cj0*py);
IkReal x2173=((931875.0)*cj2);
IkReal x2174=(px*sj0);
CheckValue<IkReal> x2175=IKPowWithIntegerCheck(cj3,-1);
if(!x2175.valid){
continue;
}
CheckValue<IkReal> x2176=IKPowWithIntegerCheck(sj2,-1);
if(!x2176.valid){
continue;
}
if( IKabs(((2.76726218148812e-6)*(x2175.value)*(x2176.value)*(((200446.3125)+(((-1344375.0)*x2172))+((x2173*x2174))+(((-11733.1875)*cj2))+(((-1.0)*x2172*x2173))+(((1344375.0)*x2174))+(((3125000.0)*cj2*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.832692020322773)+(((8.64769431715038)*pp))+(((-2.57874244537424)*x2172))+(((2.57874244537424)*x2174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.76726218148812e-6)*(x2175.value)*(x2176.value)*(((200446.3125)+(((-1344375.0)*x2172))+((x2173*x2174))+(((-11733.1875)*cj2))+(((-1.0)*x2172*x2173))+(((1344375.0)*x2174))+(((3125000.0)*cj2*pp))))))+IKsqr(((-0.832692020322773)+(((8.64769431715038)*pp))+(((-2.57874244537424)*x2172))+(((2.57874244537424)*x2174))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.76726218148812e-6)*(x2175.value)*(x2176.value)*(((200446.3125)+(((-1344375.0)*x2172))+((x2173*x2174))+(((-11733.1875)*cj2))+(((-1.0)*x2172*x2173))+(((1344375.0)*x2174))+(((3125000.0)*cj2*pp))))), ((-0.832692020322773)+(((8.64769431715038)*pp))+(((-2.57874244537424)*x2172))+(((2.57874244537424)*x2174))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2177=IKcos(j4);
IkReal x2178=IKsin(j4);
IkReal x2179=(cj1*sj2);
IkReal x2180=(cj1*cj2);
IkReal x2181=((1.0)*pz);
IkReal x2182=(px*sj0);
IkReal x2183=(sj1*sj2);
IkReal x2184=(cj3*sj2);
IkReal x2185=(cj1*sj3);
IkReal x2186=(cj0*py);
IkReal x2187=(sj1*sj3);
IkReal x2188=(py*sj0);
IkReal x2189=(cj2*sj1);
IkReal x2190=(cj0*px);
IkReal x2191=((0.2688)*x2178);
IkReal x2192=((0.2688)*x2177);
IkReal x2193=((1.0)*x2190);
IkReal x2194=(cj3*x2191);
evalcond[0]=((0.09629064)+(((0.2982)*x2186))+(((-1.0)*pp))+(((-0.2982)*x2182))+(((0.11563776)*x2177)));
evalcond[1]=((0.1491)+((cj2*x2192))+x2182+(((-1.0)*x2186))+(((-1.0)*x2184*x2191))+(((0.2151)*cj2)));
evalcond[2]=((((-0.2151)*x2179))+(((-1.0)*x2180*x2194))+((x2187*x2191))+pz+(((-1.0)*x2179*x2192)));
evalcond[3]=((((-1.0)*x2188))+((x2183*x2192))+((x2189*x2194))+(((-1.0)*x2193))+(((0.2151)*x2183))+((x2185*x2191)));
evalcond[4]=((0.2151)+x2192+(((0.1491)*cj2))+(((-1.0)*cj2*x2186))+(((-1.0)*x2183*x2193))+(((-1.0)*x2179*x2181))+(((-1.0)*x2183*x2188))+((cj2*x2182)));
evalcond[5]=(((x2182*x2184))+((cj3*x2189*x2190))+((cj3*pz*x2180))+(((-1.0)*x2181*x2187))+(((-1.0)*x2191))+((cj3*x2188*x2189))+((x2185*x2190))+(((-1.0)*x2184*x2186))+((x2185*x2188))+(((0.1491)*x2184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2195=(sj1*sj2);
IkReal x2196=(px*sj0);
IkReal x2197=(cj0*py);
CheckValue<IkReal> x2198=IKPowWithIntegerCheck(((((578.1888)*cj1*sj3))+(((578.1888)*cj2*cj3*sj1))),-1);
if(!x2198.valid){
continue;
}
if( IKabs(((x2198.value)*(((((2151.0)*cj0*px))+(((1491.0)*x2195*x2197))+(((-5000.0)*pp*x2195))+(((-1491.0)*x2195*x2196))+(((2151.0)*py*sj0))+(((18.7731)*x2195)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.832692020322773)+(((-2.57874244537424)*x2197))+(((8.64769431715038)*pp))+(((2.57874244537424)*x2196)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2198.value)*(((((2151.0)*cj0*px))+(((1491.0)*x2195*x2197))+(((-5000.0)*pp*x2195))+(((-1491.0)*x2195*x2196))+(((2151.0)*py*sj0))+(((18.7731)*x2195))))))+IKsqr(((-0.832692020322773)+(((-2.57874244537424)*x2197))+(((8.64769431715038)*pp))+(((2.57874244537424)*x2196))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x2198.value)*(((((2151.0)*cj0*px))+(((1491.0)*x2195*x2197))+(((-5000.0)*pp*x2195))+(((-1491.0)*x2195*x2196))+(((2151.0)*py*sj0))+(((18.7731)*x2195))))), ((-0.832692020322773)+(((-2.57874244537424)*x2197))+(((8.64769431715038)*pp))+(((2.57874244537424)*x2196))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2199=IKcos(j4);
IkReal x2200=IKsin(j4);
IkReal x2201=(cj1*sj2);
IkReal x2202=(cj1*cj2);
IkReal x2203=((1.0)*pz);
IkReal x2204=(px*sj0);
IkReal x2205=(sj1*sj2);
IkReal x2206=(cj3*sj2);
IkReal x2207=(cj1*sj3);
IkReal x2208=(cj0*py);
IkReal x2209=(sj1*sj3);
IkReal x2210=(py*sj0);
IkReal x2211=(cj2*sj1);
IkReal x2212=(cj0*px);
IkReal x2213=((0.2688)*x2200);
IkReal x2214=((0.2688)*x2199);
IkReal x2215=((1.0)*x2212);
IkReal x2216=(cj3*x2213);
evalcond[0]=((0.09629064)+(((0.11563776)*x2199))+(((0.2982)*x2208))+(((-1.0)*pp))+(((-0.2982)*x2204)));
evalcond[1]=((0.1491)+(((-1.0)*x2208))+x2204+((cj2*x2214))+(((-1.0)*x2206*x2213))+(((0.2151)*cj2)));
evalcond[2]=((((-0.2151)*x2201))+(((-1.0)*x2202*x2216))+pz+((x2209*x2213))+(((-1.0)*x2201*x2214)));
evalcond[3]=((((-1.0)*x2210))+(((-1.0)*x2215))+((x2205*x2214))+(((0.2151)*x2205))+((x2211*x2216))+((x2207*x2213)));
evalcond[4]=((0.2151)+(((-1.0)*x2205*x2215))+x2214+(((0.1491)*cj2))+((cj2*x2204))+(((-1.0)*cj2*x2208))+(((-1.0)*x2205*x2210))+(((-1.0)*x2201*x2203)));
evalcond[5]=((((-1.0)*x2203*x2209))+(((-1.0)*x2213))+(((-1.0)*x2206*x2208))+((cj3*x2211*x2212))+((x2204*x2206))+((cj3*pz*x2202))+((cj3*x2210*x2211))+((x2207*x2210))+((x2207*x2212))+(((0.1491)*x2206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2217=(px*sj0);
IkReal x2218=(cj1*sj2);
IkReal x2219=(cj0*py);
CheckValue<IkReal> x2220=IKPowWithIntegerCheck(((((-578.1888)*cj1*cj2*cj3))+(((578.1888)*sj1*sj3))),-1);
if(!x2220.valid){
continue;
}
if( IKabs(((x2220.value)*(((((1491.0)*x2217*x2218))+(((-1491.0)*x2218*x2219))+(((-18.7731)*x2218))+(((5000.0)*pp*x2218))+(((-2151.0)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.832692020322773)+(((-2.57874244537424)*x2219))+(((8.64769431715038)*pp))+(((2.57874244537424)*x2217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2220.value)*(((((1491.0)*x2217*x2218))+(((-1491.0)*x2218*x2219))+(((-18.7731)*x2218))+(((5000.0)*pp*x2218))+(((-2151.0)*pz))))))+IKsqr(((-0.832692020322773)+(((-2.57874244537424)*x2219))+(((8.64769431715038)*pp))+(((2.57874244537424)*x2217))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x2220.value)*(((((1491.0)*x2217*x2218))+(((-1491.0)*x2218*x2219))+(((-18.7731)*x2218))+(((5000.0)*pp*x2218))+(((-2151.0)*pz))))), ((-0.832692020322773)+(((-2.57874244537424)*x2219))+(((8.64769431715038)*pp))+(((2.57874244537424)*x2217))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2221=IKcos(j4);
IkReal x2222=IKsin(j4);
IkReal x2223=(cj1*sj2);
IkReal x2224=(cj1*cj2);
IkReal x2225=((1.0)*pz);
IkReal x2226=(px*sj0);
IkReal x2227=(sj1*sj2);
IkReal x2228=(cj3*sj2);
IkReal x2229=(cj1*sj3);
IkReal x2230=(cj0*py);
IkReal x2231=(sj1*sj3);
IkReal x2232=(py*sj0);
IkReal x2233=(cj2*sj1);
IkReal x2234=(cj0*px);
IkReal x2235=((0.2688)*x2222);
IkReal x2236=((0.2688)*x2221);
IkReal x2237=((1.0)*x2234);
IkReal x2238=(cj3*x2235);
evalcond[0]=((0.09629064)+(((-0.2982)*x2226))+(((0.2982)*x2230))+(((-1.0)*pp))+(((0.11563776)*x2221)));
evalcond[1]=((0.1491)+x2226+(((-1.0)*x2228*x2235))+(((-1.0)*x2230))+(((0.2151)*cj2))+((cj2*x2236)));
evalcond[2]=((((-1.0)*x2224*x2238))+(((-1.0)*x2223*x2236))+pz+((x2231*x2235))+(((-0.2151)*x2223)));
evalcond[3]=(((x2229*x2235))+((x2227*x2236))+(((-1.0)*x2237))+((x2233*x2238))+(((-1.0)*x2232))+(((0.2151)*x2227)));
evalcond[4]=((0.2151)+x2236+(((-1.0)*x2227*x2232))+(((-1.0)*x2227*x2237))+(((0.1491)*cj2))+(((-1.0)*x2223*x2225))+(((-1.0)*cj2*x2230))+((cj2*x2226)));
evalcond[5]=(((cj3*pz*x2224))+((x2226*x2228))+(((-1.0)*x2225*x2231))+((cj3*x2232*x2233))+((x2229*x2232))+((x2229*x2234))+((cj3*x2233*x2234))+(((0.1491)*x2228))+(((-1.0)*x2235))+(((-1.0)*x2228*x2230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x238=((1.0)*sj2);
IkReal x239=(cj2*cj4);
IkReal x240=(sj0*sj3);
IkReal x241=((1.0)*sj0);
IkReal x242=(cj4*sj3);
IkReal x243=((1.0)*cj2);
IkReal x244=(sj1*sj3);
IkReal x245=(cj3*sj4);
IkReal x246=((1.0)*sj1);
IkReal x247=(sj1*x242);
IkReal x248=((1.0)*cj1*sj3);
IkReal x249=((-1.0)*cj1);
IkReal x250=((((-1.0)*x243*x244))+((cj1*cj3)));
IkReal x251=((((-1.0)*sj4*x238))+((cj3*x239)));
IkReal x252=(((cj2*sj4))+((cj3*cj4*sj2)));
IkReal x253=(x239+(((-1.0)*x238*x245)));
IkReal x254=(cj0*x250);
IkReal x255=(cj0*x252);
IkReal x256=((1.0)*x251);
IkReal x257=((((-1.0)*cj3*x246))+(((-1.0)*cj1*sj3*x243)));
IkReal x258=((((-1.0)*x243*x245))+(((-1.0)*cj4*x238)));
IkReal x259=((-1.0)*sj0*x252);
IkReal x260=(((sj0*x250))+((cj0*sj2*sj3)));
IkReal x261=((((-1.0)*sj2*x240))+x254);
IkReal x262=(((x249*x251))+x247);
IkReal x263=((((-1.0)*x246*x251))+(((-1.0)*cj1*x242)));
IkReal x264=((((-1.0)*x246*x258))+((cj1*sj3*sj4)));
IkReal x265=((((-1.0)*sj1*x251))+((x242*x249)));
IkReal x266=(cj0*x263);
IkReal x267=(((x249*x258))+(((-1.0)*sj4*x244)));
IkReal x268=(x255+((sj0*x263)));
IkReal x269=(((cj0*x264))+(((-1.0)*x241*x253)));
IkReal x270=(((cj0*x253))+((sj0*x264)));
new_r00=(((r20*x257))+((r00*x261))+((r10*x260)));
new_r01=(((r21*x257))+((r11*x260))+((r01*x261)));
new_r02=(((r12*x260))+((r22*x257))+((r02*((x254+(((-1.0)*x238*x240)))))));
new_r10=(((r10*((x255+((sj0*x265))))))+((r20*((x247+(((-1.0)*cj1*x256))))))+((r00*((((cj0*x265))+x259)))));
new_r11=(((r21*x262))+((r01*((x259+x266))))+((r11*x268)));
new_r12=(((r22*x262))+((r12*x268))+((r02*(((((-1.0)*x241*x252))+x266)))));
new_r20=(((r00*x269))+((r10*x270))+((r20*x267)));
new_r21=(((r21*x267))+((r11*x270))+((r01*x269)));
new_r22=(((r22*x267))+((r02*x269))+((r12*x270)));
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
sj6array[0]=((-1.0)*new_r22);
if( sj6array[0] >= -1-IKFAST_SINCOS_THRESH && sj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKasin(sj6array[0]);
    cj6array[0] = IKcos(j6array[0]);
    sj6array[1] = sj6array[0];
    j6array[1] = j6array[0] > 0 ? (IKPI-j6array[0]) : (-IKPI-j6array[0]);
    cj6array[1] = -cj6array[0];
}
else if( isnan(sj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
j7eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
j5eval[0]=cj6;
j5eval[1]=IKsign(cj6);
j5eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj6;
j5eval[1]=new_r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j7mul = 1;
j7=0;
j5mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].fmul = j7mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 7;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j7mul = 1;
j7=0;
j5mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5=IKatan2(((-1.0)*new_r01), new_r11);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].fmul = j7mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 7;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x271=new_r22*new_r22;
IkReal x272=((16.0)*new_r10);
IkReal x273=((16.0)*new_r01);
IkReal x274=((16.0)*new_r00);
IkReal x275=(new_r11*new_r22);
IkReal x276=((8.0)*new_r00);
IkReal x277=(x271*x272);
IkReal x278=(x271*x273);
j5eval[0]=((IKabs(((((32.0)*new_r00))+(((-1.0)*x271*x274))+(((-16.0)*x275)))))+(IKabs((x278+(((-1.0)*x273)))))+(IKabs((((new_r22*x276))+(((-8.0)*new_r11)))))+(IKabs((x273+(((-1.0)*x278)))))+(IKabs((x272+(((-1.0)*x277)))))+(IKabs((((x271*x276))+(((-8.0)*x275)))))+(IKabs((((new_r22*x274))+(((-32.0)*new_r11*x271))+(((16.0)*new_r11)))))+(IKabs((x277+(((-1.0)*x272))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5, j7]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j5evalpoly[1];
IkReal x279=new_r22*new_r22;
IkReal x280=((16.0)*new_r01);
IkReal x281=(new_r00*new_r22);
IkReal x282=(x279*x280);
IkReal x283=((((8.0)*x281))+(((-8.0)*new_r11)));
op[0]=x283;
op[1]=(x282+(((-1.0)*x280)));
op[2]=((((-32.0)*new_r11*x279))+(((16.0)*x281))+(((16.0)*new_r11)));
op[3]=(x280+(((-1.0)*x282)));
op[4]=x283;
polyroots4(op,zeror,numroots);
IkReal j5array[4], cj5array[4], sj5array[4], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[4]={true,true,true,true};
_nj5 = 4;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x284=new_r22*new_r22;
IkReal x285=((16.0)*new_r10);
IkReal x286=(new_r11*new_r22);
IkReal x287=((8.0)*x286);
IkReal x288=(new_r00*x284);
IkReal x289=((8.0)*x288);
IkReal x290=(x284*x285);
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*((x289+(((-1.0)*x287))))))+x289+(((-1.0)*x287))+(((htj5*htj5*htj5)*(((((-1.0)*x290))+x285))))+((htj5*((x290+(((-1.0)*x285))))))+(((htj5*htj5)*(((((32.0)*new_r00))+(((-16.0)*x286))+(((-16.0)*x288)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j7eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x291=cj5*cj5;
IkReal x292=new_r22*new_r22;
IkReal x293=(new_r22*sj5);
IkReal x294=((((-1.0)*x291))+(((-1.0)*x292))+((x291*x292)));
j7eval[0]=x294;
j7eval[1]=((IKabs((((cj5*new_r01))+((new_r00*x293)))))+(IKabs(((((-1.0)*cj5*new_r00))+((new_r01*x293))))));
j7eval[2]=IKsign(x294);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=new_r22;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=cj5;
j7eval[1]=new_r22;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x295=IKsin(j7);
IkReal x296=IKcos(j7);
IkReal x297=((1.0)*new_r01);
IkReal x298=((1.0)*new_r00);
IkReal x299=((1.0)*x296);
IkReal x300=((1.0)*x295);
evalcond[0]=(x295+new_r11);
evalcond[1]=((((-1.0)*x299))+new_r10);
evalcond[2]=((((-1.0)*new_r22*x300))+(((-1.0)*x298)));
evalcond[3]=((((-1.0)*x297))+(((-1.0)*new_r22*x299)));
evalcond[4]=((((-1.0)*new_r22*x298))+(((-1.0)*x300)));
evalcond[5]=((((-1.0)*x299))+(((-1.0)*new_r22*x297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x301=IKsin(j7);
IkReal x302=IKcos(j7);
IkReal x303=((1.0)*x302);
IkReal x304=((1.0)*x301);
evalcond[0]=(x301+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*new_r22*x304))+new_r00);
evalcond[2]=((((-1.0)*new_r22*x303))+new_r01);
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x303)));
evalcond[4]=(((new_r00*new_r22))+(((-1.0)*x304)));
evalcond[5]=(((new_r01*new_r22))+(((-1.0)*x303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x305=new_r22*new_r22;
CheckValue<IkReal> x306=IKPowWithIntegerCheck(((-1.0)+x305),-1);
if(!x306.valid){
continue;
}
if(((x305*(x306.value))) < -0.00001)
continue;
IkReal gconst38=IKsqrt((x305*(x306.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj5)))))+(IKabs((cj5+(((-1.0)*gconst38)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst38*gconst38))))) < -0.00001)
continue;
IkReal x307=IKsqrt(((1.0)+(((-1.0)*(gconst38*gconst38)))));
if( IKabs(((((-1.0)*gconst38*new_r01))+(((-1.0)*new_r11*x307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r10*x307))+((gconst38*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst38*new_r01))+(((-1.0)*new_r11*x307))))+IKsqr((((new_r10*x307))+((gconst38*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*gconst38*new_r01))+(((-1.0)*new_r11*x307))), (((new_r10*x307))+((gconst38*new_r00))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x308=IKcos(j7);
IkReal x309=IKsin(j7);
IkReal x310=(gconst38*new_r22);
IkReal x311=((1.0)*x308);
IkReal x312=((1.0)*x309);
IkReal x313=x307;
IkReal x314=(new_r22*x313);
IkReal x315=((1.0)*x313);
evalcond[0]=(x309+((new_r11*x313))+((gconst38*new_r01)));
evalcond[1]=((((-1.0)*x311))+((new_r10*x313))+((gconst38*new_r00)));
evalcond[2]=(((x308*x314))+((gconst38*x309))+new_r01);
evalcond[3]=((((-1.0)*x310*x311))+((x309*x313))+new_r11);
evalcond[4]=((((-1.0)*new_r00*x315))+(((-1.0)*new_r22*x312))+((gconst38*new_r10)));
evalcond[5]=((((-1.0)*new_r22*x311))+((gconst38*new_r11))+(((-1.0)*new_r01*x315)));
evalcond[6]=(((x309*x314))+new_r00+(((-1.0)*gconst38*x311)));
evalcond[7]=((((-1.0)*x310*x312))+new_r10+(((-1.0)*x311*x313)));
evalcond[8]=((((-1.0)*new_r00*x314))+(((-1.0)*x312))+((new_r10*x310)));
evalcond[9]=((((-1.0)*new_r01*x314))+(((-1.0)*x311))+((new_r11*x310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x316=new_r22*new_r22;
CheckValue<IkReal> x317=IKPowWithIntegerCheck(((-1.0)+x316),-1);
if(!x317.valid){
continue;
}
if(((x316*(x317.value))) < -0.00001)
continue;
IkReal gconst38=IKsqrt((x316*(x317.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj5)))))+(IKabs((cj5+(((-1.0)*gconst38)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst38*gconst38))))) < -0.00001)
continue;
IkReal x318=IKsqrt(((1.0)+(((-1.0)*(gconst38*gconst38)))));
if( IKabs(((((-1.0)*gconst38*new_r01))+((new_r11*x318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r10*x318))+((gconst38*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst38*new_r01))+((new_r11*x318))))+IKsqr(((((-1.0)*new_r10*x318))+((gconst38*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*gconst38*new_r01))+((new_r11*x318))), ((((-1.0)*new_r10*x318))+((gconst38*new_r00))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x319=IKsin(j7);
IkReal x320=IKcos(j7);
IkReal x321=(gconst38*new_r22);
IkReal x322=((1.0)*x320);
IkReal x323=((1.0)*x319);
IkReal x324=x318;
IkReal x325=((1.0)*x324);
IkReal x326=(new_r22*x324);
evalcond[0]=(x319+((gconst38*new_r01))+(((-1.0)*new_r11*x325)));
evalcond[1]=((((-1.0)*x322))+((gconst38*new_r00))+(((-1.0)*new_r10*x325)));
evalcond[2]=(((new_r00*x324))+(((-1.0)*new_r22*x323))+((gconst38*new_r10)));
evalcond[3]=(((new_r01*x324))+(((-1.0)*new_r22*x322))+((gconst38*new_r11)));
evalcond[4]=(((gconst38*x319))+(((-1.0)*x322*x326))+new_r01);
evalcond[5]=((((-1.0)*x321*x323))+((x320*x324))+new_r10);
evalcond[6]=(((new_r00*x326))+(((-1.0)*x323))+((new_r10*x321)));
evalcond[7]=(((new_r01*x326))+(((-1.0)*x322))+((new_r11*x321)));
evalcond[8]=((((-1.0)*x321*x322))+(((-1.0)*x323*x324))+new_r11);
evalcond[9]=((((-1.0)*gconst38*x322))+(((-1.0)*x323*x326))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x327=new_r22*new_r22;
CheckValue<IkReal> x328=IKPowWithIntegerCheck(((-1.0)+x327),-1);
if(!x328.valid){
continue;
}
if(((x327*(x328.value))) < -0.00001)
continue;
IkReal gconst39=((-1.0)*(IKsqrt((x327*(x328.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj5)))))+(IKabs((cj5+(((-1.0)*gconst39)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst39*gconst39))))) < -0.00001)
continue;
IkReal x329=IKsqrt(((1.0)+(((-1.0)*(gconst39*gconst39)))));
if( IKabs(((((-1.0)*gconst39*new_r01))+(((-1.0)*new_r11*x329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst39*new_r00))+((new_r10*x329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst39*new_r01))+(((-1.0)*new_r11*x329))))+IKsqr((((gconst39*new_r00))+((new_r10*x329))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*gconst39*new_r01))+(((-1.0)*new_r11*x329))), (((gconst39*new_r00))+((new_r10*x329))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x330=IKsin(j7);
IkReal x331=IKcos(j7);
IkReal x332=((1.0)*new_r22);
IkReal x333=(gconst39*new_r10);
IkReal x334=(gconst39*new_r11);
IkReal x335=((1.0)*x331);
IkReal x336=(gconst39*x330);
IkReal x337=x329;
IkReal x338=(new_r00*x337);
IkReal x339=(new_r22*x337);
IkReal x340=(new_r01*x337);
evalcond[0]=(((new_r11*x337))+((gconst39*new_r01))+x330);
evalcond[1]=(((new_r10*x337))+((gconst39*new_r00))+(((-1.0)*x335)));
evalcond[2]=(((x331*x339))+x336+new_r01);
evalcond[3]=(((x330*x337))+(((-1.0)*gconst39*x331*x332))+new_r11);
evalcond[4]=(x333+(((-1.0)*x338))+(((-1.0)*x330*x332)));
evalcond[5]=(x334+(((-1.0)*x331*x332))+(((-1.0)*x340)));
evalcond[6]=(((x330*x339))+(((-1.0)*gconst39*x335))+new_r00);
evalcond[7]=((((-1.0)*x332*x336))+new_r10+(((-1.0)*x335*x337)));
evalcond[8]=(((new_r22*x333))+(((-1.0)*x330))+(((-1.0)*x332*x338)));
evalcond[9]=(((new_r22*x334))+(((-1.0)*x332*x340))+(((-1.0)*x335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x341=new_r22*new_r22;
CheckValue<IkReal> x342=IKPowWithIntegerCheck(((-1.0)+x341),-1);
if(!x342.valid){
continue;
}
if(((x341*(x342.value))) < -0.00001)
continue;
IkReal gconst39=((-1.0)*(IKsqrt((x341*(x342.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj5)))))+(IKabs((cj5+(((-1.0)*gconst39)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst39*gconst39))))) < -0.00001)
continue;
IkReal x343=IKsqrt(((1.0)+(((-1.0)*(gconst39*gconst39)))));
if( IKabs((((new_r11*x343))+(((-1.0)*gconst39*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r10*x343))+((gconst39*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*x343))+(((-1.0)*gconst39*new_r01))))+IKsqr(((((-1.0)*new_r10*x343))+((gconst39*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((new_r11*x343))+(((-1.0)*gconst39*new_r01))), ((((-1.0)*new_r10*x343))+((gconst39*new_r00))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x344=IKsin(j7);
IkReal x345=IKcos(j7);
IkReal x346=(gconst39*new_r10);
IkReal x347=(gconst39*new_r11);
IkReal x348=((1.0)*x345);
IkReal x349=(new_r22*x344);
IkReal x350=(new_r22*x345);
IkReal x351=(gconst39*x348);
IkReal x352=x343;
IkReal x353=((1.0)*x352);
IkReal x354=(new_r22*x352);
evalcond[0]=(((gconst39*new_r01))+x344+(((-1.0)*new_r11*x353)));
evalcond[1]=(((gconst39*new_r00))+(((-1.0)*x348))+(((-1.0)*new_r10*x353)));
evalcond[2]=(x346+(((-1.0)*x349))+((new_r00*x352)));
evalcond[3]=(((new_r01*x352))+x347+(((-1.0)*new_r22*x348)));
evalcond[4]=((((-1.0)*x348*x354))+((gconst39*x344))+new_r01);
evalcond[5]=(((x345*x352))+(((-1.0)*gconst39*x349))+new_r10);
evalcond[6]=(((new_r22*x346))+(((-1.0)*x344))+((new_r00*x354)));
evalcond[7]=(((new_r01*x354))+((new_r22*x347))+(((-1.0)*x348)));
evalcond[8]=((((-1.0)*new_r22*x351))+(((-1.0)*x344*x353))+new_r11);
evalcond[9]=((((-1.0)*x351))+(((-1.0)*x349*x353))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x355=((1.0)*cj5*new_r01);
CheckValue<IkReal> x356=IKPowWithIntegerCheck(cj5,-1);
if(!x356.valid){
continue;
}
CheckValue<IkReal> x357=IKPowWithIntegerCheck(new_r22,-1);
if(!x357.valid){
continue;
}
if( IKabs(((((-1.0)*x355))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x356.value)*(x357.value)*((((new_r11*(cj5*cj5)))+(((-1.0)*sj5*x355)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x355))+(((-1.0)*new_r11*sj5))))+IKsqr(((x356.value)*(x357.value)*((((new_r11*(cj5*cj5)))+(((-1.0)*sj5*x355))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*x355))+(((-1.0)*new_r11*sj5))), ((x356.value)*(x357.value)*((((new_r11*(cj5*cj5)))+(((-1.0)*sj5*x355))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x358=IKsin(j7);
IkReal x359=IKcos(j7);
IkReal x360=((1.0)*sj5);
IkReal x361=(cj5*new_r22);
IkReal x362=((1.0)*x359);
IkReal x363=((1.0)*x358);
IkReal x364=(sj5*x358);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x358);
evalcond[1]=(((new_r10*sj5))+(((-1.0)*x362))+((cj5*new_r00)));
evalcond[2]=(((new_r22*sj5*x359))+((cj5*x358))+new_r01);
evalcond[3]=((((-1.0)*x361*x362))+x364+new_r11);
evalcond[4]=((((-1.0)*new_r00*x360))+((cj5*new_r10))+(((-1.0)*new_r22*x363)));
evalcond[5]=(((cj5*new_r11))+(((-1.0)*new_r22*x362))+(((-1.0)*new_r01*x360)));
evalcond[6]=(((new_r22*x364))+(((-1.0)*cj5*x362))+new_r00);
evalcond[7]=((((-1.0)*x361*x363))+(((-1.0)*x359*x360))+new_r10);
evalcond[8]=((((-1.0)*x363))+(((-1.0)*new_r00*new_r22*x360))+((new_r10*x361)));
evalcond[9]=((((-1.0)*x362))+((new_r11*x361))+(((-1.0)*new_r01*new_r22*x360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x365=((1.0)*new_r01);
CheckValue<IkReal> x366=IKPowWithIntegerCheck(new_r22,-1);
if(!x366.valid){
continue;
}
if( IKabs(((((-1.0)*cj5*x365))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x366.value)*(((((-1.0)*sj5*x365))+((cj5*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x365))+(((-1.0)*new_r11*sj5))))+IKsqr(((x366.value)*(((((-1.0)*sj5*x365))+((cj5*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj5*x365))+(((-1.0)*new_r11*sj5))), ((x366.value)*(((((-1.0)*sj5*x365))+((cj5*new_r11))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x367=IKsin(j7);
IkReal x368=IKcos(j7);
IkReal x369=((1.0)*sj5);
IkReal x370=(cj5*new_r22);
IkReal x371=((1.0)*x368);
IkReal x372=((1.0)*x367);
IkReal x373=(sj5*x367);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x367);
evalcond[1]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x371)));
evalcond[2]=(((cj5*x367))+new_r01+((new_r22*sj5*x368)));
evalcond[3]=((((-1.0)*x370*x371))+x373+new_r11);
evalcond[4]=((((-1.0)*new_r00*x369))+((cj5*new_r10))+(((-1.0)*new_r22*x372)));
evalcond[5]=(((cj5*new_r11))+(((-1.0)*new_r22*x371))+(((-1.0)*new_r01*x369)));
evalcond[6]=((((-1.0)*cj5*x371))+new_r00+((new_r22*x373)));
evalcond[7]=((((-1.0)*x370*x372))+new_r10+(((-1.0)*x368*x369)));
evalcond[8]=((((-1.0)*x372))+(((-1.0)*new_r00*new_r22*x369))+((new_r10*x370)));
evalcond[9]=((((-1.0)*x371))+(((-1.0)*new_r01*new_r22*x369))+((new_r11*x370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x374=cj5*cj5;
IkReal x375=new_r22*new_r22;
IkReal x376=(new_r22*sj5);
CheckValue<IkReal> x377=IKPowWithIntegerCheck(IKsign(((((-1.0)*x374))+(((-1.0)*x375))+((x374*x375)))),-1);
if(!x377.valid){
continue;
}
CheckValue<IkReal> x378 = IKatan2WithCheck(IkReal((((cj5*new_r01))+((new_r00*x376)))),IkReal(((((-1.0)*cj5*new_r00))+((new_r01*x376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x378.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x377.value)))+(x378.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x379=IKsin(j7);
IkReal x380=IKcos(j7);
IkReal x381=((1.0)*sj5);
IkReal x382=(cj5*new_r22);
IkReal x383=((1.0)*x380);
IkReal x384=((1.0)*x379);
IkReal x385=(sj5*x379);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x379);
evalcond[1]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x383)));
evalcond[2]=(((new_r22*sj5*x380))+((cj5*x379))+new_r01);
evalcond[3]=(x385+new_r11+(((-1.0)*x382*x383)));
evalcond[4]=(((cj5*new_r10))+(((-1.0)*new_r00*x381))+(((-1.0)*new_r22*x384)));
evalcond[5]=(((cj5*new_r11))+(((-1.0)*new_r01*x381))+(((-1.0)*new_r22*x383)));
evalcond[6]=(((new_r22*x385))+(((-1.0)*cj5*x383))+new_r00);
evalcond[7]=((((-1.0)*x380*x381))+new_r10+(((-1.0)*x382*x384)));
evalcond[8]=((((-1.0)*new_r00*new_r22*x381))+((new_r10*x382))+(((-1.0)*x384)));
evalcond[9]=((((-1.0)*new_r01*new_r22*x381))+((new_r11*x382))+(((-1.0)*x383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5, j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x387=IKPowWithIntegerCheck(cj6,-1);
if(!x387.valid){
continue;
}
IkReal x386=x387.value;
CheckValue<IkReal> x388=IKPowWithIntegerCheck(new_r02,-1);
if(!x388.valid){
continue;
}
CheckValue<IkReal> x389=IKPowWithIntegerCheck(x386,-2);
if(!x389.valid){
continue;
}
if( IKabs((x386*(x388.value)*(((x389.value)+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x386)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x386*(x388.value)*(((x389.value)+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x386))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x386*(x388.value)*(((x389.value)+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x386));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x390=IKsin(j5);
IkReal x391=IKcos(j5);
IkReal x392=(new_r12*x391);
IkReal x393=(cj6*x391);
IkReal x394=(new_r02*x390);
IkReal x395=((1.0)*cj6*x390);
evalcond[0]=(x393+new_r12);
evalcond[1]=((((-1.0)*x395))+new_r02);
evalcond[2]=(((new_r02*x391))+((new_r12*x390)));
evalcond[3]=((((-1.0)*x394))+cj6+x392);
evalcond[4]=(((new_r20*sj6))+(((-1.0)*new_r00*x395))+((new_r10*x393)));
evalcond[5]=((((-1.0)*new_r01*x395))+((new_r11*x393))+((new_r21*sj6)));
evalcond[6]=(((sj6*x394))+(((-1.0)*sj6*x392))+((cj6*new_r22)));
evalcond[7]=((1.0)+((new_r22*sj6))+((cj6*x392))+(((-1.0)*cj6*x394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
j7eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj6;
j7eval[1]=sj5;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=sj5;
j7eval[2]=sj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x396=((1.0)*cj5);
if( IKabs(((((-1.0)*new_r01*x396))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj5))+(((-1.0)*new_r11*x396)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x396))+(((-1.0)*new_r11*sj5))))+IKsqr((((new_r01*sj5))+(((-1.0)*new_r11*x396))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r01*x396))+(((-1.0)*new_r11*sj5))), (((new_r01*sj5))+(((-1.0)*new_r11*x396))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x397=IKsin(j7);
IkReal x398=IKcos(j7);
IkReal x399=((1.0)*sj5);
IkReal x400=(cj5*x397);
IkReal x401=(cj5*x398);
IkReal x402=(x398*x399);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x397);
evalcond[1]=(((cj5*new_r10))+x397+(((-1.0)*new_r00*x399)));
evalcond[2]=((((-1.0)*new_r01*x399))+((cj5*new_r11))+x398);
evalcond[3]=((((-1.0)*x398))+((new_r10*sj5))+((cj5*new_r00)));
evalcond[4]=(x401+((sj5*x397))+new_r11);
evalcond[5]=(x400+new_r01+(((-1.0)*x402)));
evalcond[6]=(x400+new_r10+(((-1.0)*x402)));
evalcond[7]=((((-1.0)*x397*x399))+new_r00+(((-1.0)*x401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x403=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj5*x403))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x403))+((cj5*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x403))+(((-1.0)*new_r11*sj5))))+IKsqr(((((-1.0)*sj5*x403))+((cj5*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj5*x403))+(((-1.0)*new_r11*sj5))), ((((-1.0)*sj5*x403))+((cj5*new_r11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x404=IKsin(j7);
IkReal x405=IKcos(j7);
IkReal x406=((1.0)*sj5);
IkReal x407=((1.0)*x405);
IkReal x408=(sj5*x404);
IkReal x409=((1.0)*x404);
IkReal x410=(cj5*x407);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x404);
evalcond[1]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x407)));
evalcond[2]=(((cj5*x404))+((sj5*x405))+new_r01);
evalcond[3]=(x408+new_r11+(((-1.0)*x410)));
evalcond[4]=(((cj5*new_r10))+(((-1.0)*new_r00*x406))+(((-1.0)*x409)));
evalcond[5]=(((cj5*new_r11))+(((-1.0)*new_r01*x406))+(((-1.0)*x407)));
evalcond[6]=(x408+new_r00+(((-1.0)*x410)));
evalcond[7]=((((-1.0)*cj5*x409))+new_r10+(((-1.0)*x405*x406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x411=IKcos(j7);
IkReal x412=IKsin(j7);
IkReal x413=((1.0)*sj6);
IkReal x414=((1.0)*x411);
IkReal x415=((1.0)*x412);
evalcond[0]=(x412+new_r01);
evalcond[1]=(new_r00+(((-1.0)*x414)));
evalcond[2]=(((sj6*x411))+new_r11);
evalcond[3]=(((sj6*x412))+new_r10);
evalcond[4]=((((-1.0)*cj6*x415))+new_r20);
evalcond[5]=((((-1.0)*cj6*x414))+new_r21);
evalcond[6]=((((-1.0)*x415))+(((-1.0)*new_r10*x413))+((cj6*new_r20)));
evalcond[7]=((((-1.0)*new_r11*x413))+(((-1.0)*x414))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x416=IKsin(j7);
IkReal x417=IKcos(j7);
IkReal x418=((1.0)*x417);
IkReal x419=((1.0)*x416);
evalcond[0]=(x416+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*cj6*x419))+new_r20);
evalcond[2]=((((-1.0)*cj6*x418))+new_r21);
evalcond[3]=((((-1.0)*sj6*x418))+new_r11);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x418)));
evalcond[5]=(((sj6*x416))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r10*sj6))+(((-1.0)*x419))+((cj6*new_r20)));
evalcond[7]=(((new_r11*sj6))+(((-1.0)*x418))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r20, new_r21);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x420=IKsin(j7);
IkReal x421=IKcos(j7);
IkReal x422=((1.0)*x421);
evalcond[0]=((((-1.0)*x420))+new_r20);
evalcond[1]=((((-1.0)*x422))+new_r21);
evalcond[2]=(new_r11+((new_r02*x420)));
evalcond[3]=(((cj5*x420))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x422))+new_r10);
evalcond[5]=((((-1.0)*cj5*x422))+new_r00);
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x420);
evalcond[7]=(((new_r10*sj5))+(((-1.0)*x422))+((cj5*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x423=IKsin(j7);
IkReal x424=IKcos(j7);
IkReal x425=((1.0)*x424);
evalcond[0]=(x423+new_r20);
evalcond[1]=(x424+new_r21);
evalcond[2]=(((cj5*x423))+new_r01);
evalcond[3]=(new_r10+((new_r02*x424)));
evalcond[4]=((((-1.0)*new_r02*x423))+new_r11);
evalcond[5]=((((-1.0)*cj5*x425))+new_r00);
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x423);
evalcond[7]=(((new_r10*sj5))+(((-1.0)*x425))+((cj5*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x427=IKPowWithIntegerCheck(cj6,-1);
if(!x427.valid){
continue;
}
IkReal x426=x427.value;
CheckValue<IkReal> x428=IKPowWithIntegerCheck(sj5,-1);
if(!x428.valid){
continue;
}
CheckValue<IkReal> x429=IKPowWithIntegerCheck(sj6,-1);
if(!x429.valid){
continue;
}
if( IKabs((new_r20*x426)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x426*(x428.value)*(x429.value)*((((cj5*new_r20))+((cj6*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x426))+IKsqr((x426*(x428.value)*(x429.value)*((((cj5*new_r20))+((cj6*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x426), (x426*(x428.value)*(x429.value)*((((cj5*new_r20))+((cj6*new_r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x430=IKsin(j7);
IkReal x431=IKcos(j7);
IkReal x432=(new_r01*sj5);
IkReal x433=((1.0)*sj5);
IkReal x434=(cj5*sj6);
IkReal x435=(sj5*sj6);
IkReal x436=((1.0)*x431);
IkReal x437=(sj6*x430);
IkReal x438=((1.0)*x430);
evalcond[0]=((((-1.0)*cj6*x438))+new_r20);
evalcond[1]=((((-1.0)*cj6*x436))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x430);
evalcond[3]=((((-1.0)*x436))+((new_r10*sj5))+((cj5*new_r00)));
evalcond[4]=(((x431*x434))+new_r11+((sj5*x430)));
evalcond[5]=((((-1.0)*new_r00*x433))+((cj5*new_r10))+x437);
evalcond[6]=((((-1.0)*x432))+((cj5*new_r11))+((sj6*x431)));
evalcond[7]=(((cj5*x430))+new_r01+(((-1.0)*sj6*x431*x433)));
evalcond[8]=((((-1.0)*x431*x433))+((x430*x434))+new_r10);
evalcond[9]=((((-1.0)*x433*x437))+(((-1.0)*cj5*x436))+new_r00);
evalcond[10]=((((-1.0)*x438))+((new_r00*x435))+(((-1.0)*new_r10*x434))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x436))+((sj6*x432))+(((-1.0)*new_r11*x434))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x440=IKPowWithIntegerCheck(cj6,-1);
if(!x440.valid){
continue;
}
IkReal x439=x440.value;
CheckValue<IkReal> x441=IKPowWithIntegerCheck(sj5,-1);
if(!x441.valid){
continue;
}
if( IKabs((new_r20*x439)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x439*(x441.value)*((((cj6*new_r10))+((cj5*new_r20*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x439))+IKsqr((x439*(x441.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x439), (x439*(x441.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x442=IKsin(j7);
IkReal x443=IKcos(j7);
IkReal x444=(new_r01*sj5);
IkReal x445=((1.0)*sj5);
IkReal x446=(cj5*sj6);
IkReal x447=(sj5*sj6);
IkReal x448=((1.0)*x443);
IkReal x449=(sj6*x442);
IkReal x450=((1.0)*x442);
evalcond[0]=((((-1.0)*cj6*x450))+new_r20);
evalcond[1]=((((-1.0)*cj6*x448))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x442);
evalcond[3]=((((-1.0)*x448))+((new_r10*sj5))+((cj5*new_r00)));
evalcond[4]=(((sj5*x442))+new_r11+((x443*x446)));
evalcond[5]=((((-1.0)*new_r00*x445))+((cj5*new_r10))+x449);
evalcond[6]=(((sj6*x443))+((cj5*new_r11))+(((-1.0)*x444)));
evalcond[7]=(((cj5*x442))+(((-1.0)*sj6*x443*x445))+new_r01);
evalcond[8]=((((-1.0)*x443*x445))+((x442*x446))+new_r10);
evalcond[9]=((((-1.0)*x445*x449))+(((-1.0)*cj5*x448))+new_r00);
evalcond[10]=(((new_r00*x447))+(((-1.0)*new_r10*x446))+(((-1.0)*x450))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x448))+((sj6*x444))+(((-1.0)*new_r11*x446))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x451=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x451.valid){
continue;
}
CheckValue<IkReal> x452 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x452.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x451.value)))+(x452.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x453=IKsin(j7);
IkReal x454=IKcos(j7);
IkReal x455=(new_r01*sj5);
IkReal x456=((1.0)*sj5);
IkReal x457=(cj5*sj6);
IkReal x458=(sj5*sj6);
IkReal x459=((1.0)*x454);
IkReal x460=(sj6*x453);
IkReal x461=((1.0)*x453);
evalcond[0]=(new_r20+(((-1.0)*cj6*x461)));
evalcond[1]=((((-1.0)*cj6*x459))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x453);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x459)));
evalcond[4]=(((x454*x457))+new_r11+((sj5*x453)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*new_r00*x456))+x460);
evalcond[6]=(((sj6*x454))+((cj5*new_r11))+(((-1.0)*x455)));
evalcond[7]=(((cj5*x453))+new_r01+(((-1.0)*sj6*x454*x456)));
evalcond[8]=(((x453*x457))+(((-1.0)*x454*x456))+new_r10);
evalcond[9]=((((-1.0)*x456*x460))+(((-1.0)*cj5*x459))+new_r00);
evalcond[10]=(((new_r00*x458))+(((-1.0)*new_r10*x457))+(((-1.0)*x461))+((cj6*new_r20)));
evalcond[11]=(((sj6*x455))+(((-1.0)*new_r11*x457))+(((-1.0)*x459))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x462=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x462.valid){
continue;
}
CheckValue<IkReal> x463 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x463.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x462.value)))+(x463.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x464=IKsin(j5);
IkReal x465=IKcos(j5);
IkReal x466=(new_r12*x465);
IkReal x467=(cj6*x465);
IkReal x468=(new_r02*x464);
IkReal x469=((1.0)*cj6*x464);
evalcond[0]=(x467+new_r12);
evalcond[1]=((((-1.0)*x469))+new_r02);
evalcond[2]=(((new_r12*x464))+((new_r02*x465)));
evalcond[3]=(cj6+(((-1.0)*x468))+x466);
evalcond[4]=(((new_r20*sj6))+((new_r10*x467))+(((-1.0)*new_r00*x469)));
evalcond[5]=(((new_r11*x467))+(((-1.0)*new_r01*x469))+((new_r21*sj6)));
evalcond[6]=(((sj6*x468))+(((-1.0)*sj6*x466))+((cj6*new_r22)));
evalcond[7]=((1.0)+((cj6*x466))+(((-1.0)*cj6*x468))+((new_r22*sj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
j7eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj6;
j7eval[1]=sj5;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=sj5;
j7eval[2]=sj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x470=((1.0)*cj5);
if( IKabs(((((-1.0)*new_r01*x470))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj5))+(((-1.0)*new_r11*x470)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x470))+(((-1.0)*new_r11*sj5))))+IKsqr((((new_r01*sj5))+(((-1.0)*new_r11*x470))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r01*x470))+(((-1.0)*new_r11*sj5))), (((new_r01*sj5))+(((-1.0)*new_r11*x470))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x471=IKsin(j7);
IkReal x472=IKcos(j7);
IkReal x473=((1.0)*sj5);
IkReal x474=(cj5*x471);
IkReal x475=(cj5*x472);
IkReal x476=(x472*x473);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x471);
evalcond[1]=(((cj5*new_r10))+(((-1.0)*new_r00*x473))+x471);
evalcond[2]=(((cj5*new_r11))+(((-1.0)*new_r01*x473))+x472);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x472)));
evalcond[4]=(((sj5*x471))+x475+new_r11);
evalcond[5]=((((-1.0)*x476))+x474+new_r01);
evalcond[6]=((((-1.0)*x476))+x474+new_r10);
evalcond[7]=((((-1.0)*x475))+(((-1.0)*x471*x473))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x477=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj5*x477))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*new_r11))+(((-1.0)*sj5*x477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x477))+(((-1.0)*new_r11*sj5))))+IKsqr((((cj5*new_r11))+(((-1.0)*sj5*x477))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj5*x477))+(((-1.0)*new_r11*sj5))), (((cj5*new_r11))+(((-1.0)*sj5*x477))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x478=IKsin(j7);
IkReal x479=IKcos(j7);
IkReal x480=((1.0)*sj5);
IkReal x481=((1.0)*x479);
IkReal x482=(sj5*x478);
IkReal x483=((1.0)*x478);
IkReal x484=(cj5*x481);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x478);
evalcond[1]=(((new_r10*sj5))+(((-1.0)*x481))+((cj5*new_r00)));
evalcond[2]=(((cj5*x478))+((sj5*x479))+new_r01);
evalcond[3]=((((-1.0)*x484))+x482+new_r11);
evalcond[4]=((((-1.0)*x483))+((cj5*new_r10))+(((-1.0)*new_r00*x480)));
evalcond[5]=((((-1.0)*new_r01*x480))+(((-1.0)*x481))+((cj5*new_r11)));
evalcond[6]=((((-1.0)*x484))+x482+new_r00);
evalcond[7]=((((-1.0)*x479*x480))+new_r10+(((-1.0)*cj5*x483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x485=IKcos(j7);
IkReal x486=IKsin(j7);
IkReal x487=((1.0)*sj6);
IkReal x488=((1.0)*x485);
IkReal x489=((1.0)*x486);
evalcond[0]=(x486+new_r01);
evalcond[1]=((((-1.0)*x488))+new_r00);
evalcond[2]=(((sj6*x485))+new_r11);
evalcond[3]=(((sj6*x486))+new_r10);
evalcond[4]=((((-1.0)*cj6*x489))+new_r20);
evalcond[5]=((((-1.0)*cj6*x488))+new_r21);
evalcond[6]=((((-1.0)*new_r10*x487))+(((-1.0)*x489))+((cj6*new_r20)));
evalcond[7]=((((-1.0)*new_r11*x487))+(((-1.0)*x488))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x490=IKsin(j7);
IkReal x491=IKcos(j7);
IkReal x492=((1.0)*x491);
IkReal x493=((1.0)*x490);
evalcond[0]=(x490+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*cj6*x493))+new_r20);
evalcond[2]=((((-1.0)*cj6*x492))+new_r21);
evalcond[3]=((((-1.0)*sj6*x492))+new_r11);
evalcond[4]=((((-1.0)*x492))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r10))+((sj6*x490)));
evalcond[6]=((((-1.0)*x493))+((new_r10*sj6))+((cj6*new_r20)));
evalcond[7]=((((-1.0)*x492))+((new_r11*sj6))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r20, new_r21);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x494=IKsin(j7);
IkReal x495=IKcos(j7);
IkReal x496=((1.0)*x495);
evalcond[0]=((((-1.0)*x494))+new_r20);
evalcond[1]=((((-1.0)*x496))+new_r21);
evalcond[2]=(((new_r02*x494))+new_r11);
evalcond[3]=(((cj5*x494))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x496))+new_r10);
evalcond[5]=((((-1.0)*cj5*x496))+new_r00);
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x494);
evalcond[7]=((((-1.0)*x496))+((new_r10*sj5))+((cj5*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x497=IKsin(j7);
IkReal x498=IKcos(j7);
IkReal x499=((1.0)*x498);
evalcond[0]=(x497+new_r20);
evalcond[1]=(x498+new_r21);
evalcond[2]=(((cj5*x497))+new_r01);
evalcond[3]=(((new_r02*x498))+new_r10);
evalcond[4]=((((-1.0)*new_r02*x497))+new_r11);
evalcond[5]=((((-1.0)*cj5*x499))+new_r00);
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x497);
evalcond[7]=((((-1.0)*x499))+((new_r10*sj5))+((cj5*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x501=IKPowWithIntegerCheck(cj6,-1);
if(!x501.valid){
continue;
}
IkReal x500=x501.value;
CheckValue<IkReal> x502=IKPowWithIntegerCheck(sj5,-1);
if(!x502.valid){
continue;
}
CheckValue<IkReal> x503=IKPowWithIntegerCheck(sj6,-1);
if(!x503.valid){
continue;
}
if( IKabs((new_r20*x500)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x500*(x502.value)*(x503.value)*((((cj5*new_r20))+((cj6*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x500))+IKsqr((x500*(x502.value)*(x503.value)*((((cj5*new_r20))+((cj6*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x500), (x500*(x502.value)*(x503.value)*((((cj5*new_r20))+((cj6*new_r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x504=IKsin(j7);
IkReal x505=IKcos(j7);
IkReal x506=(new_r01*sj5);
IkReal x507=((1.0)*sj5);
IkReal x508=(cj5*sj6);
IkReal x509=(sj5*sj6);
IkReal x510=((1.0)*x505);
IkReal x511=(sj6*x504);
IkReal x512=((1.0)*x504);
evalcond[0]=((((-1.0)*cj6*x512))+new_r20);
evalcond[1]=((((-1.0)*cj6*x510))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x504);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x510)));
evalcond[4]=(((sj5*x504))+((x505*x508))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x507))+((cj5*new_r10))+x511);
evalcond[6]=(((sj6*x505))+((cj5*new_r11))+(((-1.0)*x506)));
evalcond[7]=((((-1.0)*sj6*x505*x507))+((cj5*x504))+new_r01);
evalcond[8]=((((-1.0)*x505*x507))+new_r10+((x504*x508)));
evalcond[9]=((((-1.0)*cj5*x510))+new_r00+(((-1.0)*x507*x511)));
evalcond[10]=((((-1.0)*new_r10*x508))+((new_r00*x509))+(((-1.0)*x512))+((cj6*new_r20)));
evalcond[11]=(((sj6*x506))+(((-1.0)*new_r11*x508))+(((-1.0)*x510))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x514=IKPowWithIntegerCheck(cj6,-1);
if(!x514.valid){
continue;
}
IkReal x513=x514.value;
CheckValue<IkReal> x515=IKPowWithIntegerCheck(sj5,-1);
if(!x515.valid){
continue;
}
if( IKabs((new_r20*x513)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x513*(x515.value)*((((cj6*new_r10))+((cj5*new_r20*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x513))+IKsqr((x513*(x515.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x513), (x513*(x515.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x516=IKsin(j7);
IkReal x517=IKcos(j7);
IkReal x518=(new_r01*sj5);
IkReal x519=((1.0)*sj5);
IkReal x520=(cj5*sj6);
IkReal x521=(sj5*sj6);
IkReal x522=((1.0)*x517);
IkReal x523=(sj6*x516);
IkReal x524=((1.0)*x516);
evalcond[0]=((((-1.0)*cj6*x524))+new_r20);
evalcond[1]=((((-1.0)*cj6*x522))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x516);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x522)));
evalcond[4]=(((x517*x520))+((sj5*x516))+new_r11);
evalcond[5]=(((cj5*new_r10))+x523+(((-1.0)*new_r00*x519)));
evalcond[6]=(((cj5*new_r11))+(((-1.0)*x518))+((sj6*x517)));
evalcond[7]=(((cj5*x516))+(((-1.0)*sj6*x517*x519))+new_r01);
evalcond[8]=(((x516*x520))+(((-1.0)*x517*x519))+new_r10);
evalcond[9]=(new_r00+(((-1.0)*cj5*x522))+(((-1.0)*x519*x523)));
evalcond[10]=((((-1.0)*x524))+(((-1.0)*new_r10*x520))+((new_r00*x521))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x522))+((sj6*x518))+(((-1.0)*new_r11*x520))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x525=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x525.valid){
continue;
}
CheckValue<IkReal> x526 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x526.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x525.value)))+(x526.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x527=IKsin(j7);
IkReal x528=IKcos(j7);
IkReal x529=(new_r01*sj5);
IkReal x530=((1.0)*sj5);
IkReal x531=(cj5*sj6);
IkReal x532=(sj5*sj6);
IkReal x533=((1.0)*x528);
IkReal x534=(sj6*x527);
IkReal x535=((1.0)*x527);
evalcond[0]=((((-1.0)*cj6*x535))+new_r20);
evalcond[1]=((((-1.0)*cj6*x533))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x527);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x533)));
evalcond[4]=(((sj5*x527))+new_r11+((x528*x531)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*new_r00*x530))+x534);
evalcond[6]=(((cj5*new_r11))+(((-1.0)*x529))+((sj6*x528)));
evalcond[7]=(((cj5*x527))+new_r01+(((-1.0)*sj6*x528*x530)));
evalcond[8]=((((-1.0)*x528*x530))+new_r10+((x527*x531)));
evalcond[9]=((((-1.0)*x530*x534))+new_r00+(((-1.0)*cj5*x533)));
evalcond[10]=((((-1.0)*x535))+(((-1.0)*new_r10*x531))+((new_r00*x532))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x533))+(((-1.0)*new_r11*x531))+((sj6*x529))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x536=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x536.valid){
continue;
}
CheckValue<IkReal> x537 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x537.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x536.value)))+(x537.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x538=((1.0)*cj6);
evalcond[0]=(new_r20+(((-1.0)*x538*(IKsin(j7)))));
evalcond[1]=((((-1.0)*x538*(IKcos(j7))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=cj6;
j5eval[1]=IKsign(cj6);
j5eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj6;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x539=((1.0)*sj7);
IkReal x540=(((new_r10*new_r11))+((new_r00*new_r01)));
j5eval[0]=x540;
j5eval[1]=IKsign(x540);
j5eval[2]=((IKabs(((((-1.0)*new_r00*x539))+(((-1.0)*new_r11*x539)))))+(IKabs((((new_r01*sj7))+(((-1.0)*new_r10*x539))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x541=((1.0)*new_r11);
IkReal x542=((new_r01*new_r01)+(new_r11*new_r11));
j5eval[0]=x542;
j5eval[1]=((IKabs(((((-1.0)*new_r01*sj7))+(((-1.0)*cj7*x541)))))+(IKabs(((((-1.0)*sj7*x541))+((cj7*new_r01))))));
j5eval[2]=IKsign(x542);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x543=(((new_r11*sj7))+((cj7*new_r01)));
j5eval[0]=x543;
j5eval[1]=IKsign(x543);
j5eval[2]=((IKabs(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj7*sj7)))))+(IKabs(((-1.0)+(cj7*cj7)+(new_r01*new_r01)))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x545 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x545)==0){
continue;
}
IkReal x544=pow(x545,-0.5);
CheckValue<IkReal> x546 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x546.valid){
continue;
}
IkReal gconst32=((-1.0)*(x546.value));
IkReal gconst33=((-1.0)*new_r01*x544);
IkReal gconst34=(new_r11*x544);
CheckValue<IkReal> x547 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x547.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x547.value)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x550 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x550.valid){
continue;
}
IkReal x548=((-1.0)*(x550.value));
IkReal x549=x544;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst33;
cj7=gconst34;
j7=x548;
IkReal gconst32=x548;
IkReal gconst33=((-1.0)*new_r01*x549);
IkReal gconst34=(new_r11*x549);
IkReal x551=new_r01*new_r01;
IkReal x552=(new_r00*new_r01);
IkReal x553=(((new_r10*new_r11))+x552);
IkReal x554=x544;
IkReal x555=(new_r01*x554);
j5eval[0]=x553;
j5eval[1]=IKsign(x553);
j5eval[2]=((IKabs((((new_r11*x555))+((x552*x554)))))+(IKabs((((new_r10*x555))+(((-1.0)*x551*x554))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x558 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x558.valid){
continue;
}
IkReal x556=((-1.0)*(x558.value));
IkReal x557=x544;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst33;
cj7=gconst34;
j7=x556;
IkReal gconst32=x556;
IkReal gconst33=((-1.0)*new_r01*x557);
IkReal gconst34=(new_r11*x557);
IkReal x559=((new_r01*new_r01)+(new_r11*new_r11));
j5eval[0]=x559;
j5eval[1]=IKsign(x559);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x562 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x562.valid){
continue;
}
IkReal x560=((-1.0)*(x562.value));
IkReal x561=x544;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst33;
cj7=gconst34;
j7=x560;
IkReal gconst32=x560;
IkReal gconst33=((-1.0)*new_r01*x561);
IkReal gconst34=(new_r11*x561);
IkReal x563=new_r01*new_r01;
IkReal x564=new_r11*new_r11;
IkReal x565=((1.0)*x563);
CheckValue<IkReal> x571=IKPowWithIntegerCheck((x564+x563),-1);
if(!x571.valid){
continue;
}
IkReal x566=x571.value;
CheckValue<IkReal> x572=IKPowWithIntegerCheck(((((-1.0)*x564))+(((-1.0)*x565))),-1);
if(!x572.valid){
continue;
}
IkReal x567=x572.value;
IkReal x568=((1.0)*x567);
IkReal x569=(new_r11*x568);
IkReal x570=(new_r01*x568);
j5eval[0]=((IKabs((((x566*(x564*x564)))+((x563*x564*x566))+(((-1.0)*x565*x566)))))+(IKabs(((((-1.0)*new_r01*x569*(new_r11*new_r11)))+(((-1.0)*x569*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x569))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x573=((1.0)*new_r11);
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal((((gconst33*gconst34))+(((-1.0)*new_r01*x573)))),IkReal(((((-1.0)*(gconst33*gconst33)))+(new_r11*new_r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
CheckValue<IkReal> x575=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*x573))+((gconst33*new_r01)))),-1);
if(!x575.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x574.value)+(((1.5707963267949)*(x575.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x576=IKcos(j5);
IkReal x577=IKsin(j5);
IkReal x578=((1.0)*gconst34);
IkReal x579=(gconst33*x576);
IkReal x580=((1.0)*x577);
IkReal x581=(x577*x578);
evalcond[0]=(((new_r11*x577))+((new_r01*x576))+gconst33);
evalcond[1]=(((gconst34*x576))+((gconst33*x577))+new_r11);
evalcond[2]=(((new_r10*x576))+gconst33+(((-1.0)*new_r00*x580)));
evalcond[3]=((((-1.0)*new_r01*x580))+((new_r11*x576))+gconst34);
evalcond[4]=(x579+new_r01+(((-1.0)*x581)));
evalcond[5]=(x579+new_r10+(((-1.0)*x581)));
evalcond[6]=(((new_r00*x576))+((new_r10*x577))+(((-1.0)*x578)));
evalcond[7]=((((-1.0)*gconst33*x580))+(((-1.0)*x576*x578))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x582=((1.0)*new_r11);
CheckValue<IkReal> x583 = IKatan2WithCheck(IkReal(((((-1.0)*gconst33*x582))+((gconst34*new_r01)))),IkReal(((((-1.0)*gconst33*new_r01))+(((-1.0)*gconst34*x582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x583.valid){
continue;
}
CheckValue<IkReal> x584=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x584.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x583.value)+(((1.5707963267949)*(x584.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x585=IKcos(j5);
IkReal x586=IKsin(j5);
IkReal x587=((1.0)*gconst34);
IkReal x588=(gconst33*x585);
IkReal x589=((1.0)*x586);
IkReal x590=(x586*x587);
evalcond[0]=(gconst33+((new_r01*x585))+((new_r11*x586)));
evalcond[1]=(((gconst34*x585))+((gconst33*x586))+new_r11);
evalcond[2]=(gconst33+(((-1.0)*new_r00*x589))+((new_r10*x585)));
evalcond[3]=((((-1.0)*new_r01*x589))+gconst34+((new_r11*x585)));
evalcond[4]=((((-1.0)*x590))+x588+new_r01);
evalcond[5]=((((-1.0)*x590))+x588+new_r10);
evalcond[6]=(((new_r00*x585))+(((-1.0)*x587))+((new_r10*x586)));
evalcond[7]=((((-1.0)*gconst33*x589))+(((-1.0)*x585*x587))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x591=((1.0)*gconst33);
CheckValue<IkReal> x592 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x591))+((gconst33*new_r01)))),IkReal(((((-1.0)*new_r00*x591))+(((-1.0)*new_r11*x591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x592.valid){
continue;
}
CheckValue<IkReal> x593=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x593.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x592.value)+(((1.5707963267949)*(x593.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x594=IKcos(j5);
IkReal x595=IKsin(j5);
IkReal x596=((1.0)*gconst34);
IkReal x597=(gconst33*x594);
IkReal x598=((1.0)*x595);
IkReal x599=(x595*x596);
evalcond[0]=(((new_r11*x595))+gconst33+((new_r01*x594)));
evalcond[1]=(((gconst33*x595))+((gconst34*x594))+new_r11);
evalcond[2]=((((-1.0)*new_r00*x598))+((new_r10*x594))+gconst33);
evalcond[3]=(((new_r11*x594))+(((-1.0)*new_r01*x598))+gconst34);
evalcond[4]=((((-1.0)*x599))+x597+new_r01);
evalcond[5]=((((-1.0)*x599))+x597+new_r10);
evalcond[6]=(((new_r10*x595))+((new_r00*x594))+(((-1.0)*x596)));
evalcond[7]=((((-1.0)*x594*x596))+(((-1.0)*gconst33*x598))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x601 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x601)==0){
continue;
}
IkReal x600=pow(x601,-0.5);
CheckValue<IkReal> x602 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x602.valid){
continue;
}
IkReal gconst35=((3.14159265358979)+(((-1.0)*(x602.value))));
IkReal gconst36=((1.0)*new_r01*x600);
IkReal gconst37=((-1.0)*new_r11*x600);
CheckValue<IkReal> x603 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x603.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x603.value)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x606 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x606.valid){
continue;
}
IkReal x604=((1.0)*(x606.value));
IkReal x605=x600;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst36;
cj7=gconst37;
j7=((3.14159265)+(((-1.0)*x604)));
IkReal gconst35=((3.14159265358979)+(((-1.0)*x604)));
IkReal gconst36=((1.0)*new_r01*x605);
IkReal gconst37=((-1.0)*new_r11*x605);
IkReal x607=new_r01*new_r01;
IkReal x608=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x609=x600;
IkReal x610=((1.0)*new_r01*x609);
j5eval[0]=x608;
j5eval[1]=((IKabs(((((-1.0)*new_r11*x610))+(((-1.0)*new_r00*x610)))))+(IKabs(((((-1.0)*new_r10*x610))+((x607*x609))))));
j5eval[2]=IKsign(x608);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x613 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x613.valid){
continue;
}
IkReal x611=((1.0)*(x613.value));
IkReal x612=x600;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst36;
cj7=gconst37;
j7=((3.14159265)+(((-1.0)*x611)));
IkReal gconst35=((3.14159265358979)+(((-1.0)*x611)));
IkReal gconst36=((1.0)*new_r01*x612);
IkReal gconst37=((-1.0)*new_r11*x612);
IkReal x614=((new_r01*new_r01)+(new_r11*new_r11));
j5eval[0]=x614;
j5eval[1]=IKsign(x614);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x617 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x617.valid){
continue;
}
IkReal x615=((1.0)*(x617.value));
IkReal x616=x600;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst36;
cj7=gconst37;
j7=((3.14159265)+(((-1.0)*x615)));
IkReal gconst35=((3.14159265358979)+(((-1.0)*x615)));
IkReal gconst36=((1.0)*new_r01*x616);
IkReal gconst37=((-1.0)*new_r11*x616);
IkReal x618=new_r01*new_r01;
IkReal x619=new_r11*new_r11;
IkReal x620=((1.0)*x618);
CheckValue<IkReal> x626=IKPowWithIntegerCheck((x618+x619),-1);
if(!x626.valid){
continue;
}
IkReal x621=x626.value;
CheckValue<IkReal> x627=IKPowWithIntegerCheck(((((-1.0)*x620))+(((-1.0)*x619))),-1);
if(!x627.valid){
continue;
}
IkReal x622=x627.value;
IkReal x623=((1.0)*x622);
IkReal x624=(new_r11*x623);
IkReal x625=(new_r01*x623);
j5eval[0]=((IKabs(((((-1.0)*x624*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x624))+(((-1.0)*new_r01*x624*(new_r11*new_r11))))))+(IKabs(((((-1.0)*x620*x621))+((x618*x619*x621))+((x621*(x619*x619)))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x628=((1.0)*new_r11);
CheckValue<IkReal> x629 = IKatan2WithCheck(IkReal(((((-1.0)*new_r01*x628))+((gconst36*gconst37)))),IkReal(((((-1.0)*(gconst36*gconst36)))+(new_r11*new_r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x629.valid){
continue;
}
CheckValue<IkReal> x630=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*x628))+((gconst36*new_r01)))),-1);
if(!x630.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x629.value)+(((1.5707963267949)*(x630.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x631=IKsin(j5);
IkReal x632=IKcos(j5);
IkReal x633=((1.0)*gconst37);
IkReal x634=(gconst36*x632);
IkReal x635=(gconst36*x631);
IkReal x636=((1.0)*x631);
IkReal x637=(x631*x633);
evalcond[0]=(gconst36+((new_r01*x632))+((new_r11*x631)));
evalcond[1]=(((gconst37*x632))+x635+new_r11);
evalcond[2]=((((-1.0)*new_r00*x636))+gconst36+((new_r10*x632)));
evalcond[3]=((((-1.0)*new_r01*x636))+gconst37+((new_r11*x632)));
evalcond[4]=((((-1.0)*x637))+x634+new_r01);
evalcond[5]=((((-1.0)*x637))+x634+new_r10);
evalcond[6]=((((-1.0)*x633))+((new_r00*x632))+((new_r10*x631)));
evalcond[7]=((((-1.0)*x635))+new_r00+(((-1.0)*x632*x633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x638=((1.0)*new_r11);
CheckValue<IkReal> x639=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x639.valid){
continue;
}
CheckValue<IkReal> x640 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*x638))+((gconst37*new_r01)))),IkReal(((((-1.0)*gconst37*x638))+(((-1.0)*gconst36*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x640.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x639.value)))+(x640.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x641=IKsin(j5);
IkReal x642=IKcos(j5);
IkReal x643=((1.0)*gconst37);
IkReal x644=(gconst36*x642);
IkReal x645=(gconst36*x641);
IkReal x646=((1.0)*x641);
IkReal x647=(x641*x643);
evalcond[0]=(gconst36+((new_r11*x641))+((new_r01*x642)));
evalcond[1]=(((gconst37*x642))+x645+new_r11);
evalcond[2]=(gconst36+((new_r10*x642))+(((-1.0)*new_r00*x646)));
evalcond[3]=(gconst37+((new_r11*x642))+(((-1.0)*new_r01*x646)));
evalcond[4]=((((-1.0)*x647))+x644+new_r01);
evalcond[5]=((((-1.0)*x647))+x644+new_r10);
evalcond[6]=((((-1.0)*x643))+((new_r10*x641))+((new_r00*x642)));
evalcond[7]=((((-1.0)*x642*x643))+(((-1.0)*x645))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x648=((1.0)*gconst36);
CheckValue<IkReal> x649 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x648))+((gconst36*new_r01)))),IkReal(((((-1.0)*new_r11*x648))+(((-1.0)*new_r00*x648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x649.valid){
continue;
}
CheckValue<IkReal> x650=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x650.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x649.value)+(((1.5707963267949)*(x650.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x651=IKsin(j5);
IkReal x652=IKcos(j5);
IkReal x653=((1.0)*gconst37);
IkReal x654=(gconst36*x652);
IkReal x655=(gconst36*x651);
IkReal x656=((1.0)*x651);
IkReal x657=(x651*x653);
evalcond[0]=(gconst36+((new_r01*x652))+((new_r11*x651)));
evalcond[1]=(x655+((gconst37*x652))+new_r11);
evalcond[2]=(gconst36+(((-1.0)*new_r00*x656))+((new_r10*x652)));
evalcond[3]=(gconst37+(((-1.0)*new_r01*x656))+((new_r11*x652)));
evalcond[4]=((((-1.0)*x657))+x654+new_r01);
evalcond[5]=((((-1.0)*x657))+x654+new_r10);
evalcond[6]=((((-1.0)*x653))+((new_r10*x651))+((new_r00*x652)));
evalcond[7]=((((-1.0)*x655))+new_r00+(((-1.0)*x652*x653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r11=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x659 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x659.valid){
continue;
}
IkReal x658=x659.value;
j5array[0]=((-1.0)*x658);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x658)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j5))))+((new_r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x660=IKcos(j5);
IkReal x661=IKsin(j5);
IkReal x662=((1.0)*x661);
evalcond[0]=(x660+new_r11);
evalcond[1]=((((-1.0)*x662))+new_r01);
evalcond[2]=((((-1.0)*x662))+new_r10);
evalcond[3]=((((-1.0)*x660))+new_r00);
evalcond[4]=(((new_r11*x661))+((new_r01*x660)));
evalcond[5]=((-1.0)+((new_r10*x661))+((new_r00*x660)));
evalcond[6]=(((new_r10*x660))+(((-1.0)*new_r00*x662)));
evalcond[7]=((1.0)+((new_r11*x660))+(((-1.0)*new_r01*x662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x663=IKsin(j5);
IkReal x664=IKcos(j5);
IkReal x665=((1.0)*x663);
evalcond[0]=(x663+new_r01);
evalcond[1]=(x663+new_r10);
evalcond[2]=(x664+new_r00);
evalcond[3]=((((-1.0)*x664))+new_r11);
evalcond[4]=(((new_r11*x663))+((new_r01*x664)));
evalcond[5]=((1.0)+((new_r10*x663))+((new_r00*x664)));
evalcond[6]=(((new_r10*x664))+(((-1.0)*new_r00*x665)));
evalcond[7]=((-1.0)+((new_r11*x664))+(((-1.0)*new_r01*x665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r11=0;
new_r00=0;
j5eval[0]=new_r01;
j5eval[1]=IKsign(new_r01);
j5eval[2]=((IKabs(cj7))+(IKabs(sj7)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r11=0;
new_r00=0;
j5eval[0]=new_r01;
j5eval[1]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x666=IKPowWithIntegerCheck(new_r01,-1);
if(!x666.valid){
continue;
}
CheckValue<IkReal> x667=IKPowWithIntegerCheck(new_r10,-1);
if(!x667.valid){
continue;
}
if( IKabs((cj7*(x666.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj7*(x667.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*(x666.value)))+IKsqr(((-1.0)*sj7*(x667.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj7*(x666.value)), ((-1.0)*sj7*(x667.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x668=IKcos(j5);
IkReal x669=IKsin(j5);
IkReal x670=((1.0)*cj7);
IkReal x671=(sj7*x668);
IkReal x672=(x669*x670);
evalcond[0]=(sj7+((new_r01*x668)));
evalcond[1]=(sj7+((new_r10*x668)));
evalcond[2]=(cj7+(((-1.0)*new_r01*x669)));
evalcond[3]=(((new_r10*x669))+(((-1.0)*x670)));
evalcond[4]=(((sj7*x669))+((cj7*x668)));
evalcond[5]=(x671+new_r01+(((-1.0)*x672)));
evalcond[6]=(x671+new_r10+(((-1.0)*x672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x673=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x673.valid){
continue;
}
CheckValue<IkReal> x674 = IKatan2WithCheck(IkReal(cj7),IkReal(((-1.0)*sj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x674.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x673.value)))+(x674.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x675=IKcos(j5);
IkReal x676=IKsin(j5);
IkReal x677=((1.0)*cj7);
IkReal x678=(sj7*x675);
IkReal x679=(x676*x677);
evalcond[0]=(((new_r01*x675))+sj7);
evalcond[1]=(((new_r10*x675))+sj7);
evalcond[2]=(cj7+(((-1.0)*new_r01*x676)));
evalcond[3]=(((new_r10*x676))+(((-1.0)*x677)));
evalcond[4]=(((cj7*x675))+((sj7*x676)));
evalcond[5]=(x678+new_r01+(((-1.0)*x679)));
evalcond[6]=(x678+new_r10+(((-1.0)*x679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x681 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x681.valid){
continue;
}
IkReal x680=x681.value;
j5array[0]=((-1.0)*x680);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x680)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j5))))+((new_r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x683 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x683.valid){
continue;
}
IkReal x682=x683.value;
j5array[0]=((-1.0)*x682);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x682)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j5))))+(((-1.0)*new_r01*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r10=0;
j5eval[0]=new_r11;
j5eval[1]=((IKabs(cj7))+(IKabs(sj7)));
j5eval[2]=IKsign(new_r11);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r10=0;
j5eval[0]=new_r00;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r10=0;
j5eval[0]=new_r11;
j5eval[1]=cj7;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x685=IKPowWithIntegerCheck(new_r11,-1);
if(!x685.valid){
continue;
}
IkReal x684=x685.value;
CheckValue<IkReal> x686=IKPowWithIntegerCheck(cj7,-1);
if(!x686.valid){
continue;
}
CheckValue<IkReal> x687=IKPowWithIntegerCheck(x684,-2);
if(!x687.valid){
continue;
}
if( IKabs(((-1.0)*sj7*x684)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x684*(x686.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(x687.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj7*x684))+IKsqr((x684*(x686.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(x687.value)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj7*x684), (x684*(x686.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(x687.value)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x688=IKsin(j5);
IkReal x689=IKcos(j5);
IkReal x690=((1.0)*cj7);
IkReal x691=((1.0)*x688);
evalcond[0]=(sj7+((new_r11*x688)));
evalcond[1]=(cj7+((new_r11*x689)));
evalcond[2]=(sj7+(((-1.0)*new_r00*x691)));
evalcond[3]=(((new_r00*x689))+(((-1.0)*x690)));
evalcond[4]=(((sj7*x688))+((cj7*x689))+new_r11);
evalcond[5]=(((sj7*x689))+(((-1.0)*x688*x690)));
evalcond[6]=((((-1.0)*sj7*x691))+(((-1.0)*x689*x690))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x692=IKPowWithIntegerCheck(new_r00,-1);
if(!x692.valid){
continue;
}
CheckValue<IkReal> x693=IKPowWithIntegerCheck(new_r11,-1);
if(!x693.valid){
continue;
}
if( IKabs((sj7*(x692.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj7*(x693.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj7*(x692.value)))+IKsqr(((-1.0)*cj7*(x693.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj7*(x692.value)), ((-1.0)*cj7*(x693.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x694=IKsin(j5);
IkReal x695=IKcos(j5);
IkReal x696=((1.0)*cj7);
IkReal x697=((1.0)*x694);
evalcond[0]=(sj7+((new_r11*x694)));
evalcond[1]=(cj7+((new_r11*x695)));
evalcond[2]=(sj7+(((-1.0)*new_r00*x697)));
evalcond[3]=((((-1.0)*x696))+((new_r00*x695)));
evalcond[4]=(((cj7*x695))+((sj7*x694))+new_r11);
evalcond[5]=(((sj7*x695))+(((-1.0)*x694*x696)));
evalcond[6]=((((-1.0)*sj7*x697))+(((-1.0)*x695*x696))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x698 = IKatan2WithCheck(IkReal(((-1.0)*sj7)),IkReal(((-1.0)*cj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x698.valid){
continue;
}
CheckValue<IkReal> x699=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x699.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x698.value)+(((1.5707963267949)*(x699.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x700=IKsin(j5);
IkReal x701=IKcos(j5);
IkReal x702=((1.0)*cj7);
IkReal x703=((1.0)*x700);
evalcond[0]=(sj7+((new_r11*x700)));
evalcond[1]=(cj7+((new_r11*x701)));
evalcond[2]=(sj7+(((-1.0)*new_r00*x703)));
evalcond[3]=(((new_r00*x701))+(((-1.0)*x702)));
evalcond[4]=(((cj7*x701))+new_r11+((sj7*x700)));
evalcond[5]=((((-1.0)*x700*x702))+((sj7*x701)));
evalcond[6]=((((-1.0)*sj7*x703))+new_r00+(((-1.0)*x701*x702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x704 = IKatan2WithCheck(IkReal(((-1.0)+(cj7*cj7)+(new_r01*new_r01))),IkReal(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj7*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x704.valid){
continue;
}
CheckValue<IkReal> x705=IKPowWithIntegerCheck(IKsign((((new_r11*sj7))+((cj7*new_r01)))),-1);
if(!x705.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x704.value)+(((1.5707963267949)*(x705.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x706=IKcos(j5);
IkReal x707=IKsin(j5);
IkReal x708=((1.0)*cj7);
IkReal x709=(sj7*x706);
IkReal x710=((1.0)*x707);
IkReal x711=(x707*x708);
evalcond[0]=(sj7+((new_r01*x706))+((new_r11*x707)));
evalcond[1]=(((cj7*x706))+new_r11+((sj7*x707)));
evalcond[2]=(sj7+((new_r10*x706))+(((-1.0)*new_r00*x710)));
evalcond[3]=(cj7+((new_r11*x706))+(((-1.0)*new_r01*x710)));
evalcond[4]=((((-1.0)*x711))+x709+new_r01);
evalcond[5]=((((-1.0)*x711))+x709+new_r10);
evalcond[6]=(((new_r00*x706))+(((-1.0)*x708))+((new_r10*x707)));
evalcond[7]=((((-1.0)*x706*x708))+(((-1.0)*sj7*x710))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x712=((1.0)*sj7);
CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x712))+((cj7*new_r01)))),IkReal(((((-1.0)*cj7*new_r11))+(((-1.0)*new_r01*x712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
CheckValue<IkReal> x714=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x714.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x713.value)+(((1.5707963267949)*(x714.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x715=IKcos(j5);
IkReal x716=IKsin(j5);
IkReal x717=((1.0)*cj7);
IkReal x718=(sj7*x715);
IkReal x719=((1.0)*x716);
IkReal x720=(x716*x717);
evalcond[0]=(sj7+((new_r01*x715))+((new_r11*x716)));
evalcond[1]=(((cj7*x715))+new_r11+((sj7*x716)));
evalcond[2]=(sj7+((new_r10*x715))+(((-1.0)*new_r00*x719)));
evalcond[3]=(cj7+((new_r11*x715))+(((-1.0)*new_r01*x719)));
evalcond[4]=((((-1.0)*x720))+x718+new_r01);
evalcond[5]=((((-1.0)*x720))+x718+new_r10);
evalcond[6]=(((new_r00*x715))+(((-1.0)*x717))+((new_r10*x716)));
evalcond[7]=((((-1.0)*sj7*x719))+new_r00+(((-1.0)*x715*x717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x721=((1.0)*sj7);
CheckValue<IkReal> x722 = IKatan2WithCheck(IkReal((((new_r01*sj7))+(((-1.0)*new_r10*x721)))),IkReal(((((-1.0)*new_r00*x721))+(((-1.0)*new_r11*x721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x722.valid){
continue;
}
CheckValue<IkReal> x723=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x723.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x722.value)+(((1.5707963267949)*(x723.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x724=IKcos(j5);
IkReal x725=IKsin(j5);
IkReal x726=((1.0)*cj7);
IkReal x727=(sj7*x724);
IkReal x728=((1.0)*x725);
IkReal x729=(x725*x726);
evalcond[0]=(sj7+((new_r01*x724))+((new_r11*x725)));
evalcond[1]=(((cj7*x724))+new_r11+((sj7*x725)));
evalcond[2]=(sj7+(((-1.0)*new_r00*x728))+((new_r10*x724)));
evalcond[3]=(cj7+((new_r11*x724))+(((-1.0)*new_r01*x728)));
evalcond[4]=((((-1.0)*x729))+x727+new_r01);
evalcond[5]=((((-1.0)*x729))+x727+new_r10);
evalcond[6]=(((new_r00*x724))+(((-1.0)*x726))+((new_r10*x725)));
evalcond[7]=((((-1.0)*x724*x726))+(((-1.0)*sj7*x728))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x730=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj7*x730))+(((-1.0)*new_r11*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj7*x730))+((cj7*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*x730))+(((-1.0)*new_r11*sj7))))+IKsqr(((((-1.0)*sj7*x730))+((cj7*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj7*x730))+(((-1.0)*new_r11*sj7))), ((((-1.0)*sj7*x730))+((cj7*new_r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x731=IKcos(j5);
IkReal x732=IKsin(j5);
IkReal x733=((1.0)*cj7);
IkReal x734=((1.0)*sj7);
IkReal x735=(sj7*x732);
IkReal x736=((1.0)*x732);
IkReal x737=(x731*x733);
evalcond[0]=(sj7+((new_r01*x731))+((new_r11*x732)));
evalcond[1]=(((cj7*x732))+((sj7*x731))+new_r01);
evalcond[2]=((((-1.0)*x737))+x735+new_r11);
evalcond[3]=((((-1.0)*x737))+x735+new_r00);
evalcond[4]=(((new_r00*x731))+(((-1.0)*x733))+((new_r10*x732)));
evalcond[5]=((((-1.0)*x732*x733))+(((-1.0)*x731*x734))+new_r10);
evalcond[6]=((((-1.0)*x734))+(((-1.0)*new_r00*x736))+((new_r10*x731)));
evalcond[7]=((((-1.0)*x733))+(((-1.0)*new_r01*x736))+((new_r11*x731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x739 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x739.valid){
continue;
}
IkReal x738=x739.value;
j5array[0]=((-1.0)*x738);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x738)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x740=IKsin(j5);
IkReal x741=IKcos(j5);
IkReal x742=((1.0)*x740);
IkReal x743=(new_r11*x741);
evalcond[0]=(((new_r01*x741))+((new_r11*x740)));
evalcond[1]=(((new_r10*x740))+((new_r00*x741)));
evalcond[2]=((((-1.0)*new_r00*x742))+((new_r10*x741)));
evalcond[3]=((((-1.0)*new_r01*x742))+x743);
evalcond[4]=((((-1.0)*new_r01*new_r22*x742))+((new_r22*x743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x745 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x745.valid){
continue;
}
IkReal x744=x745.value;
j5array[0]=((-1.0)*x744);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x744)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x746=IKcos(j5);
IkReal x747=IKsin(j5);
IkReal x748=(new_r11*x746);
IkReal x749=((1.0)*x747);
IkReal x750=(new_r10*x746);
IkReal x751=(new_r22*x749);
evalcond[0]=(((new_r01*x746))+((new_r11*x747)));
evalcond[1]=((((-1.0)*new_r00*x749))+x750);
evalcond[2]=((((-1.0)*new_r01*x749))+x748);
evalcond[3]=((((-1.0)*new_r00*x751))+((new_r22*x750)));
evalcond[4]=((((-1.0)*new_r01*x751))+((new_r22*x748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x753 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x753.valid){
continue;
}
IkReal x752=x753.value;
j5array[0]=((-1.0)*x752);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x752)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x754=IKcos(j5);
IkReal x755=IKsin(j5);
IkReal x756=(new_r11*x754);
IkReal x757=((1.0)*x755);
IkReal x758=(new_r10*x754);
IkReal x759=(new_r22*x757);
evalcond[0]=(((new_r00*x754))+((new_r10*x755)));
evalcond[1]=((((-1.0)*new_r00*x757))+x758);
evalcond[2]=((((-1.0)*new_r01*x757))+x756);
evalcond[3]=((((-1.0)*new_r00*x759))+((new_r22*x758)));
evalcond[4]=((((-1.0)*new_r01*x759))+((new_r22*x756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x761=IKPowWithIntegerCheck(cj6,-1);
if(!x761.valid){
continue;
}
IkReal x760=x761.value;
CheckValue<IkReal> x762=IKPowWithIntegerCheck(new_r11,-1);
if(!x762.valid){
continue;
}
if( IKabs((x760*(x762.value)*((((new_r01*new_r12))+(((-1.0)*cj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x760)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x760*(x762.value)*((((new_r01*new_r12))+(((-1.0)*cj6*sj7))))))+IKsqr(((-1.0)*new_r12*x760))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x760*(x762.value)*((((new_r01*new_r12))+(((-1.0)*cj6*sj7))))), ((-1.0)*new_r12*x760));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x763=IKsin(j5);
IkReal x764=IKcos(j5);
IkReal x765=((1.0)*cj7);
IkReal x766=(cj7*sj6);
IkReal x767=((1.0)*x764);
IkReal x768=(new_r11*x764);
IkReal x769=(sj7*x764);
IkReal x770=(new_r00*x763);
IkReal x771=(sj7*x763);
IkReal x772=(new_r12*x764);
IkReal x773=(sj6*x763);
IkReal x774=(cj6*x764);
IkReal x775=((1.0)*x763);
IkReal x776=(cj6*x775);
evalcond[0]=(x774+new_r12);
evalcond[1]=((((-1.0)*x776))+new_r02);
evalcond[2]=(((new_r12*x763))+((new_r02*x764)));
evalcond[3]=(sj7+((new_r11*x763))+((new_r01*x764)));
evalcond[4]=(cj6+(((-1.0)*new_r02*x775))+x772);
evalcond[5]=(x771+new_r11+((x764*x766)));
evalcond[6]=(((new_r10*x763))+(((-1.0)*x765))+((new_r00*x764)));
evalcond[7]=((((-1.0)*x765*x773))+x769+new_r01);
evalcond[8]=((((-1.0)*x763*x765))+((sj6*x769))+new_r10);
evalcond[9]=(((new_r10*x764))+(((-1.0)*x770))+((sj6*sj7)));
evalcond[10]=((((-1.0)*new_r01*x775))+x768+x766);
evalcond[11]=((((-1.0)*x764*x765))+(((-1.0)*sj6*x771))+new_r00);
evalcond[12]=((((-1.0)*cj6*x770))+((new_r20*sj6))+((new_r10*x774)));
evalcond[13]=((((-1.0)*new_r01*x776))+((new_r21*sj6))+((cj6*x768)));
evalcond[14]=((((-1.0)*new_r12*sj6*x767))+((new_r02*x773))+((cj6*new_r22)));
evalcond[15]=((1.0)+(((-1.0)*new_r02*x776))+((new_r22*sj6))+((cj6*x772)));
evalcond[16]=((((-1.0)*sj7))+((sj6*x770))+(((-1.0)*new_r10*sj6*x767))+((cj6*new_r20)));
evalcond[17]=((((-1.0)*x765))+((new_r01*x773))+(((-1.0)*new_r11*sj6*x767))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x777=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x777.valid){
continue;
}
CheckValue<IkReal> x778 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x778.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x777.value)))+(x778.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x779=IKsin(j5);
IkReal x780=IKcos(j5);
IkReal x781=((1.0)*cj7);
IkReal x782=(cj7*sj6);
IkReal x783=((1.0)*x780);
IkReal x784=(new_r11*x780);
IkReal x785=(sj7*x780);
IkReal x786=(new_r00*x779);
IkReal x787=(sj7*x779);
IkReal x788=(new_r12*x780);
IkReal x789=(sj6*x779);
IkReal x790=(cj6*x780);
IkReal x791=((1.0)*x779);
IkReal x792=(cj6*x791);
evalcond[0]=(x790+new_r12);
evalcond[1]=((((-1.0)*x792))+new_r02);
evalcond[2]=(((new_r02*x780))+((new_r12*x779)));
evalcond[3]=(sj7+((new_r01*x780))+((new_r11*x779)));
evalcond[4]=(cj6+(((-1.0)*new_r02*x791))+x788);
evalcond[5]=(((x780*x782))+x787+new_r11);
evalcond[6]=((((-1.0)*x781))+((new_r00*x780))+((new_r10*x779)));
evalcond[7]=((((-1.0)*x781*x789))+x785+new_r01);
evalcond[8]=(((sj6*x785))+new_r10+(((-1.0)*x779*x781)));
evalcond[9]=(((new_r10*x780))+(((-1.0)*x786))+((sj6*sj7)));
evalcond[10]=((((-1.0)*new_r01*x791))+x782+x784);
evalcond[11]=((((-1.0)*sj6*x787))+new_r00+(((-1.0)*x780*x781)));
evalcond[12]=(((new_r20*sj6))+((new_r10*x790))+(((-1.0)*cj6*x786)));
evalcond[13]=((((-1.0)*new_r01*x792))+((new_r21*sj6))+((cj6*x784)));
evalcond[14]=(((new_r02*x789))+(((-1.0)*new_r12*sj6*x783))+((cj6*new_r22)));
evalcond[15]=((1.0)+((new_r22*sj6))+(((-1.0)*new_r02*x792))+((cj6*x788)));
evalcond[16]=((((-1.0)*sj7))+((sj6*x786))+(((-1.0)*new_r10*sj6*x783))+((cj6*new_r20)));
evalcond[17]=((((-1.0)*new_r11*sj6*x783))+(((-1.0)*x781))+((new_r01*x789))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "71595961f464dc77b527d3fd40093a2c"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
