/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2023-04-03 09:00:49.025741
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97,x98,x99;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[1]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=IKcos(j[7]);
x13=IKsin(j[6]);
x14=IKsin(j[7]);
x15=IKcos(j[6]);
x16=((1.0)*x11);
x17=((0.0375)*x13);
x18=((1.0)*x9);
x19=((0.3351)*x2);
x20=((1.0)*x10);
x21=((1.0)*x1);
x22=((1.0)*x4);
x23=((0.0325)*x4);
x24=((0.0325)*x2);
x25=((1.0)*x3);
x26=((0.0375)*x15);
x27=((0.0375)*x11);
x28=((0.0375)*x10);
x29=(x4*x7);
x30=(x5*x6);
x31=(x0*x3);
x32=((-1.0)*x10);
x33=(x1*x3);
x34=(x0*x4);
x35=(x5*x7);
x36=((-1.0)*x0);
x37=((-1.0)*x11);
x38=((-0.2688)*x6);
x39=((-0.0325)*x6);
x40=(x0*x2);
x41=((-1.0)*x6);
x42=((-1.0)*x7);
x43=((-1.0)*x1);
x44=(x1*x4);
x45=(x5*x9);
x46=(x23*x7);
x47=((0.2688)*x2*x4);
x48=(x2*x5*x8);
x49=((1.0)*x0*x35);
x50=((0.0325)*x0*x35);
x51=(x21*x35);
x52=((0.0325)*x1*x35);
x53=(x25*x30);
x54=((0.0325)*x3*x30);
x55=((((-1.0)*x21*x3))+((x2*x34)));
x56=((((-1.0)*x21*x3*x4))+x40);
x57=(((x2*x44))+x31);
x58=(x53+(((-1.0)*x22*x7)));
x59=((1.0)*x56);
x60=((((-1.0)*x2*x21))+(((-1.0)*x22*x31)));
x61=(x55*x9);
x62=(x57*x9);
x63=(x56*x6);
x64=(x57*x8);
x65=(((x22*x6))+((x25*x35)));
x66=((-1.0)*x65);
x67=(x55*x8);
x68=(x56*x7);
x69=(x6*x60);
x70=((-1.0)*x60);
x71=(x68+((x1*x30)));
x72=(((x2*x45))+((x8*((x29+(((-1.0)*x53)))))));
x73=((((-1.0)*x59*x6))+x51);
x74=(x48+((x58*x9)));
x75=(((x60*x7))+((x0*x30)));
x76=(x10*x71);
x77=(x11*x72);
x78=(x15*x74);
x79=(x73*x9);
x80=(x49+((x41*x60)));
x81=(x10*x75);
x82=(((x42*x60))+((x30*x36)));
x83=(x80*x9);
x84=(x37*((((x42*x56))+((x30*x43)))));
x85=(((x8*((x63+(((-1.0)*x51))))))+x62);
x86=(((x8*((((x35*x43))+x63))))+x62);
x87=(x61+((x8*(((((-1.0)*x49))+x69)))));
x88=(((x8*((((x35*x36))+x69))))+x61);
x89=(x11*x86);
x90=(x67+x83);
x91=(x15*((((x9*((x51+((x41*x56))))))+x64)));
x92=((((-1.0)*x20*x72))+(((-1.0)*x16*x65)));
x93=(((x32*x72))+((x37*x65)));
x94=(x11*x88);
x95=(x15*x90);
x96=(x13*x93);
x97=(x84+((x32*x86)));
x98=((((-1.0)*x20*x87))+(((-1.0)*x16*x82)));
x99=(((x37*x82))+((x32*x88)));
eerot[0]=(((x14*((((x13*x99))+x95))))+((x12*((x81+x94)))));
eerot[1]=(((x14*((((x32*x75))+((x37*x87))))))+((x12*((((x13*x98))+x95)))));
eerot[2]=(((x15*x98))+((x13*(((((-1.0)*x83))+(((-1.0)*x67)))))));
IkReal x100=((1.0)*x23);
eetrans[0]=((0.023)+((x19*x34))+((x12*((((x17*x99))+((x26*x90))))))+((x14*(((((-1.0)*x27*x88))+(((-1.0)*x28*x75))))))+((x8*(((((0.2688)*x2*x34))+(((-0.2688)*x33))))))+(((-0.3351)*x33))+((x6*(((((-1.0)*x100*x31))+(((-1.0)*x1*x24))))))+((x9*((((x38*x60))+(((0.2688)*x0*x35))))))+((x8*((((x39*x60))+x50))))+((x9*(((((-1.0)*x100*x40))+(((0.0325)*x33))))))+(((-0.1491)*x1))+(((-1.0)*x50)));
eerot[3]=(((x14*((x91+((x13*((x84+((x32*x85))))))))))+((x12*((((x11*x85))+x76)))));
eerot[4]=(((x12*(((((-1.0)*x13*((((x20*x86))+((x16*(((((-1.0)*x59*x7))+(((-1.0)*x21*x30))))))))))+x91))))+((x14*((((x32*x71))+((x37*x86)))))));
eerot[5]=(((x15*x97))+((x13*(((((-1.0)*x18*x73))+(((-1.0)*x64)))))));
IkReal x101=((1.0)*x23);
eetrans[1]=((0.154)+((x19*x44))+(((0.1491)*x0))+((x9*((((x38*x56))+(((0.2688)*x1*x35))))))+((x14*(((((-0.0375)*x76))+(((-0.0375)*x89))))))+((x9*(((((-1.0)*x1*x101*x2))+(((-0.0325)*x31))))))+(((0.3351)*x31))+((x8*((((x39*x56))+x52))))+((x8*(((((0.2688)*x31))+(((0.2688)*x2*x44))))))+((x6*((((x0*x24))+(((-1.0)*x101*x33))))))+(((-1.0)*x52))+((x12*((((x17*x97))+((x26*((x79+x64)))))))));
eerot[6]=(((x12*((((x10*x66))+x77))))+((x14*((x78+x96)))));
eerot[7]=(((x14*((((x32*x66))+((x37*x72))))))+((x12*((((x13*x92))+x78)))));
eerot[8]=(((x15*x92))+((x13*(((((-1.0)*x48))+(((-1.0)*x18*x58)))))));
eetrans[2]=((0.2925)+((x14*(((((-1.0)*x28*x66))+(((-1.0)*x27*x72))))))+((x19*x5))+(((0.2688)*x48))+((x9*(((((0.2688)*x3*x30))+(((-0.2688)*x29))))))+((x12*((((x17*x93))+((x26*x74))))))+(((-1.0)*x24*x45))+x46+((x8*(((((-1.0)*x46))+x54))))+(((-1.0)*x54)));
}

IKFAST_API int GetNumFreeParameters() { return 2; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2, 3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 8; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij2[2], _nj2,_ij3[2], _nj3;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
j3=pfree[1]; cj3=cos(pfree[1]); sj3=sin(pfree[1]), htj3=tan(pfree[1]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.023)+px+(((-0.0375)*r01)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.154)+py+(((-0.0375)*r11)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.2925)+(((-0.0375)*r21))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x102=((1.0)*px);
IkReal x103=((1.0)*pz);
IkReal x104=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x104))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x103)));
rxp0_2=((((-1.0)*r10*x102))+((py*r00)));
rxp1_0=((((-1.0)*r21*x104))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x103)));
rxp1_2=((((-1.0)*r11*x102))+((py*r01)));
rxp2_0=((((-1.0)*r22*x104))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x103)));
rxp2_2=((((-1.0)*r12*x102))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x105=((0.2982)*py);
IkReal x106=((1.0)*pp);
IkReal x107=((1.0)*py);
IkReal x108=((0.6039)*cj2);
IkReal x109=((0.0663)*cj2);
IkReal x110=(cj3*sj2);
IkReal x111=((0.065)*x110);
IkReal x112=((0.1491)+x108);
IkReal x113=((0.3424644)+(((-1.0)*x106))+x105);
IkReal x114=((-0.01361012)+(((-1.0)*x106))+x105);
IkReal x115=((((-1.0)*x107))+x112);
IkReal x116=(x105+x106);
IkReal x117=((0.3424644)+(((-1.0)*x116)));
IkReal x118=((-0.01361012)+(((-1.0)*x116)));
IkReal x119=(x112+py);
IkReal x120=((((-0.5376)*x110))+(((-0.065)*cj2)));
IkReal x121=((0.1491)+x111+x109);
IkReal x122=((((-1.0)*x107))+x121);
IkReal x123=(x121+py);
IkReal gconst0=x113;
IkReal gconst1=x114;
IkReal gconst2=x115;
IkReal gconst3=x120;
IkReal gconst4=x122;
IkReal gconst5=x113;
IkReal gconst6=x114;
IkReal gconst7=x115;
IkReal gconst8=x120;
IkReal gconst9=x122;
IkReal gconst10=x117;
IkReal gconst11=x118;
IkReal gconst12=x119;
IkReal gconst13=x120;
IkReal gconst14=x123;
IkReal gconst15=x117;
IkReal gconst16=x118;
IkReal gconst17=x119;
IkReal gconst18=x120;
IkReal gconst19=x123;
IkReal x124=px*px;
IkReal x125=(gconst14*gconst7);
IkReal x126=(gconst1*px);
IkReal x127=(gconst4*px);
IkReal x128=(gconst2*gconst9);
IkReal x129=(gconst1*gconst15);
IkReal x130=(gconst11*gconst12);
IkReal x131=((0.5964)*px);
IkReal x132=(gconst11*gconst5);
IkReal x133=((0.012326698098)*gconst17);
IkReal x134=((4.0)*gconst15);
IkReal x135=(gconst15*gconst19);
IkReal x136=(gconst14*gconst19);
IkReal x137=(gconst5*gconst9);
IkReal x138=(gconst0*gconst14);
IkReal x139=(gconst10*gconst16);
IkReal x140=((2.0)*gconst5);
IkReal x141=(gconst17*px);
IkReal x142=(gconst0*gconst4);
IkReal x143=(gconst17*gconst6);
IkReal x144=(gconst1*gconst7);
IkReal x145=((0.078507)*gconst3);
IkReal x146=(gconst11*gconst16);
IkReal x147=((1.1928)*gconst17);
IkReal x148=((1.1928)*gconst5);
IkReal x149=((0.35569296)*gconst7);
IkReal x150=((1.0)*gconst6);
IkReal x151=(gconst12*gconst19);
IkReal x152=(gconst13*gconst18);
IkReal x153=((0.078507)*gconst5);
IkReal x154=(gconst18*gconst4);
IkReal x155=(gconst14*gconst8);
IkReal x156=(gconst0*gconst9);
IkReal x157=((1.1928)*gconst19);
IkReal x158=(gconst14*gconst17);
IkReal x159=(gconst1*gconst17);
IkReal x160=(gconst14*gconst15);
IkReal x161=((0.078507)*gconst13);
IkReal x162=((0.078507)*gconst15);
IkReal x163=(gconst16*gconst7);
IkReal x164=(gconst10*gconst14);
IkReal x165=((1.1928)*gconst6);
IkReal x166=(gconst16*gconst17);
IkReal x167=(gconst18*gconst3);
IkReal x168=(gconst14*gconst18);
IkReal x169=(gconst17*gconst4);
IkReal x170=((0.012326698098)*px);
IkReal x171=((0.157014)*px);
IkReal x172=(gconst5*gconst8);
IkReal x173=((1.0)*gconst1);
IkReal x174=(gconst4*gconst7);
IkReal x175=(gconst4*gconst8);
IkReal x176=((1.0)*gconst10);
IkReal x177=((2.0)*px);
IkReal x178=(gconst0*gconst7);
IkReal x179=((0.0468215748)*px);
IkReal x180=(gconst11*gconst7);
IkReal x181=(gconst6*gconst7);
IkReal x182=(gconst19*gconst5);
IkReal x183=((1.0)*gconst2);
IkReal x184=(gconst0*gconst6);
IkReal x185=(gconst12*gconst16);
IkReal x186=(gconst15*gconst9);
IkReal x187=(gconst1*gconst5);
IkReal x188=(gconst3*gconst8);
IkReal x189=(gconst11*gconst17);
IkReal x190=((0.024653396196)*x124);
IkReal x191=((0.006163349049)*x125);
IkReal x192=((0.006163349049)*x169);
IkReal x193=(gconst11*x124);
IkReal x194=(gconst4*x124);
IkReal x195=((0.35569296)*x124);
IkReal x196=((1.0)*gconst11*gconst15);
IkReal x197=((1.0)*x188);
IkReal x198=(gconst10*x177);
IkReal x199=((0.0936431496)*x124);
IkReal x200=(gconst10*x124);
IkReal x201=((1.1928)*x124);
IkReal x202=((4.0)*x124);
IkReal x203=(gconst2*x124);
IkReal x204=((0.078507)*gconst18*x160);
IkReal x205=(x161*x189);
IkReal x206=(x153*x175);
IkReal x207=(x144*x145);
IkReal x208=(x207+x206);
IkReal x209=(x205+x204);
IkReal x210=(x192+x191+x190);
op[0]=(((x139*x158))+(((-1.0)*x152*x196))+(((-1.0)*x130*x166))+(((-1.0)*x209))+((x130*x135))+(((-1.0)*x135*x164))+(((-0.006163349049)*x158)));
op[1]=(((gconst17*x130*x131))+(((-1.0)*gconst11*gconst13*x171))+(((-1.0)*gconst12*x131*x135))+((gconst10*x131*x136))+(((-1.0)*x160*x198))+(((-1.0)*gconst10*x131*x158))+((gconst11*x131*x152))+((x168*x179))+(((-1.0)*px*x133))+((gconst14*x139*x177))+(((-2.0)*x141*x146))+(((-1.0)*gconst14*x170))+(((2.0)*x139*x141))+(((-1.0)*gconst19*x130*x131))+((gconst12*x131*x166))+(((0.0468215748)*gconst13*x141))+((gconst11*x135*x177))+(((-1.0)*gconst16*x131*x158))+((gconst15*x131*x152))+((gconst14*x131*x135))+((gconst15*x130*x177))+(((-1.0)*gconst16*x130*x177))+(((-1.0)*gconst15*gconst18*x171))+(((-1.0)*x135*x198)));
op[2]=(((x158*x195))+((x157*x200))+(((-1.0)*x154*x162))+((x143*x164))+((x139*x169))+(((-1.0)*x152*x195))+(((-1.0)*x135*x138))+((x151*x195))+(((-1.0)*gconst9*x160*x176))+(((-1.0)*x132*x152))+(((-1.0)*x159*x161))+(((-1.0)*x161*x180))+(((-1.0)*gconst12*gconst17*x195))+(((-1.0)*gconst4*x135*x176))+(((-1.0)*x134*x200))+((x138*x166))+((gconst11*gconst2*x135))+(((-1.0)*gconst14*gconst16*x201))+((x185*x201))+((gconst18*x199))+(((-1.0)*x145*x189))+(((-1.0)*gconst17*x146*x183))+(((-1.0)*x130*x163))+(((-1.0)*x209))+(((-1.0)*x159*x185))+(((-1.0)*gconst5*x136*x176))+(((-1.0)*x146*x202))+((x139*x202))+((x125*x139))+((x129*x151))+(((-1.0)*x130*x143))+(((-1.0)*gconst12*gconst15*x201))+(((-1.0)*x129*x152))+(((-1.0)*x147*x200))+((x147*x193))+(((-1.0)*x157*x193))+((x134*x193))+(((-1.0)*x210))+(((-1.0)*gconst14*x133))+(((-1.0)*gconst13*gconst8*x196))+((gconst13*x199))+(((-1.0)*x167*x196))+(((-1.0)*x155*x162))+((x160*x201))+((x130*x186))+((x130*x182))+(((-1.0)*x153*x168))+(((-1.0)*x136*x195)));
op[3]=((((0.5964)*gconst1*gconst13*gconst18*px))+(((2.0)*gconst11*gconst12*gconst5*px))+(((2.0)*gconst11*gconst19*gconst5*px))+(((-2.0)*gconst10*gconst19*gconst5*px))+(((-0.157014)*gconst11*gconst3*px))+(((-0.012326698098)*gconst7*px))+(((-0.5964)*gconst10*gconst17*gconst4*px))+(((0.5964)*gconst16*gconst17*gconst2*px))+(((2.0)*gconst0*gconst14*gconst16*px))+(((0.5964)*gconst10*gconst19*gconst4*px))+(((-0.5964)*gconst1*gconst12*gconst19*px))+(((-2.0)*gconst10*gconst14*gconst5*px))+(((0.5964)*gconst11*gconst17*gconst2*px))+(((-0.5964)*gconst10*gconst14*gconst7*px))+(((-0.5964)*gconst0*gconst14*gconst17*px))+(((2.0)*gconst1*gconst15*gconst19*px))+(((0.5964)*gconst11*gconst13*gconst8*px))+(((-0.5964)*gconst12*gconst15*gconst9*px))+(((-2.0)*gconst11*gconst17*gconst6*px))+(((-0.5964)*gconst15*gconst19*gconst2*px))+(((-2.0)*gconst1*gconst16*gconst17*px))+(((0.5964)*gconst14*gconst19*gconst5*px))+(((-2.0)*gconst11*gconst16*gconst2*px))+(((0.0468215748)*gconst14*gconst8*px))+(((-0.5964)*gconst16*gconst17*gconst4*px))+(((2.0)*gconst10*gconst16*gconst7*px))+(((2.0)*gconst11*gconst15*gconst2*px))+(((0.5964)*gconst15*gconst19*gconst4*px))+(((-0.5964)*gconst14*gconst16*gconst7*px))+(((0.0468215748)*gconst14*gconst18*px))+(((0.5964)*gconst1*gconst12*gconst17*px))+(((2.0)*gconst0*gconst16*gconst17*px))+(((-2.0)*gconst1*gconst12*gconst16*px))+(((-0.024653396196)*gconst14*px))+(((-2.0)*gconst11*gconst16*gconst7*px))+(((0.5964)*gconst0*gconst14*gconst19*px))+(((-0.012326698098)*gconst4*px))+(((-2.0)*gconst0*gconst14*gconst15*px))+(((-0.024653396196)*gconst17*px))+(((-0.5964)*gconst14*gconst17*gconst6*px))+(((0.5964)*gconst11*gconst18*gconst3*px))+(((0.0468215748)*gconst13*gconst7*px))+(((2.0)*gconst10*gconst14*gconst6*px))+(((0.5964)*gconst13*gconst18*gconst5*px))+(((2.0)*gconst10*gconst17*gconst6*px))+(((-0.157014)*gconst15*gconst18*px))+(((-2.0)*gconst10*gconst15*gconst9*px))+(((-0.5964)*gconst11*gconst12*gconst9*px))+(((0.5964)*gconst10*gconst14*gconst9*px))+(((0.0468215748)*gconst13*gconst17*px))+(((0.5964)*gconst13*gconst15*gconst8*px))+(((2.0)*gconst11*gconst15*gconst9*px))+(((-0.5964)*gconst11*gconst19*gconst2*px))+(((0.5964)*gconst11*gconst12*gconst7*px))+(((0.5964)*gconst15*gconst18*gconst3*px))+(((0.5964)*gconst14*gconst15*gconst9*px))+(((-0.157014)*gconst18*gconst5*px))+(((-0.157014)*gconst15*gconst8*px))+(((-2.0)*gconst11*gconst12*gconst6*px))+(((-2.0)*gconst0*gconst15*gconst19*px))+(((-0.157014)*gconst1*gconst13*px))+(((2.0)*gconst10*gconst16*gconst4*px))+(((-0.157014)*gconst11*gconst13*px))+(((0.0468215748)*gconst18*gconst4*px))+(((0.5964)*gconst12*gconst16*gconst7*px))+(((-0.5964)*gconst12*gconst19*gconst5*px))+(((0.5964)*gconst12*gconst17*gconst6*px))+(((-2.0)*gconst10*gconst15*gconst4*px))+(((0.0468215748)*gconst17*gconst3*px))+(((2.0)*gconst1*gconst12*gconst15*px)));
op[4]=((((-1.0)*gconst11*gconst13*gconst5*gconst8))+(((-1.1928)*gconst0*gconst17*(px*px)))+(((-0.35569296)*gconst17*gconst2*(px*px)))+(((-4.0)*gconst1*gconst16*(px*px)))+(((-0.078507)*gconst1*gconst13*gconst7))+(((-1.0)*gconst1*gconst16*gconst17*gconst2))+(((-4.0)*gconst11*gconst6*(px*px)))+(((1.1928)*gconst14*gconst5*(px*px)))+(((-0.078507)*gconst11*gconst3*gconst7))+(((-1.0)*gconst0*gconst14*gconst15*gconst9))+(((-1.1928)*gconst11*gconst9*(px*px)))+(((4.0)*gconst10*gconst6*(px*px)))+(((-1.1928)*gconst1*gconst19*(px*px)))+((gconst11*gconst12*gconst5*gconst9))+(((0.35569296)*gconst17*gconst4*(px*px)))+(((-1.0)*gconst1*gconst13*gconst18*gconst5))+(((-0.006163349049)*gconst14*gconst17))+((gconst0*gconst14*gconst17*gconst6))+(((-0.078507)*gconst14*gconst15*gconst8))+(((-0.078507)*gconst11*gconst17*gconst3))+(((0.0936431496)*gconst8*(px*px)))+(((1.1928)*gconst10*gconst9*(px*px)))+(((0.0936431496)*gconst13*(px*px)))+((gconst10*gconst16*gconst4*gconst7))+(((-0.35569296)*gconst14*gconst9*(px*px)))+(((1.1928)*gconst16*gconst2*(px*px)))+(((-1.1928)*gconst14*gconst6*(px*px)))+(((-1.0)*gconst10*gconst19*gconst4*gconst5))+(((4.0)*gconst0*gconst16*(px*px)))+((gconst0*gconst14*gconst16*gconst7))+(((0.0936431496)*gconst3*(px*px)))+(((4.0)*gconst11*gconst5*(px*px)))+(((-1.1928)*gconst15*gconst2*(px*px)))+(((-0.35569296)*gconst12*gconst7*(px*px)))+(((-1.0)*gconst10*gconst15*gconst4*gconst9))+((gconst1*gconst12*gconst19*gconst5))+(((-1.0)*gconst11*gconst15*gconst3*gconst8))+(((-0.35569296)*gconst18*gconst3*(px*px)))+(((-0.35569296)*gconst13*gconst8*(px*px)))+(((0.35569296)*gconst12*gconst9*(px*px)))+((gconst10*gconst17*gconst4*gconst6))+(((1.1928)*gconst15*gconst4*(px*px)))+((gconst10*gconst14*gconst6*gconst7))+(((-0.012326698098)*gconst14*gconst7))+(((-0.078507)*gconst15*gconst4*gconst8))+(((1.1928)*gconst12*gconst6*(px*px)))+(((-0.078507)*gconst15*gconst18*gconst4))+(((-1.0)*gconst11*gconst17*gconst2*gconst6))+(((-1.0)*gconst1*gconst12*gconst16*gconst7))+(((0.0936431496)*gconst18*(px*px)))+(((1.1928)*gconst11*gconst7*(px*px)))+((gconst1*gconst15*gconst19*gconst2))+(((0.35569296)*gconst14*gconst7*(px*px)))+(((-1.0)*gconst1*gconst13*gconst15*gconst8))+(((1.1928)*gconst0*gconst19*(px*px)))+(((-1.0)*gconst11*gconst16*gconst2*gconst7))+(((-1.0)*gconst1*gconst12*gconst17*gconst6))+(((-0.006163349049)*gconst4*gconst7))+(((1.1928)*gconst1*gconst17*(px*px)))+(((-0.078507)*gconst1*gconst17*gconst3))+(((-0.049306792392)*(px*px)))+(((-1.0)*gconst0*gconst15*gconst19*gconst4))+((gconst11*gconst19*gconst2*gconst5))+(((-1.1928)*gconst16*gconst4*(px*px)))+(((-4.0)*gconst10*gconst5*(px*px)))+(((-1.0)*gconst11*gconst12*gconst6*gconst7))+((gconst11*gconst15*gconst2*gconst9))+(((-4.0)*gconst0*gconst15*(px*px)))+(((-0.078507)*gconst14*gconst18*gconst5))+(((-1.1928)*gconst10*gconst7*(px*px)))+(((-0.35569296)*gconst19*gconst4*(px*px)))+(((-0.078507)*gconst18*gconst4*gconst5))+(((-0.078507)*gconst1*gconst13*gconst17))+((gconst1*gconst12*gconst15*gconst9))+(((-1.1928)*gconst12*gconst5*(px*px)))+(((-0.012326698098)*gconst17*gconst4))+(((-0.078507)*gconst11*gconst13*gconst7))+(((-1.0)*gconst10*gconst14*gconst5*gconst9))+(((-1.0)*gconst0*gconst14*gconst19*gconst5))+(((-0.078507)*gconst14*gconst5*gconst8))+(((0.35569296)*gconst19*gconst2*(px*px)))+((gconst0*gconst16*gconst17*gconst4))+(((4.0)*gconst1*gconst15*(px*px)))+(((-1.0)*gconst11*gconst18*gconst3*gconst5))+(((-1.0)*gconst1*gconst15*gconst18*gconst3)));
op[5]=((((0.5964)*gconst1*gconst12*gconst7*px))+(((2.0)*gconst11*gconst5*gconst9*px))+(((-0.5964)*gconst1*gconst19*gconst2*px))+(((-0.157014)*gconst11*gconst3*px))+(((2.0)*gconst10*gconst6*gconst7*px))+(((2.0)*gconst1*gconst19*gconst5*px))+(((0.5964)*gconst17*gconst2*gconst6*px))+(((-0.5964)*gconst17*gconst4*gconst6*px))+(((2.0)*gconst10*gconst4*gconst6*px))+(((-0.5964)*gconst10*gconst4*gconst7*px))+(((-2.0)*gconst0*gconst15*gconst9*px))+(((-2.0)*gconst10*gconst4*gconst5*px))+(((0.5964)*gconst18*gconst3*gconst5*px))+(((-2.0)*gconst11*gconst2*gconst6*px))+(((0.0468215748)*gconst14*gconst8*px))+(((-0.157014)*gconst1*gconst3*px))+(((0.5964)*gconst0*gconst14*gconst9*px))+(((0.5964)*gconst10*gconst4*gconst9*px))+(((-2.0)*gconst1*gconst12*gconst6*px))+(((-0.5964)*gconst1*gconst12*gconst9*px))+(((-2.0)*gconst1*gconst16*gconst7*px))+(((-2.0)*gconst0*gconst15*gconst4*px))+(((0.0468215748)*gconst13*gconst7*px))+(((-2.0)*gconst10*gconst5*gconst9*px))+(((0.5964)*gconst0*gconst19*gconst4*px))+(((-0.5964)*gconst15*gconst2*gconst9*px))+(((0.5964)*gconst15*gconst3*gconst8*px))+(((2.0)*gconst0*gconst16*gconst4*px))+(((-2.0)*gconst1*gconst17*gconst6*px))+(((0.5964)*gconst13*gconst5*gconst8*px))+(((-0.5964)*gconst11*gconst2*gconst9*px))+(((2.0)*gconst1*gconst12*gconst5*px))+(((0.5964)*gconst15*gconst4*gconst9*px))+(((0.5964)*gconst1*gconst17*gconst2*px))+(((-0.5964)*gconst14*gconst6*gconst7*px))+(((-0.012326698098)*gconst17*px))+(((-0.5964)*gconst19*gconst2*gconst5*px))+(((0.0468215748)*gconst3*gconst7*px))+(((0.5964)*gconst1*gconst13*gconst8*px))+(((-0.5964)*gconst16*gconst4*gconst7*px))+(((-0.157014)*gconst18*gconst5*px))+(((-0.157014)*gconst15*gconst8*px))+(((2.0)*gconst1*gconst15*gconst2*px))+(((-0.5964)*gconst12*gconst5*gconst9*px))+(((-0.157014)*gconst1*gconst13*px))+(((0.5964)*gconst12*gconst6*gconst7*px))+(((-0.5964)*gconst0*gconst17*gconst4*px))+(((-0.012326698098)*gconst14*px))+(((0.5964)*gconst16*gconst2*gconst7*px))+(((0.5964)*gconst11*gconst3*gconst8*px))+(((0.0468215748)*gconst18*gconst4*px))+(((-2.0)*gconst0*gconst14*gconst5*px))+(((2.0)*gconst11*gconst2*gconst5*px))+(((-2.0)*gconst0*gconst19*gconst5*px))+(((0.5964)*gconst11*gconst2*gconst7*px))+(((0.0468215748)*gconst4*gconst8*px))+(((2.0)*gconst0*gconst16*gconst7*px))+(((0.0468215748)*gconst17*gconst3*px))+(((2.0)*gconst0*gconst14*gconst6*px))+(((-0.157014)*gconst5*gconst8*px))+(((2.0)*gconst1*gconst15*gconst9*px))+(((0.5964)*gconst14*gconst5*gconst9*px))+(((0.5964)*gconst1*gconst18*gconst3*px))+(((2.0)*gconst0*gconst17*gconst6*px))+(((-0.024653396196)*gconst4*px))+(((-0.5964)*gconst0*gconst14*gconst7*px))+(((-2.0)*gconst1*gconst16*gconst2*px))+(((-0.024653396196)*gconst7*px))+(((0.5964)*gconst19*gconst4*gconst5*px))+(((-2.0)*gconst11*gconst6*gconst7*px)));
op[6]=(((x165*x203))+((gconst10*gconst6*x174))+((x142*x143))+((gconst3*x199))+(((-1.0)*x188*x195))+((x187*x202))+((x128*x195))+(((-1.0)*x142*x186))+(((-1.0)*x142*x182))+(((-1.0)*x153*x154))+(((-1.0)*x153*x155))+(((-1.0)*x144*x161))+((x144*x201))+(((-1.0)*gconst13*x172*x173))+(((-0.012326698098)*x174))+(((-1.0)*x129*x197))+((x149*x194))+(((-1.0)*gconst4*x137*x176))+(((-1.0)*x145*x180))+((x184*x202))+(((-1.0)*gconst2*x150*x180))+(((-1.0)*x208))+(((-1.0)*x132*x197))+(((-1.0)*x149*x203))+(((-1.0)*gconst16*x144*x183))+(((-1.0)*x162*x175))+(((-1.0)*x137*x138))+(((-1.0)*x178*x201))+((x156*x201))+((gconst1*gconst2*x182))+(((-1.0)*x145*x159))+((gconst8*x199))+(((-1.0)*x148*x203))+((x148*x194))+(((-1.0)*gconst1*gconst6*x202))+(((-1.0)*gconst2*x143*x173))+(((-1.0)*x165*x194))+(((-0.35569296)*gconst9*x194))+((x128*x132))+(((-1.0)*x210))+(((-1.0)*gconst1*gconst9*x201))+((x128*x129))+((gconst1*gconst12*x137))+(((-1.0)*gconst0*gconst5*x202))+((x125*x184))+(((-1.0)*gconst12*x144*x150))+((x142*x163))+(((-1.0)*gconst5*x167*x173)));
op[7]=((((-1.0)*gconst0*x137*x177))+(((0.5964)*x127*x156))+((gconst6*x177*x178))+(((0.5964)*gconst2*gconst7*x126))+(((-0.157014)*gconst3*x126))+((gconst2*x131*x181))+(((-0.012326698098)*x127))+(((-1.0)*gconst5*x128*x131))+(((0.5964)*x127*x137))+((gconst2*x126*x140))+(((-1.0)*x171*x172))+(((2.0)*x127*x184))+(((2.0)*x126*x137))+(((0.5964)*x126*x188))+(((-0.5964)*x127*x181))+(((-2.0)*x126*x181))+(((-1.0)*gconst7*x170))+(((0.0468215748)*gconst8*x127))+(((-0.5964)*x127*x178))+((gconst3*x131*x172))+(((-0.5964)*x126*x128))+((gconst3*gconst7*x179))+(((-2.0)*gconst2*gconst6*x126))+(((-1.0)*gconst0*x127*x140)));
op[8]=((((-1.0)*gconst2*x144*x150))+((x128*x187))+(((-1.0)*x137*x142))+(((-1.0)*x208))+(((-1.0)*gconst3*x172*x173))+(((-0.006163349049)*x174))+((x142*x181)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j4eval[2];
IkReal x211=(cj3*sj2);
j4eval[0]=(cj2+(((-10.3107692307692)*x211)));
j4eval[1]=IKsign(((((-2456607.7119)*x211))+(((238256.4925)*cj2))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x212=cj0*cj0;
IkReal x213=py*py;
IkReal x214=px*px;
IkReal x215=pz*pz;
IkReal x216=(cj3*sj2);
IkReal x217=(cj2*x213);
IkReal x218=((0.6702)*x213);
IkReal x219=(cj2*x215);
IkReal x220=((10.3107692307692)*x213);
IkReal x221=(cj0*px*py*sj0);
IkReal x222=(x212*x214);
IkReal x223=(cj2*x222);
j1eval[0]=((((-1.0)*x216*x220))+(((-1.0)*x212*x217))+(((2.0)*cj2*x221))+(((-10.3107692307692)*x216*x222))+x217+x219+x223+((x212*x216*x220))+(((-20.6215384615385)*x216*x221))+(((-10.3107692307692)*x215*x216)));
j1eval[1]=IKsign(((((-0.065)*x212*x217))+(((0.065)*x223))+(((-1.3404)*x216*x221))+(((-0.6702)*x216*x222))+(((0.13)*cj2*x221))+((x212*x216*x218))+(((0.065)*x217))+(((0.065)*x219))+(((-1.0)*x216*x218))+(((-0.6702)*x215*x216))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((-1.14576870465788)+(((5.48506633223289)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-1.14576870465788)+(((5.48506633223289)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x224=IKasin(((-1.14576870465788)+(((5.48506633223289)*pp))));
j4array[0]=((-1.78780359544733)+(((1.0)*x224)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((1.35378905814247)+(((-1.0)*x224)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j1eval[3];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x225=cj4*cj4;
IkReal x226=(py*sj0);
IkReal x227=((0.0325)*sj4);
IkReal x228=(cj4*pz);
IkReal x229=((0.2688)*cj4);
IkReal x230=(cj0*px);
IkReal x231=(cj4*sj4);
IkReal x232=(pz*sj4);
IkReal x233=((8.27076923076923)*cj4);
IkReal x234=((1.0)*pz);
j1eval[0]=((((-10.3107692307692)*x230))+(((-10.3107692307692)*x226))+((sj4*x226))+(((-1.0)*x230*x233))+(((-8.27076923076923)*x232))+((sj4*x230))+(((-1.0)*x226*x233))+pz+(((-1.0)*x228)));
j1eval[1]=IKsign(((((0.0325)*pz))+(((-0.0325)*x228))+(((-0.2688)*x232))+(((-0.3351)*x230))+((x227*x230))+((x226*x227))+(((-1.0)*x226*x229))+(((-0.3351)*x226))+(((-1.0)*x229*x230))));
j1eval[2]=((IKabs(((0.01962675)+(((-1.0)*x230*x234))+(((-0.00215475)*cj4))+(((-0.017472)*x225))+(((-1.0)*x226*x234))+(((-0.09113113)*sj4))+(((-0.07119719)*x231)))))+(IKabs(((-0.11334826)+(((-0.18014976)*cj4))+(pz*pz)+(((-0.07119719)*x225))+(((0.017472)*x231))+(((0.0217815)*sj4))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x235=cj4*cj4;
IkReal x236=((0.017472)*sj4);
IkReal x237=(cj4*pz);
IkReal x238=(cj0*px);
IkReal x239=((0.2688)*sj4);
IkReal x240=(py*sj0);
IkReal x241=((8.27076923076923)*sj4);
IkReal x242=((0.0325)*cj4);
IkReal x243=((1.0)*pz);
IkReal x244=(pz*sj4);
j1eval[0]=((((-8.27076923076923)*x237))+((x240*x241))+(((-1.0)*x240))+((cj4*x240))+(((-10.3107692307692)*pz))+((x238*x241))+x244+((cj4*x238))+(((-1.0)*x238)));
j1eval[1]=((IKabs(((-0.01962675)+(((0.00215475)*cj4))+(((0.07119719)*cj4*sj4))+(((-1.0)*x238*x243))+(((-1.0)*x240*x243))+(((0.017472)*x235))+(((0.09113113)*sj4)))))+(IKabs(((0.07330969)+(((-1.0)*pz*x243))+(((-1.0)*x236))+(((-0.0021125)*cj4))+((cj4*x236))+(((-0.07119719)*x235))))));
j1eval[2]=IKsign((((x240*x242))+((x238*x242))+(((-0.2688)*x237))+((x239*x240))+(((-0.0325)*x238))+((x238*x239))+(((0.0325)*x244))+(((-0.3351)*pz))+(((-0.0325)*x240))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x245=(cj0*px);
IkReal x246=(pz*sj4);
IkReal x247=(cj4*pz);
IkReal x248=((0.0325)*sj4);
IkReal x249=(py*sj0);
IkReal x250=((1.0)*sj4);
IkReal x251=((8.27076923076923)*cj4);
IkReal x252=((0.2688)*cj4);
j1eval[0]=(((x245*x251))+((x249*x251))+(((8.27076923076923)*x246))+(((10.3107692307692)*x249))+(((10.3107692307692)*x245))+(((-1.0)*pz))+x247+(((-1.0)*x245*x250))+(((-1.0)*x249*x250)));
j1eval[1]=IKsign(((((-1.0)*x248*x249))+((x245*x252))+((x249*x252))+(((0.3351)*x249))+(((0.3351)*x245))+(((-0.0325)*pz))+(((0.0325)*x247))+(((-1.0)*x245*x248))+(((0.2688)*x246))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x253=((-1.0)*py);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x253);
rxp0_1=(px*r20);
rxp1_0=(r21*x253);
rxp1_1=(px*r21);
rxp2_0=(r22*x253);
rxp2_1=(px*r22);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x254=((-1.0)*py);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x254);
rxp0_1=(px*r20);
rxp1_0=(r21*x254);
rxp1_1=(px*r21);
rxp2_0=(r22*x254);
rxp2_1=(px*r22);
IkReal x255=cj0*cj0;
IkReal x256=py*py;
IkReal x257=(py*sj0);
IkReal x258=(cj0*px);
j1eval[0]=((((-1.0)*x257))+(((-1.0)*x258)));
j1eval[1]=(((x255*(px*px)))+(((2.0)*x257*x258))+x256+(((-1.0)*x255*x256)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1030=((-1.0)*py);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1030);
rxp0_1=0;
rxp1_0=(r21*x1030);
rxp1_1=0;
rxp2_0=(r22*x1030);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1031=((-1.0)*py);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1031);
rxp0_1=0;
rxp1_0=(r21*x1031);
rxp1_1=0;
rxp2_0=(r22*x1031);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1032=((-1.0)*px);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x1032);
rxp1_2=(r11*x1032);
rxp2_2=(r12*x1032);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1033=((-1.0)*px);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x1033);
rxp1_2=(r11*x1033);
rxp2_2=(r12*x1033);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1034=cj0*cj0;
IkReal x1035=px*px;
IkReal x1036=py*py;
IkReal x1037=(px*py);
IkReal x1038=(cj0*sj0);
IkReal x1039=(py*sj0);
IkReal x1040=(cj0*px);
IkReal x1041=((650.0)*x1034);
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(((((-10000.0)*x1039))+(((-10000.0)*x1040))),-1);
if(!x1042.valid){
continue;
}
CheckValue<IkReal> x1043=IKPowWithIntegerCheck(((((1300.0)*x1037*x1038))+((x1035*x1041))+(((650.0)*x1036))+(((-1.0)*x1036*x1041))),-1);
if(!x1043.valid){
continue;
}
if( IKabs(((-6039.0)*(x1042.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1043.value)*(((((-2982.0)*x1037))+(((5964.0)*x1034*x1037))+(((-2982.0)*x1035*x1038))+(((-444.6162)*x1040))+(((2982.0)*x1036*x1038))+(((-444.6162)*x1039)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6039.0)*(x1042.value)))+IKsqr(((x1043.value)*(((((-2982.0)*x1037))+(((5964.0)*x1034*x1037))+(((-2982.0)*x1035*x1038))+(((-444.6162)*x1040))+(((2982.0)*x1036*x1038))+(((-444.6162)*x1039))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-6039.0)*(x1042.value)), ((x1043.value)*(((((-2982.0)*x1037))+(((5964.0)*x1034*x1037))+(((-2982.0)*x1035*x1038))+(((-444.6162)*x1040))+(((2982.0)*x1036*x1038))+(((-444.6162)*x1039))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1044=IKcos(j1);
IkReal x1045=IKsin(j1);
IkReal x1046=(py*sj0);
IkReal x1047=(cj0*px);
IkReal x1048=((0.065)*x1044);
IkReal x1049=((1.0)*x1045);
IkReal x1050=((0.6702)*x1045);
evalcond[0]=((-0.6039)*x1044);
evalcond[1]=(((x1044*x1047))+((x1044*x1046)));
evalcond[2]=((((0.6039)*x1045))+(((-1.0)*x1047))+(((-1.0)*x1046)));
evalcond[3]=((0.6039)+(((-1.0)*x1046*x1049))+(((-1.0)*x1047*x1049)));
evalcond[4]=((-0.4491954)+(((-1.0)*x1046*x1048))+(((-0.2982)*px*sj0))+(((0.2982)*cj0*py))+((x1047*x1050))+((x1046*x1050))+(((-1.0)*x1047*x1048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1051=cj0*cj0;
IkReal x1052=py*py;
IkReal x1053=(cj0*px);
IkReal x1054=(py*sj0);
IkReal x1055=((6702.0)*x1052);
CheckValue<IkReal> x1056=IKPowWithIntegerCheck(((((-392.535)*x1053))+(((-392.535)*x1054))),-1);
if(!x1056.valid){
continue;
}
if( IKabs(((((1.65590329524756)*x1053))+(((1.65590329524756)*x1054)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1056.value)*(((2712.6910206)+(((-1.0)*x1055))+(((-1800.8298)*cj0*py))+(((1800.8298)*px*sj0))+((x1051*x1055))+(((-13404.0)*x1053*x1054))+(((-6702.0)*x1051*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.65590329524756)*x1053))+(((1.65590329524756)*x1054))))+IKsqr(((x1056.value)*(((2712.6910206)+(((-1.0)*x1055))+(((-1800.8298)*cj0*py))+(((1800.8298)*px*sj0))+((x1051*x1055))+(((-13404.0)*x1053*x1054))+(((-6702.0)*x1051*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.65590329524756)*x1053))+(((1.65590329524756)*x1054))), ((x1056.value)*(((2712.6910206)+(((-1.0)*x1055))+(((-1800.8298)*cj0*py))+(((1800.8298)*px*sj0))+((x1051*x1055))+(((-13404.0)*x1053*x1054))+(((-6702.0)*x1051*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1057=IKcos(j1);
IkReal x1058=IKsin(j1);
IkReal x1059=(py*sj0);
IkReal x1060=(cj0*px);
IkReal x1061=((0.065)*x1057);
IkReal x1062=((1.0)*x1058);
IkReal x1063=((0.6702)*x1058);
evalcond[0]=((-0.6039)*x1057);
evalcond[1]=(((x1057*x1059))+((x1057*x1060)));
evalcond[2]=((((0.6039)*x1058))+(((-1.0)*x1059))+(((-1.0)*x1060)));
evalcond[3]=((0.6039)+(((-1.0)*x1060*x1062))+(((-1.0)*x1059*x1062)));
evalcond[4]=((-0.4491954)+(((-0.2982)*px*sj0))+(((-1.0)*x1060*x1061))+((x1060*x1063))+(((-1.0)*x1059*x1061))+(((0.2982)*cj0*py))+((x1059*x1063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1064=cj0*cj0;
IkReal x1065=py*py;
IkReal x1066=cj4*cj4;
IkReal x1067=((0.017472)*sj4);
IkReal x1068=(py*sj0);
IkReal x1069=((0.0325)*sj4);
IkReal x1070=(cj0*px);
IkReal x1071=((0.2688)*cj4);
IkReal x1072=((0.0325)*pz);
CheckValue<IkReal> x1073 = IKatan2WithCheck(IkReal(((-0.07330969)+(((2.0)*x1068*x1070))+x1065+x1067+(((0.07119719)*x1066))+(((-1.0)*x1064*x1065))+(((-1.0)*cj4*x1067))+(((0.0021125)*cj4))+((x1064*(px*px))))),IkReal(((-0.01962675)+(((0.00215475)*cj4))+((pz*x1070))+(((0.017472)*x1066))+((pz*x1068))+(((0.07119719)*cj4*sj4))+(((0.09113113)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1073.valid){
continue;
}
CheckValue<IkReal> x1074=IKPowWithIntegerCheck(IKsign((((x1068*x1071))+((x1070*x1071))+(((0.3351)*x1070))+(((0.3351)*x1068))+(((0.2688)*pz*sj4))+(((-1.0)*x1068*x1069))+((cj4*x1072))+(((-1.0)*x1069*x1070))+(((-1.0)*x1072)))),-1);
if(!x1074.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1073.value)+(((1.5707963267949)*(x1074.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1075=IKcos(j1);
IkReal x1076=IKsin(j1);
IkReal x1077=(cj0*px);
IkReal x1078=((0.0325)*sj4);
IkReal x1079=((0.2688)*sj4);
IkReal x1080=(py*sj0);
IkReal x1081=((0.2688)*cj4);
IkReal x1082=((0.0325)*cj4);
IkReal x1083=((1.0)*x1076);
IkReal x1084=(pz*x1075);
IkReal x1085=((0.065)*x1075);
IkReal x1086=((0.6702)*x1076);
evalcond[0]=((0.0325)+(((-1.0)*pz*x1083))+((x1075*x1080))+((x1075*x1077))+(((-1.0)*x1082))+(((-1.0)*x1079)));
evalcond[1]=((0.3351)+x1081+(((-1.0)*x1084))+(((-1.0)*x1080*x1083))+(((-1.0)*x1077*x1083))+(((-1.0)*x1078)));
evalcond[2]=(((x1076*x1082))+(((-0.3351)*x1075))+(((-0.0325)*x1076))+((x1075*x1078))+pz+((x1076*x1079))+(((-1.0)*x1075*x1081)));
evalcond[3]=(((x1076*x1081))+(((-1.0)*x1076*x1078))+(((0.3351)*x1076))+((x1075*x1082))+(((-0.0325)*x1075))+((x1075*x1079))+(((-1.0)*x1080))+(((-1.0)*x1077)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-1.0)*x1080*x1085))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x1080*x1086))+(((0.6702)*x1084))+(((0.065)*pz*x1076))+((x1077*x1086))+(((-1.0)*x1077*x1085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1087=cj4*cj4;
IkReal x1088=((0.017472)*sj4);
IkReal x1089=((0.0325)*cj4);
IkReal x1090=(cj0*px);
IkReal x1091=(py*sj0);
IkReal x1092=((1.0)*pz);
IkReal x1093=((0.2688)*sj4);
CheckValue<IkReal> x1094=IKPowWithIntegerCheck(IKsign(((((-0.0325)*x1090))+(((-0.0325)*x1091))+(((-0.2688)*cj4*pz))+((x1089*x1091))+((x1089*x1090))+((x1091*x1093))+(((-0.3351)*pz))+((x1090*x1093))+(((0.0325)*pz*sj4)))),-1);
if(!x1094.valid){
continue;
}
CheckValue<IkReal> x1095 = IKatan2WithCheck(IkReal(((-0.01962675)+(((-1.0)*x1091*x1092))+(((0.00215475)*cj4))+(((-1.0)*x1090*x1092))+(((0.07119719)*cj4*sj4))+(((0.017472)*x1087))+(((0.09113113)*sj4)))),IkReal(((0.07330969)+((cj4*x1088))+(((-1.0)*pz*x1092))+(((-0.0021125)*cj4))+(((-0.07119719)*x1087))+(((-1.0)*x1088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1095.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1094.value)))+(x1095.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1096=IKcos(j1);
IkReal x1097=IKsin(j1);
IkReal x1098=(cj0*px);
IkReal x1099=((0.0325)*sj4);
IkReal x1100=((0.2688)*sj4);
IkReal x1101=(py*sj0);
IkReal x1102=((0.2688)*cj4);
IkReal x1103=((0.0325)*cj4);
IkReal x1104=((1.0)*x1097);
IkReal x1105=(pz*x1096);
IkReal x1106=((0.065)*x1096);
IkReal x1107=((0.6702)*x1097);
evalcond[0]=((0.0325)+(((-1.0)*pz*x1104))+((x1096*x1101))+((x1096*x1098))+(((-1.0)*x1100))+(((-1.0)*x1103)));
evalcond[1]=((0.3351)+x1102+(((-1.0)*x1098*x1104))+(((-1.0)*x1099))+(((-1.0)*x1105))+(((-1.0)*x1101*x1104)));
evalcond[2]=((((-0.0325)*x1097))+((x1097*x1103))+((x1097*x1100))+pz+((x1096*x1099))+(((-0.3351)*x1096))+(((-1.0)*x1096*x1102)));
evalcond[3]=((((-0.0325)*x1096))+((x1097*x1102))+(((-1.0)*x1097*x1099))+(((-1.0)*x1101))+(((-1.0)*x1098))+((x1096*x1100))+((x1096*x1103))+(((0.3351)*x1097)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-1.0)*x1098*x1106))+((x1098*x1107))+((x1101*x1107))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.6702)*x1105))+(((0.065)*pz*x1097))+(((-1.0)*x1101*x1106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1108=cj4*cj4;
IkReal x1109=(cj0*px);
IkReal x1110=((0.0325)*pz);
IkReal x1111=((0.0325)*sj4);
IkReal x1112=(py*sj0);
IkReal x1113=(cj4*sj4);
IkReal x1114=((1.0)*pz);
IkReal x1115=((0.2688)*cj4);
CheckValue<IkReal> x1116 = IKatan2WithCheck(IkReal(((-0.11334826)+(((0.017472)*x1113))+(((-0.18014976)*cj4))+(pz*pz)+(((-0.07119719)*x1108))+(((0.0217815)*sj4)))),IkReal(((0.01962675)+(((-0.017472)*x1108))+(((-1.0)*x1109*x1114))+(((-0.00215475)*cj4))+(((-1.0)*x1112*x1114))+(((-0.09113113)*sj4))+(((-0.07119719)*x1113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1116.valid){
continue;
}
CheckValue<IkReal> x1117=IKPowWithIntegerCheck(IKsign((((x1109*x1111))+x1110+((x1111*x1112))+(((-1.0)*x1109*x1115))+(((-1.0)*cj4*x1110))+(((-0.2688)*pz*sj4))+(((-1.0)*x1112*x1115))+(((-0.3351)*x1109))+(((-0.3351)*x1112)))),-1);
if(!x1117.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1116.value)+(((1.5707963267949)*(x1117.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1118=IKcos(j1);
IkReal x1119=IKsin(j1);
IkReal x1120=(cj0*px);
IkReal x1121=((0.0325)*sj4);
IkReal x1122=((0.2688)*sj4);
IkReal x1123=(py*sj0);
IkReal x1124=((0.2688)*cj4);
IkReal x1125=((0.0325)*cj4);
IkReal x1126=((1.0)*x1119);
IkReal x1127=(pz*x1118);
IkReal x1128=((0.065)*x1118);
IkReal x1129=((0.6702)*x1119);
evalcond[0]=((0.0325)+(((-1.0)*pz*x1126))+(((-1.0)*x1125))+(((-1.0)*x1122))+((x1118*x1120))+((x1118*x1123)));
evalcond[1]=((0.3351)+x1124+(((-1.0)*x1123*x1126))+(((-1.0)*x1127))+(((-1.0)*x1121))+(((-1.0)*x1120*x1126)));
evalcond[2]=(((x1119*x1122))+((x1119*x1125))+(((-0.3351)*x1118))+pz+(((-1.0)*x1118*x1124))+((x1118*x1121))+(((-0.0325)*x1119)));
evalcond[3]=(((x1119*x1124))+(((-1.0)*x1120))+(((-1.0)*x1123))+(((-1.0)*x1119*x1121))+(((0.3351)*x1119))+((x1118*x1122))+((x1118*x1125))+(((-0.0325)*x1118)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+((x1120*x1129))+(((0.065)*pz*x1119))+(((-1.0)*x1123*x1128))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.6702)*x1127))+(((-1.0)*x1120*x1128))+((x1123*x1129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((-1.14576870465788)+(((5.48506633223289)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-1.14576870465788)+(((5.48506633223289)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1130=IKasin(((-1.14576870465788)+(((5.48506633223289)*pp))));
j4array[0]=((-1.78780359544733)+(((1.0)*x1130)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((1.35378905814247)+(((-1.0)*x1130)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j1eval[3];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1131=cj4*cj4;
IkReal x1132=(pz*sj4);
IkReal x1133=((0.017472)*sj4);
IkReal x1134=(cj4*pz);
IkReal x1135=(cj0*px);
IkReal x1136=((0.2688)*sj4);
IkReal x1137=(py*sj0);
IkReal x1138=((8.27076923076923)*sj4);
IkReal x1139=((0.0325)*cj4);
j1eval[0]=((((10.3107692307692)*pz))+((x1135*x1138))+((x1137*x1138))+((cj4*x1135))+((cj4*x1137))+(((-1.0)*x1137))+(((-1.0)*x1135))+(((-1.0)*x1132))+(((8.27076923076923)*x1134)));
j1eval[1]=((IKabs(((-0.07330969)+x1133+(((0.07119719)*x1131))+(((-1.0)*cj4*x1133))+(pz*pz)+(((0.0021125)*cj4)))))+(IKabs(((-0.01962675)+(((0.017472)*x1131))+(((0.00215475)*cj4))+(((0.07119719)*cj4*sj4))+((pz*x1135))+((pz*x1137))+(((0.09113113)*sj4))))));
j1eval[2]=IKsign(((((0.3351)*pz))+(((0.2688)*x1134))+((x1136*x1137))+((x1135*x1136))+((x1135*x1139))+((x1137*x1139))+(((-0.0325)*x1132))+(((-0.0325)*x1135))+(((-0.0325)*x1137))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1140=cj4*cj4;
IkReal x1141=(py*sj0);
IkReal x1142=((0.0325)*sj4);
IkReal x1143=((0.2688)*cj4);
IkReal x1144=(cj0*px);
IkReal x1145=(cj4*sj4);
IkReal x1146=(pz*sj4);
IkReal x1147=((1.0)*pz);
IkReal x1148=((8.27076923076923)*cj4);
IkReal x1149=(cj4*pz);
j1eval[0]=(((sj4*x1141))+((sj4*x1144))+x1149+(((-1.0)*x1141*x1148))+(((-1.0)*x1147))+(((8.27076923076923)*x1146))+(((-10.3107692307692)*x1141))+(((-10.3107692307692)*x1144))+(((-1.0)*x1144*x1148)));
j1eval[1]=((IKabs(((-0.01962675)+(((0.00215475)*cj4))+(((-1.0)*x1141*x1147))+(((0.017472)*x1140))+(((0.07119719)*x1145))+(((0.09113113)*sj4))+(((-1.0)*x1144*x1147)))))+(IKabs(((-0.11334826)+(((-0.18014976)*cj4))+(((-0.07119719)*x1140))+(((0.017472)*x1145))+(pz*pz)+(((0.0217815)*sj4))))));
j1eval[2]=IKsign(((((-1.0)*x1143*x1144))+(((-1.0)*x1141*x1143))+((x1141*x1142))+((x1142*x1144))+(((0.0325)*x1149))+(((0.2688)*x1146))+(((-0.0325)*pz))+(((-0.3351)*x1144))+(((-0.3351)*x1141))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1eval[0]=((-4.75519253060237)+sj4+(((-4.53557670016686)*cj4)));
j1eval[1]=IKsign(((-0.18665795)+(((-0.17803726)*cj4))+(((0.0392535)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1150=((-1.0)*py);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1150);
rxp0_1=(px*r20);
rxp1_0=(r21*x1150);
rxp1_1=(px*r21);
rxp2_0=(r22*x1150);
rxp2_1=(px*r22);
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1151=((-1.0)*py);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1151);
rxp0_1=(px*r20);
rxp1_0=(r21*x1151);
rxp1_1=(px*r21);
rxp2_0=(r22*x1151);
rxp2_1=(px*r22);
IkReal x1152=py*py;
IkReal x1153=cj0*cj0;
IkReal x1154=(cj0*px);
IkReal x1155=(py*sj0);
j1eval[0]=((((-1.0)*x1155))+(((-1.0)*x1154)));
j1eval[1]=((((-2.0)*x1154*x1155))+((x1152*x1153))+(((-1.0)*x1153*(px*px)))+(((-1.0)*x1152)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1156=((-1.0)*py);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1156);
rxp0_1=0;
rxp1_0=(r21*x1156);
rxp1_1=0;
rxp2_0=(r22*x1156);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1157=((-1.0)*py);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1157);
rxp0_1=0;
rxp1_0=(r21*x1157);
rxp1_1=0;
rxp2_0=(r22*x1157);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1158=((-1.0)*px);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x1158);
rxp1_2=(r11*x1158);
rxp2_2=(r12*x1158);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1159=((-1.0)*px);
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x1159);
rxp1_2=(r11*x1159);
rxp2_2=(r12*x1159);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1160=cj0*cj0;
IkReal x1161=py*py;
IkReal x1162=px*px;
IkReal x1163=(px*py);
IkReal x1164=(cj0*sj0);
IkReal x1165=(py*sj0);
IkReal x1166=(cj0*px);
IkReal x1167=((650.0)*x1160);
CheckValue<IkReal> x1168=IKPowWithIntegerCheck(((((-10000.0)*x1166))+(((-10000.0)*x1165))),-1);
if(!x1168.valid){
continue;
}
CheckValue<IkReal> x1169=IKPowWithIntegerCheck(((((-650.0)*x1161))+(((-1.0)*x1162*x1167))+(((-1300.0)*x1163*x1164))+((x1161*x1167))),-1);
if(!x1169.valid){
continue;
}
if( IKabs(((-6039.0)*(x1168.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1169.value)*(((((-2982.0)*x1163))+(((2982.0)*x1161*x1164))+(((-444.6162)*x1166))+(((-444.6162)*x1165))+(((-2982.0)*x1162*x1164))+(((5964.0)*x1160*x1163)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6039.0)*(x1168.value)))+IKsqr(((x1169.value)*(((((-2982.0)*x1163))+(((2982.0)*x1161*x1164))+(((-444.6162)*x1166))+(((-444.6162)*x1165))+(((-2982.0)*x1162*x1164))+(((5964.0)*x1160*x1163))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-6039.0)*(x1168.value)), ((x1169.value)*(((((-2982.0)*x1163))+(((2982.0)*x1161*x1164))+(((-444.6162)*x1166))+(((-444.6162)*x1165))+(((-2982.0)*x1162*x1164))+(((5964.0)*x1160*x1163))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1170=IKcos(j1);
IkReal x1171=IKsin(j1);
IkReal x1172=(cj0*px);
IkReal x1173=(py*sj0);
IkReal x1174=((1.0)*x1173);
IkReal x1175=((1.0)*x1172);
IkReal x1176=((0.6702)*x1171);
IkReal x1177=((0.065)*x1170);
evalcond[0]=((-0.6039)*x1170);
evalcond[1]=((((-1.0)*x1175))+(((-1.0)*x1174))+(((0.6039)*x1171)));
evalcond[2]=((((-1.0)*x1170*x1174))+(((-1.0)*x1170*x1175)));
evalcond[3]=((0.6039)+(((-1.0)*x1171*x1174))+(((-1.0)*x1171*x1175)));
evalcond[4]=((-0.4491954)+(((-0.2982)*px*sj0))+((x1173*x1176))+((x1173*x1177))+(((0.2982)*cj0*py))+((x1172*x1176))+((x1172*x1177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1178=cj0*cj0;
IkReal x1179=py*py;
IkReal x1180=(cj0*px);
IkReal x1181=(py*sj0);
IkReal x1182=((6702.0)*x1179);
CheckValue<IkReal> x1183=IKPowWithIntegerCheck(((((392.535)*x1180))+(((392.535)*x1181))),-1);
if(!x1183.valid){
continue;
}
if( IKabs(((((1.65590329524756)*x1180))+(((1.65590329524756)*x1181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1183.value)*(((2712.6910206)+(((-1800.8298)*cj0*py))+(((-6702.0)*x1178*(px*px)))+((x1178*x1182))+(((1800.8298)*px*sj0))+(((-1.0)*x1182))+(((-13404.0)*x1180*x1181)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.65590329524756)*x1180))+(((1.65590329524756)*x1181))))+IKsqr(((x1183.value)*(((2712.6910206)+(((-1800.8298)*cj0*py))+(((-6702.0)*x1178*(px*px)))+((x1178*x1182))+(((1800.8298)*px*sj0))+(((-1.0)*x1182))+(((-13404.0)*x1180*x1181))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.65590329524756)*x1180))+(((1.65590329524756)*x1181))), ((x1183.value)*(((2712.6910206)+(((-1800.8298)*cj0*py))+(((-6702.0)*x1178*(px*px)))+((x1178*x1182))+(((1800.8298)*px*sj0))+(((-1.0)*x1182))+(((-13404.0)*x1180*x1181))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1184=IKcos(j1);
IkReal x1185=IKsin(j1);
IkReal x1186=(cj0*px);
IkReal x1187=(py*sj0);
IkReal x1188=((1.0)*x1187);
IkReal x1189=((1.0)*x1186);
IkReal x1190=((0.6702)*x1185);
IkReal x1191=((0.065)*x1184);
evalcond[0]=((-0.6039)*x1184);
evalcond[1]=((((0.6039)*x1185))+(((-1.0)*x1189))+(((-1.0)*x1188)));
evalcond[2]=((((-1.0)*x1184*x1188))+(((-1.0)*x1184*x1189)));
evalcond[3]=((0.6039)+(((-1.0)*x1185*x1189))+(((-1.0)*x1185*x1188)));
evalcond[4]=((-0.4491954)+(((-0.2982)*px*sj0))+((x1187*x1191))+((x1187*x1190))+((x1186*x1191))+((x1186*x1190))+(((0.2982)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1192=(cj0*px);
IkReal x1193=((0.0325)*pz);
IkReal x1194=(py*sj0);
IkReal x1195=((0.0325)*cj4);
IkReal x1196=((0.2688)*cj4);
IkReal x1197=((0.2688)*sj4);
IkReal x1198=(sj4*x1194);
CheckValue<IkReal> x1199 = IKatan2WithCheck(IkReal((x1193+(((-1.0)*cj4*x1193))+(((0.0325)*sj4*x1192))+(((0.0325)*x1198))+(((-1.0)*x1194*x1196))+(((-1.0)*pz*x1197))+(((-0.3351)*x1192))+(((-0.3351)*x1194))+(((-1.0)*x1192*x1196)))),IkReal((((sj4*x1193))+((x1194*x1195))+((x1194*x1197))+(((-1.0)*pz*x1196))+(((-0.0325)*x1192))+(((-0.0325)*x1194))+((x1192*x1195))+((x1192*x1197))+(((-0.3351)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1199.valid){
continue;
}
CheckValue<IkReal> x1200=IKPowWithIntegerCheck(IKsign(((-0.18665795)+(((-0.17803726)*cj4))+(((0.0392535)*sj4)))),-1);
if(!x1200.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1199.value)+(((1.5707963267949)*(x1200.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1201=IKcos(j1);
IkReal x1202=IKsin(j1);
IkReal x1203=((0.0325)*sj4);
IkReal x1204=((0.2688)*sj4);
IkReal x1205=((0.2688)*cj4);
IkReal x1206=((0.0325)*cj4);
IkReal x1207=(cj0*px);
IkReal x1208=(py*sj0);
IkReal x1209=((1.0)*x1207);
IkReal x1210=(pz*x1201);
IkReal x1211=((1.0)*x1208);
IkReal x1212=(pz*x1202);
IkReal x1213=((0.065)*x1201);
IkReal x1214=((0.6702)*x1202);
evalcond[0]=((0.0325)+x1212+(((-1.0)*x1201*x1211))+(((-1.0)*x1201*x1209))+(((-1.0)*x1206))+(((-1.0)*x1204)));
evalcond[1]=((0.3351)+x1205+(((-1.0)*x1202*x1211))+(((-1.0)*x1202*x1209))+(((-1.0)*x1203))+(((-1.0)*x1210)));
evalcond[2]=((((-0.3351)*x1201))+(((0.0325)*x1202))+(((-1.0)*x1202*x1204))+(((-1.0)*x1202*x1206))+pz+(((-1.0)*x1201*x1205))+((x1201*x1203)));
evalcond[3]=((((0.0325)*x1201))+((x1202*x1205))+(((-1.0)*x1202*x1203))+(((0.3351)*x1202))+(((-1.0)*x1201*x1206))+(((-1.0)*x1201*x1204))+(((-1.0)*x1209))+(((-1.0)*x1211)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((0.6702)*x1210))+((x1207*x1214))+((x1207*x1213))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.065)*x1212))+((x1208*x1213))+((x1208*x1214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1215=cj4*cj4;
IkReal x1216=(cj0*px);
IkReal x1217=((0.0325)*sj4);
IkReal x1218=(py*sj0);
IkReal x1219=((0.2688)*cj4);
IkReal x1220=((1.0)*pz);
IkReal x1221=((0.0325)*pz);
IkReal x1222=(cj4*sj4);
CheckValue<IkReal> x1223=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1221))+(((-1.0)*x1216*x1219))+(((-1.0)*x1218*x1219))+((cj4*x1221))+(((0.2688)*pz*sj4))+((x1216*x1217))+((x1217*x1218))+(((-0.3351)*x1216))+(((-0.3351)*x1218)))),-1);
if(!x1223.valid){
continue;
}
CheckValue<IkReal> x1224 = IKatan2WithCheck(IkReal(((-0.11334826)+(((-0.07119719)*x1215))+(((-0.18014976)*cj4))+(((0.017472)*x1222))+(pz*pz)+(((0.0217815)*sj4)))),IkReal(((-0.01962675)+(((0.07119719)*x1222))+(((0.00215475)*cj4))+(((-1.0)*x1218*x1220))+(((0.017472)*x1215))+(((-1.0)*x1216*x1220))+(((0.09113113)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1224.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1223.value)))+(x1224.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1225=IKcos(j1);
IkReal x1226=IKsin(j1);
IkReal x1227=((0.0325)*sj4);
IkReal x1228=((0.2688)*sj4);
IkReal x1229=((0.2688)*cj4);
IkReal x1230=((0.0325)*cj4);
IkReal x1231=(cj0*px);
IkReal x1232=(py*sj0);
IkReal x1233=((1.0)*x1231);
IkReal x1234=(pz*x1225);
IkReal x1235=((1.0)*x1232);
IkReal x1236=(pz*x1226);
IkReal x1237=((0.065)*x1225);
IkReal x1238=((0.6702)*x1226);
evalcond[0]=((0.0325)+x1236+(((-1.0)*x1225*x1235))+(((-1.0)*x1225*x1233))+(((-1.0)*x1228))+(((-1.0)*x1230)));
evalcond[1]=((0.3351)+(((-1.0)*x1234))+x1229+(((-1.0)*x1227))+(((-1.0)*x1226*x1233))+(((-1.0)*x1226*x1235)));
evalcond[2]=((((-1.0)*x1225*x1229))+(((-1.0)*x1226*x1230))+(((-1.0)*x1226*x1228))+((x1225*x1227))+pz+(((-0.3351)*x1225))+(((0.0325)*x1226)));
evalcond[3]=((((-1.0)*x1225*x1230))+(((0.3351)*x1226))+(((-1.0)*x1225*x1228))+(((-1.0)*x1235))+(((-1.0)*x1233))+(((-1.0)*x1226*x1227))+((x1226*x1229))+(((0.0325)*x1225)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-0.065)*x1236))+(((0.6702)*x1234))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x1231*x1238))+((x1231*x1237))+((x1232*x1237))+((x1232*x1238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1239=cj4*cj4;
IkReal x1240=((0.2688)*sj4);
IkReal x1241=(cj0*px);
IkReal x1242=((0.017472)*sj4);
IkReal x1243=(py*sj0);
IkReal x1244=((0.0325)*cj4);
CheckValue<IkReal> x1245 = IKatan2WithCheck(IkReal(((-0.01962675)+(((0.00215475)*cj4))+(((0.07119719)*cj4*sj4))+((pz*x1243))+((pz*x1241))+(((0.017472)*x1239))+(((0.09113113)*sj4)))),IkReal(((-0.07330969)+x1242+(((-1.0)*cj4*x1242))+(pz*pz)+(((0.0021125)*cj4))+(((0.07119719)*x1239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1245.valid){
continue;
}
CheckValue<IkReal> x1246=IKPowWithIntegerCheck(IKsign(((((-0.0325)*pz*sj4))+(((0.3351)*pz))+((x1240*x1241))+((x1240*x1243))+(((0.2688)*cj4*pz))+((x1241*x1244))+((x1243*x1244))+(((-0.0325)*x1241))+(((-0.0325)*x1243)))),-1);
if(!x1246.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1245.value)+(((1.5707963267949)*(x1246.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1247=IKcos(j1);
IkReal x1248=IKsin(j1);
IkReal x1249=((0.0325)*sj4);
IkReal x1250=((0.2688)*sj4);
IkReal x1251=((0.2688)*cj4);
IkReal x1252=((0.0325)*cj4);
IkReal x1253=(cj0*px);
IkReal x1254=(py*sj0);
IkReal x1255=((1.0)*x1253);
IkReal x1256=(pz*x1247);
IkReal x1257=((1.0)*x1254);
IkReal x1258=(pz*x1248);
IkReal x1259=((0.065)*x1247);
IkReal x1260=((0.6702)*x1248);
evalcond[0]=((0.0325)+(((-1.0)*x1250))+(((-1.0)*x1252))+x1258+(((-1.0)*x1247*x1257))+(((-1.0)*x1247*x1255)));
evalcond[1]=((0.3351)+x1251+(((-1.0)*x1248*x1257))+(((-1.0)*x1248*x1255))+(((-1.0)*x1249))+(((-1.0)*x1256)));
evalcond[2]=((((-0.3351)*x1247))+(((-1.0)*x1248*x1250))+(((-1.0)*x1248*x1252))+(((-1.0)*x1247*x1251))+((x1247*x1249))+pz+(((0.0325)*x1248)));
evalcond[3]=((((-1.0)*x1255))+(((-1.0)*x1257))+(((-1.0)*x1247*x1252))+(((-1.0)*x1247*x1250))+(((0.0325)*x1247))+(((-1.0)*x1248*x1249))+((x1248*x1251))+(((0.3351)*x1248)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+((x1253*x1260))+(((0.2982)*cj0*py))+((x1253*x1259))+(((-1.0)*pp))+((x1254*x1260))+((x1254*x1259))+(((-0.065)*x1258))+(((0.6702)*x1256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((-1.14576870465788)+(((5.48506633223289)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-1.14576870465788)+(((5.48506633223289)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1261=IKasin(((-1.14576870465788)+(((5.48506633223289)*pp))));
j4array[0]=((-1.78780359544733)+(((1.0)*x1261)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((1.35378905814247)+(((-1.0)*x1261)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j1eval[3];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x1262=cj4*cj4;
IkReal x1263=(py*sj0);
IkReal x1264=((0.0325)*sj4);
IkReal x1265=((1.0)*pz);
IkReal x1266=(cj0*px);
IkReal x1267=((0.2688)*cj4);
IkReal x1268=(cj4*sj4);
IkReal x1269=(pz*sj4);
IkReal x1270=((8.27076923076923)*cj4);
IkReal x1271=((0.0325)*pz);
IkReal x1272=((1.0)*sj4);
j1eval[0]=((((-1.0)*x1266*x1272))+(((10.3107692307692)*x1266))+(((10.3107692307692)*x1263))+(((-1.0)*x1263*x1272))+((x1266*x1270))+(((-8.27076923076923)*x1269))+((x1263*x1270))+pz+(((-1.0)*cj4*x1265)));
j1eval[1]=IKsign(((((-1.0)*x1264*x1266))+(((-0.2688)*x1269))+x1271+(((-1.0)*x1263*x1264))+(((0.3351)*x1266))+(((0.3351)*x1263))+((x1266*x1267))+((x1263*x1267))+(((-1.0)*cj4*x1271))));
j1eval[2]=((IKabs(((-0.11334826)+(((-0.18014976)*cj4))+(((-0.07119719)*x1262))+(pz*pz)+(((0.017472)*x1268))+(((0.0217815)*sj4)))))+(IKabs(((-0.01962675)+(((0.00215475)*cj4))+(((0.07119719)*x1268))+(((-1.0)*x1263*x1265))+(((-1.0)*x1265*x1266))+(((0.017472)*x1262))+(((0.09113113)*sj4))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x1273=cj4*cj4;
IkReal x1274=((1.0)*pz);
IkReal x1275=((0.017472)*sj4);
IkReal x1276=(cj4*pz);
IkReal x1277=(cj0*px);
IkReal x1278=((0.2688)*sj4);
IkReal x1279=(py*sj0);
IkReal x1280=((8.27076923076923)*sj4);
IkReal x1281=((0.0325)*cj4);
j1eval[0]=(((x1279*x1280))+(((10.3107692307692)*pz))+((x1277*x1280))+(((-1.0)*x1277))+(((-1.0)*x1279))+(((-1.0)*sj4*x1274))+(((8.27076923076923)*x1276))+((cj4*x1277))+((cj4*x1279)));
j1eval[1]=((IKabs(((0.07330969)+(((-1.0)*x1275))+(((-0.0021125)*cj4))+(((-0.07119719)*x1273))+((cj4*x1275))+(((-1.0)*pz*x1274)))))+(IKabs(((0.01962675)+(((-0.017472)*x1273))+(((-0.00215475)*cj4))+(((-1.0)*x1274*x1279))+(((-1.0)*x1274*x1277))+(((-0.09113113)*sj4))+(((-0.07119719)*cj4*sj4))))));
j1eval[2]=IKsign(((((-0.0325)*pz*sj4))+((x1279*x1281))+((x1277*x1278))+(((0.3351)*pz))+(((-0.0325)*x1277))+(((-0.0325)*x1279))+((x1278*x1279))+((x1277*x1281))+(((0.2688)*x1276))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x1282=cj0*cj0;
IkReal x1283=py*py;
IkReal x1284=(x1283+(((-1.0)*x1282*x1283))+(pz*pz)+((x1282*(px*px)))+(((2.0)*cj0*px*py*sj0)));
j1eval[0]=x1284;
j1eval[1]=IKsign(x1284);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1285=((-1.0)*py);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1285);
rxp0_1=(px*r20);
rxp1_0=(r21*x1285);
rxp1_1=(px*r21);
rxp2_0=(r22*x1285);
rxp2_1=(px*r22);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1286=((-1.0)*py);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1286);
rxp0_1=(px*r20);
rxp1_0=(r21*x1286);
rxp1_1=(px*r21);
rxp2_0=(r22*x1286);
rxp2_1=(px*r22);
IkReal x1287=py*py;
IkReal x1288=cj0*cj0;
IkReal x1289=(cj0*px);
IkReal x1290=(py*sj0);
j1eval[0]=(x1289+x1290);
j1eval[1]=((((-1.0)*x1287))+((x1287*x1288))+(((-2.0)*x1289*x1290))+(((-1.0)*x1288*(px*px))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1291=((-1.0)*py);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1291);
rxp0_1=0;
rxp1_0=(r21*x1291);
rxp1_1=0;
rxp2_0=(r22*x1291);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1292=((-1.0)*py);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1292);
rxp0_1=0;
rxp1_0=(r21*x1292);
rxp1_1=0;
rxp2_0=(r22*x1292);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1293=((-1.0)*px);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x1293);
rxp1_2=(r11*x1293);
rxp2_2=(r12*x1293);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1294=((-1.0)*px);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x1294);
rxp1_2=(r11*x1294);
rxp2_2=(r12*x1294);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1295=cj0*cj0;
IkReal x1296=py*py;
IkReal x1297=px*px;
IkReal x1298=(px*py);
IkReal x1299=(cj0*sj0);
IkReal x1300=(cj0*px);
IkReal x1301=(py*sj0);
IkReal x1302=((650.0)*x1295);
CheckValue<IkReal> x1303=IKPowWithIntegerCheck(((((10000.0)*x1301))+(((10000.0)*x1300))),-1);
if(!x1303.valid){
continue;
}
CheckValue<IkReal> x1304=IKPowWithIntegerCheck(((((-1.0)*x1297*x1302))+(((-1300.0)*x1298*x1299))+(((-650.0)*x1296))+((x1296*x1302))),-1);
if(!x1304.valid){
continue;
}
if( IKabs(((-6039.0)*(x1303.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1304.value)*(((((2982.0)*x1298))+(((2982.0)*x1297*x1299))+(((-2982.0)*x1296*x1299))+(((-5964.0)*x1295*x1298))+(((444.6162)*x1301))+(((444.6162)*x1300)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6039.0)*(x1303.value)))+IKsqr(((x1304.value)*(((((2982.0)*x1298))+(((2982.0)*x1297*x1299))+(((-2982.0)*x1296*x1299))+(((-5964.0)*x1295*x1298))+(((444.6162)*x1301))+(((444.6162)*x1300))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-6039.0)*(x1303.value)), ((x1304.value)*(((((2982.0)*x1298))+(((2982.0)*x1297*x1299))+(((-2982.0)*x1296*x1299))+(((-5964.0)*x1295*x1298))+(((444.6162)*x1301))+(((444.6162)*x1300))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1305=IKcos(j1);
IkReal x1306=IKsin(j1);
IkReal x1307=(py*sj0);
IkReal x1308=(cj0*px);
IkReal x1309=((0.065)*x1305);
IkReal x1310=((0.6702)*x1306);
evalcond[0]=((0.6039)*x1305);
evalcond[1]=(((x1305*x1308))+((x1305*x1307)));
evalcond[2]=((0.6039)+((x1306*x1308))+((x1306*x1307)));
evalcond[3]=((((-1.0)*x1308))+(((-1.0)*x1307))+(((-0.6039)*x1306)));
evalcond[4]=((-0.4491954)+(((-0.2982)*px*sj0))+(((-1.0)*x1307*x1309))+(((-1.0)*x1308*x1310))+(((-1.0)*x1308*x1309))+(((-1.0)*x1307*x1310))+(((0.2982)*cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1311=cj0*cj0;
IkReal x1312=py*py;
IkReal x1313=(cj0*px);
IkReal x1314=(py*sj0);
IkReal x1315=((6702.0)*x1312);
CheckValue<IkReal> x1316=IKPowWithIntegerCheck(((((-392.535)*x1313))+(((-392.535)*x1314))),-1);
if(!x1316.valid){
continue;
}
if( IKabs(((((-1.65590329524756)*x1314))+(((-1.65590329524756)*x1313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1316.value)*(((2712.6910206)+(((-1800.8298)*cj0*py))+((x1311*x1315))+(((-6702.0)*x1311*(px*px)))+(((-1.0)*x1315))+(((1800.8298)*px*sj0))+(((-13404.0)*x1313*x1314)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.65590329524756)*x1314))+(((-1.65590329524756)*x1313))))+IKsqr(((x1316.value)*(((2712.6910206)+(((-1800.8298)*cj0*py))+((x1311*x1315))+(((-6702.0)*x1311*(px*px)))+(((-1.0)*x1315))+(((1800.8298)*px*sj0))+(((-13404.0)*x1313*x1314))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.65590329524756)*x1314))+(((-1.65590329524756)*x1313))), ((x1316.value)*(((2712.6910206)+(((-1800.8298)*cj0*py))+((x1311*x1315))+(((-6702.0)*x1311*(px*px)))+(((-1.0)*x1315))+(((1800.8298)*px*sj0))+(((-13404.0)*x1313*x1314))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1317=IKcos(j1);
IkReal x1318=IKsin(j1);
IkReal x1319=(py*sj0);
IkReal x1320=(cj0*px);
IkReal x1321=((0.065)*x1317);
IkReal x1322=((0.6702)*x1318);
evalcond[0]=((0.6039)*x1317);
evalcond[1]=(((x1317*x1319))+((x1317*x1320)));
evalcond[2]=((0.6039)+((x1318*x1319))+((x1318*x1320)));
evalcond[3]=((((-1.0)*x1319))+(((-1.0)*x1320))+(((-0.6039)*x1318)));
evalcond[4]=((-0.4491954)+(((-0.2982)*px*sj0))+(((-1.0)*x1319*x1321))+(((-1.0)*x1319*x1322))+(((0.2982)*cj0*py))+(((-1.0)*x1320*x1322))+(((-1.0)*x1320*x1321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1323=cj0*cj0;
IkReal x1324=py*py;
IkReal x1325=(py*sj0);
IkReal x1326=((0.0325)*sj4);
IkReal x1327=((0.2688)*cj4);
IkReal x1328=(cj0*px);
IkReal x1329=((0.2688)*sj4);
IkReal x1330=((0.0325)*pz);
IkReal x1331=((0.0325)*cj4);
CheckValue<IkReal> x1332=IKPowWithIntegerCheck(IKsign((x1324+(((-1.0)*x1323*x1324))+((x1323*(px*px)))+(pz*pz)+(((2.0)*x1325*x1328)))),-1);
if(!x1332.valid){
continue;
}
CheckValue<IkReal> x1333 = IKatan2WithCheck(IkReal(((((-0.3351)*x1328))+(((-0.3351)*x1325))+x1330+(((-1.0)*x1327*x1328))+((x1326*x1328))+(((-1.0)*x1325*x1327))+((x1325*x1326))+(((-1.0)*cj4*x1330))+(((-1.0)*pz*x1329)))),IkReal(((((-0.0325)*x1328))+(((-0.0325)*x1325))+((pz*x1326))+((x1325*x1331))+((x1328*x1329))+((x1328*x1331))+((x1325*x1329))+(((-1.0)*pz*x1327))+(((-0.3351)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1333.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1332.value)))+(x1333.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1334=IKsin(j1);
IkReal x1335=IKcos(j1);
IkReal x1336=((0.0325)*sj4);
IkReal x1337=(cj0*px);
IkReal x1338=(py*sj0);
IkReal x1339=((0.2688)*sj4);
IkReal x1340=((0.2688)*cj4);
IkReal x1341=((0.0325)*cj4);
IkReal x1342=((0.6702)*x1334);
IkReal x1343=(pz*x1335);
IkReal x1344=(pz*x1334);
IkReal x1345=((0.065)*x1335);
evalcond[0]=((0.3351)+x1340+x1343+(((-1.0)*x1336))+((x1334*x1338))+((x1334*x1337)));
evalcond[1]=((0.0325)+(((-1.0)*x1341))+((x1335*x1338))+((x1335*x1337))+(((-1.0)*x1339))+(((-1.0)*x1344)));
evalcond[2]=((((-1.0)*x1335*x1336))+(((-0.0325)*x1334))+((x1334*x1341))+pz+((x1335*x1340))+((x1334*x1339))+(((0.3351)*x1335)));
evalcond[3]=((((-1.0)*x1337))+(((-1.0)*x1338))+((x1335*x1339))+(((-0.0325)*x1335))+((x1335*x1341))+(((-0.3351)*x1334))+(((-1.0)*x1334*x1340))+((x1334*x1336)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-1.0)*x1338*x1342))+(((-1.0)*x1338*x1345))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.6702)*x1343))+(((0.065)*x1344))+(((-1.0)*x1337*x1342))+(((-1.0)*x1337*x1345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1346=cj4*cj4;
IkReal x1347=((0.017472)*sj4);
IkReal x1348=(py*sj0);
IkReal x1349=((0.2688)*sj4);
IkReal x1350=((0.0325)*cj4);
IkReal x1351=(cj0*px);
IkReal x1352=((1.0)*pz);
CheckValue<IkReal> x1353 = IKatan2WithCheck(IkReal(((0.01962675)+(((-0.017472)*x1346))+(((-0.00215475)*cj4))+(((-1.0)*x1348*x1352))+(((-0.09113113)*sj4))+(((-1.0)*x1351*x1352))+(((-0.07119719)*cj4*sj4)))),IkReal(((0.07330969)+(((-1.0)*x1347))+(((-0.0021125)*cj4))+((cj4*x1347))+(((-1.0)*pz*x1352))+(((-0.07119719)*x1346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1353.valid){
continue;
}
CheckValue<IkReal> x1354=IKPowWithIntegerCheck(IKsign(((((-0.0325)*pz*sj4))+(((0.3351)*pz))+((x1348*x1350))+((x1349*x1351))+((x1348*x1349))+(((0.2688)*cj4*pz))+((x1350*x1351))+(((-0.0325)*x1351))+(((-0.0325)*x1348)))),-1);
if(!x1354.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1353.value)+(((1.5707963267949)*(x1354.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1355=IKsin(j1);
IkReal x1356=IKcos(j1);
IkReal x1357=((0.0325)*sj4);
IkReal x1358=(cj0*px);
IkReal x1359=(py*sj0);
IkReal x1360=((0.2688)*sj4);
IkReal x1361=((0.2688)*cj4);
IkReal x1362=((0.0325)*cj4);
IkReal x1363=((0.6702)*x1355);
IkReal x1364=(pz*x1356);
IkReal x1365=(pz*x1355);
IkReal x1366=((0.065)*x1356);
evalcond[0]=((0.3351)+x1364+x1361+(((-1.0)*x1357))+((x1355*x1358))+((x1355*x1359)));
evalcond[1]=((0.0325)+(((-1.0)*x1365))+((x1356*x1359))+((x1356*x1358))+(((-1.0)*x1360))+(((-1.0)*x1362)));
evalcond[2]=(((x1356*x1361))+((x1355*x1360))+((x1355*x1362))+(((0.3351)*x1356))+(((-1.0)*x1356*x1357))+pz+(((-0.0325)*x1355)));
evalcond[3]=(((x1356*x1362))+((x1356*x1360))+(((-1.0)*x1358))+(((-1.0)*x1359))+((x1355*x1357))+(((-0.3351)*x1355))+(((-1.0)*x1355*x1361))+(((-0.0325)*x1356)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((0.065)*x1365))+(((-1.0)*x1359*x1366))+(((-1.0)*x1359*x1363))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.6702)*x1364))+(((-1.0)*x1358*x1363))+(((-1.0)*x1358*x1366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1367=cj4*cj4;
IkReal x1368=(cj0*px);
IkReal x1369=(py*sj0);
IkReal x1370=((0.0325)*sj4);
IkReal x1371=((0.2688)*cj4);
IkReal x1372=((1.0)*pz);
IkReal x1373=((0.0325)*pz);
IkReal x1374=(cj4*sj4);
CheckValue<IkReal> x1375=IKPowWithIntegerCheck(IKsign((x1373+(((0.3351)*x1369))+(((0.3351)*x1368))+(((-0.2688)*pz*sj4))+(((-1.0)*cj4*x1373))+((x1368*x1371))+((x1369*x1371))+(((-1.0)*x1369*x1370))+(((-1.0)*x1368*x1370)))),-1);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376 = IKatan2WithCheck(IkReal(((-0.11334826)+(((0.017472)*x1374))+(((-0.18014976)*cj4))+(pz*pz)+(((-0.07119719)*x1367))+(((0.0217815)*sj4)))),IkReal(((-0.01962675)+(((0.00215475)*cj4))+(((0.07119719)*x1374))+(((0.017472)*x1367))+(((0.09113113)*sj4))+(((-1.0)*x1369*x1372))+(((-1.0)*x1368*x1372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1376.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1375.value)))+(x1376.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1377=IKsin(j1);
IkReal x1378=IKcos(j1);
IkReal x1379=((0.0325)*sj4);
IkReal x1380=(cj0*px);
IkReal x1381=(py*sj0);
IkReal x1382=((0.2688)*sj4);
IkReal x1383=((0.2688)*cj4);
IkReal x1384=((0.0325)*cj4);
IkReal x1385=((0.6702)*x1377);
IkReal x1386=(pz*x1378);
IkReal x1387=(pz*x1377);
IkReal x1388=((0.065)*x1378);
evalcond[0]=((0.3351)+x1386+x1383+(((-1.0)*x1379))+((x1377*x1381))+((x1377*x1380)));
evalcond[1]=((0.0325)+(((-1.0)*x1382))+(((-1.0)*x1384))+(((-1.0)*x1387))+((x1378*x1380))+((x1378*x1381)));
evalcond[2]=((((-0.0325)*x1377))+pz+((x1377*x1382))+((x1377*x1384))+(((-1.0)*x1378*x1379))+((x1378*x1383))+(((0.3351)*x1378)));
evalcond[3]=((((-0.0325)*x1378))+(((-1.0)*x1377*x1383))+((x1377*x1379))+(((-1.0)*x1380))+(((-1.0)*x1381))+((x1378*x1384))+((x1378*x1382))+(((-0.3351)*x1377)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.065)*x1387))+(((-0.6702)*x1386))+(((-1.0)*x1380*x1388))+(((-1.0)*x1380*x1385))+(((-1.0)*x1381*x1388))+(((-1.0)*x1381*x1385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((-1.14576870465788)+(((5.48506633223289)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-1.14576870465788)+(((5.48506633223289)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1389=IKasin(((-1.14576870465788)+(((5.48506633223289)*pp))));
j4array[0]=((-1.78780359544733)+(((1.0)*x1389)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((1.35378905814247)+(((-1.0)*x1389)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j1eval[3];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1390=cj4*cj4;
IkReal x1391=((0.017472)*sj4);
IkReal x1392=(cj4*pz);
IkReal x1393=(cj0*px);
IkReal x1394=((0.2688)*sj4);
IkReal x1395=(py*sj0);
IkReal x1396=((8.27076923076923)*sj4);
IkReal x1397=((0.0325)*cj4);
IkReal x1398=(pz*sj4);
j1eval[0]=(x1398+((x1393*x1396))+(((-10.3107692307692)*pz))+((x1395*x1396))+((cj4*x1393))+((cj4*x1395))+(((-1.0)*x1393))+(((-1.0)*x1395))+(((-8.27076923076923)*x1392)));
j1eval[1]=((IKabs(((-0.07330969)+x1391+(((-1.0)*cj4*x1391))+(pz*pz)+(((0.0021125)*cj4))+(((0.07119719)*x1390)))))+(IKabs(((0.01962675)+(((-0.017472)*x1390))+(((-0.00215475)*cj4))+((pz*x1395))+((pz*x1393))+(((-0.09113113)*sj4))+(((-0.07119719)*cj4*sj4))))));
j1eval[2]=IKsign((((x1393*x1394))+((x1393*x1397))+((x1394*x1395))+((x1395*x1397))+(((-0.0325)*x1393))+(((-0.0325)*x1395))+(((-0.2688)*x1392))+(((-0.3351)*pz))+(((0.0325)*x1398))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1399=cj4*cj4;
IkReal x1400=(py*sj0);
IkReal x1401=((0.0325)*sj4);
IkReal x1402=((0.2688)*cj4);
IkReal x1403=(cj0*px);
IkReal x1404=(cj4*sj4);
IkReal x1405=(pz*sj4);
IkReal x1406=((1.0)*pz);
IkReal x1407=((8.27076923076923)*cj4);
IkReal x1408=(cj4*pz);
IkReal x1409=((1.0)*sj4);
j1eval[0]=((((-1.0)*x1406))+(((8.27076923076923)*x1405))+((x1403*x1407))+(((10.3107692307692)*x1403))+(((10.3107692307692)*x1400))+x1408+(((-1.0)*x1400*x1409))+(((-1.0)*x1403*x1409))+((x1400*x1407)));
j1eval[1]=IKsign(((((0.0325)*x1408))+(((0.3351)*x1400))+(((0.3351)*x1403))+(((-0.0325)*pz))+(((-1.0)*x1401*x1403))+(((-1.0)*x1400*x1401))+(((0.2688)*x1405))+((x1402*x1403))+((x1400*x1402))));
j1eval[2]=((IKabs(((-0.11334826)+(((-0.18014976)*cj4))+(((0.017472)*x1404))+(pz*pz)+(((-0.07119719)*x1399))+(((0.0217815)*sj4)))))+(IKabs(((0.01962675)+(((-0.017472)*x1399))+(((-0.00215475)*cj4))+(((-0.07119719)*x1404))+(((-1.0)*x1400*x1406))+(((-0.09113113)*sj4))+(((-1.0)*x1403*x1406))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1410=(cj0*px);
IkReal x1411=(pz*sj4);
IkReal x1412=(cj4*pz);
IkReal x1413=(py*sj0);
IkReal x1414=((0.0325)*cj4);
IkReal x1415=((1.0)*cj4);
IkReal x1416=(sj4*x1413);
j1eval[0]=((((8.27076923076923)*x1412))+(((-1.0)*x1413*x1415))+(((10.3107692307692)*pz))+(((-8.27076923076923)*sj4*x1410))+(((-8.27076923076923)*x1416))+(((-1.0)*x1410*x1415))+x1410+x1413+(((-1.0)*x1411)));
j1eval[1]=IKsign(((((0.3351)*pz))+(((-1.0)*x1413*x1414))+(((0.0325)*x1413))+(((0.0325)*x1410))+(((-0.0325)*x1411))+(((-1.0)*x1410*x1414))+(((-0.2688)*x1416))+(((-0.2688)*sj4*x1410))+(((0.2688)*x1412))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1417=((-1.0)*py);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1417);
rxp0_1=(px*r20);
rxp1_0=(r21*x1417);
rxp1_1=(px*r21);
rxp2_0=(r22*x1417);
rxp2_1=(px*r22);
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1418=((-1.0)*py);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1418);
rxp0_1=(px*r20);
rxp1_0=(r21*x1418);
rxp1_1=(px*r21);
rxp2_0=(r22*x1418);
rxp2_1=(px*r22);
IkReal x1419=cj0*cj0;
IkReal x1420=py*py;
IkReal x1421=(cj0*px);
IkReal x1422=(py*sj0);
j1eval[0]=(x1421+x1422);
j1eval[1]=(((x1419*(px*px)))+(((-1.0)*x1419*x1420))+x1420+(((2.0)*x1421*x1422)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1423=((-1.0)*py);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1423);
rxp0_1=0;
rxp1_0=(r21*x1423);
rxp1_1=0;
rxp2_0=(r22*x1423);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1424=((-1.0)*py);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1424);
rxp0_1=0;
rxp1_0=(r21*x1424);
rxp1_1=0;
rxp2_0=(r22*x1424);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1425=((-1.0)*px);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x1425);
rxp1_2=(r11*x1425);
rxp2_2=(r12*x1425);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1426=((-1.0)*px);
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x1426);
rxp1_2=(r11*x1426);
rxp2_2=(r12*x1426);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1427=cj0*cj0;
IkReal x1428=px*px;
IkReal x1429=py*py;
IkReal x1430=(px*py);
IkReal x1431=(cj0*sj0);
IkReal x1432=(cj0*px);
IkReal x1433=(py*sj0);
IkReal x1434=((650.0)*x1427);
CheckValue<IkReal> x1435=IKPowWithIntegerCheck(((((10000.0)*x1432))+(((10000.0)*x1433))),-1);
if(!x1435.valid){
continue;
}
CheckValue<IkReal> x1436=IKPowWithIntegerCheck((((x1428*x1434))+(((-1.0)*x1429*x1434))+(((1300.0)*x1430*x1431))+(((650.0)*x1429))),-1);
if(!x1436.valid){
continue;
}
if( IKabs(((-6039.0)*(x1435.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1436.value)*(((((2982.0)*x1428*x1431))+(((-2982.0)*x1429*x1431))+(((444.6162)*x1432))+(((444.6162)*x1433))+(((2982.0)*x1430))+(((-5964.0)*x1427*x1430)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6039.0)*(x1435.value)))+IKsqr(((x1436.value)*(((((2982.0)*x1428*x1431))+(((-2982.0)*x1429*x1431))+(((444.6162)*x1432))+(((444.6162)*x1433))+(((2982.0)*x1430))+(((-5964.0)*x1427*x1430))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-6039.0)*(x1435.value)), ((x1436.value)*(((((2982.0)*x1428*x1431))+(((-2982.0)*x1429*x1431))+(((444.6162)*x1432))+(((444.6162)*x1433))+(((2982.0)*x1430))+(((-5964.0)*x1427*x1430))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1437=IKsin(j1);
IkReal x1438=IKcos(j1);
IkReal x1439=(py*sj0);
IkReal x1440=(cj0*px);
IkReal x1441=((1.0)*x1438);
IkReal x1442=((0.6702)*x1437);
IkReal x1443=((0.065)*x1438);
evalcond[0]=((0.6039)*x1438);
evalcond[1]=((0.6039)+((x1437*x1440))+((x1437*x1439)));
evalcond[2]=((((-0.6039)*x1437))+(((-1.0)*x1439))+(((-1.0)*x1440)));
evalcond[3]=((((-1.0)*x1439*x1441))+(((-1.0)*x1440*x1441)));
evalcond[4]=((-0.4491954)+(((-0.2982)*px*sj0))+((x1439*x1443))+((x1440*x1443))+(((-1.0)*x1439*x1442))+(((0.2982)*cj0*py))+(((-1.0)*x1440*x1442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1444=cj0*cj0;
IkReal x1445=py*py;
IkReal x1446=(cj0*px);
IkReal x1447=(py*sj0);
IkReal x1448=((6702.0)*x1445);
CheckValue<IkReal> x1449=IKPowWithIntegerCheck(((((392.535)*x1446))+(((392.535)*x1447))),-1);
if(!x1449.valid){
continue;
}
if( IKabs(((((-1.65590329524756)*x1447))+(((-1.65590329524756)*x1446)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1449.value)*(((2712.6910206)+((x1444*x1448))+(((-1800.8298)*cj0*py))+(((-13404.0)*x1446*x1447))+(((-6702.0)*x1444*(px*px)))+(((1800.8298)*px*sj0))+(((-1.0)*x1448)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.65590329524756)*x1447))+(((-1.65590329524756)*x1446))))+IKsqr(((x1449.value)*(((2712.6910206)+((x1444*x1448))+(((-1800.8298)*cj0*py))+(((-13404.0)*x1446*x1447))+(((-6702.0)*x1444*(px*px)))+(((1800.8298)*px*sj0))+(((-1.0)*x1448))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.65590329524756)*x1447))+(((-1.65590329524756)*x1446))), ((x1449.value)*(((2712.6910206)+((x1444*x1448))+(((-1800.8298)*cj0*py))+(((-13404.0)*x1446*x1447))+(((-6702.0)*x1444*(px*px)))+(((1800.8298)*px*sj0))+(((-1.0)*x1448))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1450=IKsin(j1);
IkReal x1451=IKcos(j1);
IkReal x1452=(py*sj0);
IkReal x1453=(cj0*px);
IkReal x1454=((1.0)*x1451);
IkReal x1455=((0.6702)*x1450);
IkReal x1456=((0.065)*x1451);
evalcond[0]=((0.6039)*x1451);
evalcond[1]=((0.6039)+((x1450*x1452))+((x1450*x1453)));
evalcond[2]=((((-1.0)*x1452))+(((-1.0)*x1453))+(((-0.6039)*x1450)));
evalcond[3]=((((-1.0)*x1453*x1454))+(((-1.0)*x1452*x1454)));
evalcond[4]=((-0.4491954)+(((-0.2982)*px*sj0))+(((0.2982)*cj0*py))+(((-1.0)*x1453*x1455))+(((-1.0)*x1452*x1455))+((x1452*x1456))+((x1453*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1457=cj0*cj0;
IkReal x1458=py*py;
IkReal x1459=cj4*cj4;
IkReal x1460=(cj0*px);
IkReal x1461=((0.2688)*sj4);
IkReal x1462=(cj4*sj4);
IkReal x1463=(py*sj0);
IkReal x1464=((0.0325)*cj4);
IkReal x1465=((1.0)*pz);
CheckValue<IkReal> x1466=IKPowWithIntegerCheck(IKsign(((((-0.0325)*pz*sj4))+(((0.3351)*pz))+(((0.0325)*x1463))+(((0.0325)*x1460))+(((-1.0)*x1463*x1464))+(((0.2688)*cj4*pz))+(((-1.0)*x1460*x1464))+(((-1.0)*x1460*x1461))+(((-1.0)*x1461*x1463)))),-1);
if(!x1466.valid){
continue;
}
CheckValue<IkReal> x1467 = IKatan2WithCheck(IkReal(((-0.01962675)+(((0.00215475)*cj4))+(((0.017472)*x1459))+(((-1.0)*x1463*x1465))+(((-1.0)*x1460*x1465))+(((0.07119719)*x1462))+(((0.09113113)*sj4)))),IkReal(((-0.11334826)+(((-0.18014976)*cj4))+(((-0.07119719)*x1459))+(((2.0)*x1460*x1463))+(((0.017472)*x1462))+(((-1.0)*x1457*x1458))+x1458+((x1457*(px*px)))+(((0.0217815)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1467.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1466.value)))+(x1467.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1468=IKsin(j1);
IkReal x1469=IKcos(j1);
IkReal x1470=((0.0325)*sj4);
IkReal x1471=(cj0*px);
IkReal x1472=(py*sj0);
IkReal x1473=((0.2688)*sj4);
IkReal x1474=((0.2688)*cj4);
IkReal x1475=((0.0325)*cj4);
IkReal x1476=((1.0)*x1469);
IkReal x1477=((0.6702)*x1468);
IkReal x1478=(pz*x1469);
IkReal x1479=(pz*x1468);
IkReal x1480=((0.065)*x1469);
evalcond[0]=((0.3351)+x1474+x1478+(((-1.0)*x1470))+((x1468*x1472))+((x1468*x1471)));
evalcond[1]=((0.0325)+(((-1.0)*x1471*x1476))+x1479+(((-1.0)*x1473))+(((-1.0)*x1475))+(((-1.0)*x1472*x1476)));
evalcond[2]=((((0.0325)*x1468))+(((-1.0)*x1468*x1475))+(((-1.0)*x1468*x1473))+(((-1.0)*x1469*x1470))+pz+(((0.3351)*x1469))+((x1469*x1474)));
evalcond[3]=((((-0.3351)*x1468))+(((-1.0)*x1471))+(((-1.0)*x1472))+(((0.0325)*x1469))+(((-1.0)*x1468*x1474))+(((-1.0)*x1469*x1475))+(((-1.0)*x1469*x1473))+((x1468*x1470)));
evalcond[4]=((-0.06226938)+((x1471*x1480))+(((-0.2982)*px*sj0))+(((-0.065)*x1479))+(((-1.0)*x1471*x1477))+((x1472*x1480))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.6702)*x1478))+(((-1.0)*x1472*x1477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1481=cj4*cj4;
IkReal x1482=(cj0*px);
IkReal x1483=((0.0325)*pz);
IkReal x1484=((0.0325)*sj4);
IkReal x1485=(py*sj0);
IkReal x1486=((1.0)*pz);
IkReal x1487=(cj4*sj4);
IkReal x1488=((0.2688)*cj4);
CheckValue<IkReal> x1489 = IKatan2WithCheck(IkReal(((-0.11334826)+(((-0.18014976)*cj4))+(((-0.07119719)*x1481))+(((0.017472)*x1487))+(pz*pz)+(((0.0217815)*sj4)))),IkReal(((0.01962675)+(((-1.0)*x1482*x1486))+(((-0.017472)*x1481))+(((-0.00215475)*cj4))+(((-1.0)*x1485*x1486))+(((-0.07119719)*x1487))+(((-0.09113113)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1489.valid){
continue;
}
CheckValue<IkReal> x1490=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1482*x1484))+(((0.3351)*x1485))+(((0.3351)*x1482))+((x1482*x1488))+(((-1.0)*x1483))+(((-1.0)*x1484*x1485))+(((0.2688)*pz*sj4))+((cj4*x1483))+((x1485*x1488)))),-1);
if(!x1490.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1489.value)+(((1.5707963267949)*(x1490.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1491=IKsin(j1);
IkReal x1492=IKcos(j1);
IkReal x1493=((0.0325)*sj4);
IkReal x1494=(cj0*px);
IkReal x1495=(py*sj0);
IkReal x1496=((0.2688)*sj4);
IkReal x1497=((0.2688)*cj4);
IkReal x1498=((0.0325)*cj4);
IkReal x1499=((1.0)*x1492);
IkReal x1500=((0.6702)*x1491);
IkReal x1501=(pz*x1492);
IkReal x1502=(pz*x1491);
IkReal x1503=((0.065)*x1492);
evalcond[0]=((0.3351)+(((-1.0)*x1493))+((x1491*x1494))+((x1491*x1495))+x1501+x1497);
evalcond[1]=((0.0325)+(((-1.0)*x1494*x1499))+(((-1.0)*x1498))+(((-1.0)*x1496))+(((-1.0)*x1495*x1499))+x1502);
evalcond[2]=((((0.0325)*x1491))+(((0.3351)*x1492))+(((-1.0)*x1492*x1493))+((x1492*x1497))+pz+(((-1.0)*x1491*x1498))+(((-1.0)*x1491*x1496)));
evalcond[3]=((((0.0325)*x1492))+(((-0.3351)*x1491))+(((-1.0)*x1492*x1498))+(((-1.0)*x1492*x1496))+(((-1.0)*x1494))+(((-1.0)*x1495))+((x1491*x1493))+(((-1.0)*x1491*x1497)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+((x1494*x1503))+(((-1.0)*x1494*x1500))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x1495*x1503))+(((-0.065)*x1502))+(((-1.0)*x1495*x1500))+(((-0.6702)*x1501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1504=cj4*cj4;
IkReal x1505=(cj0*px);
IkReal x1506=((0.017472)*sj4);
IkReal x1507=((0.0325)*cj4);
IkReal x1508=(py*sj0);
IkReal x1509=((0.2688)*sj4);
CheckValue<IkReal> x1510 = IKatan2WithCheck(IkReal(((0.01962675)+(((-0.00215475)*cj4))+((pz*x1508))+((pz*x1505))+(((-0.09113113)*sj4))+(((-0.07119719)*cj4*sj4))+(((-0.017472)*x1504)))),IkReal(((-0.07330969)+(((0.07119719)*x1504))+(((-1.0)*cj4*x1506))+(pz*pz)+(((0.0021125)*cj4))+x1506)),IKFAST_ATAN2_MAGTHRESH);
if(!x1510.valid){
continue;
}
CheckValue<IkReal> x1511=IKPowWithIntegerCheck(IKsign((((x1508*x1509))+(((-0.2688)*cj4*pz))+((x1507*x1508))+(((-0.0325)*x1505))+(((-0.0325)*x1508))+(((-0.3351)*pz))+((x1505*x1507))+((x1505*x1509))+(((0.0325)*pz*sj4)))),-1);
if(!x1511.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1510.value)+(((1.5707963267949)*(x1511.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1512=IKsin(j1);
IkReal x1513=IKcos(j1);
IkReal x1514=((0.0325)*sj4);
IkReal x1515=(cj0*px);
IkReal x1516=(py*sj0);
IkReal x1517=((0.2688)*sj4);
IkReal x1518=((0.2688)*cj4);
IkReal x1519=((0.0325)*cj4);
IkReal x1520=((1.0)*x1513);
IkReal x1521=((0.6702)*x1512);
IkReal x1522=(pz*x1513);
IkReal x1523=(pz*x1512);
IkReal x1524=((0.065)*x1513);
evalcond[0]=((0.3351)+(((-1.0)*x1514))+x1522+x1518+((x1512*x1515))+((x1512*x1516)));
evalcond[1]=((0.0325)+(((-1.0)*x1519))+(((-1.0)*x1517))+(((-1.0)*x1515*x1520))+x1523+(((-1.0)*x1516*x1520)));
evalcond[2]=(((x1513*x1518))+(((-1.0)*x1513*x1514))+(((0.0325)*x1512))+pz+(((-1.0)*x1512*x1517))+(((-1.0)*x1512*x1519))+(((0.3351)*x1513)));
evalcond[3]=((((-1.0)*x1516))+(((-1.0)*x1515))+(((-1.0)*x1513*x1519))+(((-1.0)*x1513*x1517))+(((0.0325)*x1513))+(((-1.0)*x1512*x1518))+(((-0.3351)*x1512))+((x1512*x1514)));
evalcond[4]=((-0.06226938)+(((-0.6702)*x1522))+(((-0.2982)*px*sj0))+(((-1.0)*x1515*x1521))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x1516*x1524))+(((-0.065)*x1523))+((x1515*x1524))+(((-1.0)*x1516*x1521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1525=IKPowWithIntegerCheck(IKsign(((((0.065)*cj2*(py*py)))+(((-0.6702)*cj3*sj2*(cj0*cj0)*(px*px)))+(((-0.6702)*cj3*sj2*(pz*pz)))+(((-0.065)*cj2*(cj0*cj0)*(py*py)))+(((-1.3404)*cj0*cj3*px*py*sj0*sj2))+(((0.065)*cj2*(cj0*cj0)*(px*px)))+(((0.6702)*cj3*sj2*(cj0*cj0)*(py*py)))+(((-0.6702)*cj3*sj2*(py*py)))+(((0.065)*cj2*(pz*pz)))+(((0.13)*cj0*cj2*px*py*sj0)))),-1);
if(!x1525.valid){
continue;
}
CheckValue<IkReal> x1526 = IKatan2WithCheck(IkReal(((((0.09992682)*pz*sj3))+(((-0.065)*px*py*sj2))+(((-0.09992682)*cj2*cj3*py*sj0))+(((-0.6702)*cj0*cj2*cj3*sj0*(px*px)))+((cj2*pp*pz*sj3))+(((-0.2982)*cj3*px*py))+(((-0.09992682)*cj0*cj2*cj3*px))+(((0.5964)*cj3*px*py*(cj0*cj0)))+(((0.06226938)*cj2*pz*sj3))+(((-0.0096915)*cj0*px*sj2))+(((-1.0)*cj0*cj3*pp*px))+(((0.2982)*cj2*px*pz*sj0*sj3))+(((-0.06226938)*cj3*py*sj0))+(((-0.065)*cj0*sj0*sj2*(px*px)))+(((-1.0)*cj3*pp*py*sj0))+(((0.6702)*cj0*cj2*cj3*sj0*(py*py)))+(((-0.2982)*cj0*cj3*sj0*(px*px)))+(((-0.2982)*cj0*cj2*py*pz*sj3))+(((0.065)*cj0*sj0*sj2*(py*py)))+(((-0.0096915)*py*sj0*sj2))+(((0.6702)*px*pz*sj0*sj3))+(((0.13)*px*py*sj2*(cj0*cj0)))+(((-0.6702)*cj0*py*pz*sj3))+(((0.2982)*cj0*cj3*sj0*(py*py)))+(((1.3404)*cj2*cj3*px*py*(cj0*cj0)))+(((-0.06226938)*cj0*cj3*px))+(((-0.6702)*cj2*cj3*px*py)))),IkReal(((((-1.0)*cj0*cj2*pp*px*sj3))+(((1.3404)*px*py*sj3*(cj0*cj0)))+(((0.2982)*cj0*cj2*sj0*sj3*(py*py)))+(((0.2982)*cj0*cj3*py*pz))+(((-0.6702)*px*py*sj3))+(((-0.6702)*cj2*cj3*px*pz*sj0))+(((-0.065)*px*pz*sj0*sj2))+(((-0.2982)*cj2*px*py*sj3))+(((0.065)*cj0*py*pz*sj2))+(((-0.2982)*cj0*cj2*sj0*sj3*(px*px)))+(((-0.2982)*cj3*px*pz*sj0))+(((-0.06226938)*cj3*pz))+(((-0.09992682)*py*sj0*sj3))+(((0.6702)*cj0*cj2*cj3*py*pz))+(((-0.09992682)*cj0*px*sj3))+(((0.5964)*cj2*px*py*sj3*(cj0*cj0)))+(((-0.6702)*cj0*sj0*sj3*(px*px)))+(((0.6702)*cj0*sj0*sj3*(py*py)))+(((-0.06226938)*cj2*py*sj0*sj3))+(((-1.0)*cj3*pp*pz))+(((-0.06226938)*cj0*cj2*px*sj3))+(((-1.0)*cj2*pp*py*sj0*sj3))+(((-0.0096915)*pz*sj2))+(((-0.09992682)*cj2*cj3*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1526.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1525.value)))+(x1526.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x1527=IKsin(j1);
IkReal x1528=IKcos(j1);
IkReal x1529=(cj0*sj2);
IkReal x1530=((1.0)*py);
IkReal x1531=((0.065)*cj3);
IkReal x1532=(sj2*sj3);
IkReal x1533=(px*sj0);
IkReal x1534=(py*sj0);
IkReal x1535=((0.065)*sj3);
IkReal x1536=(cj0*py);
IkReal x1537=((0.6702)*cj2);
IkReal x1538=(cj0*px);
IkReal x1539=((0.6702)*x1527);
IkReal x1540=(sj0*x1528);
IkReal x1541=(cj2*x1527);
IkReal x1542=(pz*x1527);
IkReal x1543=(cj2*pz*x1528);
IkReal x1544=(x1528*x1538);
evalcond[0]=((((-1.0)*sj3*x1529*x1530))+((sj3*x1538*x1541))+((x1532*x1533))+(((-1.0)*cj3*x1530*x1540))+((cj3*x1542))+((sj3*x1534*x1541))+(((-1.0)*cj3*x1544))+((sj3*x1543))+(((0.1491)*x1532)));
evalcond[1]=((-0.06226938)+(((-1.0)*x1531*x1538*x1541))+(((-1.0)*x1535*x1544))+(((-1.0)*sj2*x1531*x1533))+((sj2*x1534*x1539))+(((-1.0)*x1528*x1534*x1535))+(((0.2982)*x1536))+((py*x1529*x1531))+((x1536*x1537))+(((-1.0)*x1531*x1543))+(((-1.0)*x1531*x1534*x1541))+(((-1.0)*pp))+(((-1.0)*x1533*x1537))+(((-0.0096915)*cj3*sj2))+((x1535*x1542))+(((-0.2982)*x1533))+(((-0.09992682)*cj2))+(((0.6702)*pz*sj2*x1528))+((px*x1529*x1539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1545=((37.3625201420272)*px);
IkReal x1546=(cj2*sj0);
IkReal x1547=(sj1*sj2);
IkReal x1548=(py*sj0);
IkReal x1549=((8.23765589514838)*px);
IkReal x1550=(cj0*py);
IkReal x1551=(px*sj0);
IkReal x1552=(cj2*x1550);
IkReal x1553=(cj1*pz*sj2);
if( IKabs(((-3.24487917029166)+(((16.8214009949802)*x1550))+(((37.3625201420272)*x1547*x1548))+(((-56.4097954224689)*pp))+(((-16.8214009949802)*x1551))+(((-1.0)*x1545*x1546))+(((37.3625201420272)*x1553))+(((37.3625201420272)*x1552))+((cj0*x1545*x1547))+(((-5.57075175317625)*cj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.6389827865866)+(((-1.0)*x1546*x1549))+(((-2.03383754589605)*x1551))+((cj0*x1547*x1549))+(((8.23765589514838)*x1547*x1548))+(((-1.22823449396662)*cj2))+(((-6.82038077094583)*pp))+(((8.23765589514838)*x1552))+(((8.23765589514838)*x1553))+(((2.03383754589605)*x1550)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.24487917029166)+(((16.8214009949802)*x1550))+(((37.3625201420272)*x1547*x1548))+(((-56.4097954224689)*pp))+(((-16.8214009949802)*x1551))+(((-1.0)*x1545*x1546))+(((37.3625201420272)*x1553))+(((37.3625201420272)*x1552))+((cj0*x1545*x1547))+(((-5.57075175317625)*cj2))))+IKsqr(((-1.6389827865866)+(((-1.0)*x1546*x1549))+(((-2.03383754589605)*x1551))+((cj0*x1547*x1549))+(((8.23765589514838)*x1547*x1548))+(((-1.22823449396662)*cj2))+(((-6.82038077094583)*pp))+(((8.23765589514838)*x1552))+(((8.23765589514838)*x1553))+(((2.03383754589605)*x1550))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.24487917029166)+(((16.8214009949802)*x1550))+(((37.3625201420272)*x1547*x1548))+(((-56.4097954224689)*pp))+(((-16.8214009949802)*x1551))+(((-1.0)*x1545*x1546))+(((37.3625201420272)*x1553))+(((37.3625201420272)*x1552))+((cj0*x1545*x1547))+(((-5.57075175317625)*cj2))), ((-1.6389827865866)+(((-1.0)*x1546*x1549))+(((-2.03383754589605)*x1551))+((cj0*x1547*x1549))+(((8.23765589514838)*x1547*x1548))+(((-1.22823449396662)*cj2))+(((-6.82038077094583)*pp))+(((8.23765589514838)*x1552))+(((8.23765589514838)*x1553))+(((2.03383754589605)*x1550))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1554=IKcos(j4);
IkReal x1555=IKsin(j4);
IkReal x1556=(cj1*cj2);
IkReal x1557=(cj3*sj2);
IkReal x1558=(cj1*sj2);
IkReal x1559=((1.0)*pz);
IkReal x1560=(px*sj0);
IkReal x1561=((0.0325)*cj3);
IkReal x1562=((0.0325)*sj3);
IkReal x1563=(sj1*sj2);
IkReal x1564=(cj0*py);
IkReal x1565=(sj1*sj3);
IkReal x1566=(py*sj0);
IkReal x1567=(cj1*sj3);
IkReal x1568=(cj2*sj1);
IkReal x1569=(cj0*px);
IkReal x1570=((0.0325)*x1554);
IkReal x1571=((0.2688)*x1555);
IkReal x1572=((0.2688)*x1554);
IkReal x1573=((0.0325)*x1555);
IkReal x1574=((1.0)*x1569);
IkReal x1575=(cj3*x1571);
evalcond[0]=((0.16442714)+(((-0.2982)*x1560))+(((0.2982)*x1564))+(((-0.0392535)*x1555))+(((-1.0)*pp))+(((0.17803726)*x1554)));
evalcond[1]=((0.3351)+(((-1.0)*x1558*x1559))+(((0.1491)*cj2))+((cj2*x1560))+x1572+(((-1.0)*x1563*x1574))+(((-1.0)*cj2*x1564))+(((-1.0)*x1573))+(((-1.0)*x1563*x1566)));
evalcond[2]=((0.1491)+((cj2*x1572))+(((-1.0)*x1557*x1570))+(((-1.0)*x1557*x1571))+x1560+(((0.0325)*x1557))+(((-1.0)*cj2*x1573))+(((-1.0)*x1564))+(((0.3351)*cj2)));
evalcond[3]=((((-0.3351)*x1558))+(((-1.0)*x1558*x1572))+(((-1.0)*sj1*x1562))+((x1556*x1561))+((sj1*x1554*x1562))+(((-1.0)*x1554*x1556*x1561))+(((-1.0)*x1556*x1575))+pz+((x1558*x1573))+((x1565*x1571)));
evalcond[4]=((0.0325)+((x1566*x1567))+((x1567*x1569))+((cj3*pz*x1556))+(((-1.0)*x1559*x1565))+(((0.1491)*x1557))+(((-1.0)*x1557*x1564))+((cj3*x1566*x1568))+((x1557*x1560))+((cj3*x1568*x1569))+(((-1.0)*x1570))+(((-1.0)*x1571)));
evalcond[5]=(((x1567*x1571))+(((0.3351)*x1563))+(((-1.0)*cj1*x1562))+((x1568*x1575))+(((-1.0)*x1563*x1573))+((x1563*x1572))+((cj1*x1554*x1562))+(((-1.0)*x1574))+((x1554*x1561*x1568))+(((-1.0)*x1566))+(((-1.0)*x1561*x1568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1576=(cj3*sj2);
IkReal x1577=(cj0*py);
IkReal x1578=((1625000.0)*pp);
IkReal x1579=((13440000.0)*pp);
IkReal x1580=((484575.0)*cj2);
IkReal x1581=(px*sj0);
IkReal x1582=((4007808.0)*cj2);
CheckValue<IkReal> x1583=IKPowWithIntegerCheck(IKsign(((((-2456607.7119)*x1576))+(((238256.4925)*cj2)))),-1);
if(!x1583.valid){
continue;
}
CheckValue<IkReal> x1584 = IKatan2WithCheck(IkReal(((-1327267.7733)+(((-773113.5297)*cj2))+(((484575.0)*x1576*x1581))+(((-8901863.0)*x1581))+((x1576*x1578))+(((8901863.0)*x1577))+(((-556504.65)*x1576))+(((-484575.0)*x1576*x1577))+((x1577*x1582))+(((-1.0)*x1581*x1582))+(((-1.0)*cj2*x1579)))),IkReal(((-292634.8425)+(((-1.0)*x1576*x1579))+(((-390498.29)*cj2))+(((-1.0)*x1580*x1581))+(((2146113.8241)*x1576))+(((-1962675.0)*x1581))+((x1577*x1580))+(((1962675.0)*x1577))+(((-1.0)*cj2*x1578))+(((-4007808.0)*x1576*x1581))+(((4007808.0)*x1576*x1577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1583.value)))+(x1584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1585=IKcos(j4);
IkReal x1586=IKsin(j4);
IkReal x1587=(px*sj0);
IkReal x1588=(cj0*py);
IkReal x1589=((0.0325)*cj3*sj2);
evalcond[0]=((0.16442714)+(((0.2982)*x1588))+(((0.17803726)*x1585))+(((-0.0392535)*x1586))+(((-1.0)*pp))+(((-0.2982)*x1587)));
evalcond[1]=((0.1491)+(((-1.0)*x1585*x1589))+(((0.2688)*cj2*x1585))+x1589+x1587+(((-0.2688)*cj3*sj2*x1586))+(((-1.0)*x1588))+(((-0.0325)*cj2*x1586))+(((0.3351)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x1590=cj0*cj0;
IkReal x1591=py*py;
IkReal x1592=((1.0)*cj3*sj2);
IkReal x1593=(cj3*sj2*x1591);
IkReal x1594=(((x1590*x1593))+(((-1.0)*x1590*x1592*(px*px)))+(((-1.0)*x1591*x1592))+(((-1.0)*x1592*(pz*pz)))+(((-2.0)*cj0*cj3*px*py*sj0*sj2)));
j1eval[0]=x1594;
j1eval[1]=IKsign(x1594);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1595=cj2*cj2;
IkReal x1596=(cj0*px);
IkReal x1597=(py*sj0);
IkReal x1598=(cj4*pz);
IkReal x1599=(sj2*sj3);
IkReal x1600=((0.0325)*cj4);
IkReal x1601=((0.0325)*pz);
IkReal x1602=((10.3107692307692)*pz);
IkReal x1603=((0.2688)*sj4);
IkReal x1604=((0.3351)*pz);
IkReal x1605=(pz*sj4);
IkReal x1606=(cj2*cj3*sj2);
IkReal x1607=(sj4*x1595);
IkReal x1608=((8.27076923076923)*sj4*x1599);
j1eval[0]=((((8.27076923076923)*x1595*x1598))+((x1595*x1602))+(((-1.0)*x1602))+(((-8.27076923076923)*x1598))+x1605+(((-1.0)*x1598*x1606))+(((-1.0)*x1597*x1599))+((cj4*x1597*x1599))+(((-8.27076923076923)*x1605*x1606))+(((-1.0)*x1595*x1605))+((cj4*x1596*x1599))+((x1596*x1608))+((pz*x1606))+(((-1.0)*x1596*x1599))+((x1597*x1608)));
j1eval[1]=IKsign(((((-0.0325)*x1596*x1599))+(((-0.0325)*x1597*x1599))+(((0.2688)*x1595*x1598))+(((-1.0)*pz*x1603*x1606))+((x1595*x1604))+(((-1.0)*x1604))+((x1597*x1599*x1603))+((x1597*x1599*x1600))+(((-0.0325)*x1598*x1606))+(((-1.0)*x1601*x1607))+((x1601*x1606))+((sj4*x1601))+(((-0.2688)*x1598))+((x1596*x1599*x1603))+((x1596*x1599*x1600))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1609=cj2*cj2;
IkReal x1610=(py*sj0);
IkReal x1611=(cj0*px);
IkReal x1612=((0.2688)*sj4);
IkReal x1613=((0.2688)*cj4);
IkReal x1614=((1.0)*cj4);
IkReal x1615=((0.0325)*cj4);
IkReal x1616=((8.27076923076923)*cj4);
IkReal x1617=((8.27076923076923)*sj4);
IkReal x1618=(sj4*x1610);
IkReal x1619=(cj2*cj3*sj2);
IkReal x1620=((10.3107692307692)*x1609);
IkReal x1621=(pz*sj2*sj3);
IkReal x1622=((0.3351)*x1609);
IkReal x1623=((0.0325)*x1609);
IkReal x1624=((1.0)*x1609);
IkReal x1625=(x1609*x1616);
j1eval[0]=((((-1.0)*x1611*x1617*x1619))+(((-1.0)*x1611*x1616))+x1621+x1618+(((-1.0)*x1610*x1616))+(((-1.0)*x1611*x1614*x1619))+(((-1.0)*x1617*x1621))+(((-1.0)*sj4*x1611*x1624))+(((-1.0)*x1610*x1617*x1619))+(((-10.3107692307692)*x1611))+(((-10.3107692307692)*x1610))+(((-1.0)*x1614*x1621))+(((-1.0)*x1610*x1614*x1619))+((sj4*x1611))+((x1610*x1619))+((x1611*x1619))+((x1610*x1625))+((x1610*x1620))+(((-1.0)*x1618*x1624))+((x1611*x1620))+((x1611*x1625)));
j1eval[1]=IKsign(((((-0.3351)*x1610))+(((-0.3351)*x1611))+(((-1.0)*x1611*x1612*x1619))+(((-1.0)*x1610*x1612*x1619))+(((-1.0)*x1611*x1613))+(((-1.0)*x1610*x1615*x1619))+(((-1.0)*x1610*x1613))+(((-1.0)*x1611*x1615*x1619))+(((0.0325)*sj4*x1611))+(((0.0325)*x1611*x1619))+(((0.0325)*x1610*x1619))+(((-1.0)*sj4*x1611*x1623))+((x1609*x1610*x1613))+(((0.0325)*x1621))+(((0.0325)*x1618))+(((-1.0)*x1612*x1621))+((x1609*x1611*x1613))+(((-1.0)*x1615*x1621))+((x1610*x1622))+(((-1.0)*x1618*x1623))+((x1611*x1622))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1626=pz*pz;
IkReal x1627=(pz*sj4);
IkReal x1628=((1.0)*cj3);
IkReal x1629=(cj4*pz);
IkReal x1630=((1.0)*sj3);
IkReal x1631=(py*pz*sj0);
IkReal x1632=(cj0*px*pz);
j1eval[0]=((((-1.0)*x1629))+pz+(((-8.27076923076923)*x1627)));
j1eval[1]=IKsign(((((0.0325)*pz))+(((-0.2688)*x1627))+(((-0.0325)*x1629))));
j1eval[2]=((IKabs((((sj3*x1626))+(((-1.0)*x1628*x1632))+(((-1.0)*x1628*x1631)))))+(IKabs(((((-1.0)*x1630*x1632))+(((-1.0)*x1630*x1631))+(((-1.0)*x1626*x1628))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1633=(cj0*px);
IkReal x1634=(py*sj0);
IkReal x1635=((0.0325)*cj4);
IkReal x1636=((1.0)*cj4);
IkReal x1637=(sj4*x1634);
j1eval[0]=((((-1.0)*x1634*x1636))+x1633+x1634+(((-1.0)*x1633*x1636))+(((-8.27076923076923)*x1637))+(((-8.27076923076923)*sj4*x1633)));
j1eval[1]=IKsign(((((-0.2688)*sj4*x1633))+(((-1.0)*x1634*x1635))+(((-1.0)*x1633*x1635))+(((0.0325)*x1634))+(((0.0325)*x1633))+(((-0.2688)*x1637))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1638=cj4*cj4;
IkReal x1639=((0.017472)*sj4);
IkReal x1640=((8.27076923076923)*sj4);
j1eval[0]=((-34.7028118343195)+cj4+x1640+(((33.7028118343195)*x1638))+(((-1.0)*cj4*x1640)));
j1eval[1]=IKsign(((-0.07330969)+x1639+(((0.0021125)*cj4))+(((0.07119719)*x1638))+(((-1.0)*cj4*x1639))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1641=(py*sj0);
IkReal x1642=(cj0*px);
j1eval[0]=((IKabs((((cj3*x1641))+((cj3*x1642)))))+(IKabs((((sj3*x1641))+((sj3*x1642))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1643=(py*sj0);
IkReal x1644=((1.0)*cj3);
IkReal x1645=(cj0*px);
j1eval[0]=((IKabs((((sj3*x1645))+((sj3*x1643)))))+(IKabs(((((-1.0)*x1644*x1645))+(((-1.0)*x1643*x1644))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1646=(py*sj0);
IkReal x1647=((1.0)*cj3);
IkReal x1648=(cj0*px);
CheckValue<IkReal> x1650 = IKatan2WithCheck(IkReal(((((-1.0)*x1647*x1648))+(((-1.0)*x1646*x1647)))),IkReal((((sj3*x1648))+((sj3*x1646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1650.valid){
continue;
}
IkReal x1649=x1650.value;
j1array[0]=((-1.0)*x1649);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1649)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1651=IKcos(j1);
IkReal x1652=IKsin(j1);
IkReal x1653=(py*sj0);
IkReal x1654=(cj0*px);
IkReal x1655=(sj3*x1651);
IkReal x1656=(cj3*x1652);
evalcond[0]=(((x1654*x1655))+((x1654*x1656))+((x1653*x1655))+((x1653*x1656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1657=(cj0*px);
IkReal x1658=(py*sj0);
CheckValue<IkReal> x1660 = IKatan2WithCheck(IkReal((((sj3*x1658))+((sj3*x1657)))),IkReal((((cj3*x1657))+((cj3*x1658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1660.valid){
continue;
}
IkReal x1659=x1660.value;
j1array[0]=((-1.0)*x1659);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1659)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1661=IKsin(j1);
IkReal x1662=IKcos(j1);
IkReal x1663=(cj0*px);
IkReal x1664=(py*sj0);
IkReal x1665=(sj3*x1661);
IkReal x1666=((1.0)*cj3*x1662);
evalcond[0]=((((-1.0)*x1663*x1666))+((x1664*x1665))+((x1663*x1665))+(((-1.0)*x1664*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1667=pz*pz;
IkReal x1668=IKabs(pz);
IkReal x1669=x1667;
CheckValue<IkReal> x1675=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*x1668)),-1);
if(!x1675.valid){
continue;
}
IkReal x1670=x1675.value;
IkReal x1676 = x1669;
if(IKabs(x1676)==0){
continue;
}
IkReal x1671=pow(x1676,-0.5);
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(x1668,-2);
if(!x1677.valid){
continue;
}
if((((1.0)+(((-0.0144080543786231)*x1667*(x1677.value))))) < -0.00001)
continue;
IkReal x1672=IKsqrt(((1.0)+(((-0.0144080543786231)*x1667*(x1677.value)))));
IkReal x1673=(x1667*x1670*x1671);
IkReal x1674=(pz*x1671*x1672);
if((x1669) < -0.00001)
continue;
CheckValue<IkReal> x1678=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x1669)))),-1);
if(!x1678.valid){
continue;
}
if( (((325.0)*pz*(x1678.value))) < -1-IKFAST_SINCOS_THRESH || (((325.0)*pz*(x1678.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1679 = IKatan2WithCheck(IkReal(((-1.0)*pz)),IkReal(((-8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1679.valid){
continue;
}
IkReal gconst36=((((-1.0)*(IKasin(((325.0)*pz*(x1678.value))))))+(((-1.0)*(x1679.value))));
IkReal gconst37=((((0.12003355521946)*x1674))+(((322.650196429908)*x1673)));
IkReal gconst38=((((39.0109054463244)*x1673))+(((-0.992769835168946)*x1674)));
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x1680=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(pz*pz)))),-1);
if(!x1680.valid){
continue;
}
if( (((325.0)*pz*(x1680.value))) < -1-IKFAST_SINCOS_THRESH || (((325.0)*pz*(x1680.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1681 = IKatan2WithCheck(IkReal(((-1.0)*pz)),IkReal(((-8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1681.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(((325.0)*pz*(x1680.value))))+(x1681.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1682=pz*pz;
IkReal x1683=IKabs(pz);
IkReal x1684=((-1.0)*pz);
IkReal x1685=x1682;
IkReal x1686=x1670;
IkReal x1692 = x1685;
if(IKabs(x1692)==0){
continue;
}
IkReal x1687=pow(x1692,-0.5);
IkReal x1688=x1672;
if((x1685) < -0.00001)
continue;
CheckValue<IkReal> x1693=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x1685)))),-1);
if(!x1693.valid){
continue;
}
if( (((325.0)*pz*(x1693.value))) < -1-IKFAST_SINCOS_THRESH || (((325.0)*pz*(x1693.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1689=((1.0)*(IKasin(((325.0)*pz*(x1693.value)))));
IkReal x1690=(x1682*x1686*x1687);
IkReal x1691=(pz*x1687*x1688);
sj2=0;
cj2=1.0;
j2=0;
sj4=gconst37;
cj4=gconst38;
CheckValue<IkReal> x1694 = IKatan2WithCheck(IkReal(x1684),IkReal(((-8.27076910047281)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1694.valid){
continue;
}
j4=((((-1.0)*x1689))+(((-1.0)*(x1694.value))));
CheckValue<IkReal> x1695 = IKatan2WithCheck(IkReal(x1684),IkReal(((-8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1695.valid){
continue;
}
IkReal gconst36=((((-1.0)*x1689))+(((-1.0)*(x1695.value))));
IkReal gconst37=((((322.650196429908)*x1690))+(((0.12003355521946)*x1691)));
IkReal gconst38=((((-0.992769835168946)*x1691))+(((39.0109054463244)*x1690)));
IkReal x1696=pz*pz;
IkReal x1697=((1.0)*cj3);
IkReal x1698=((1.0)*sj3);
IkReal x1699=(py*pz*sj0);
IkReal x1700=(cj0*px*pz);
j1eval[0]=((IKabs((((sj3*x1696))+(((-1.0)*x1697*x1699))+(((-1.0)*x1697*x1700)))))+(IKabs(((((-1.0)*x1698*x1700))+(((-1.0)*x1696*x1697))+(((-1.0)*x1698*x1699))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1701=((0.0325)*gconst38);
IkReal x1702=((0.017472)*gconst37);
IkReal x1703=((0.2688)*gconst37);
IkReal x1704=(pz*sj3);
IkReal x1705=(cj3*pz);
IkReal x1706=(cj0*px*sj3);
IkReal x1707=(cj0*cj3*px);
IkReal x1708=(cj3*py*sj0);
IkReal x1709=(py*sj0*sj3);
CheckValue<IkReal> x1710=IKPowWithIntegerCheck(IKsign(((-0.00105625)+x1702+(((-0.07225344)*(gconst37*gconst37)))+(((-0.00105625)*(gconst38*gconst38)))+(((-1.0)*gconst38*x1702))+(((0.0021125)*gconst38)))),-1);
if(!x1710.valid){
continue;
}
CheckValue<IkReal> x1711 = IKatan2WithCheck(IkReal((((x1703*x1704))+(((-0.0325)*x1704))+((x1701*x1704))+(((-1.0)*x1703*x1708))+(((-1.0)*x1703*x1707))+(((0.0325)*x1708))+(((0.0325)*x1707))+(((-1.0)*x1701*x1707))+(((-1.0)*x1701*x1708)))),IkReal(((((-1.0)*x1703*x1709))+(((-1.0)*x1703*x1706))+(((-1.0)*x1703*x1705))+(((0.0325)*x1709))+(((0.0325)*x1706))+(((0.0325)*x1705))+(((-1.0)*x1701*x1705))+(((-1.0)*x1701*x1706))+(((-1.0)*x1701*x1709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1711.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1710.value)))+(x1711.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1712=IKsin(j1);
IkReal x1713=IKcos(j1);
IkReal x1714=((0.0325)*gconst38);
IkReal x1715=((0.065)*pz);
IkReal x1716=((0.2688)*gconst37);
IkReal x1717=(py*sj0);
IkReal x1718=(cj0*px);
IkReal x1719=(sj3*x1712);
IkReal x1720=(cj3*x1713);
IkReal x1721=(cj3*x1712);
IkReal x1722=(sj3*x1713);
evalcond[0]=(((x1714*x1719))+((x1716*x1719))+(((-0.0325)*x1719))+(((0.0325)*x1720))+pz+(((-1.0)*x1714*x1720))+(((-1.0)*x1716*x1720)));
evalcond[1]=((((-1.0)*x1717*x1720))+((pz*x1721))+((pz*x1722))+((x1718*x1719))+(((-1.0)*x1718*x1720))+((x1717*x1719)));
evalcond[2]=((((-1.0)*x1717))+(((-1.0)*x1718))+((x1714*x1721))+((x1714*x1722))+((x1716*x1722))+((x1716*x1721))+(((-0.0325)*x1722))+(((-0.0325)*x1721)));
evalcond[3]=((0.0325)+(((-1.0)*pz*x1719))+((pz*x1720))+(((-1.0)*x1714))+(((-1.0)*x1716))+((x1718*x1721))+((x1718*x1722))+((x1717*x1721))+((x1717*x1722)));
evalcond[4]=((-0.1621962)+(((0.9684)*cj0*py))+(((-1.0)*x1715*x1720))+(((-0.9684)*px*sj0))+(((-1.0)*pp))+(((-0.065)*x1717*x1721))+(((-0.065)*x1717*x1722))+((x1715*x1719))+(((-0.065)*x1718*x1721))+(((-0.065)*x1718*x1722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1723=pz*pz;
IkReal x1724=((1.0)*cj3);
IkReal x1725=((1.0)*sj3);
IkReal x1726=((0.0325)*pz);
IkReal x1727=(py*pz*sj0);
IkReal x1728=(cj0*px*pz);
CheckValue<IkReal> x1729 = IKatan2WithCheck(IkReal((((sj3*x1723))+(((-1.0)*x1724*x1727))+(((-1.0)*x1724*x1728)))),IkReal(((((-1.0)*x1723*x1724))+(((-1.0)*x1725*x1728))+(((-1.0)*x1725*x1727)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1729.valid){
continue;
}
CheckValue<IkReal> x1730=IKPowWithIntegerCheck(IKsign((x1726+(((-0.2688)*gconst37*pz))+(((-1.0)*gconst38*x1726)))),-1);
if(!x1730.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1729.value)+(((1.5707963267949)*(x1730.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1731=IKsin(j1);
IkReal x1732=IKcos(j1);
IkReal x1733=((0.0325)*gconst38);
IkReal x1734=((0.065)*pz);
IkReal x1735=((0.2688)*gconst37);
IkReal x1736=(py*sj0);
IkReal x1737=(cj0*px);
IkReal x1738=(sj3*x1731);
IkReal x1739=(cj3*x1732);
IkReal x1740=(cj3*x1731);
IkReal x1741=(sj3*x1732);
evalcond[0]=((((-1.0)*x1733*x1739))+(((0.0325)*x1739))+((x1735*x1738))+pz+((x1733*x1738))+(((-1.0)*x1735*x1739))+(((-0.0325)*x1738)));
evalcond[1]=(((pz*x1741))+((pz*x1740))+((x1736*x1738))+((x1737*x1738))+(((-1.0)*x1737*x1739))+(((-1.0)*x1736*x1739)));
evalcond[2]=((((-0.0325)*x1740))+(((-0.0325)*x1741))+((x1735*x1741))+((x1735*x1740))+(((-1.0)*x1737))+(((-1.0)*x1736))+((x1733*x1740))+((x1733*x1741)));
evalcond[3]=((0.0325)+((x1736*x1741))+((x1736*x1740))+((pz*x1739))+(((-1.0)*pz*x1738))+(((-1.0)*x1735))+(((-1.0)*x1733))+((x1737*x1741))+((x1737*x1740)));
evalcond[4]=((-0.1621962)+(((0.9684)*cj0*py))+(((-0.065)*x1737*x1741))+(((-0.065)*x1737*x1740))+(((-0.065)*x1736*x1740))+(((-0.065)*x1736*x1741))+((x1734*x1738))+(((-0.9684)*px*sj0))+(((-1.0)*pp))+(((-1.0)*x1734*x1739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1742=pz*pz;
IkReal x1743=IKabs(pz);
IkReal x1744=x1742;
CheckValue<IkReal> x1750=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*x1743)),-1);
if(!x1750.valid){
continue;
}
IkReal x1745=x1750.value;
IkReal x1751 = x1744;
if(IKabs(x1751)==0){
continue;
}
IkReal x1746=pow(x1751,-0.5);
CheckValue<IkReal> x1752=IKPowWithIntegerCheck(x1743,-2);
if(!x1752.valid){
continue;
}
if((((1.0)+(((-0.0144080543786231)*x1742*(x1752.value))))) < -0.00001)
continue;
IkReal x1747=IKsqrt(((1.0)+(((-0.0144080543786231)*x1742*(x1752.value)))));
IkReal x1748=(x1742*x1745*x1746);
IkReal x1749=(pz*x1746*x1747);
CheckValue<IkReal> x1753 = IKatan2WithCheck(IkReal(((-1.0)*pz)),IkReal(((-8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1753.valid){
continue;
}
if((x1744) < -0.00001)
continue;
CheckValue<IkReal> x1754=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x1744)))),-1);
if(!x1754.valid){
continue;
}
if( (((325.0)*pz*(x1754.value))) < -1-IKFAST_SINCOS_THRESH || (((325.0)*pz*(x1754.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x1753.value)))+(IKasin(((325.0)*pz*(x1754.value)))));
IkReal gconst40=((((322.650196429908)*x1748))+(((-0.12003355521946)*x1749)));
IkReal gconst41=((((0.992769835168946)*x1749))+(((39.0109054463244)*x1748)));
CheckValue<IkReal> x1755 = IKatan2WithCheck(IkReal(((-1.0)*pz)),IkReal(((-8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1755.valid){
continue;
}
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x1756=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(pz*pz)))),-1);
if(!x1756.valid){
continue;
}
if( (((325.0)*pz*(x1756.value))) < -1-IKFAST_SINCOS_THRESH || (((325.0)*pz*(x1756.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1755.value)+(((-1.0)*(IKasin(((325.0)*pz*(x1756.value))))))+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1757=pz*pz;
IkReal x1758=IKabs(pz);
IkReal x1759=((-1.0)*pz);
IkReal x1760=x1757;
IkReal x1761=x1745;
IkReal x1767 = x1760;
if(IKabs(x1767)==0){
continue;
}
IkReal x1762=pow(x1767,-0.5);
IkReal x1763=x1747;
if((x1760) < -0.00001)
continue;
CheckValue<IkReal> x1768=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x1760)))),-1);
if(!x1768.valid){
continue;
}
if( (((325.0)*pz*(x1768.value))) < -1-IKFAST_SINCOS_THRESH || (((325.0)*pz*(x1768.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1764=IKasin(((325.0)*pz*(x1768.value)));
IkReal x1765=(x1757*x1761*x1762);
IkReal x1766=(pz*x1762*x1763);
sj2=0;
cj2=1.0;
j2=0;
sj4=gconst40;
cj4=gconst41;
CheckValue<IkReal> x1769 = IKatan2WithCheck(IkReal(x1759),IkReal(((-8.27076910047281)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1769.valid){
continue;
}
j4=((3.14159265)+x1764+(((-1.0)*(x1769.value))));
CheckValue<IkReal> x1770 = IKatan2WithCheck(IkReal(x1759),IkReal(((-8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1770.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+x1764+(((-1.0)*(x1770.value))));
IkReal gconst40=((((-0.12003355521946)*x1766))+(((322.650196429908)*x1765)));
IkReal gconst41=((((39.0109054463244)*x1765))+(((0.992769835168946)*x1766)));
IkReal x1771=pz*pz;
IkReal x1772=((1.0)*cj3);
IkReal x1773=((1.0)*sj3);
IkReal x1774=(py*pz*sj0);
IkReal x1775=(cj0*px*pz);
j1eval[0]=((IKabs(((((-1.0)*x1772*x1775))+(((-1.0)*x1772*x1774))+((sj3*x1771)))))+(IKabs(((((-1.0)*x1771*x1772))+(((-1.0)*x1773*x1775))+(((-1.0)*x1773*x1774))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1776=cj0*cj0;
IkReal x1777=py*py;
IkReal x1778=px*px;
IkReal x1779=(cj3*pz);
IkReal x1780=(py*sj0);
IkReal x1781=(cj0*px);
IkReal x1782=((0.2688)*gconst40);
IkReal x1783=((0.0325)*gconst41);
IkReal x1784=(cj3*x1777);
IkReal x1785=(sj3*x1777);
IkReal x1786=((1.0)*x1776);
IkReal x1787=((1.0)*pz*sj3);
IkReal x1788=(x1776*x1778);
CheckValue<IkReal> x1789=IKPowWithIntegerCheck(IKsign((((x1780*x1783))+((x1780*x1782))+((x1781*x1782))+((x1781*x1783))+(((-0.0325)*x1780))+(((-0.0325)*x1781)))),-1);
if(!x1789.valid){
continue;
}
CheckValue<IkReal> x1790 = IKatan2WithCheck(IkReal((x1784+(((2.0)*cj3*x1780*x1781))+((cj3*x1788))+(((-1.0)*x1784*x1786))+(((-1.0)*x1780*x1787))+(((-1.0)*x1781*x1787)))),IkReal((((sj3*x1788))+(((2.0)*sj3*x1780*x1781))+x1785+((x1779*x1781))+((x1779*x1780))+(((-1.0)*x1785*x1786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1790.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1789.value)))+(x1790.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1791=IKsin(j1);
IkReal x1792=IKcos(j1);
IkReal x1793=((0.0325)*gconst41);
IkReal x1794=((0.065)*pz);
IkReal x1795=(py*sj0);
IkReal x1796=(cj0*px);
IkReal x1797=((0.2688)*gconst40);
IkReal x1798=(sj3*x1792);
IkReal x1799=(cj3*x1792);
IkReal x1800=(sj3*x1791);
IkReal x1801=(cj3*x1791);
evalcond[0]=((((0.0325)*x1799))+(((-0.0325)*x1800))+(((-1.0)*x1793*x1799))+((x1797*x1800))+pz+((x1793*x1800))+(((-1.0)*x1797*x1799)));
evalcond[1]=(((x1795*x1800))+((pz*x1798))+(((-1.0)*x1795*x1799))+((x1796*x1800))+(((-1.0)*x1796*x1799))+((pz*x1801)));
evalcond[2]=(((x1793*x1798))+(((-0.0325)*x1801))+((x1797*x1801))+((x1797*x1798))+(((-1.0)*x1796))+(((-1.0)*x1795))+((x1793*x1801))+(((-0.0325)*x1798)));
evalcond[3]=((0.0325)+(((-1.0)*x1793))+(((-1.0)*x1797))+((x1795*x1801))+((pz*x1799))+((x1796*x1798))+(((-1.0)*pz*x1800))+((x1796*x1801))+((x1795*x1798)));
evalcond[4]=((-0.1621962)+(((0.9684)*cj0*py))+(((-0.065)*x1795*x1801))+((x1794*x1800))+(((-0.065)*x1796*x1801))+(((-0.9684)*px*sj0))+(((-1.0)*pp))+(((-0.065)*x1796*x1798))+(((-0.065)*x1795*x1798))+(((-1.0)*x1794*x1799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1802=pz*pz;
IkReal x1803=((1.0)*cj3);
IkReal x1804=((1.0)*sj3);
IkReal x1805=((0.0325)*pz);
IkReal x1806=(py*pz*sj0);
IkReal x1807=(cj0*px*pz);
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal((((sj3*x1802))+(((-1.0)*x1803*x1806))+(((-1.0)*x1803*x1807)))),IkReal(((((-1.0)*x1804*x1806))+(((-1.0)*x1804*x1807))+(((-1.0)*x1802*x1803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
CheckValue<IkReal> x1809=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst41*x1805))+x1805+(((-0.2688)*gconst40*pz)))),-1);
if(!x1809.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1808.value)+(((1.5707963267949)*(x1809.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1810=IKsin(j1);
IkReal x1811=IKcos(j1);
IkReal x1812=((0.0325)*gconst41);
IkReal x1813=((0.065)*pz);
IkReal x1814=(py*sj0);
IkReal x1815=(cj0*px);
IkReal x1816=((0.2688)*gconst40);
IkReal x1817=(sj3*x1811);
IkReal x1818=(cj3*x1811);
IkReal x1819=(sj3*x1810);
IkReal x1820=(cj3*x1810);
evalcond[0]=((((0.0325)*x1818))+(((-1.0)*x1812*x1818))+((x1812*x1819))+((x1816*x1819))+(((-1.0)*x1816*x1818))+pz+(((-0.0325)*x1819)));
evalcond[1]=((((-1.0)*x1815*x1818))+((pz*x1820))+(((-1.0)*x1814*x1818))+((pz*x1817))+((x1815*x1819))+((x1814*x1819)));
evalcond[2]=(((x1812*x1820))+(((-0.0325)*x1820))+((x1812*x1817))+((x1816*x1817))+((x1816*x1820))+(((-1.0)*x1814))+(((-1.0)*x1815))+(((-0.0325)*x1817)));
evalcond[3]=((0.0325)+(((-1.0)*x1812))+(((-1.0)*x1816))+(((-1.0)*pz*x1819))+((pz*x1818))+((x1815*x1817))+((x1814*x1817))+((x1815*x1820))+((x1814*x1820)));
evalcond[4]=((-0.1621962)+(((0.9684)*cj0*py))+(((-0.065)*x1814*x1817))+(((-0.065)*x1815*x1820))+(((-1.0)*x1813*x1818))+(((-0.065)*x1814*x1820))+((x1813*x1819))+(((-0.9684)*px*sj0))+(((-1.0)*pp))+(((-0.065)*x1815*x1817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
IkReal x1821=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1821);
rxp0_1=(px*r20);
rxp1_0=(r21*x1821);
rxp1_1=(px*r21);
rxp2_0=(r22*x1821);
rxp2_1=(px*r22);
IkReal x1822=cj4*cj4;
IkReal x1823=(cj0*px);
IkReal x1824=((0.2688)*sj4);
IkReal x1825=((211250.0)*cj4);
IkReal x1826=((1747200.0)*sj4);
IkReal x1827=(py*sj0);
IkReal x1828=((8.27076923076923)*sj4);
IkReal x1829=((0.0325)*cj4);
IkReal x1830=((7119719.0)*x1822);
j1eval[0]=(((cj4*x1827))+((cj4*x1823))+(((-1.0)*x1823))+(((-1.0)*x1827))+((x1827*x1828))+((x1823*x1828)));
j1eval[1]=IKsign((((x1824*x1827))+(((-0.0325)*x1827))+(((-0.0325)*x1823))+((x1827*x1829))+((x1823*x1824))+((x1823*x1829))));
j1eval[2]=((IKabs(((((-1.0)*cj3*x1825))+(((-1.0)*cj3*x1826))+((cj3*cj4*x1826))+(((7330969.0)*cj3))+(((-1.0)*cj3*x1830)))))+(IKabs(((((7330969.0)*sj3))+((cj4*sj3*x1826))+(((-1.0)*sj3*x1830))+(((-1.0)*sj3*x1826))+(((-1.0)*sj3*x1825))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1831=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1831);
rxp0_1=(px*r20);
rxp1_0=(r21*x1831);
rxp1_1=(px*r21);
rxp2_0=(r22*x1831);
rxp2_1=(px*r22);
IkReal x1832=cj4*cj4;
IkReal x1833=((0.017472)*sj4);
IkReal x1834=((8.27076923076923)*sj4);
j1eval[0]=((34.7028118343195)+(((-1.0)*x1834))+(((-33.7028118343195)*x1832))+((cj4*x1834))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.07330969)+(((-1.0)*x1833))+(((-0.07119719)*x1832))+(((-0.0021125)*cj4))+((cj4*x1833))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x1835=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1835);
rxp0_1=(px*r20);
rxp1_0=(r21*x1835);
rxp1_1=(px*r21);
rxp2_0=(r22*x1835);
rxp2_1=(px*r22);
IkReal x1836=cj0*cj0;
IkReal x1837=py*py;
IkReal x1838=px*px;
IkReal x1839=(cj0*px);
IkReal x1840=(py*sj0);
IkReal x1841=((8.27076923076923)*sj4);
IkReal x1842=((0.2688)*sj4);
IkReal x1843=((0.0325)*cj4);
IkReal x1844=(cj3*x1837);
IkReal x1845=(sj3*x1837);
IkReal x1846=((1.0)*x1836);
IkReal x1847=(x1836*x1838);
j1eval[0]=(((cj4*x1840))+(((-1.0)*x1839))+((x1840*x1841))+((x1839*x1841))+((cj4*x1839))+(((-1.0)*x1840)));
j1eval[1]=((IKabs(((((2.0)*cj3*x1839*x1840))+((cj3*x1847))+x1844+(((-1.0)*x1844*x1846)))))+(IKabs((((sj3*x1847))+x1845+(((-1.0)*x1845*x1846))+(((2.0)*sj3*x1839*x1840))))));
j1eval[2]=IKsign(((((-0.0325)*x1840))+(((-0.0325)*x1839))+((x1840*x1843))+((x1840*x1842))+((x1839*x1842))+((x1839*x1843))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1848=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1848);
rxp0_1=(px*r20);
rxp1_0=(r21*x1848);
rxp1_1=(px*r21);
rxp2_0=(r22*x1848);
rxp2_1=(px*r22);
sj4=0;
cj4=1.0;
j4=0;
IkReal x1849=(py*sj0);
IkReal x1850=(cj0*px);
j1eval[0]=((IKabs((((cj3*x1849))+((cj3*x1850)))))+(IKabs((((sj3*x1849))+((sj3*x1850))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1851=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1851);
rxp0_1=(px*r20);
rxp1_0=(r21*x1851);
rxp1_1=(px*r21);
rxp2_0=(r22*x1851);
rxp2_1=(px*r22);
sj4=0;
cj4=1.0;
j4=0;
IkReal x1852=(py*sj0);
IkReal x1853=((1.0)*cj3);
IkReal x1854=(cj0*px);
j1eval[0]=((IKabs((((sj3*x1852))+((sj3*x1854)))))+(IKabs(((((-1.0)*x1852*x1853))+(((-1.0)*x1853*x1854))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1855=(py*sj0);
IkReal x1856=((1.0)*cj3);
IkReal x1857=(cj0*px);
CheckValue<IkReal> x1859 = IKatan2WithCheck(IkReal(((((-1.0)*x1856*x1857))+(((-1.0)*x1855*x1856)))),IkReal((((sj3*x1855))+((sj3*x1857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1859.valid){
continue;
}
IkReal x1858=x1859.value;
j1array[0]=((-1.0)*x1858);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1858)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1860=IKcos(j1);
IkReal x1861=IKsin(j1);
IkReal x1862=(py*sj0);
IkReal x1863=(cj0*px);
IkReal x1864=(sj3*x1860);
IkReal x1865=(cj3*x1861);
evalcond[0]=(((x1862*x1865))+((x1862*x1864))+((x1863*x1864))+((x1863*x1865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1866=(cj0*px);
IkReal x1867=(py*sj0);
CheckValue<IkReal> x1869 = IKatan2WithCheck(IkReal((((sj3*x1866))+((sj3*x1867)))),IkReal((((cj3*x1866))+((cj3*x1867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1869.valid){
continue;
}
IkReal x1868=x1869.value;
j1array[0]=((-1.0)*x1868);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1868)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1870=IKsin(j1);
IkReal x1871=IKcos(j1);
IkReal x1872=(cj0*px);
IkReal x1873=(py*sj0);
IkReal x1874=(sj3*x1870);
IkReal x1875=((1.0)*cj3*x1871);
evalcond[0]=((((-1.0)*x1873*x1875))+(((-1.0)*x1872*x1875))+((x1873*x1874))+((x1872*x1874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
IkReal x1876=((8188692373.0)*sj4);
j1eval[0]=((IKabs((((sj3*x1876))+(((-1855015500.0)*sj3)))))+(IKabs(((((1855015500.0)*cj3))+(((-1.0)*cj3*x1876))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
IkReal x1877=((8188692373.0)*sj4);
j1eval[0]=((IKabs(((((-1855015500.0)*cj3))+((cj3*x1877)))))+(IKabs((((sj3*x1877))+(((-1855015500.0)*sj3))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1878=((0.275965571689881)*sj4);
CheckValue<IkReal> x1880 = IKatan2WithCheck(IkReal((((sj3*x1878))+(((-0.0625155262443378)*sj3)))),IkReal(((((-0.0625155262443378)*cj3))+((cj3*x1878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1880.valid){
continue;
}
IkReal x1879=x1880.value;
j1array[0]=((-1.0)*x1879);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1879)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1881=IKcos(j1);
IkReal x1882=IKsin(j1);
IkReal x1883=((0.275965571689881)*sj4);
IkReal x1884=(sj3*x1882);
IkReal x1885=(cj3*x1881);
evalcond[0]=((((-0.0625155262443378)*x1884))+((x1883*x1884))+(((-1.0)*x1883*x1885))+(((0.0625155262443378)*x1885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1886=((0.275965571689881)*sj4);
CheckValue<IkReal> x1888 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x1886))+(((0.0625155262443378)*cj3)))),IkReal(((((-0.0625155262443378)*sj3))+((sj3*x1886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1888.valid){
continue;
}
IkReal x1887=x1888.value;
j1array[0]=((-1.0)*x1887);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1887)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1889=IKsin(j1);
IkReal x1890=IKcos(j1);
IkReal x1891=((0.275965571689881)*sj4);
IkReal x1892=(cj3*x1889);
IkReal x1893=(sj3*x1890);
evalcond[0]=(((x1891*x1893))+((x1891*x1892))+(((-0.0625155262443378)*x1892))+(((-0.0625155262443378)*x1893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1894=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1894);
rxp0_1=0;
rxp1_0=(r21*x1894);
rxp1_1=0;
rxp2_0=(r22*x1894);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
IkReal x1895=((325.0)*cj3);
IkReal x1896=((325.0)*sj3);
IkReal x1897=((2688.0)*sj4);
j1eval[0]=((IKabs((((sj3*x1897))+((cj4*x1896))+(((-1.0)*x1896)))))+(IKabs(((((-1.0)*cj4*x1895))+x1895+(((-1.0)*cj3*x1897))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1898=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1898);
rxp0_1=0;
rxp1_0=(r21*x1898);
rxp1_1=0;
rxp2_0=(r22*x1898);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
IkReal x1899=((325.0)*cj3);
IkReal x1900=((325.0)*sj3);
IkReal x1901=((2688.0)*sj4);
j1eval[0]=((IKabs((((cj4*x1900))+(((-1.0)*x1900))+((sj3*x1901)))))+(IKabs((((cj4*x1899))+((cj3*x1901))+(((-1.0)*x1899))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1902=((0.0325)*cj3);
IkReal x1903=((0.0325)*sj3);
IkReal x1904=((0.2688)*sj4);
CheckValue<IkReal> x1906 = IKatan2WithCheck(IkReal((((cj4*x1903))+(((-1.0)*x1903))+((sj3*x1904)))),IkReal((((cj4*x1902))+((cj3*x1904))+(((-1.0)*x1902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1906.valid){
continue;
}
IkReal x1905=x1906.value;
j1array[0]=((-1.0)*x1905);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1905)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1907=IKsin(j1);
IkReal x1908=IKcos(j1);
IkReal x1909=((0.2688)*sj4);
IkReal x1910=(sj3*x1907);
IkReal x1911=((0.0325)*cj3*x1908);
evalcond[0]=((((-1.0)*cj4*x1911))+x1911+(((-0.0325)*x1910))+(((0.0325)*cj4*x1910))+((x1909*x1910))+(((-1.0)*cj3*x1908*x1909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1912=((0.0325)*cj3);
IkReal x1913=((0.0325)*sj3);
IkReal x1914=((0.2688)*sj4);
CheckValue<IkReal> x1916 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x1912))+x1912+(((-1.0)*cj3*x1914)))),IkReal((((sj3*x1914))+(((-1.0)*x1913))+((cj4*x1913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1916.valid){
continue;
}
IkReal x1915=x1916.value;
j1array[0]=((-1.0)*x1915);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1915)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1917=IKsin(j1);
IkReal x1918=IKcos(j1);
IkReal x1919=((0.2688)*sj4);
IkReal x1920=((0.0325)*cj4);
IkReal x1921=(sj3*x1918);
IkReal x1922=(cj3*x1917);
evalcond[0]=((((-0.0325)*x1921))+(((-0.0325)*x1922))+((x1919*x1922))+((x1919*x1921))+((x1920*x1921))+((x1920*x1922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1923=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1923);
rxp0_1=0;
rxp1_0=(r21*x1923);
rxp1_1=0;
rxp2_0=(r22*x1923);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
IkReal x1924=((325.0)*cj3);
IkReal x1925=((325.0)*sj3);
IkReal x1926=((2688.0)*sj4);
j1eval[0]=((IKabs(((((-1.0)*cj4*x1924))+x1924+(((-1.0)*cj3*x1926)))))+(IKabs((((cj4*x1925))+(((-1.0)*x1925))+((sj3*x1926))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1927=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1927);
rxp0_1=0;
rxp1_0=(r21*x1927);
rxp1_1=0;
rxp2_0=(r22*x1927);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
IkReal x1928=((325.0)*cj3);
IkReal x1929=((325.0)*sj3);
IkReal x1930=((2688.0)*sj4);
j1eval[0]=((IKabs((((cj4*x1928))+((cj3*x1930))+(((-1.0)*x1928)))))+(IKabs((((cj4*x1929))+(((-1.0)*x1929))+((sj3*x1930))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1931=((0.0325)*cj3);
IkReal x1932=((0.0325)*sj3);
IkReal x1933=((0.2688)*sj4);
CheckValue<IkReal> x1935 = IKatan2WithCheck(IkReal((((cj4*x1932))+((sj3*x1933))+(((-1.0)*x1932)))),IkReal((((cj4*x1931))+((cj3*x1933))+(((-1.0)*x1931)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1935.valid){
continue;
}
IkReal x1934=x1935.value;
j1array[0]=((-1.0)*x1934);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1934)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1936=IKsin(j1);
IkReal x1937=IKcos(j1);
IkReal x1938=((0.2688)*sj4);
IkReal x1939=(sj3*x1936);
IkReal x1940=((0.0325)*cj3*x1937);
evalcond[0]=((((-1.0)*cj4*x1940))+(((-1.0)*cj3*x1937*x1938))+x1940+(((-0.0325)*x1939))+(((0.0325)*cj4*x1939))+((x1938*x1939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1941=((0.0325)*cj3);
IkReal x1942=((0.0325)*sj3);
IkReal x1943=((0.2688)*sj4);
CheckValue<IkReal> x1945 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x1941))+(((-1.0)*cj3*x1943))+x1941)),IkReal((((sj3*x1943))+(((-1.0)*x1942))+((cj4*x1942)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1945.valid){
continue;
}
IkReal x1944=x1945.value;
j1array[0]=((-1.0)*x1944);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1944)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1946=IKsin(j1);
IkReal x1947=IKcos(j1);
IkReal x1948=((0.2688)*sj4);
IkReal x1949=((0.0325)*cj4);
IkReal x1950=(sj3*x1947);
IkReal x1951=(cj3*x1946);
evalcond[0]=((((-0.0325)*x1951))+(((-0.0325)*x1950))+((x1948*x1950))+((x1948*x1951))+((x1949*x1951))+((x1949*x1950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1952=((-1.0)*px);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x1952);
rxp1_2=(r11*x1952);
rxp2_2=(r12*x1952);
IkReal x1953=((325.0)*cj3);
IkReal x1954=((325.0)*sj3);
IkReal x1955=((2688.0)*sj4);
j1eval[0]=((IKabs(((((-1.0)*cj4*x1953))+(((-1.0)*cj3*x1955))+x1953)))+(IKabs(((((-1.0)*x1954))+((sj3*x1955))+((cj4*x1954))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1956=((-1.0)*px);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x1956);
rxp1_2=(r11*x1956);
rxp2_2=(r12*x1956);
IkReal x1957=((325.0)*cj3);
IkReal x1958=((325.0)*sj3);
IkReal x1959=((2688.0)*sj4);
j1eval[0]=((IKabs(((((-1.0)*x1957))+((cj3*x1959))+((cj4*x1957)))))+(IKabs(((((-1.0)*x1958))+((sj3*x1959))+((cj4*x1958))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1960=((0.0325)*cj3);
IkReal x1961=((0.0325)*sj3);
IkReal x1962=((0.2688)*sj4);
CheckValue<IkReal> x1964 = IKatan2WithCheck(IkReal((((sj3*x1962))+(((-1.0)*x1961))+((cj4*x1961)))),IkReal((((cj3*x1962))+(((-1.0)*x1960))+((cj4*x1960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1964.valid){
continue;
}
IkReal x1963=x1964.value;
j1array[0]=((-1.0)*x1963);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1963)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1965=IKsin(j1);
IkReal x1966=IKcos(j1);
IkReal x1967=((0.2688)*sj4);
IkReal x1968=(sj3*x1965);
IkReal x1969=((0.0325)*cj3*x1966);
evalcond[0]=((((-0.0325)*x1968))+(((-1.0)*cj4*x1969))+(((-1.0)*cj3*x1966*x1967))+(((0.0325)*cj4*x1968))+x1969+((x1967*x1968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1970=((0.0325)*cj3);
IkReal x1971=((0.0325)*sj3);
IkReal x1972=((0.2688)*sj4);
CheckValue<IkReal> x1974 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x1970))+x1970+(((-1.0)*cj3*x1972)))),IkReal((((sj3*x1972))+(((-1.0)*x1971))+((cj4*x1971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1974.valid){
continue;
}
IkReal x1973=x1974.value;
j1array[0]=((-1.0)*x1973);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1973)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1975=IKsin(j1);
IkReal x1976=IKcos(j1);
IkReal x1977=((0.2688)*sj4);
IkReal x1978=((0.0325)*cj4);
IkReal x1979=(sj3*x1976);
IkReal x1980=(cj3*x1975);
evalcond[0]=((((-0.0325)*x1979))+((x1978*x1980))+((x1978*x1979))+((x1977*x1979))+(((-0.0325)*x1980))+((x1977*x1980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1981=((-1.0)*px);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x1981);
rxp1_2=(r11*x1981);
rxp2_2=(r12*x1981);
IkReal x1982=((325.0)*cj3);
IkReal x1983=((325.0)*sj3);
IkReal x1984=((2688.0)*sj4);
j1eval[0]=((IKabs(((((-1.0)*cj3*x1984))+x1982+(((-1.0)*cj4*x1982)))))+(IKabs((((sj3*x1984))+(((-1.0)*x1983))+((cj4*x1983))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1985=((-1.0)*px);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x1985);
rxp1_2=(r11*x1985);
rxp2_2=(r12*x1985);
IkReal x1986=((325.0)*cj3);
IkReal x1987=((325.0)*sj3);
IkReal x1988=((2688.0)*sj4);
j1eval[0]=((IKabs((((sj3*x1988))+(((-1.0)*x1987))+((cj4*x1987)))))+(IKabs(((((-1.0)*x1986))+((cj3*x1988))+((cj4*x1986))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1989=((0.0325)*cj3);
IkReal x1990=((0.0325)*sj3);
IkReal x1991=((0.2688)*sj4);
CheckValue<IkReal> x1993 = IKatan2WithCheck(IkReal((((sj3*x1991))+((cj4*x1990))+(((-1.0)*x1990)))),IkReal(((((-1.0)*x1989))+((cj4*x1989))+((cj3*x1991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1993.valid){
continue;
}
IkReal x1992=x1993.value;
j1array[0]=((-1.0)*x1992);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x1992)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x1994=IKsin(j1);
IkReal x1995=IKcos(j1);
IkReal x1996=((0.2688)*sj4);
IkReal x1997=(sj3*x1994);
IkReal x1998=((0.0325)*cj3*x1995);
evalcond[0]=(((x1996*x1997))+(((-0.0325)*x1997))+(((0.0325)*cj4*x1997))+x1998+(((-1.0)*cj4*x1998))+(((-1.0)*cj3*x1995*x1996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x1999=((0.0325)*cj3);
IkReal x2000=((0.0325)*sj3);
IkReal x2001=((0.2688)*sj4);
CheckValue<IkReal> x2003 = IKatan2WithCheck(IkReal((x1999+(((-1.0)*cj4*x1999))+(((-1.0)*cj3*x2001)))),IkReal((((cj4*x2000))+((sj3*x2001))+(((-1.0)*x2000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2003.valid){
continue;
}
IkReal x2002=x2003.value;
j1array[0]=((-1.0)*x2002);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2002)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2004=IKsin(j1);
IkReal x2005=IKcos(j1);
IkReal x2006=((0.2688)*sj4);
IkReal x2007=((0.0325)*cj4);
IkReal x2008=(sj3*x2005);
IkReal x2009=(cj3*x2004);
evalcond[0]=((((-0.0325)*x2009))+(((-0.0325)*x2008))+((x2007*x2009))+((x2007*x2008))+((x2006*x2009))+((x2006*x2008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2010=cj0*cj0;
IkReal x2011=py*py;
IkReal x2012=px*px;
IkReal x2013=(py*sj0);
IkReal x2014=((0.0325)*cj4);
IkReal x2015=((0.2688)*sj4);
IkReal x2016=(cj0*px);
IkReal x2017=(cj3*x2011);
IkReal x2018=(sj3*x2011);
IkReal x2019=((1.0)*x2010);
IkReal x2020=(x2010*x2012);
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal((x2017+(((-1.0)*x2017*x2019))+((cj3*x2020))+(((2.0)*cj3*x2013*x2016)))),IkReal((x2018+((sj3*x2020))+(((2.0)*sj3*x2013*x2016))+(((-1.0)*x2018*x2019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
CheckValue<IkReal> x2022=IKPowWithIntegerCheck(IKsign((((x2015*x2016))+((x2014*x2016))+(((-0.0325)*x2013))+(((-0.0325)*x2016))+((x2013*x2015))+((x2013*x2014)))),-1);
if(!x2022.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2021.value)+(((1.5707963267949)*(x2022.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2023=IKsin(j1);
IkReal x2024=IKcos(j1);
IkReal x2025=((0.0325)*cj4);
IkReal x2026=((0.065)*cj3);
IkReal x2027=((0.0325)*sj3);
IkReal x2028=(py*sj0);
IkReal x2029=(cj0*px);
IkReal x2030=((0.2688)*sj4);
IkReal x2031=(cj3*x2024);
IkReal x2032=((1.0)*x2028);
IkReal x2033=(cj3*x2023);
IkReal x2034=(sj3*x2024);
IkReal x2035=(sj3*x2023);
IkReal x2036=(x2023*x2029);
IkReal x2037=((0.065)*x2034);
evalcond[0]=(((x2028*x2035))+(((-1.0)*x2029*x2031))+((x2029*x2035))+(((-1.0)*x2031*x2032)));
evalcond[1]=((0.0325)+((x2028*x2034))+((x2028*x2033))+(((-1.0)*x2030))+(((-1.0)*x2025))+((x2029*x2034))+((x2029*x2033)));
evalcond[2]=((((-1.0)*x2023*x2027))+((x2025*x2035))+(((0.0325)*x2031))+((x2030*x2035))+(((-1.0)*x2030*x2031))+(((-1.0)*x2025*x2031)));
evalcond[3]=(((x2025*x2034))+((x2025*x2033))+((x2030*x2033))+((x2030*x2034))+(((-1.0)*x2029))+(((-1.0)*x2024*x2027))+(((-1.0)*x2032))+(((-0.0325)*x2033)));
evalcond[4]=((-0.1621962)+(((0.9684)*cj0*py))+(((-1.0)*(px*px)))+(((-1.0)*x2023*x2026*x2028))+(((-1.0)*x2029*x2037))+(((-0.9684)*px*sj0))+(((-1.0)*x2026*x2036))+(((-1.0)*(py*py)))+(((-1.0)*x2028*x2037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2038=((0.017472)*sj4);
IkReal x2039=((0.0325)*sj3);
IkReal x2040=(cj0*px);
IkReal x2041=((0.2688)*sj4);
IkReal x2042=((0.0325)*cj3);
IkReal x2043=(py*sj0);
IkReal x2044=(cj4*x2043);
CheckValue<IkReal> x2045 = IKatan2WithCheck(IkReal((((x2042*x2044))+((cj4*x2040*x2042))+((cj3*x2041*x2043))+(((-1.0)*x2040*x2042))+((cj3*x2040*x2041))+(((-1.0)*x2042*x2043)))),IkReal((((sj3*x2041*x2043))+((cj4*x2039*x2040))+(((-1.0)*x2039*x2043))+(((-1.0)*x2039*x2040))+((x2039*x2044))+((sj3*x2040*x2041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2045.valid){
continue;
}
CheckValue<IkReal> x2046=IKPowWithIntegerCheck(IKsign(((0.07330969)+((cj4*x2038))+(((-0.07119719)*(cj4*cj4)))+(((-0.0021125)*cj4))+(((-1.0)*x2038)))),-1);
if(!x2046.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2045.value)+(((1.5707963267949)*(x2046.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2047=IKsin(j1);
IkReal x2048=IKcos(j1);
IkReal x2049=((0.0325)*cj4);
IkReal x2050=((0.065)*cj3);
IkReal x2051=((0.0325)*sj3);
IkReal x2052=(py*sj0);
IkReal x2053=(cj0*px);
IkReal x2054=((0.2688)*sj4);
IkReal x2055=(cj3*x2048);
IkReal x2056=((1.0)*x2052);
IkReal x2057=(cj3*x2047);
IkReal x2058=(sj3*x2048);
IkReal x2059=(sj3*x2047);
IkReal x2060=(x2047*x2053);
IkReal x2061=((0.065)*x2058);
evalcond[0]=(((x2053*x2059))+(((-1.0)*x2053*x2055))+((x2052*x2059))+(((-1.0)*x2055*x2056)));
evalcond[1]=((0.0325)+((x2053*x2058))+((x2053*x2057))+(((-1.0)*x2049))+((x2052*x2057))+((x2052*x2058))+(((-1.0)*x2054)));
evalcond[2]=((((-1.0)*x2054*x2055))+(((0.0325)*x2055))+((x2049*x2059))+((x2054*x2059))+(((-1.0)*x2049*x2055))+(((-1.0)*x2047*x2051)));
evalcond[3]=((((-0.0325)*x2057))+((x2049*x2058))+((x2049*x2057))+((x2054*x2057))+((x2054*x2058))+(((-1.0)*x2053))+(((-1.0)*x2048*x2051))+(((-1.0)*x2056)));
evalcond[4]=((-0.1621962)+(((0.9684)*cj0*py))+(((-1.0)*x2050*x2060))+(((-1.0)*(px*px)))+(((-1.0)*x2047*x2050*x2052))+(((-1.0)*x2053*x2061))+(((-1.0)*x2052*x2061))+(((-0.9684)*px*sj0))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2062=cj4*cj4;
IkReal x2063=((0.017472)*sj4);
IkReal x2064=(cj4*sj3);
IkReal x2065=(cj3*cj4);
IkReal x2066=(py*sj0);
IkReal x2067=((0.2688)*sj4);
IkReal x2068=((0.0325)*cj4);
IkReal x2069=(cj0*px);
IkReal x2070=((0.07119719)*x2062);
CheckValue<IkReal> x2071=IKPowWithIntegerCheck(IKsign((((x2066*x2067))+((x2066*x2068))+((x2067*x2069))+((x2068*x2069))+(((-0.0325)*x2069))+(((-0.0325)*x2066)))),-1);
if(!x2071.valid){
continue;
}
CheckValue<IkReal> x2072 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x2063))+(((-1.0)*cj3*x2070))+((x2063*x2065))+(((-0.0021125)*x2065))+(((0.07330969)*cj3)))),IkReal(((((-1.0)*sj3*x2063))+(((0.07330969)*sj3))+(((-1.0)*sj3*x2070))+((x2063*x2064))+(((-0.0021125)*x2064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2072.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2071.value)))+(x2072.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2073=IKsin(j1);
IkReal x2074=IKcos(j1);
IkReal x2075=((0.0325)*cj4);
IkReal x2076=((0.065)*cj3);
IkReal x2077=((0.0325)*sj3);
IkReal x2078=(py*sj0);
IkReal x2079=(cj0*px);
IkReal x2080=((0.2688)*sj4);
IkReal x2081=(cj3*x2074);
IkReal x2082=((1.0)*x2078);
IkReal x2083=(cj3*x2073);
IkReal x2084=(sj3*x2074);
IkReal x2085=(sj3*x2073);
IkReal x2086=(x2073*x2079);
IkReal x2087=((0.065)*x2084);
evalcond[0]=((((-1.0)*x2079*x2081))+((x2078*x2085))+(((-1.0)*x2081*x2082))+((x2079*x2085)));
evalcond[1]=((0.0325)+((x2078*x2084))+((x2078*x2083))+(((-1.0)*x2080))+(((-1.0)*x2075))+((x2079*x2084))+((x2079*x2083)));
evalcond[2]=((((0.0325)*x2081))+(((-1.0)*x2073*x2077))+(((-1.0)*x2080*x2081))+(((-1.0)*x2075*x2081))+((x2075*x2085))+((x2080*x2085)));
evalcond[3]=((((-1.0)*x2082))+(((-1.0)*x2079))+(((-1.0)*x2074*x2077))+(((-0.0325)*x2083))+((x2075*x2084))+((x2075*x2083))+((x2080*x2083))+((x2080*x2084)));
evalcond[4]=((-0.1621962)+(((0.9684)*cj0*py))+(((-1.0)*(px*px)))+(((-1.0)*x2078*x2087))+(((-1.0)*x2076*x2086))+(((-0.9684)*px*sj0))+(((-1.0)*x2073*x2076*x2078))+(((-1.0)*x2079*x2087))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2088=((0.017472)*sj4);
IkReal x2089=((0.0325)*sj3);
IkReal x2090=(cj0*px);
IkReal x2091=(cj4*pz);
IkReal x2092=(py*sj0);
IkReal x2093=((0.2688)*sj4);
IkReal x2094=(cj3*pz);
IkReal x2095=((0.0325)*cj3);
IkReal x2096=(x2092*x2095);
IkReal x2097=(x2092*x2093);
CheckValue<IkReal> x2098=IKPowWithIntegerCheck(IKsign(((-0.07330969)+(((-1.0)*cj4*x2088))+x2088+(((0.07119719)*(cj4*cj4)))+(((0.0021125)*cj4)))),-1);
if(!x2098.valid){
continue;
}
CheckValue<IkReal> x2099 = IKatan2WithCheck(IkReal((x2096+(((-1.0)*cj4*x2096))+((x2090*x2095))+((x2089*x2091))+(((-1.0)*cj4*x2090*x2095))+(((-1.0)*pz*x2089))+((pz*sj3*x2093))+(((-1.0)*cj3*x2097))+(((-1.0)*cj3*x2090*x2093)))),IkReal(((((-1.0)*sj3*x2090*x2093))+(((-1.0)*x2091*x2095))+(((-1.0)*x2093*x2094))+((x2089*x2092))+((x2089*x2090))+(((0.0325)*x2094))+(((-1.0)*sj3*x2097))+(((-1.0)*cj4*x2089*x2092))+(((-1.0)*cj4*x2089*x2090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2099.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2098.value)))+(x2099.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2100=IKsin(j1);
IkReal x2101=IKcos(j1);
IkReal x2102=((0.0325)*cj4);
IkReal x2103=((0.065)*pz);
IkReal x2104=(py*sj0);
IkReal x2105=(cj0*px);
IkReal x2106=((0.2688)*sj4);
IkReal x2107=(cj3*x2101);
IkReal x2108=(cj3*x2100);
IkReal x2109=(sj3*x2100);
IkReal x2110=(sj3*x2101);
evalcond[0]=((((-1.0)*x2102*x2107))+(((-1.0)*x2106*x2107))+((x2102*x2109))+pz+((x2106*x2109))+(((-0.0325)*x2109))+(((0.0325)*x2107)));
evalcond[1]=(((x2104*x2109))+(((-1.0)*x2105*x2107))+((pz*x2108))+((x2105*x2109))+(((-1.0)*x2104*x2107))+((pz*x2110)));
evalcond[2]=((((-0.0325)*x2110))+((x2106*x2110))+((x2102*x2108))+((x2102*x2110))+((x2106*x2108))+(((-1.0)*x2104))+(((-1.0)*x2105))+(((-0.0325)*x2108)));
evalcond[3]=((0.0325)+((x2104*x2108))+(((-1.0)*x2102))+(((-1.0)*x2106))+((x2105*x2110))+((pz*x2107))+((x2105*x2108))+((x2104*x2110))+(((-1.0)*pz*x2109)));
evalcond[4]=((-0.1621962)+(((0.9684)*cj0*py))+(((-1.0)*x2103*x2107))+(((-0.065)*x2105*x2108))+((x2103*x2109))+(((-0.065)*x2104*x2108))+(((-0.9684)*px*sj0))+(((-1.0)*pp))+(((-0.065)*x2104*x2110))+(((-0.065)*x2105*x2110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2111=pz*pz;
IkReal x2112=cj4*cj4;
IkReal x2113=(cj0*px);
IkReal x2114=((0.2688)*sj4);
IkReal x2115=((0.0021125)*cj4);
IkReal x2116=(pz*sj3);
IkReal x2117=((0.0325)*cj4);
IkReal x2118=(py*sj0);
IkReal x2119=((0.017472)*cj3*sj4);
IkReal x2120=((0.017472)*sj3*sj4);
IkReal x2121=((1.0)*cj3*pz);
IkReal x2122=((0.07119719)*x2112);
CheckValue<IkReal> x2123 = IKatan2WithCheck(IkReal((((x2116*x2118))+(((-0.07330969)*cj3))+x2119+(((-1.0)*cj4*x2119))+((cj3*x2122))+((x2113*x2116))+((cj3*x2111))+((cj3*x2115)))),IkReal((((sj3*x2122))+(((-1.0)*x2118*x2121))+x2120+((sj3*x2111))+((sj3*x2115))+(((-0.07330969)*sj3))+(((-1.0)*x2113*x2121))+(((-1.0)*cj4*x2120)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2123.valid){
continue;
}
CheckValue<IkReal> x2124=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2114*x2118))+(((-1.0)*x2117*x2118))+(((0.0325)*x2113))+(((0.0325)*x2118))+(((-1.0)*x2113*x2117))+(((-1.0)*x2113*x2114)))),-1);
if(!x2124.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2123.value)+(((1.5707963267949)*(x2124.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2125=IKsin(j1);
IkReal x2126=IKcos(j1);
IkReal x2127=((0.0325)*cj4);
IkReal x2128=((0.065)*pz);
IkReal x2129=(py*sj0);
IkReal x2130=(cj0*px);
IkReal x2131=((0.2688)*sj4);
IkReal x2132=(cj3*x2126);
IkReal x2133=(cj3*x2125);
IkReal x2134=(sj3*x2125);
IkReal x2135=(sj3*x2126);
evalcond[0]=(((x2131*x2134))+(((-1.0)*x2127*x2132))+((x2127*x2134))+pz+(((-0.0325)*x2134))+(((0.0325)*x2132))+(((-1.0)*x2131*x2132)));
evalcond[1]=(((pz*x2133))+((pz*x2135))+(((-1.0)*x2130*x2132))+(((-1.0)*x2129*x2132))+((x2129*x2134))+((x2130*x2134)));
evalcond[2]=(((x2131*x2135))+((x2131*x2133))+(((-1.0)*x2129))+((x2127*x2135))+((x2127*x2133))+(((-1.0)*x2130))+(((-0.0325)*x2133))+(((-0.0325)*x2135)));
evalcond[3]=((0.0325)+(((-1.0)*x2131))+((pz*x2132))+(((-1.0)*x2127))+((x2129*x2135))+((x2129*x2133))+((x2130*x2135))+((x2130*x2133))+(((-1.0)*pz*x2134)));
evalcond[4]=((-0.1621962)+(((0.9684)*cj0*py))+(((-0.065)*x2129*x2133))+(((-0.065)*x2129*x2135))+(((-0.065)*x2130*x2135))+(((-0.065)*x2130*x2133))+(((-0.9684)*px*sj0))+(((-1.0)*pp))+(((-1.0)*x2128*x2132))+((x2128*x2134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2136=pz*pz;
IkReal x2137=((1.0)*cj3);
IkReal x2138=((0.0325)*pz);
IkReal x2139=((1.0)*sj3);
IkReal x2140=(py*pz*sj0);
IkReal x2141=(cj0*px*pz);
CheckValue<IkReal> x2142=IKPowWithIntegerCheck(IKsign(((((-0.2688)*pz*sj4))+x2138+(((-1.0)*cj4*x2138)))),-1);
if(!x2142.valid){
continue;
}
CheckValue<IkReal> x2143 = IKatan2WithCheck(IkReal((((sj3*x2136))+(((-1.0)*x2137*x2141))+(((-1.0)*x2137*x2140)))),IkReal(((((-1.0)*x2136*x2137))+(((-1.0)*x2139*x2140))+(((-1.0)*x2139*x2141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2143.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2142.value)))+(x2143.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2144=IKsin(j1);
IkReal x2145=IKcos(j1);
IkReal x2146=((0.0325)*cj4);
IkReal x2147=((0.065)*pz);
IkReal x2148=(py*sj0);
IkReal x2149=(cj0*px);
IkReal x2150=((0.2688)*sj4);
IkReal x2151=(cj3*x2145);
IkReal x2152=(cj3*x2144);
IkReal x2153=(sj3*x2144);
IkReal x2154=(sj3*x2145);
evalcond[0]=((((-0.0325)*x2153))+((x2146*x2153))+((x2150*x2153))+(((0.0325)*x2151))+pz+(((-1.0)*x2150*x2151))+(((-1.0)*x2146*x2151)));
evalcond[1]=(((x2149*x2153))+((pz*x2154))+((pz*x2152))+((x2148*x2153))+(((-1.0)*x2148*x2151))+(((-1.0)*x2149*x2151)));
evalcond[2]=((((-0.0325)*x2152))+(((-0.0325)*x2154))+(((-1.0)*x2149))+(((-1.0)*x2148))+((x2146*x2154))+((x2146*x2152))+((x2150*x2152))+((x2150*x2154)));
evalcond[3]=((0.0325)+((x2149*x2152))+((x2149*x2154))+(((-1.0)*pz*x2153))+(((-1.0)*x2146))+(((-1.0)*x2150))+((pz*x2151))+((x2148*x2152))+((x2148*x2154)));
evalcond[4]=((-0.1621962)+(((0.9684)*cj0*py))+((x2147*x2153))+(((-0.065)*x2148*x2154))+(((-0.065)*x2148*x2152))+(((-0.9684)*px*sj0))+(((-1.0)*pp))+(((-0.065)*x2149*x2154))+(((-0.065)*x2149*x2152))+(((-1.0)*x2147*x2151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2155=pz*pz;
IkReal x2156=(pz*sj4);
IkReal x2157=((1.0)*cj3);
IkReal x2158=(cj4*pz);
IkReal x2159=(py*pz*sj0);
IkReal x2160=(cj0*px*pz);
j1eval[0]=(x2158+(((-1.0)*pz))+(((8.27076923076923)*x2156)));
j1eval[1]=((IKabs((((sj3*x2160))+(((-1.0)*x2155*x2157))+((sj3*x2159)))))+(IKabs(((((-1.0)*x2157*x2159))+(((-1.0)*x2157*x2160))+(((-1.0)*sj3*x2155))))));
j1eval[2]=IKsign(((((-0.0325)*pz))+(((0.0325)*x2158))+(((0.2688)*x2156))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2161=(cj0*px);
IkReal x2162=(py*sj0);
IkReal x2163=((0.0325)*cj4);
IkReal x2164=((1.0)*cj4);
IkReal x2165=(sj4*x2162);
j1eval[0]=((((-8.27076923076923)*sj4*x2161))+x2161+x2162+(((-8.27076923076923)*x2165))+(((-1.0)*x2161*x2164))+(((-1.0)*x2162*x2164)));
j1eval[1]=IKsign(((((-0.2688)*x2165))+(((-0.2688)*sj4*x2161))+(((-1.0)*x2161*x2163))+(((0.0325)*x2162))+(((0.0325)*x2161))+(((-1.0)*x2162*x2163))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2166=cj4*cj4;
IkReal x2167=((0.017472)*sj4);
IkReal x2168=((8.27076923076923)*sj4);
j1eval[0]=((-34.7028118343195)+cj4+x2168+(((-1.0)*cj4*x2168))+(((33.7028118343195)*x2166)));
j1eval[1]=IKsign(((-0.07330969)+x2167+(((-1.0)*cj4*x2167))+(((0.0021125)*cj4))+(((0.07119719)*x2166))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal x2169=(py*sj0);
IkReal x2170=((1.0)*cj3);
IkReal x2171=(cj0*px);
j1eval[0]=((IKabs((((sj3*x2169))+((sj3*x2171)))))+(IKabs(((((-1.0)*x2170*x2171))+(((-1.0)*x2169*x2170))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal x2172=((1.0)*py*sj0);
IkReal x2173=((1.0)*cj0*px);
j1eval[0]=((IKabs(((((-1.0)*cj3*x2172))+(((-1.0)*cj3*x2173)))))+(IKabs(((((-1.0)*sj3*x2172))+(((-1.0)*sj3*x2173))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2174=((1.0)*cj3);
IkReal x2175=(cj0*px);
IkReal x2176=(py*sj0);
IkReal x2177=((1.0)*sj3);
CheckValue<IkReal> x2179 = IKatan2WithCheck(IkReal(((((-1.0)*x2174*x2175))+(((-1.0)*x2174*x2176)))),IkReal(((((-1.0)*x2176*x2177))+(((-1.0)*x2175*x2177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2179.valid){
continue;
}
IkReal x2178=x2179.value;
j1array[0]=((-1.0)*x2178);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2178)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2180=IKcos(j1);
IkReal x2181=IKsin(j1);
IkReal x2182=(py*sj0);
IkReal x2183=(cj0*px);
IkReal x2184=(sj3*x2180);
IkReal x2185=((1.0)*cj3*x2181);
evalcond[0]=(((x2183*x2184))+((x2182*x2184))+(((-1.0)*x2183*x2185))+(((-1.0)*x2182*x2185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2186=(py*sj0);
IkReal x2187=((1.0)*cj3);
IkReal x2188=(cj0*px);
CheckValue<IkReal> x2190 = IKatan2WithCheck(IkReal((((sj3*x2188))+((sj3*x2186)))),IkReal(((((-1.0)*x2187*x2188))+(((-1.0)*x2186*x2187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2190.valid){
continue;
}
IkReal x2189=x2190.value;
j1array[0]=((-1.0)*x2189);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2189)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2191=IKcos(j1);
IkReal x2192=IKsin(j1);
IkReal x2193=(cj0*px);
IkReal x2194=(py*sj0);
IkReal x2195=((1.0)*cj3*x2191);
IkReal x2196=((1.0)*sj3*x2192);
evalcond[0]=((((-1.0)*x2193*x2195))+(((-1.0)*x2193*x2196))+(((-1.0)*x2194*x2196))+(((-1.0)*x2194*x2195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2197=pz*pz;
IkReal x2198=IKabs(pz);
IkReal x2199=x2197;
CheckValue<IkReal> x2205=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*x2198)),-1);
if(!x2205.valid){
continue;
}
IkReal x2200=x2205.value;
IkReal x2206 = x2199;
if(IKabs(x2206)==0){
continue;
}
IkReal x2201=pow(x2206,-0.5);
CheckValue<IkReal> x2207=IKPowWithIntegerCheck(x2198,-2);
if(!x2207.valid){
continue;
}
if((((1.0)+(((-0.0144080543786231)*x2197*(x2207.value))))) < -0.00001)
continue;
IkReal x2202=IKsqrt(((1.0)+(((-0.0144080543786231)*x2197*(x2207.value)))));
IkReal x2203=(x2197*x2200*x2201);
IkReal x2204=(pz*x2201*x2202);
if((x2199) < -0.00001)
continue;
CheckValue<IkReal> x2208=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x2199)))),-1);
if(!x2208.valid){
continue;
}
if( (((325.0)*pz*(x2208.value))) < -1-IKFAST_SINCOS_THRESH || (((325.0)*pz*(x2208.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2209 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x2209.valid){
continue;
}
IkReal gconst42=((IKasin(((325.0)*pz*(x2208.value))))+(((-1.0)*(x2209.value))));
IkReal gconst43=((((-0.12003355521946)*x2204))+(((322.650196429908)*x2203)));
IkReal gconst44=((((39.0109054463244)*x2203))+(((0.992769835168946)*x2204)));
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x2210=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(pz*pz)))),-1);
if(!x2210.valid){
continue;
}
if( (((325.0)*pz*(x2210.value))) < -1-IKFAST_SINCOS_THRESH || (((325.0)*pz*(x2210.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2211 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x2211.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin(((325.0)*pz*(x2210.value))))))+(x2211.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2212=pz*pz;
IkReal x2213=IKabs(pz);
IkReal x2214=x2212;
IkReal x2215=x2200;
IkReal x2221 = x2214;
if(IKabs(x2221)==0){
continue;
}
IkReal x2216=pow(x2221,-0.5);
IkReal x2217=x2202;
if((x2214) < -0.00001)
continue;
CheckValue<IkReal> x2222=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x2214)))),-1);
if(!x2222.valid){
continue;
}
if( (((325.0)*pz*(x2222.value))) < -1-IKFAST_SINCOS_THRESH || (((325.0)*pz*(x2222.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2218=IKasin(((325.0)*pz*(x2222.value)));
IkReal x2219=(x2212*x2215*x2216);
IkReal x2220=(pz*x2216*x2217);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=gconst43;
cj4=gconst44;
CheckValue<IkReal> x2223 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076910047281)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x2223.valid){
continue;
}
j4=(x2218+(((-1.0)*(x2223.value))));
CheckValue<IkReal> x2224 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x2224.valid){
continue;
}
IkReal gconst42=(x2218+(((-1.0)*(x2224.value))));
IkReal gconst43=((((-0.12003355521946)*x2220))+(((322.650196429908)*x2219)));
IkReal gconst44=((((0.992769835168946)*x2220))+(((39.0109054463244)*x2219)));
IkReal x2225=pz*pz;
IkReal x2226=((1.0)*cj3);
IkReal x2227=(py*pz*sj0);
IkReal x2228=(cj0*px*pz);
j1eval[0]=((IKabs(((((-1.0)*x2225*x2226))+((sj3*x2227))+((sj3*x2228)))))+(IKabs(((((-1.0)*x2226*x2227))+(((-1.0)*x2226*x2228))+(((-1.0)*sj3*x2225))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2229=((0.0325)*cj3);
IkReal x2230=(py*sj0);
IkReal x2231=((0.017472)*gconst43);
IkReal x2232=(cj0*px);
IkReal x2233=((0.0325)*sj3);
IkReal x2234=(gconst44*pz);
IkReal x2235=((0.2688)*gconst43*sj3);
IkReal x2236=((0.2688)*cj3*gconst43);
IkReal x2237=(x2232*x2233);
CheckValue<IkReal> x2238 = IKatan2WithCheck(IkReal((((pz*x2235))+((x2232*x2236))+(((-1.0)*pz*x2233))+(((-1.0)*x2229*x2230))+(((-1.0)*x2229*x2232))+((x2233*x2234))+((x2230*x2236))+((gconst44*x2229*x2232))+((gconst44*x2229*x2230)))),IkReal((((pz*x2236))+x2237+((x2229*x2234))+(((-1.0)*pz*x2229))+(((-1.0)*gconst44*x2230*x2233))+(((-1.0)*gconst44*x2237))+(((-1.0)*x2232*x2235))+((x2230*x2233))+(((-1.0)*x2230*x2235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2238.valid){
continue;
}
CheckValue<IkReal> x2239=IKPowWithIntegerCheck(IKsign(((-0.00105625)+x2231+(((0.0021125)*gconst44))+(((-1.0)*gconst44*x2231))+(((-0.00105625)*(gconst44*gconst44)))+(((-0.07225344)*(gconst43*gconst43))))),-1);
if(!x2239.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2238.value)+(((1.5707963267949)*(x2239.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2240=IKsin(j1);
IkReal x2241=IKcos(j1);
IkReal x2242=((0.0325)*gconst44);
IkReal x2243=((0.2688)*gconst43);
IkReal x2244=((1.0)*cj3);
IkReal x2245=((0.065)*cj3);
IkReal x2246=(cj0*px);
IkReal x2247=((0.065)*sj3);
IkReal x2248=(sj3*x2240);
IkReal x2249=(pz*x2241);
IkReal x2250=(sj3*x2241);
IkReal x2251=(cj3*x2240);
IkReal x2252=((1.0)*py*sj0);
IkReal x2253=(cj3*x2241);
IkReal x2254=(x2240*x2246);
IkReal x2255=(py*sj0*x2241);
IkReal x2256=(py*sj0*x2240);
evalcond[0]=((((-0.0325)*x2248))+((x2243*x2248))+((x2243*x2253))+pz+((x2242*x2253))+((x2242*x2248))+(((-0.0325)*x2253)));
evalcond[1]=((((-1.0)*x2241*x2244*x2246))+(((-1.0)*x2244*x2255))+(((-1.0)*sj3*x2249))+(((-1.0)*x2246*x2248))+((pz*x2251))+(((-1.0)*x2248*x2252)));
evalcond[2]=((((-1.0)*x2246))+((x2243*x2250))+(((-1.0)*x2252))+(((-1.0)*x2242*x2251))+(((-1.0)*x2243*x2251))+(((0.0325)*x2251))+((x2242*x2250))+(((-0.0325)*x2250)));
evalcond[3]=((0.0325)+((x2246*x2250))+(((-1.0)*x2244*x2256))+(((-1.0)*x2244*x2254))+(((-1.0)*x2244*x2249))+(((-1.0)*x2243))+(((-1.0)*x2242))+(((-1.0)*pz*x2248))+((py*sj0*x2250)));
evalcond[4]=((0.03765744)+(((-1.0)*x2241*x2246*x2247))+((x2245*x2256))+((x2245*x2254))+(((-0.372)*cj0*py))+(((-1.0)*pp))+((pz*x2240*x2247))+(((0.372)*px*sj0))+(((-1.0)*x2247*x2255))+((x2245*x2249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2257=pz*pz;
IkReal x2258=((1.0)*cj3);
IkReal x2259=((0.0325)*pz);
IkReal x2260=(py*pz*sj0);
IkReal x2261=(cj0*px*pz);
CheckValue<IkReal> x2262 = IKatan2WithCheck(IkReal(((((-1.0)*x2258*x2261))+(((-1.0)*x2258*x2260))+(((-1.0)*sj3*x2257)))),IkReal(((((-1.0)*x2257*x2258))+((sj3*x2260))+((sj3*x2261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2262.valid){
continue;
}
CheckValue<IkReal> x2263=IKPowWithIntegerCheck(IKsign(((((0.2688)*gconst43*pz))+(((-1.0)*x2259))+((gconst44*x2259)))),-1);
if(!x2263.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2262.value)+(((1.5707963267949)*(x2263.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2264=IKsin(j1);
IkReal x2265=IKcos(j1);
IkReal x2266=((0.0325)*gconst44);
IkReal x2267=((0.2688)*gconst43);
IkReal x2268=((1.0)*cj3);
IkReal x2269=((0.065)*cj3);
IkReal x2270=(cj0*px);
IkReal x2271=((0.065)*sj3);
IkReal x2272=(sj3*x2264);
IkReal x2273=(pz*x2265);
IkReal x2274=(sj3*x2265);
IkReal x2275=(cj3*x2264);
IkReal x2276=((1.0)*py*sj0);
IkReal x2277=(cj3*x2265);
IkReal x2278=(x2264*x2270);
IkReal x2279=(py*sj0*x2265);
IkReal x2280=(py*sj0*x2264);
evalcond[0]=((((-0.0325)*x2277))+(((-0.0325)*x2272))+pz+((x2267*x2272))+((x2267*x2277))+((x2266*x2272))+((x2266*x2277)));
evalcond[1]=((((-1.0)*x2270*x2272))+((pz*x2275))+(((-1.0)*sj3*x2273))+(((-1.0)*x2265*x2268*x2270))+(((-1.0)*x2268*x2279))+(((-1.0)*x2272*x2276)));
evalcond[2]=((((-1.0)*x2266*x2275))+(((0.0325)*x2275))+(((-0.0325)*x2274))+(((-1.0)*x2276))+((x2267*x2274))+((x2266*x2274))+(((-1.0)*x2270))+(((-1.0)*x2267*x2275)));
evalcond[3]=((0.0325)+((py*sj0*x2274))+(((-1.0)*pz*x2272))+((x2270*x2274))+(((-1.0)*x2268*x2280))+(((-1.0)*x2268*x2278))+(((-1.0)*x2268*x2273))+(((-1.0)*x2267))+(((-1.0)*x2266)));
evalcond[4]=((0.03765744)+(((-1.0)*x2265*x2270*x2271))+((pz*x2264*x2271))+(((-0.372)*cj0*py))+((x2269*x2273))+((x2269*x2278))+(((-1.0)*pp))+(((0.372)*px*sj0))+(((-1.0)*x2271*x2279))+((x2269*x2280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2281=pz*pz;
IkReal x2282=IKabs(pz);
IkReal x2283=x2281;
CheckValue<IkReal> x2289=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*x2282)),-1);
if(!x2289.valid){
continue;
}
IkReal x2284=x2289.value;
IkReal x2290 = x2283;
if(IKabs(x2290)==0){
continue;
}
IkReal x2285=pow(x2290,-0.5);
CheckValue<IkReal> x2291=IKPowWithIntegerCheck(x2282,-2);
if(!x2291.valid){
continue;
}
if((((1.0)+(((-0.0144080543786231)*x2281*(x2291.value))))) < -0.00001)
continue;
IkReal x2286=IKsqrt(((1.0)+(((-0.0144080543786231)*x2281*(x2291.value)))));
IkReal x2287=(x2281*x2284*x2285);
IkReal x2288=(pz*x2285*x2286);
if((x2283) < -0.00001)
continue;
CheckValue<IkReal> x2292=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x2283)))),-1);
if(!x2292.valid){
continue;
}
if( (((325.0)*pz*(x2292.value))) < -1-IKFAST_SINCOS_THRESH || (((325.0)*pz*(x2292.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2293 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x2293.valid){
continue;
}
IkReal gconst45=((3.14159265358979)+(((-1.0)*(IKasin(((325.0)*pz*(x2292.value))))))+(((-1.0)*(x2293.value))));
IkReal gconst46=((((0.12003355521946)*x2288))+(((322.650196429908)*x2287)));
IkReal gconst47=((((-0.992769835168946)*x2288))+(((39.0109054463244)*x2287)));
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x2294=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(pz*pz)))),-1);
if(!x2294.valid){
continue;
}
if( (((325.0)*pz*(x2294.value))) < -1-IKFAST_SINCOS_THRESH || (((325.0)*pz*(x2294.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2295 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x2295.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin(((325.0)*pz*(x2294.value))))+(x2295.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2296=pz*pz;
IkReal x2297=IKabs(pz);
IkReal x2298=x2296;
IkReal x2299=x2284;
IkReal x2305 = x2298;
if(IKabs(x2305)==0){
continue;
}
IkReal x2300=pow(x2305,-0.5);
IkReal x2301=x2286;
if((x2298) < -0.00001)
continue;
CheckValue<IkReal> x2306=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x2298)))),-1);
if(!x2306.valid){
continue;
}
if( (((325.0)*pz*(x2306.value))) < -1-IKFAST_SINCOS_THRESH || (((325.0)*pz*(x2306.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2302=((1.0)*(IKasin(((325.0)*pz*(x2306.value)))));
IkReal x2303=(x2296*x2299*x2300);
IkReal x2304=(pz*x2300*x2301);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=gconst46;
cj4=gconst47;
CheckValue<IkReal> x2307 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076910047281)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x2307.valid){
continue;
}
j4=((3.14159265)+(((-1.0)*x2302))+(((-1.0)*(x2307.value))));
CheckValue<IkReal> x2308 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x2308.valid){
continue;
}
IkReal gconst45=((3.14159265358979)+(((-1.0)*x2302))+(((-1.0)*(x2308.value))));
IkReal gconst46=((((0.12003355521946)*x2304))+(((322.650196429908)*x2303)));
IkReal gconst47=((((-0.992769835168946)*x2304))+(((39.0109054463244)*x2303)));
IkReal x2309=pz*pz;
IkReal x2310=((1.0)*cj3);
IkReal x2311=(py*pz*sj0);
IkReal x2312=(cj0*px*pz);
j1eval[0]=((IKabs(((((-1.0)*x2310*x2312))+(((-1.0)*x2310*x2311))+(((-1.0)*sj3*x2309)))))+(IKabs((((sj3*x2312))+((sj3*x2311))+(((-1.0)*x2309*x2310))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2313=cj0*cj0;
IkReal x2314=py*py;
IkReal x2315=px*px;
IkReal x2316=((0.2688)*gconst46);
IkReal x2317=(py*sj0);
IkReal x2318=(cj0*px);
IkReal x2319=((0.0325)*gconst47);
IkReal x2320=(pz*x2317);
IkReal x2321=(cj3*x2314);
IkReal x2322=(sj3*x2314);
IkReal x2323=((1.0)*x2313);
CheckValue<IkReal> x2324=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2318*x2319))+(((0.0325)*x2317))+(((0.0325)*x2318))+(((-1.0)*x2317*x2319))+(((-1.0)*x2316*x2317))+(((-1.0)*x2316*x2318)))),-1);
if(!x2324.valid){
continue;
}
CheckValue<IkReal> x2325 = IKatan2WithCheck(IkReal((((sj3*x2320))+(((-1.0)*x2321*x2323))+x2321+(((2.0)*cj3*x2317*x2318))+((cj3*x2313*x2315))+((pz*sj3*x2318)))),IkReal(((((-2.0)*sj3*x2317*x2318))+((cj3*x2320))+(((-1.0)*sj3*x2315*x2323))+((x2313*x2322))+((cj3*pz*x2318))+(((-1.0)*x2322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2325.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2324.value)))+(x2325.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2326=IKsin(j1);
IkReal x2327=IKcos(j1);
IkReal x2328=((0.0325)*gconst47);
IkReal x2329=((1.0)*pz);
IkReal x2330=((0.2688)*gconst46);
IkReal x2331=(pz*sj3);
IkReal x2332=(py*sj0);
IkReal x2333=(cj0*px);
IkReal x2334=((1.0)*x2326);
IkReal x2335=(cj3*x2333);
IkReal x2336=(sj3*x2327);
IkReal x2337=(cj3*x2327);
IkReal x2338=((0.065)*x2326);
IkReal x2339=(sj3*x2326);
IkReal x2340=(cj3*x2326);
evalcond[0]=((((-0.0325)*x2339))+(((-0.0325)*x2337))+pz+((x2330*x2337))+((x2330*x2339))+((x2328*x2337))+((x2328*x2339)));
evalcond[1]=((((-1.0)*x2332*x2337))+(((-1.0)*x2329*x2336))+(((-1.0)*sj3*x2333*x2334))+(((-1.0)*x2327*x2335))+((pz*x2340))+(((-1.0)*sj3*x2332*x2334)));
evalcond[2]=((((-0.0325)*x2336))+(((0.0325)*x2340))+(((-1.0)*x2330*x2340))+(((-1.0)*x2328*x2340))+((x2330*x2336))+(((-1.0)*x2332))+(((-1.0)*x2333))+((x2328*x2336)));
evalcond[3]=((0.0325)+(((-1.0)*x2330))+((x2332*x2336))+((x2333*x2336))+(((-1.0)*cj3*x2332*x2334))+(((-1.0)*x2329*x2337))+(((-1.0)*x2329*x2339))+(((-1.0)*x2334*x2335))+(((-1.0)*x2328)));
evalcond[4]=((0.03765744)+((x2331*x2338))+(((-0.065)*x2332*x2336))+(((0.065)*pz*x2337))+((cj3*x2332*x2338))+(((-0.372)*cj0*py))+((x2335*x2338))+(((-0.065)*x2333*x2336))+(((-1.0)*pp))+(((0.372)*px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2341=pz*pz;
IkReal x2342=((1.0)*cj3);
IkReal x2343=((0.0325)*pz);
IkReal x2344=(py*pz*sj0);
IkReal x2345=(cj0*px*pz);
CheckValue<IkReal> x2346 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x2341))+(((-1.0)*x2342*x2345))+(((-1.0)*x2342*x2344)))),IkReal(((((-1.0)*x2341*x2342))+((sj3*x2344))+((sj3*x2345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2346.valid){
continue;
}
CheckValue<IkReal> x2347=IKPowWithIntegerCheck(IKsign(((((0.2688)*gconst46*pz))+((gconst47*x2343))+(((-1.0)*x2343)))),-1);
if(!x2347.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2346.value)+(((1.5707963267949)*(x2347.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2348=IKsin(j1);
IkReal x2349=IKcos(j1);
IkReal x2350=((0.0325)*gconst47);
IkReal x2351=((1.0)*pz);
IkReal x2352=((0.2688)*gconst46);
IkReal x2353=(pz*sj3);
IkReal x2354=(py*sj0);
IkReal x2355=(cj0*px);
IkReal x2356=((1.0)*x2348);
IkReal x2357=(cj3*x2355);
IkReal x2358=(sj3*x2349);
IkReal x2359=(cj3*x2349);
IkReal x2360=((0.065)*x2348);
IkReal x2361=(sj3*x2348);
IkReal x2362=(cj3*x2348);
evalcond[0]=(((x2352*x2359))+(((-0.0325)*x2361))+((x2350*x2359))+((x2350*x2361))+pz+((x2352*x2361))+(((-0.0325)*x2359)));
evalcond[1]=((((-1.0)*x2349*x2357))+((pz*x2362))+(((-1.0)*x2354*x2359))+(((-1.0)*sj3*x2355*x2356))+(((-1.0)*sj3*x2354*x2356))+(((-1.0)*x2351*x2358)));
evalcond[2]=((((-1.0)*x2354))+(((-1.0)*x2355))+((x2352*x2358))+(((0.0325)*x2362))+((x2350*x2358))+(((-1.0)*x2350*x2362))+(((-0.0325)*x2358))+(((-1.0)*x2352*x2362)));
evalcond[3]=((0.0325)+(((-1.0)*x2356*x2357))+((x2354*x2358))+((x2355*x2358))+(((-1.0)*cj3*x2354*x2356))+(((-1.0)*x2351*x2361))+(((-1.0)*x2351*x2359))+(((-1.0)*x2350))+(((-1.0)*x2352)));
evalcond[4]=((0.03765744)+(((-0.065)*x2354*x2358))+(((-0.065)*x2355*x2358))+(((-0.372)*cj0*py))+(((-1.0)*pp))+(((0.065)*pz*x2359))+((cj3*x2354*x2360))+((x2353*x2360))+((x2357*x2360))+(((0.372)*px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
IkReal x2363=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2363);
rxp0_1=(px*r20);
rxp1_0=(r21*x2363);
rxp1_1=(px*r21);
rxp2_0=(r22*x2363);
rxp2_1=(px*r22);
IkReal x2364=cj4*cj4;
IkReal x2365=(cj0*px);
IkReal x2366=((0.2688)*sj4);
IkReal x2367=((211250.0)*cj4);
IkReal x2368=((1747200.0)*sj4);
IkReal x2369=(py*sj0);
IkReal x2370=((8.27076923076923)*sj4);
IkReal x2371=((0.0325)*cj4);
IkReal x2372=((7119719.0)*x2364);
j1eval[0]=(((x2365*x2370))+((cj4*x2369))+((cj4*x2365))+(((-1.0)*x2365))+(((-1.0)*x2369))+((x2369*x2370)));
j1eval[1]=IKsign((((x2365*x2371))+((x2365*x2366))+((x2366*x2369))+(((-0.0325)*x2369))+(((-0.0325)*x2365))+((x2369*x2371))));
j1eval[2]=((IKabs(((((7330969.0)*sj3))+(((-1.0)*sj3*x2372))+((cj4*sj3*x2368))+(((-1.0)*sj3*x2368))+(((-1.0)*sj3*x2367)))))+(IKabs(((((-1.0)*cj3*cj4*x2368))+((cj3*x2372))+(((-7330969.0)*cj3))+((cj3*x2368))+((cj3*x2367))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2373=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2373);
rxp0_1=(px*r20);
rxp1_0=(r21*x2373);
rxp1_1=(px*r21);
rxp2_0=(r22*x2373);
rxp2_1=(px*r22);
IkReal x2374=cj4*cj4;
IkReal x2375=((0.017472)*sj4);
IkReal x2376=((8.27076923076923)*sj4);
j1eval[0]=((34.7028118343195)+(((-33.7028118343195)*x2374))+((cj4*x2376))+(((-1.0)*x2376))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.07330969)+((cj4*x2375))+(((-1.0)*x2375))+(((-0.0021125)*cj4))+(((-0.07119719)*x2374))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x2377=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2377);
rxp0_1=(px*r20);
rxp1_0=(r21*x2377);
rxp1_1=(px*r21);
rxp2_0=(r22*x2377);
rxp2_1=(px*r22);
IkReal x2378=cj0*cj0;
IkReal x2379=py*py;
IkReal x2380=px*px;
IkReal x2381=(cj0*px);
IkReal x2382=(py*sj0);
IkReal x2383=((8.27076923076923)*sj4);
IkReal x2384=((0.0325)*cj4);
IkReal x2385=((0.2688)*sj4);
IkReal x2386=((1.0)*cj4);
IkReal x2387=(cj3*x2379);
IkReal x2388=(sj3*x2378);
j1eval[0]=((((-1.0)*x2381*x2383))+(((-1.0)*x2381*x2386))+x2381+x2382+(((-1.0)*x2382*x2386))+(((-1.0)*x2382*x2383)));
j1eval[1]=((IKabs(((((2.0)*cj3*x2381*x2382))+((cj3*x2378*x2380))+x2387+(((-1.0)*x2378*x2387)))))+(IKabs(((((-2.0)*sj3*x2381*x2382))+(((-1.0)*x2380*x2388))+((x2379*x2388))+(((-1.0)*sj3*x2379))))));
j1eval[2]=IKsign(((((-1.0)*x2381*x2385))+(((-1.0)*x2381*x2384))+(((0.0325)*x2381))+(((0.0325)*x2382))+(((-1.0)*x2382*x2385))+(((-1.0)*x2382*x2384))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2389=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2389);
rxp0_1=(px*r20);
rxp1_0=(r21*x2389);
rxp1_1=(px*r21);
rxp2_0=(r22*x2389);
rxp2_1=(px*r22);
sj4=0;
cj4=1.0;
j4=0;
IkReal x2390=(py*sj0);
IkReal x2391=((1.0)*cj3);
IkReal x2392=(cj0*px);
j1eval[0]=((IKabs(((((-1.0)*x2390*x2391))+(((-1.0)*x2391*x2392)))))+(IKabs((((sj3*x2390))+((sj3*x2392))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2393=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2393);
rxp0_1=(px*r20);
rxp1_0=(r21*x2393);
rxp1_1=(px*r21);
rxp2_0=(r22*x2393);
rxp2_1=(px*r22);
sj4=0;
cj4=1.0;
j4=0;
IkReal x2394=((1.0)*py*sj0);
IkReal x2395=((1.0)*cj0*px);
j1eval[0]=((IKabs(((((-1.0)*cj3*x2394))+(((-1.0)*cj3*x2395)))))+(IKabs(((((-1.0)*sj3*x2394))+(((-1.0)*sj3*x2395))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2396=((1.0)*cj3);
IkReal x2397=(cj0*px);
IkReal x2398=(py*sj0);
IkReal x2399=((1.0)*sj3);
CheckValue<IkReal> x2401 = IKatan2WithCheck(IkReal(((((-1.0)*x2396*x2397))+(((-1.0)*x2396*x2398)))),IkReal(((((-1.0)*x2398*x2399))+(((-1.0)*x2397*x2399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2401.valid){
continue;
}
IkReal x2400=x2401.value;
j1array[0]=((-1.0)*x2400);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2400)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2402=IKcos(j1);
IkReal x2403=IKsin(j1);
IkReal x2404=(py*sj0);
IkReal x2405=(cj0*px);
IkReal x2406=(sj3*x2402);
IkReal x2407=((1.0)*cj3*x2403);
evalcond[0]=((((-1.0)*x2405*x2407))+(((-1.0)*x2404*x2407))+((x2405*x2406))+((x2404*x2406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2408=(py*sj0);
IkReal x2409=((1.0)*cj3);
IkReal x2410=(cj0*px);
CheckValue<IkReal> x2412 = IKatan2WithCheck(IkReal((((sj3*x2408))+((sj3*x2410)))),IkReal(((((-1.0)*x2408*x2409))+(((-1.0)*x2409*x2410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2412.valid){
continue;
}
IkReal x2411=x2412.value;
j1array[0]=((-1.0)*x2411);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2411)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2413=IKcos(j1);
IkReal x2414=IKsin(j1);
IkReal x2415=(cj0*px);
IkReal x2416=(py*sj0);
IkReal x2417=((1.0)*cj3*x2413);
IkReal x2418=((1.0)*sj3*x2414);
evalcond[0]=((((-1.0)*x2416*x2417))+(((-1.0)*x2416*x2418))+(((-1.0)*x2415*x2417))+(((-1.0)*x2415*x2418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
IkReal x2419=((8188692373.0)*sj4);
j1eval[0]=((IKabs(((((-1855015500.0)*sj3))+((sj3*x2419)))))+(IKabs((((cj3*x2419))+(((-1855015500.0)*cj3))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
IkReal x2420=((8188692373.0)*sj4);
j1eval[0]=((IKabs(((((1855015500.0)*cj3))+(((-1.0)*cj3*x2420)))))+(IKabs(((((-1855015500.0)*sj3))+((sj3*x2420))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2421=((0.275965571689881)*sj4);
CheckValue<IkReal> x2423 = IKatan2WithCheck(IkReal(((((-0.0625155262443378)*sj3))+((sj3*x2421)))),IkReal(((((-1.0)*cj3*x2421))+(((0.0625155262443378)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2423.valid){
continue;
}
IkReal x2422=x2423.value;
j1array[0]=((-1.0)*x2422);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2422)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2424=IKcos(j1);
IkReal x2425=IKsin(j1);
IkReal x2426=((0.275965571689881)*sj4);
IkReal x2427=(sj3*x2425);
IkReal x2428=(cj3*x2424);
evalcond[0]=(((x2426*x2427))+((x2426*x2428))+(((-0.0625155262443378)*x2428))+(((-0.0625155262443378)*x2427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2429=((0.275965571689881)*sj4);
CheckValue<IkReal> x2431 = IKatan2WithCheck(IkReal(((((-0.0625155262443378)*cj3))+((cj3*x2429)))),IkReal(((((-0.0625155262443378)*sj3))+((sj3*x2429)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2431.valid){
continue;
}
IkReal x2430=x2431.value;
j1array[0]=((-1.0)*x2430);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2430)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2432=IKcos(j1);
IkReal x2433=IKsin(j1);
IkReal x2434=((0.275965571689881)*sj4);
IkReal x2435=(cj3*x2433);
IkReal x2436=(sj3*x2432);
evalcond[0]=((((-0.0625155262443378)*x2436))+(((-1.0)*x2434*x2435))+(((0.0625155262443378)*x2435))+((x2434*x2436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2437=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2437);
rxp0_1=0;
rxp1_0=(r21*x2437);
rxp1_1=0;
rxp2_0=(r22*x2437);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
IkReal x2438=((325.0)*cj3);
IkReal x2439=((325.0)*sj3);
IkReal x2440=((2688.0)*sj4);
j1eval[0]=((IKabs((((sj3*x2440))+(((-1.0)*x2439))+((cj4*x2439)))))+(IKabs(((((-1.0)*x2438))+((cj4*x2438))+((cj3*x2440))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2441=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2441);
rxp0_1=0;
rxp1_0=(r21*x2441);
rxp1_1=0;
rxp2_0=(r22*x2441);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
IkReal x2442=((325.0)*cj3);
IkReal x2443=((325.0)*sj3);
IkReal x2444=((2688.0)*sj4);
j1eval[0]=((IKabs((x2442+(((-1.0)*cj4*x2442))+(((-1.0)*cj3*x2444)))))+(IKabs((((sj3*x2444))+((cj4*x2443))+(((-1.0)*x2443))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2445=((0.0325)*cj3);
IkReal x2446=((0.0325)*sj3);
IkReal x2447=((0.2688)*sj4);
CheckValue<IkReal> x2449 = IKatan2WithCheck(IkReal((((sj3*x2447))+((cj4*x2446))+(((-1.0)*x2446)))),IkReal((x2445+(((-1.0)*cj4*x2445))+(((-1.0)*cj3*x2447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2449.valid){
continue;
}
IkReal x2448=x2449.value;
j1array[0]=((-1.0)*x2448);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2448)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2450=IKcos(j1);
IkReal x2451=IKsin(j1);
IkReal x2452=((0.2688)*sj4);
IkReal x2453=(sj3*x2451);
IkReal x2454=((0.0325)*cj3*x2450);
evalcond[0]=(((x2452*x2453))+((cj4*x2454))+(((-0.0325)*x2453))+(((-1.0)*x2454))+((cj3*x2450*x2452))+(((0.0325)*cj4*x2453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2455=((0.0325)*cj3);
IkReal x2456=((0.0325)*sj3);
IkReal x2457=((0.2688)*sj4);
CheckValue<IkReal> x2459 = IKatan2WithCheck(IkReal((((cj3*x2457))+((cj4*x2455))+(((-1.0)*x2455)))),IkReal((((sj3*x2457))+((cj4*x2456))+(((-1.0)*x2456)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2459.valid){
continue;
}
IkReal x2458=x2459.value;
j1array[0]=((-1.0)*x2458);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2458)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2460=IKcos(j1);
IkReal x2461=IKsin(j1);
IkReal x2462=((0.2688)*sj4);
IkReal x2463=((0.0325)*cj4);
IkReal x2464=(sj3*x2460);
IkReal x2465=(cj3*x2461);
evalcond[0]=(((x2462*x2464))+(((-1.0)*x2463*x2465))+(((0.0325)*x2465))+(((-0.0325)*x2464))+((x2463*x2464))+(((-1.0)*x2462*x2465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2466=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2466);
rxp0_1=0;
rxp1_0=(r21*x2466);
rxp1_1=0;
rxp2_0=(r22*x2466);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
IkReal x2467=((325.0)*cj3);
IkReal x2468=((325.0)*sj3);
IkReal x2469=((2688.0)*sj4);
j1eval[0]=((IKabs((((sj3*x2469))+((cj4*x2468))+(((-1.0)*x2468)))))+(IKabs((((cj3*x2469))+((cj4*x2467))+(((-1.0)*x2467))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2470=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2470);
rxp0_1=0;
rxp1_0=(r21*x2470);
rxp1_1=0;
rxp2_0=(r22*x2470);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
IkReal x2471=((325.0)*cj3);
IkReal x2472=((325.0)*sj3);
IkReal x2473=((2688.0)*sj4);
j1eval[0]=((IKabs(((((-1.0)*x2472))+((cj4*x2472))+((sj3*x2473)))))+(IKabs((x2471+(((-1.0)*cj4*x2471))+(((-1.0)*cj3*x2473))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2474=((0.0325)*cj3);
IkReal x2475=((0.0325)*sj3);
IkReal x2476=((0.2688)*sj4);
CheckValue<IkReal> x2478 = IKatan2WithCheck(IkReal(((((-1.0)*x2475))+((cj4*x2475))+((sj3*x2476)))),IkReal((x2474+(((-1.0)*cj4*x2474))+(((-1.0)*cj3*x2476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2478.valid){
continue;
}
IkReal x2477=x2478.value;
j1array[0]=((-1.0)*x2477);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2477)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2479=IKcos(j1);
IkReal x2480=IKsin(j1);
IkReal x2481=((0.2688)*sj4);
IkReal x2482=(sj3*x2480);
IkReal x2483=((0.0325)*cj3*x2479);
evalcond[0]=(((cj3*x2479*x2481))+(((0.0325)*cj4*x2482))+((x2481*x2482))+(((-1.0)*x2483))+(((-0.0325)*x2482))+((cj4*x2483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2484=((0.0325)*cj3);
IkReal x2485=((0.0325)*sj3);
IkReal x2486=((0.2688)*sj4);
CheckValue<IkReal> x2488 = IKatan2WithCheck(IkReal((((cj3*x2486))+(((-1.0)*x2484))+((cj4*x2484)))),IkReal((((sj3*x2486))+(((-1.0)*x2485))+((cj4*x2485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2488.valid){
continue;
}
IkReal x2487=x2488.value;
j1array[0]=((-1.0)*x2487);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2487)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2489=IKcos(j1);
IkReal x2490=IKsin(j1);
IkReal x2491=((0.2688)*sj4);
IkReal x2492=((0.0325)*cj4);
IkReal x2493=(sj3*x2489);
IkReal x2494=(cj3*x2490);
evalcond[0]=(((x2492*x2493))+(((-1.0)*x2491*x2494))+(((-0.0325)*x2493))+((x2491*x2493))+(((0.0325)*x2494))+(((-1.0)*x2492*x2494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2495=((-1.0)*px);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x2495);
rxp1_2=(r11*x2495);
rxp2_2=(r12*x2495);
IkReal x2496=((325.0)*cj3);
IkReal x2497=((325.0)*sj3);
IkReal x2498=((2688.0)*sj4);
j1eval[0]=((IKabs(((((-1.0)*x2496))+((cj3*x2498))+((cj4*x2496)))))+(IKabs((((sj3*x2498))+(((-1.0)*x2497))+((cj4*x2497))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2499=((-1.0)*px);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x2499);
rxp1_2=(r11*x2499);
rxp2_2=(r12*x2499);
IkReal x2500=((325.0)*cj3);
IkReal x2501=((325.0)*sj3);
IkReal x2502=((2688.0)*sj4);
j1eval[0]=((IKabs(((((-1.0)*x2501))+((cj4*x2501))+((sj3*x2502)))))+(IKabs((x2500+(((-1.0)*cj4*x2500))+(((-1.0)*cj3*x2502))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2503=((0.0325)*cj3);
IkReal x2504=((0.0325)*sj3);
IkReal x2505=((0.2688)*sj4);
CheckValue<IkReal> x2507 = IKatan2WithCheck(IkReal(((((-1.0)*x2504))+((cj4*x2504))+((sj3*x2505)))),IkReal((x2503+(((-1.0)*cj4*x2503))+(((-1.0)*cj3*x2505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2507.valid){
continue;
}
IkReal x2506=x2507.value;
j1array[0]=((-1.0)*x2506);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2506)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2508=IKcos(j1);
IkReal x2509=IKsin(j1);
IkReal x2510=((0.2688)*sj4);
IkReal x2511=(sj3*x2509);
IkReal x2512=((0.0325)*cj3*x2508);
evalcond[0]=((((-1.0)*x2512))+((cj4*x2512))+(((-0.0325)*x2511))+((x2510*x2511))+(((0.0325)*cj4*x2511))+((cj3*x2508*x2510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2513=((0.0325)*cj3);
IkReal x2514=((0.0325)*sj3);
IkReal x2515=((0.2688)*sj4);
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal(((((-1.0)*x2513))+((cj4*x2513))+((cj3*x2515)))),IkReal(((((-1.0)*x2514))+((cj4*x2514))+((sj3*x2515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
IkReal x2516=x2517.value;
j1array[0]=((-1.0)*x2516);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2516)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2518=IKcos(j1);
IkReal x2519=IKsin(j1);
IkReal x2520=((0.2688)*sj4);
IkReal x2521=((0.0325)*cj4);
IkReal x2522=(sj3*x2518);
IkReal x2523=(cj3*x2519);
evalcond[0]=((((-1.0)*x2520*x2523))+(((0.0325)*x2523))+((x2521*x2522))+((x2520*x2522))+(((-1.0)*x2521*x2523))+(((-0.0325)*x2522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2524=((-1.0)*px);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x2524);
rxp1_2=(r11*x2524);
rxp2_2=(r12*x2524);
IkReal x2525=((325.0)*cj3);
IkReal x2526=((325.0)*sj3);
IkReal x2527=((2688.0)*sj4);
j1eval[0]=((IKabs((((cj3*x2527))+((cj4*x2525))+(((-1.0)*x2525)))))+(IKabs((((sj3*x2527))+((cj4*x2526))+(((-1.0)*x2526))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2528=((-1.0)*px);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x2528);
rxp1_2=(r11*x2528);
rxp2_2=(r12*x2528);
IkReal x2529=((325.0)*cj3);
IkReal x2530=((325.0)*sj3);
IkReal x2531=((2688.0)*sj4);
j1eval[0]=((IKabs(((((-1.0)*cj4*x2529))+x2529+(((-1.0)*cj3*x2531)))))+(IKabs((((sj3*x2531))+((cj4*x2530))+(((-1.0)*x2530))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2532=((0.0325)*cj3);
IkReal x2533=((0.0325)*sj3);
IkReal x2534=((0.2688)*sj4);
CheckValue<IkReal> x2536 = IKatan2WithCheck(IkReal((((sj3*x2534))+((cj4*x2533))+(((-1.0)*x2533)))),IkReal((x2532+(((-1.0)*cj4*x2532))+(((-1.0)*cj3*x2534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2536.valid){
continue;
}
IkReal x2535=x2536.value;
j1array[0]=((-1.0)*x2535);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2535)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2537=IKcos(j1);
IkReal x2538=IKsin(j1);
IkReal x2539=((0.2688)*sj4);
IkReal x2540=(sj3*x2538);
IkReal x2541=((0.0325)*cj3*x2537);
evalcond[0]=(((x2539*x2540))+((cj4*x2541))+(((0.0325)*cj4*x2540))+(((-1.0)*x2541))+(((-0.0325)*x2540))+((cj3*x2537*x2539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x2542=((0.0325)*cj3);
IkReal x2543=((0.0325)*sj3);
IkReal x2544=((0.2688)*sj4);
CheckValue<IkReal> x2546 = IKatan2WithCheck(IkReal((((cj3*x2544))+((cj4*x2542))+(((-1.0)*x2542)))),IkReal((((sj3*x2544))+((cj4*x2543))+(((-1.0)*x2543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2546.valid){
continue;
}
IkReal x2545=x2546.value;
j1array[0]=((-1.0)*x2545);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x2545)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x2547=IKcos(j1);
IkReal x2548=IKsin(j1);
IkReal x2549=((0.2688)*sj4);
IkReal x2550=((0.0325)*cj4);
IkReal x2551=(sj3*x2547);
IkReal x2552=(cj3*x2548);
evalcond[0]=((((-0.0325)*x2551))+(((-1.0)*x2549*x2552))+((x2550*x2551))+((x2549*x2551))+(((-1.0)*x2550*x2552))+(((0.0325)*x2552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2553=cj0*cj0;
IkReal x2554=py*py;
IkReal x2555=px*px;
IkReal x2556=(cj0*px);
IkReal x2557=((0.0325)*cj4);
IkReal x2558=(py*sj0);
IkReal x2559=((0.2688)*sj4);
IkReal x2560=(cj3*x2554);
IkReal x2561=(sj3*x2553);
CheckValue<IkReal> x2562 = IKatan2WithCheck(IkReal((x2560+(((2.0)*cj3*x2556*x2558))+((cj3*x2553*x2555))+(((-1.0)*x2553*x2560)))),IkReal(((((-1.0)*x2555*x2561))+(((-1.0)*sj3*x2554))+((x2554*x2561))+(((-2.0)*sj3*x2556*x2558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2562.valid){
continue;
}
CheckValue<IkReal> x2563=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2556*x2557))+(((-1.0)*x2556*x2559))+(((-1.0)*x2558*x2559))+(((-1.0)*x2557*x2558))+(((0.0325)*x2556))+(((0.0325)*x2558)))),-1);
if(!x2563.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2562.value)+(((1.5707963267949)*(x2563.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2564=IKcos(j1);
IkReal x2565=IKsin(j1);
IkReal x2566=((0.0325)*cj4);
IkReal x2567=(cj0*px);
IkReal x2568=(py*sj0);
IkReal x2569=((0.2688)*sj4);
IkReal x2570=(cj3*x2564);
IkReal x2571=((1.0)*x2568);
IkReal x2572=(sj3*x2565);
IkReal x2573=(sj3*x2564);
IkReal x2574=(cj3*x2565);
IkReal x2575=(x2567*x2574);
evalcond[0]=((((-1.0)*x2571*x2572))+(((-1.0)*x2570*x2571))+(((-1.0)*x2567*x2572))+(((-1.0)*x2567*x2570)));
evalcond[1]=((0.0325)+(((-1.0)*x2571*x2574))+((x2568*x2573))+((x2567*x2573))+(((-1.0)*x2566))+(((-1.0)*x2569))+(((-1.0)*x2575)));
evalcond[2]=(((x2566*x2572))+((x2566*x2570))+((x2569*x2572))+((x2569*x2570))+(((-0.0325)*x2570))+(((-0.0325)*x2572)));
evalcond[3]=((((-1.0)*x2569*x2574))+(((-1.0)*x2566*x2574))+(((-1.0)*x2567))+((x2566*x2573))+(((-1.0)*x2571))+((x2569*x2573))+(((-0.0325)*x2573))+(((0.0325)*x2574)));
evalcond[4]=((0.03765744)+(((-1.0)*(px*px)))+(((-0.065)*x2567*x2573))+(((-0.372)*cj0*py))+(((0.065)*x2575))+(((-1.0)*(py*py)))+(((0.372)*px*sj0))+(((0.065)*x2568*x2574))+(((-0.065)*x2568*x2573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2576=((0.017472)*sj4);
IkReal x2577=((0.0325)*sj3);
IkReal x2578=(cj0*px);
IkReal x2579=((0.2688)*sj4);
IkReal x2580=((0.0325)*cj3);
IkReal x2581=(py*sj0);
IkReal x2582=(cj4*x2581);
CheckValue<IkReal> x2583 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x2578*x2579))+(((-1.0)*cj3*x2579*x2581))+((x2580*x2581))+((x2578*x2580))+(((-1.0)*x2580*x2582))+(((-1.0)*cj4*x2578*x2580)))),IkReal((((sj3*x2578*x2579))+((x2577*x2582))+(((-1.0)*x2577*x2581))+((sj3*x2579*x2581))+((cj4*x2577*x2578))+(((-1.0)*x2577*x2578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2583.valid){
continue;
}
CheckValue<IkReal> x2584=IKPowWithIntegerCheck(IKsign(((0.07330969)+(((-0.07119719)*(cj4*cj4)))+((cj4*x2576))+(((-0.0021125)*cj4))+(((-1.0)*x2576)))),-1);
if(!x2584.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2583.value)+(((1.5707963267949)*(x2584.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2585=IKcos(j1);
IkReal x2586=IKsin(j1);
IkReal x2587=((0.0325)*cj4);
IkReal x2588=(cj0*px);
IkReal x2589=(py*sj0);
IkReal x2590=((0.2688)*sj4);
IkReal x2591=(cj3*x2585);
IkReal x2592=((1.0)*x2589);
IkReal x2593=(sj3*x2586);
IkReal x2594=(sj3*x2585);
IkReal x2595=(cj3*x2586);
IkReal x2596=(x2588*x2595);
evalcond[0]=((((-1.0)*x2588*x2591))+(((-1.0)*x2588*x2593))+(((-1.0)*x2591*x2592))+(((-1.0)*x2592*x2593)));
evalcond[1]=((0.0325)+(((-1.0)*x2596))+(((-1.0)*x2587))+(((-1.0)*x2590))+((x2589*x2594))+((x2588*x2594))+(((-1.0)*x2592*x2595)));
evalcond[2]=((((-0.0325)*x2593))+(((-0.0325)*x2591))+((x2590*x2593))+((x2590*x2591))+((x2587*x2591))+((x2587*x2593)));
evalcond[3]=((((0.0325)*x2595))+(((-1.0)*x2590*x2595))+(((-1.0)*x2588))+(((-1.0)*x2592))+(((-1.0)*x2587*x2595))+(((-0.0325)*x2594))+((x2590*x2594))+((x2587*x2594)));
evalcond[4]=((0.03765744)+(((0.065)*x2596))+(((-1.0)*(px*px)))+(((0.065)*x2589*x2595))+(((-0.372)*cj0*py))+(((-0.065)*x2589*x2594))+(((-0.065)*x2588*x2594))+(((-1.0)*(py*py)))+(((0.372)*px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2597=cj4*cj4;
IkReal x2598=((0.017472)*sj4);
IkReal x2599=(cj4*sj3);
IkReal x2600=(cj3*cj4);
IkReal x2601=(py*sj0);
IkReal x2602=((0.2688)*sj4);
IkReal x2603=((0.0325)*cj4);
IkReal x2604=(cj0*px);
IkReal x2605=((0.07119719)*x2597);
CheckValue<IkReal> x2606 = IKatan2WithCheck(IkReal((((cj3*x2598))+(((-0.07330969)*cj3))+(((0.0021125)*x2600))+((cj3*x2605))+(((-1.0)*x2598*x2600)))),IkReal(((((-0.0021125)*x2599))+(((-1.0)*sj3*x2605))+((x2598*x2599))+(((0.07330969)*sj3))+(((-1.0)*sj3*x2598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2606.valid){
continue;
}
CheckValue<IkReal> x2607=IKPowWithIntegerCheck(IKsign((((x2603*x2604))+((x2602*x2604))+((x2601*x2603))+((x2601*x2602))+(((-0.0325)*x2604))+(((-0.0325)*x2601)))),-1);
if(!x2607.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2606.value)+(((1.5707963267949)*(x2607.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2608=IKcos(j1);
IkReal x2609=IKsin(j1);
IkReal x2610=((0.0325)*cj4);
IkReal x2611=(cj0*px);
IkReal x2612=(py*sj0);
IkReal x2613=((0.2688)*sj4);
IkReal x2614=(cj3*x2608);
IkReal x2615=((1.0)*x2612);
IkReal x2616=(sj3*x2609);
IkReal x2617=(sj3*x2608);
IkReal x2618=(cj3*x2609);
IkReal x2619=(x2611*x2618);
evalcond[0]=((((-1.0)*x2611*x2616))+(((-1.0)*x2611*x2614))+(((-1.0)*x2615*x2616))+(((-1.0)*x2614*x2615)));
evalcond[1]=((0.0325)+(((-1.0)*x2619))+((x2611*x2617))+(((-1.0)*x2613))+(((-1.0)*x2610))+((x2612*x2617))+(((-1.0)*x2615*x2618)));
evalcond[2]=(((x2613*x2614))+((x2613*x2616))+((x2610*x2616))+((x2610*x2614))+(((-0.0325)*x2614))+(((-0.0325)*x2616)));
evalcond[3]=(((x2613*x2617))+(((-1.0)*x2610*x2618))+((x2610*x2617))+(((-1.0)*x2611))+(((-0.0325)*x2617))+(((-1.0)*x2613*x2618))+(((-1.0)*x2615))+(((0.0325)*x2618)));
evalcond[4]=((0.03765744)+(((-1.0)*(px*px)))+(((-0.372)*cj0*py))+(((0.065)*x2612*x2618))+(((-0.065)*x2612*x2617))+(((-0.065)*x2611*x2617))+(((-1.0)*(py*py)))+(((0.372)*px*sj0))+(((0.065)*x2619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2620=((0.017472)*sj4);
IkReal x2621=((0.0325)*sj3);
IkReal x2622=(cj0*px);
IkReal x2623=(cj4*pz);
IkReal x2624=(py*sj0);
IkReal x2625=((0.2688)*sj4);
IkReal x2626=(cj3*pz);
IkReal x2627=((0.0325)*cj3);
IkReal x2628=(x2624*x2627);
IkReal x2629=(x2624*x2625);
CheckValue<IkReal> x2630 = IKatan2WithCheck(IkReal(((((-1.0)*x2622*x2627))+((cj4*x2628))+((cj3*x2629))+((cj4*x2622*x2627))+(((-1.0)*pz*x2621))+((x2621*x2623))+(((-1.0)*x2628))+((pz*sj3*x2625))+((cj3*x2622*x2625)))),IkReal(((((-1.0)*sj3*x2629))+(((-1.0)*sj3*x2622*x2625))+(((-1.0)*cj4*x2621*x2624))+(((-1.0)*cj4*x2621*x2622))+(((-0.0325)*x2626))+((x2621*x2622))+((x2621*x2624))+((x2623*x2627))+((x2625*x2626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2630.valid){
continue;
}
CheckValue<IkReal> x2631=IKPowWithIntegerCheck(IKsign(((-0.07330969)+(((-1.0)*cj4*x2620))+(((0.07119719)*(cj4*cj4)))+(((0.0021125)*cj4))+x2620)),-1);
if(!x2631.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2630.value)+(((1.5707963267949)*(x2631.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2632=IKcos(j1);
IkReal x2633=IKsin(j1);
IkReal x2634=((0.0325)*cj4);
IkReal x2635=(cj0*px);
IkReal x2636=((0.2688)*sj4);
IkReal x2637=((1.0)*sj3);
IkReal x2638=(py*sj0);
IkReal x2639=((0.0325)*sj3);
IkReal x2640=((0.065)*pz);
IkReal x2641=(cj3*x2632);
IkReal x2642=(cj3*x2633);
IkReal x2643=(sj3*x2632);
IkReal x2644=(sj3*x2633);
IkReal x2645=((0.065)*x2643);
evalcond[0]=((((-0.0325)*x2641))+((x2636*x2641))+((x2636*x2644))+pz+((x2634*x2641))+((x2634*x2644))+(((-1.0)*x2633*x2639)));
evalcond[1]=((((-1.0)*x2638*x2641))+(((-1.0)*x2635*x2641))+(((-1.0)*x2633*x2635*x2637))+(((-1.0)*x2633*x2637*x2638))+((pz*x2642))+(((-1.0)*pz*x2632*x2637)));
evalcond[2]=((((0.0325)*x2642))+(((-1.0)*x2634*x2642))+(((-1.0)*x2632*x2639))+((x2636*x2643))+(((-1.0)*x2636*x2642))+(((-1.0)*x2635))+(((-1.0)*x2638))+((x2634*x2643)));
evalcond[3]=((0.0325)+(((-1.0)*x2638*x2642))+(((-1.0)*x2635*x2642))+((x2638*x2643))+(((-1.0)*x2636))+(((-1.0)*x2634))+((x2635*x2643))+(((-1.0)*pz*x2641))+(((-1.0)*pz*x2633*x2637)));
evalcond[4]=((0.03765744)+(((-1.0)*x2635*x2645))+(((-0.372)*cj0*py))+(((-1.0)*pp))+(((0.065)*x2635*x2642))+(((0.065)*x2638*x2642))+((x2640*x2641))+((x2640*x2644))+(((0.372)*px*sj0))+(((-1.0)*x2638*x2645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2646=pz*pz;
IkReal x2647=cj4*cj4;
IkReal x2648=(cj3*pz);
IkReal x2649=(py*sj0);
IkReal x2650=(cj0*px);
IkReal x2651=((0.2688)*sj4);
IkReal x2652=((0.0021125)*cj4);
IkReal x2653=((0.017472)*sj4);
IkReal x2654=(pz*sj3);
IkReal x2655=((0.0325)*cj4);
IkReal x2656=((0.07119719)*x2647);
CheckValue<IkReal> x2657=IKPowWithIntegerCheck(IKsign(((((0.0325)*x2650))+(((0.0325)*x2649))+(((-1.0)*x2650*x2651))+(((-1.0)*x2650*x2655))+(((-1.0)*x2649*x2655))+(((-1.0)*x2649*x2651)))),-1);
if(!x2657.valid){
continue;
}
CheckValue<IkReal> x2658 = IKatan2WithCheck(IkReal((((x2649*x2654))+(((-1.0)*cj3*x2653))+(((-1.0)*cj3*x2652))+(((-1.0)*cj3*x2656))+((x2650*x2654))+(((-1.0)*cj3*x2646))+((cj3*cj4*x2653))+(((0.07330969)*cj3)))),IkReal(((((-1.0)*cj4*sj3*x2653))+((x2648*x2649))+((x2648*x2650))+(((-0.07330969)*sj3))+((sj3*x2652))+((sj3*x2653))+((sj3*x2656))+((sj3*x2646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2658.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2657.value)))+(x2658.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2659=IKcos(j1);
IkReal x2660=IKsin(j1);
IkReal x2661=((0.0325)*cj4);
IkReal x2662=(cj0*px);
IkReal x2663=((0.2688)*sj4);
IkReal x2664=((1.0)*sj3);
IkReal x2665=(py*sj0);
IkReal x2666=((0.0325)*sj3);
IkReal x2667=((0.065)*pz);
IkReal x2668=(cj3*x2659);
IkReal x2669=(cj3*x2660);
IkReal x2670=(sj3*x2659);
IkReal x2671=(sj3*x2660);
IkReal x2672=((0.065)*x2670);
evalcond[0]=(((x2661*x2671))+((x2661*x2668))+(((-1.0)*x2660*x2666))+(((-0.0325)*x2668))+((x2663*x2671))+((x2663*x2668))+pz);
evalcond[1]=((((-1.0)*x2660*x2664*x2665))+(((-1.0)*x2662*x2668))+(((-1.0)*x2660*x2662*x2664))+((pz*x2669))+(((-1.0)*x2665*x2668))+(((-1.0)*pz*x2659*x2664)));
evalcond[2]=(((x2661*x2670))+(((-1.0)*x2665))+(((-1.0)*x2662))+(((0.0325)*x2669))+((x2663*x2670))+(((-1.0)*x2663*x2669))+(((-1.0)*x2659*x2666))+(((-1.0)*x2661*x2669)));
evalcond[3]=((0.0325)+(((-1.0)*x2662*x2669))+((x2662*x2670))+(((-1.0)*x2661))+(((-1.0)*x2663))+(((-1.0)*pz*x2660*x2664))+(((-1.0)*x2665*x2669))+(((-1.0)*pz*x2668))+((x2665*x2670)));
evalcond[4]=((0.03765744)+(((0.065)*x2662*x2669))+((x2667*x2671))+(((-0.372)*cj0*py))+((x2667*x2668))+(((-1.0)*x2662*x2672))+(((-1.0)*pp))+(((-1.0)*x2665*x2672))+(((0.065)*x2665*x2669))+(((0.372)*px*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2673=pz*pz;
IkReal x2674=((1.0)*cj3);
IkReal x2675=((0.0325)*pz);
IkReal x2676=(py*pz*sj0);
IkReal x2677=(cj0*px*pz);
CheckValue<IkReal> x2678 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x2673))+(((-1.0)*x2674*x2677))+(((-1.0)*x2674*x2676)))),IkReal(((((-1.0)*x2673*x2674))+((sj3*x2676))+((sj3*x2677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2678.valid){
continue;
}
CheckValue<IkReal> x2679=IKPowWithIntegerCheck(IKsign((((cj4*x2675))+(((0.2688)*pz*sj4))+(((-1.0)*x2675)))),-1);
if(!x2679.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2678.value)+(((1.5707963267949)*(x2679.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2680=IKcos(j1);
IkReal x2681=IKsin(j1);
IkReal x2682=((0.0325)*cj4);
IkReal x2683=(cj0*px);
IkReal x2684=((0.2688)*sj4);
IkReal x2685=((1.0)*sj3);
IkReal x2686=(py*sj0);
IkReal x2687=((0.0325)*sj3);
IkReal x2688=((0.065)*pz);
IkReal x2689=(cj3*x2680);
IkReal x2690=(cj3*x2681);
IkReal x2691=(sj3*x2680);
IkReal x2692=(sj3*x2681);
IkReal x2693=((0.065)*x2691);
evalcond[0]=(((x2684*x2692))+(((-0.0325)*x2689))+((x2684*x2689))+(((-1.0)*x2681*x2687))+pz+((x2682*x2692))+((x2682*x2689)));
evalcond[1]=((((-1.0)*x2686*x2689))+(((-1.0)*x2681*x2685*x2686))+((pz*x2690))+(((-1.0)*x2681*x2683*x2685))+(((-1.0)*x2683*x2689))+(((-1.0)*pz*x2680*x2685)));
evalcond[2]=(((x2684*x2691))+(((-1.0)*x2680*x2687))+(((-1.0)*x2682*x2690))+(((0.0325)*x2690))+(((-1.0)*x2684*x2690))+((x2682*x2691))+(((-1.0)*x2686))+(((-1.0)*x2683)));
evalcond[3]=((0.0325)+(((-1.0)*pz*x2689))+((x2683*x2691))+(((-1.0)*pz*x2681*x2685))+((x2686*x2691))+(((-1.0)*x2684))+(((-1.0)*x2682))+(((-1.0)*x2683*x2690))+(((-1.0)*x2686*x2690)));
evalcond[4]=((0.03765744)+(((0.065)*x2683*x2690))+(((-1.0)*x2683*x2693))+(((-0.372)*cj0*py))+(((-1.0)*pp))+(((-1.0)*x2686*x2693))+(((0.065)*x2686*x2690))+(((0.372)*px*sj0))+((x2688*x2689))+((x2688*x2692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2694=((0.0325)*cj4);
IkReal x2695=(cj0*px);
IkReal x2696=(py*sj0);
IkReal x2697=(pz*sj2);
IkReal x2698=(cj4*x2697);
IkReal x2699=(sj4*x2696);
j1eval[0]=(((sj4*x2697))+((cj4*x2695))+((cj4*x2696))+(((8.27076923076923)*x2699))+(((-1.0)*x2696))+(((-1.0)*x2695))+(((-8.27076923076923)*x2698))+(((-10.3107692307692)*x2697))+(((8.27076923076923)*sj4*x2695)));
j1eval[1]=IKsign(((((-0.0325)*x2696))+(((-0.0325)*x2695))+(((-0.2688)*x2698))+(((0.2688)*sj4*x2695))+(((-0.3351)*x2697))+((x2694*x2695))+((x2694*x2696))+(((0.2688)*x2699))+(((0.0325)*sj4*x2697))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2700=(pz*sj4);
IkReal x2701=(cj4*pz);
IkReal x2702=((1.0)*sj4);
IkReal x2703=((0.0325)*sj4);
IkReal x2704=((8.27076923076923)*cj4);
IkReal x2705=((0.2688)*cj4);
IkReal x2706=(cj0*px*sj2);
IkReal x2707=(py*sj0*sj2);
j1eval[0]=(x2701+(((-1.0)*x2702*x2706))+(((-1.0)*x2702*x2707))+((x2704*x2706))+((x2704*x2707))+(((8.27076923076923)*x2700))+(((-1.0)*pz))+(((10.3107692307692)*x2706))+(((10.3107692307692)*x2707)));
j1eval[1]=IKsign(((((0.0325)*x2701))+((x2705*x2706))+((x2705*x2707))+(((0.3351)*x2706))+(((0.3351)*x2707))+(((-0.0325)*pz))+(((0.2688)*x2700))+(((-1.0)*x2703*x2707))+(((-1.0)*x2703*x2706))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2708=cj0*cj0;
IkReal x2709=py*py;
IkReal x2710=(cj2*x2709);
IkReal x2711=(x2710+(((2.0)*cj0*cj2*px*py*sj0))+((cj2*(pz*pz)))+(((-1.0)*x2708*x2710))+((cj2*x2708*(px*px))));
j1eval[0]=x2711;
j1eval[1]=IKsign(x2711);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x2712=cj4*cj4;
IkReal x2713=(py*sj0);
IkReal x2714=((0.0325)*sj4);
IkReal x2715=(cj4*pz);
IkReal x2716=((0.2688)*cj4);
IkReal x2717=(cj0*px);
IkReal x2718=(cj4*sj4);
IkReal x2719=(pz*sj4);
IkReal x2720=((8.27076923076923)*cj4);
IkReal x2721=((1.0)*pz);
j1eval[0]=((((-1.0)*x2715))+(((-8.27076923076923)*x2719))+(((-1.0)*x2713*x2720))+(((-10.3107692307692)*x2713))+(((-10.3107692307692)*x2717))+pz+(((-1.0)*x2717*x2720))+((sj4*x2713))+((sj4*x2717)));
j1eval[1]=IKsign(((((-0.3351)*x2717))+(((-0.3351)*x2713))+(((0.0325)*pz))+(((-1.0)*x2713*x2716))+((x2713*x2714))+(((-0.2688)*x2719))+(((-1.0)*x2716*x2717))+(((-0.0325)*x2715))+((x2714*x2717))));
j1eval[2]=((IKabs(((0.01962675)+(((-0.07119719)*x2718))+(((-0.00215475)*cj4))+(((-1.0)*x2713*x2721))+(((-0.017472)*x2712))+(((-1.0)*x2717*x2721))+(((-0.09113113)*sj4)))))+(IKabs(((-0.11334826)+(((-0.18014976)*cj4))+(((-0.07119719)*x2712))+(((0.017472)*x2718))+(pz*pz)+(((0.0217815)*sj4))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x2722=cj4*cj4;
IkReal x2723=((0.017472)*sj4);
IkReal x2724=(cj4*pz);
IkReal x2725=(cj0*px);
IkReal x2726=((0.2688)*sj4);
IkReal x2727=(py*sj0);
IkReal x2728=((8.27076923076923)*sj4);
IkReal x2729=((0.0325)*cj4);
IkReal x2730=((1.0)*pz);
IkReal x2731=(pz*sj4);
j1eval[0]=(x2731+(((-10.3107692307692)*pz))+(((-1.0)*x2727))+(((-1.0)*x2725))+((x2727*x2728))+((x2725*x2728))+(((-8.27076923076923)*x2724))+((cj4*x2725))+((cj4*x2727)));
j1eval[1]=((IKabs(((-0.01962675)+(((0.00215475)*cj4))+(((-1.0)*x2727*x2730))+(((0.017472)*x2722))+(((-1.0)*x2725*x2730))+(((0.07119719)*cj4*sj4))+(((0.09113113)*sj4)))))+(IKabs(((0.07330969)+(((-1.0)*pz*x2730))+(((-0.0021125)*cj4))+(((-0.07119719)*x2722))+(((-1.0)*x2723))+((cj4*x2723))))));
j1eval[2]=IKsign(((((-0.2688)*x2724))+((x2726*x2727))+((x2727*x2729))+((x2725*x2729))+((x2725*x2726))+(((-0.0325)*x2725))+(((-0.0325)*x2727))+(((0.0325)*x2731))+(((-0.3351)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x2732=(cj0*px);
IkReal x2733=(pz*sj4);
IkReal x2734=(cj4*pz);
IkReal x2735=((0.0325)*sj4);
IkReal x2736=(py*sj0);
IkReal x2737=((1.0)*sj4);
IkReal x2738=((8.27076923076923)*cj4);
IkReal x2739=((0.2688)*cj4);
j1eval[0]=(x2734+(((10.3107692307692)*x2732))+(((10.3107692307692)*x2736))+(((-1.0)*x2736*x2737))+(((-1.0)*pz))+((x2732*x2738))+(((8.27076923076923)*x2733))+((x2736*x2738))+(((-1.0)*x2732*x2737)));
j1eval[1]=IKsign(((((0.3351)*x2732))+(((0.3351)*x2736))+(((-0.0325)*pz))+(((-1.0)*x2735*x2736))+(((0.2688)*x2733))+((x2732*x2739))+((x2736*x2739))+(((0.0325)*x2734))+(((-1.0)*x2732*x2735))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2740=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2740);
rxp0_1=(px*r20);
rxp1_0=(r21*x2740);
rxp1_1=(px*r21);
rxp2_0=(r22*x2740);
rxp2_1=(px*r22);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2741=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2741);
rxp0_1=(px*r20);
rxp1_0=(r21*x2741);
rxp1_1=(px*r21);
rxp2_0=(r22*x2741);
rxp2_1=(px*r22);
IkReal x2742=cj0*cj0;
IkReal x2743=py*py;
IkReal x2744=(py*sj0);
IkReal x2745=(cj0*px);
j1eval[0]=((((-1.0)*x2745))+(((-1.0)*x2744)));
j1eval[1]=(x2743+(((-1.0)*x2742*x2743))+((x2742*(px*px)))+(((2.0)*x2744*x2745)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2746=py*py;
IkReal x2747=px*px;
IkReal x2748=cj0*cj0;
IkReal x2749=(py*sj0);
IkReal x2750=(px*py);
IkReal x2751=((10000.0)*cj0);
IkReal x2752=(cj0*px);
IkReal x2753=((650.0)*x2746);
IkReal x2754=((2982.0)*cj0*sj0);
CheckValue<IkReal> x2755=IKPowWithIntegerCheck(((((-1.0)*px*x2751))+(((-10000.0)*x2749))),-1);
if(!x2755.valid){
continue;
}
CheckValue<IkReal> x2756=IKPowWithIntegerCheck((x2753+(((650.0)*x2747*x2748))+(((-1.0)*x2748*x2753))+(((1300.0)*x2749*x2752))),-1);
if(!x2756.valid){
continue;
}
if( IKabs(((-6039.0)*(x2755.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2756.value)*(((((-1.0)*px*x2746*x2751))+(((-10000.0)*x2747*x2749))+((x2746*x2754))+(((-1.0)*x2751*(px*px*px)))+(((-2982.0)*x2750))+(((3424.644)*x2749))+(((3424.644)*x2752))+(((5964.0)*x2748*x2750))+(((-1.0)*x2747*x2754))+(((-10000.0)*x2749*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6039.0)*(x2755.value)))+IKsqr(((x2756.value)*(((((-1.0)*px*x2746*x2751))+(((-10000.0)*x2747*x2749))+((x2746*x2754))+(((-1.0)*x2751*(px*px*px)))+(((-2982.0)*x2750))+(((3424.644)*x2749))+(((3424.644)*x2752))+(((5964.0)*x2748*x2750))+(((-1.0)*x2747*x2754))+(((-10000.0)*x2749*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-6039.0)*(x2755.value)), ((x2756.value)*(((((-1.0)*px*x2746*x2751))+(((-10000.0)*x2747*x2749))+((x2746*x2754))+(((-1.0)*x2751*(px*px*px)))+(((-2982.0)*x2750))+(((3424.644)*x2749))+(((3424.644)*x2752))+(((5964.0)*x2748*x2750))+(((-1.0)*x2747*x2754))+(((-10000.0)*x2749*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2757=IKcos(j1);
IkReal x2758=IKsin(j1);
IkReal x2759=(py*sj0);
IkReal x2760=(cj0*px);
IkReal x2761=((0.065)*x2757);
IkReal x2762=((1.0)*x2758);
IkReal x2763=((0.6702)*x2758);
evalcond[0]=((-0.6039)*x2757);
evalcond[1]=(((x2757*x2760))+((x2757*x2759)));
evalcond[2]=((((-1.0)*x2760))+(((-1.0)*x2759))+(((0.6039)*x2758)));
evalcond[3]=((0.6039)+(((-1.0)*x2760*x2762))+(((-1.0)*x2759*x2762)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-1.0)*(px*px)))+((x2759*x2763))+(((-1.0)*x2760*x2761))+(((-1.0)*x2759*x2761))+(((0.2982)*cj0*py))+((x2760*x2763))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2764=py*py;
IkReal x2765=cj0*cj0;
IkReal x2766=px*px;
IkReal x2767=(cj0*px);
IkReal x2768=(py*sj0);
IkReal x2769=((6702.0)*x2765);
CheckValue<IkReal> x2770=IKPowWithIntegerCheck(((((-392.535)*x2768))+(((-392.535)*x2767))),-1);
if(!x2770.valid){
continue;
}
if( IKabs(((((1.65590329524756)*x2768))+(((1.65590329524756)*x2767)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2770.value)*(((376.04478582)+(((-1800.8298)*cj0*py))+(((1800.8298)*px*sj0))+(((-13404.0)*x2767*x2768))+(((-663.0)*x2764))+(((6039.0)*x2766))+((x2764*x2769))+(((-1.0)*x2766*x2769)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.65590329524756)*x2768))+(((1.65590329524756)*x2767))))+IKsqr(((x2770.value)*(((376.04478582)+(((-1800.8298)*cj0*py))+(((1800.8298)*px*sj0))+(((-13404.0)*x2767*x2768))+(((-663.0)*x2764))+(((6039.0)*x2766))+((x2764*x2769))+(((-1.0)*x2766*x2769))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.65590329524756)*x2768))+(((1.65590329524756)*x2767))), ((x2770.value)*(((376.04478582)+(((-1800.8298)*cj0*py))+(((1800.8298)*px*sj0))+(((-13404.0)*x2767*x2768))+(((-663.0)*x2764))+(((6039.0)*x2766))+((x2764*x2769))+(((-1.0)*x2766*x2769))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2771=IKcos(j1);
IkReal x2772=IKsin(j1);
IkReal x2773=(py*sj0);
IkReal x2774=(cj0*px);
IkReal x2775=((0.065)*x2771);
IkReal x2776=((1.0)*x2772);
IkReal x2777=((0.6702)*x2772);
evalcond[0]=((-0.6039)*x2771);
evalcond[1]=(((x2771*x2774))+((x2771*x2773)));
evalcond[2]=((((-1.0)*x2773))+(((-1.0)*x2774))+(((0.6039)*x2772)));
evalcond[3]=((0.6039)+(((-1.0)*x2773*x2776))+(((-1.0)*x2774*x2776)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+((x2774*x2777))+(((-1.0)*(px*px)))+(((-1.0)*x2773*x2775))+(((0.2982)*cj0*py))+(((-1.0)*x2774*x2775))+(((-1.0)*(py*py)))+((x2773*x2777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2778=cj0*cj0;
IkReal x2779=py*py;
IkReal x2780=cj4*cj4;
IkReal x2781=((0.017472)*sj4);
IkReal x2782=(py*sj0);
IkReal x2783=((0.0325)*sj4);
IkReal x2784=(cj0*px);
IkReal x2785=((0.2688)*cj4);
IkReal x2786=((0.0325)*pz);
CheckValue<IkReal> x2787 = IKatan2WithCheck(IkReal(((-0.07330969)+x2779+x2781+(((2.0)*x2782*x2784))+(((-1.0)*x2778*x2779))+(((-1.0)*cj4*x2781))+(((0.0021125)*cj4))+(((0.07119719)*x2780))+((x2778*(px*px))))),IkReal(((-0.01962675)+(((0.00215475)*cj4))+(((0.07119719)*cj4*sj4))+((pz*x2784))+((pz*x2782))+(((0.09113113)*sj4))+(((0.017472)*x2780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2787.valid){
continue;
}
CheckValue<IkReal> x2788=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2786))+((x2784*x2785))+((x2782*x2785))+(((-1.0)*x2783*x2784))+(((-1.0)*x2782*x2783))+(((0.2688)*pz*sj4))+((cj4*x2786))+(((0.3351)*x2782))+(((0.3351)*x2784)))),-1);
if(!x2788.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2787.value)+(((1.5707963267949)*(x2788.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2789=IKcos(j1);
IkReal x2790=IKsin(j1);
IkReal x2791=(cj0*px);
IkReal x2792=((0.0325)*sj4);
IkReal x2793=((0.2688)*sj4);
IkReal x2794=(py*sj0);
IkReal x2795=((0.2688)*cj4);
IkReal x2796=((0.0325)*cj4);
IkReal x2797=((1.0)*x2790);
IkReal x2798=(pz*x2789);
IkReal x2799=((0.065)*x2789);
IkReal x2800=((0.6702)*x2790);
evalcond[0]=((0.0325)+(((-1.0)*x2793))+(((-1.0)*x2796))+((x2789*x2791))+((x2789*x2794))+(((-1.0)*pz*x2797)));
evalcond[1]=((0.3351)+x2795+(((-1.0)*x2792))+(((-1.0)*x2791*x2797))+(((-1.0)*x2798))+(((-1.0)*x2794*x2797)));
evalcond[2]=((((-1.0)*x2789*x2795))+((x2789*x2792))+((x2790*x2793))+((x2790*x2796))+pz+(((-0.3351)*x2789))+(((-0.0325)*x2790)));
evalcond[3]=((((-1.0)*x2790*x2792))+((x2789*x2793))+((x2789*x2796))+((x2790*x2795))+(((-1.0)*x2794))+(((-1.0)*x2791))+(((0.3351)*x2790))+(((-0.0325)*x2789)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-1.0)*x2791*x2799))+((x2791*x2800))+(((0.065)*pz*x2790))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.6702)*x2798))+((x2794*x2800))+(((-1.0)*x2794*x2799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2801=cj4*cj4;
IkReal x2802=((0.017472)*sj4);
IkReal x2803=((0.0325)*cj4);
IkReal x2804=(cj0*px);
IkReal x2805=(py*sj0);
IkReal x2806=((1.0)*pz);
IkReal x2807=((0.2688)*sj4);
CheckValue<IkReal> x2808 = IKatan2WithCheck(IkReal(((-0.01962675)+(((-1.0)*x2805*x2806))+(((0.00215475)*cj4))+(((0.07119719)*cj4*sj4))+(((-1.0)*x2804*x2806))+(((0.017472)*x2801))+(((0.09113113)*sj4)))),IkReal(((0.07330969)+(((-1.0)*x2802))+((cj4*x2802))+(((-1.0)*pz*x2806))+(((-0.07119719)*x2801))+(((-0.0021125)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2808.valid){
continue;
}
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(IKsign(((((-0.2688)*cj4*pz))+((x2805*x2807))+((x2804*x2807))+(((-0.0325)*x2804))+(((-0.0325)*x2805))+((x2803*x2805))+((x2803*x2804))+(((-0.3351)*pz))+(((0.0325)*pz*sj4)))),-1);
if(!x2809.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2808.value)+(((1.5707963267949)*(x2809.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2810=IKcos(j1);
IkReal x2811=IKsin(j1);
IkReal x2812=(cj0*px);
IkReal x2813=((0.0325)*sj4);
IkReal x2814=((0.2688)*sj4);
IkReal x2815=(py*sj0);
IkReal x2816=((0.2688)*cj4);
IkReal x2817=((0.0325)*cj4);
IkReal x2818=((1.0)*x2811);
IkReal x2819=(pz*x2810);
IkReal x2820=((0.065)*x2810);
IkReal x2821=((0.6702)*x2811);
evalcond[0]=((0.0325)+((x2810*x2815))+((x2810*x2812))+(((-1.0)*pz*x2818))+(((-1.0)*x2817))+(((-1.0)*x2814)));
evalcond[1]=((0.3351)+(((-1.0)*x2819))+(((-1.0)*x2812*x2818))+(((-1.0)*x2815*x2818))+(((-1.0)*x2813))+x2816);
evalcond[2]=(((x2810*x2813))+(((-1.0)*x2810*x2816))+(((-0.3351)*x2810))+pz+(((-0.0325)*x2811))+((x2811*x2814))+((x2811*x2817)));
evalcond[3]=(((x2810*x2817))+((x2810*x2814))+(((-1.0)*x2812))+(((-1.0)*x2815))+(((-0.0325)*x2810))+(((0.3351)*x2811))+((x2811*x2816))+(((-1.0)*x2811*x2813)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-1.0)*x2812*x2820))+((x2815*x2821))+(((0.065)*pz*x2811))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x2812*x2821))+(((0.6702)*x2819))+(((-1.0)*x2815*x2820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2822=cj4*cj4;
IkReal x2823=(cj0*px);
IkReal x2824=((0.0325)*pz);
IkReal x2825=((0.0325)*sj4);
IkReal x2826=(py*sj0);
IkReal x2827=(cj4*sj4);
IkReal x2828=((1.0)*pz);
IkReal x2829=((0.2688)*cj4);
CheckValue<IkReal> x2830=IKPowWithIntegerCheck(IKsign(((((-0.2688)*pz*sj4))+(((-1.0)*cj4*x2824))+((x2823*x2825))+(((-1.0)*x2826*x2829))+((x2825*x2826))+(((-0.3351)*x2823))+(((-0.3351)*x2826))+(((-1.0)*x2823*x2829))+x2824)),-1);
if(!x2830.valid){
continue;
}
CheckValue<IkReal> x2831 = IKatan2WithCheck(IkReal(((-0.11334826)+(((-0.07119719)*x2822))+(((-0.18014976)*cj4))+(pz*pz)+(((0.017472)*x2827))+(((0.0217815)*sj4)))),IkReal(((0.01962675)+(((-0.07119719)*x2827))+(((-0.00215475)*cj4))+(((-1.0)*x2826*x2828))+(((-1.0)*x2823*x2828))+(((-0.09113113)*sj4))+(((-0.017472)*x2822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2831.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2830.value)))+(x2831.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2832=IKcos(j1);
IkReal x2833=IKsin(j1);
IkReal x2834=(cj0*px);
IkReal x2835=((0.0325)*sj4);
IkReal x2836=((0.2688)*sj4);
IkReal x2837=(py*sj0);
IkReal x2838=((0.2688)*cj4);
IkReal x2839=((0.0325)*cj4);
IkReal x2840=((1.0)*x2833);
IkReal x2841=(pz*x2832);
IkReal x2842=((0.065)*x2832);
IkReal x2843=((0.6702)*x2833);
evalcond[0]=((0.0325)+(((-1.0)*x2836))+(((-1.0)*x2839))+(((-1.0)*pz*x2840))+((x2832*x2834))+((x2832*x2837)));
evalcond[1]=((0.3351)+(((-1.0)*x2835))+(((-1.0)*x2841))+x2838+(((-1.0)*x2837*x2840))+(((-1.0)*x2834*x2840)));
evalcond[2]=((((-0.0325)*x2833))+pz+(((-0.3351)*x2832))+(((-1.0)*x2832*x2838))+((x2833*x2836))+((x2833*x2839))+((x2832*x2835)));
evalcond[3]=((((0.3351)*x2833))+(((-1.0)*x2834))+(((-1.0)*x2837))+(((-0.0325)*x2832))+(((-1.0)*x2833*x2835))+((x2833*x2838))+((x2832*x2836))+((x2832*x2839)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+((x2837*x2843))+(((0.6702)*x2841))+(((0.065)*pz*x2833))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x2834*x2843))+(((-1.0)*x2837*x2842))+(((-1.0)*x2834*x2842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2844=cj4*cj4;
IkReal x2845=(py*sj0);
IkReal x2846=((0.0325)*sj4);
IkReal x2847=((1.0)*pz);
IkReal x2848=(cj0*px);
IkReal x2849=((0.2688)*cj4);
IkReal x2850=(cj4*sj4);
IkReal x2851=(pz*sj4);
IkReal x2852=((8.27076923076923)*cj4);
IkReal x2853=((0.0325)*pz);
IkReal x2854=((1.0)*sj4);
j1eval[0]=((((-1.0)*x2845*x2854))+((x2848*x2852))+(((10.3107692307692)*x2845))+(((10.3107692307692)*x2848))+(((-1.0)*cj4*x2847))+pz+(((-1.0)*x2848*x2854))+((x2845*x2852))+(((-8.27076923076923)*x2851)));
j1eval[1]=IKsign(((((-1.0)*x2846*x2848))+(((-1.0)*x2845*x2846))+(((0.3351)*x2845))+(((0.3351)*x2848))+((x2848*x2849))+(((-1.0)*cj4*x2853))+(((-0.2688)*x2851))+((x2845*x2849))+x2853));
j1eval[2]=((IKabs(((-0.11334826)+(((-0.18014976)*cj4))+(((-0.07119719)*x2844))+(pz*pz)+(((0.017472)*x2850))+(((0.0217815)*sj4)))))+(IKabs(((-0.01962675)+(((0.00215475)*cj4))+(((-1.0)*x2845*x2847))+(((0.07119719)*x2850))+(((0.09113113)*sj4))+(((0.017472)*x2844))+(((-1.0)*x2847*x2848))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2855=cj4*cj4;
IkReal x2856=((1.0)*pz);
IkReal x2857=((0.017472)*sj4);
IkReal x2858=(cj4*pz);
IkReal x2859=(cj0*px);
IkReal x2860=((0.2688)*sj4);
IkReal x2861=(py*sj0);
IkReal x2862=((8.27076923076923)*sj4);
IkReal x2863=((0.0325)*cj4);
j1eval[0]=(((cj4*x2861))+(((10.3107692307692)*pz))+(((-1.0)*x2861))+((cj4*x2859))+((x2861*x2862))+(((8.27076923076923)*x2858))+((x2859*x2862))+(((-1.0)*x2859))+(((-1.0)*sj4*x2856)));
j1eval[1]=((IKabs(((0.07330969)+(((-0.07119719)*x2855))+((cj4*x2857))+(((-1.0)*pz*x2856))+(((-0.0021125)*cj4))+(((-1.0)*x2857)))))+(IKabs(((0.01962675)+(((-0.00215475)*cj4))+(((-1.0)*x2856*x2859))+(((-0.017472)*x2855))+(((-0.09113113)*sj4))+(((-1.0)*x2856*x2861))+(((-0.07119719)*cj4*sj4))))));
j1eval[2]=IKsign(((((-0.0325)*pz*sj4))+(((0.3351)*pz))+(((-0.0325)*x2859))+(((0.2688)*x2858))+((x2861*x2863))+((x2859*x2860))+((x2859*x2863))+(((-0.0325)*x2861))+((x2860*x2861))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2864=cj0*cj0;
IkReal x2865=py*py;
IkReal x2866=((((-1.0)*x2864*x2865))+(pz*pz)+(((2.0)*cj0*px*py*sj0))+x2865+((x2864*(px*px))));
j1eval[0]=x2866;
j1eval[1]=IKsign(x2866);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2867=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2867);
rxp0_1=(px*r20);
rxp1_0=(r21*x2867);
rxp1_1=(px*r21);
rxp2_0=(r22*x2867);
rxp2_1=(px*r22);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2868=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2868);
rxp0_1=(px*r20);
rxp1_0=(r21*x2868);
rxp1_1=(px*r21);
rxp2_0=(r22*x2868);
rxp2_1=(px*r22);
IkReal x2869=py*py;
IkReal x2870=cj0*cj0;
IkReal x2871=(cj0*px);
IkReal x2872=(py*sj0);
j1eval[0]=(x2872+x2871);
j1eval[1]=((((-1.0)*x2869))+((x2869*x2870))+(((-1.0)*x2870*(px*px)))+(((-2.0)*x2871*x2872)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2873=px*px;
IkReal x2874=py*py;
IkReal x2875=cj0*cj0;
IkReal x2876=(px*py);
IkReal x2877=((10000.0)*cj0);
IkReal x2878=(py*sj0);
IkReal x2879=(cj0*sj0);
IkReal x2880=((650.0)*x2875);
CheckValue<IkReal> x2881=IKPowWithIntegerCheck((((px*x2877))+(((10000.0)*x2878))),-1);
if(!x2881.valid){
continue;
}
CheckValue<IkReal> x2882=IKPowWithIntegerCheck(((((-1.0)*x2873*x2880))+((x2874*x2880))+(((-1300.0)*x2876*x2879))+(((-650.0)*x2874))),-1);
if(!x2882.valid){
continue;
}
if( IKabs(((-6039.0)*(x2881.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2882.value)*((((px*x2874*x2877))+(((-5964.0)*x2875*x2876))+(((-3424.644)*cj0*px))+(((2982.0)*x2876))+(((-3424.644)*x2878))+(((10000.0)*x2873*x2878))+(((2982.0)*x2873*x2879))+(((-2982.0)*x2874*x2879))+(((10000.0)*x2878*(py*py)))+((x2877*(px*px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6039.0)*(x2881.value)))+IKsqr(((x2882.value)*((((px*x2874*x2877))+(((-5964.0)*x2875*x2876))+(((-3424.644)*cj0*px))+(((2982.0)*x2876))+(((-3424.644)*x2878))+(((10000.0)*x2873*x2878))+(((2982.0)*x2873*x2879))+(((-2982.0)*x2874*x2879))+(((10000.0)*x2878*(py*py)))+((x2877*(px*px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-6039.0)*(x2881.value)), ((x2882.value)*((((px*x2874*x2877))+(((-5964.0)*x2875*x2876))+(((-3424.644)*cj0*px))+(((2982.0)*x2876))+(((-3424.644)*x2878))+(((10000.0)*x2873*x2878))+(((2982.0)*x2873*x2879))+(((-2982.0)*x2874*x2879))+(((10000.0)*x2878*(py*py)))+((x2877*(px*px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2883=IKcos(j1);
IkReal x2884=IKsin(j1);
IkReal x2885=(py*sj0);
IkReal x2886=(cj0*px);
IkReal x2887=((0.065)*x2883);
IkReal x2888=((0.6702)*x2884);
evalcond[0]=((0.6039)*x2883);
evalcond[1]=(((x2883*x2885))+((x2883*x2886)));
evalcond[2]=((0.6039)+((x2884*x2885))+((x2884*x2886)));
evalcond[3]=((((-1.0)*x2886))+(((-1.0)*x2885))+(((-0.6039)*x2884)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-1.0)*(px*px)))+(((-1.0)*x2885*x2888))+(((-1.0)*x2885*x2887))+(((0.2982)*cj0*py))+(((-1.0)*x2886*x2887))+(((-1.0)*x2886*x2888))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2889=py*py;
IkReal x2890=cj0*cj0;
IkReal x2891=px*px;
IkReal x2892=(cj0*px);
IkReal x2893=(py*sj0);
IkReal x2894=((6702.0)*x2890);
CheckValue<IkReal> x2895=IKPowWithIntegerCheck(((((-392.535)*x2892))+(((-392.535)*x2893))),-1);
if(!x2895.valid){
continue;
}
if( IKabs(((((-1.65590329524756)*x2893))+(((-1.65590329524756)*x2892)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2895.value)*(((376.04478582)+(((-1800.8298)*cj0*py))+(((-1.0)*x2891*x2894))+((x2889*x2894))+(((1800.8298)*px*sj0))+(((-663.0)*x2889))+(((6039.0)*x2891))+(((-13404.0)*x2892*x2893)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.65590329524756)*x2893))+(((-1.65590329524756)*x2892))))+IKsqr(((x2895.value)*(((376.04478582)+(((-1800.8298)*cj0*py))+(((-1.0)*x2891*x2894))+((x2889*x2894))+(((1800.8298)*px*sj0))+(((-663.0)*x2889))+(((6039.0)*x2891))+(((-13404.0)*x2892*x2893))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.65590329524756)*x2893))+(((-1.65590329524756)*x2892))), ((x2895.value)*(((376.04478582)+(((-1800.8298)*cj0*py))+(((-1.0)*x2891*x2894))+((x2889*x2894))+(((1800.8298)*px*sj0))+(((-663.0)*x2889))+(((6039.0)*x2891))+(((-13404.0)*x2892*x2893))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2896=IKcos(j1);
IkReal x2897=IKsin(j1);
IkReal x2898=(py*sj0);
IkReal x2899=(cj0*px);
IkReal x2900=((0.065)*x2896);
IkReal x2901=((0.6702)*x2897);
evalcond[0]=((0.6039)*x2896);
evalcond[1]=(((x2896*x2899))+((x2896*x2898)));
evalcond[2]=((0.6039)+((x2897*x2898))+((x2897*x2899)));
evalcond[3]=((((-1.0)*x2898))+(((-1.0)*x2899))+(((-0.6039)*x2897)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-1.0)*(px*px)))+(((-1.0)*x2898*x2901))+(((-1.0)*x2898*x2900))+(((0.2982)*cj0*py))+(((-1.0)*x2899*x2900))+(((-1.0)*x2899*x2901))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2902=cj0*cj0;
IkReal x2903=py*py;
IkReal x2904=(py*sj0);
IkReal x2905=((0.0325)*sj4);
IkReal x2906=((0.2688)*cj4);
IkReal x2907=(cj0*px);
IkReal x2908=((0.2688)*sj4);
IkReal x2909=((0.0325)*pz);
IkReal x2910=((0.0325)*cj4);
CheckValue<IkReal> x2911 = IKatan2WithCheck(IkReal(((((-1.0)*x2906*x2907))+(((-1.0)*x2904*x2906))+((x2905*x2907))+((x2904*x2905))+(((-1.0)*cj4*x2909))+(((-0.3351)*x2904))+(((-0.3351)*x2907))+(((-1.0)*pz*x2908))+x2909)),IkReal((((x2907*x2910))+((x2904*x2908))+((pz*x2905))+((x2904*x2910))+((x2907*x2908))+(((-0.3351)*pz))+(((-1.0)*pz*x2906))+(((-0.0325)*x2907))+(((-0.0325)*x2904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2911.valid){
continue;
}
CheckValue<IkReal> x2912=IKPowWithIntegerCheck(IKsign((((x2902*(px*px)))+(pz*pz)+(((2.0)*x2904*x2907))+x2903+(((-1.0)*x2902*x2903)))),-1);
if(!x2912.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2911.value)+(((1.5707963267949)*(x2912.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2913=IKsin(j1);
IkReal x2914=IKcos(j1);
IkReal x2915=((0.0325)*sj4);
IkReal x2916=(cj0*px);
IkReal x2917=(py*sj0);
IkReal x2918=((0.2688)*sj4);
IkReal x2919=((0.2688)*cj4);
IkReal x2920=((0.0325)*cj4);
IkReal x2921=((0.6702)*x2913);
IkReal x2922=(pz*x2914);
IkReal x2923=(pz*x2913);
IkReal x2924=((0.065)*x2914);
evalcond[0]=((0.3351)+((x2913*x2916))+((x2913*x2917))+x2919+x2922+(((-1.0)*x2915)));
evalcond[1]=((0.0325)+((x2914*x2917))+((x2914*x2916))+(((-1.0)*x2920))+(((-1.0)*x2923))+(((-1.0)*x2918)));
evalcond[2]=(((x2914*x2919))+((x2913*x2920))+(((0.3351)*x2914))+(((-1.0)*x2914*x2915))+pz+(((-0.0325)*x2913))+((x2913*x2918)));
evalcond[3]=(((x2914*x2918))+(((-1.0)*x2913*x2919))+((x2914*x2920))+(((-0.0325)*x2914))+((x2913*x2915))+(((-1.0)*x2917))+(((-1.0)*x2916))+(((-0.3351)*x2913)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((0.065)*x2923))+(((-1.0)*x2916*x2921))+(((-1.0)*x2916*x2924))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-1.0)*x2917*x2924))+(((-1.0)*x2917*x2921))+(((-0.6702)*x2922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2925=cj4*cj4;
IkReal x2926=((0.017472)*sj4);
IkReal x2927=(py*sj0);
IkReal x2928=((0.2688)*sj4);
IkReal x2929=((0.0325)*cj4);
IkReal x2930=(cj0*px);
IkReal x2931=((1.0)*pz);
CheckValue<IkReal> x2932=IKPowWithIntegerCheck(IKsign((((x2929*x2930))+(((-0.0325)*x2930))+(((-0.0325)*pz*sj4))+((x2928*x2930))+(((0.3351)*pz))+(((0.2688)*cj4*pz))+(((-0.0325)*x2927))+((x2927*x2929))+((x2927*x2928)))),-1);
if(!x2932.valid){
continue;
}
CheckValue<IkReal> x2933 = IKatan2WithCheck(IkReal(((0.01962675)+(((-1.0)*x2930*x2931))+(((-1.0)*x2927*x2931))+(((-0.00215475)*cj4))+(((-0.017472)*x2925))+(((-0.09113113)*sj4))+(((-0.07119719)*cj4*sj4)))),IkReal(((0.07330969)+(((-0.07119719)*x2925))+(((-1.0)*x2926))+(((-0.0021125)*cj4))+((cj4*x2926))+(((-1.0)*pz*x2931)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2933.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2932.value)))+(x2933.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2934=IKsin(j1);
IkReal x2935=IKcos(j1);
IkReal x2936=((0.0325)*sj4);
IkReal x2937=(cj0*px);
IkReal x2938=(py*sj0);
IkReal x2939=((0.2688)*sj4);
IkReal x2940=((0.2688)*cj4);
IkReal x2941=((0.0325)*cj4);
IkReal x2942=((0.6702)*x2934);
IkReal x2943=(pz*x2935);
IkReal x2944=(pz*x2934);
IkReal x2945=((0.065)*x2935);
evalcond[0]=((0.3351)+(((-1.0)*x2936))+((x2934*x2937))+((x2934*x2938))+x2943+x2940);
evalcond[1]=((0.0325)+(((-1.0)*x2944))+(((-1.0)*x2939))+(((-1.0)*x2941))+((x2935*x2938))+((x2935*x2937)));
evalcond[2]=(((x2935*x2940))+(((-0.0325)*x2934))+(((0.3351)*x2935))+(((-1.0)*x2935*x2936))+pz+((x2934*x2939))+((x2934*x2941)));
evalcond[3]=(((x2935*x2941))+(((-1.0)*x2934*x2940))+(((-0.0325)*x2935))+(((-0.3351)*x2934))+((x2935*x2939))+(((-1.0)*x2937))+(((-1.0)*x2938))+((x2934*x2936)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((0.065)*x2944))+(((-0.6702)*x2943))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-1.0)*x2938*x2942))+(((-1.0)*x2938*x2945))+(((-1.0)*x2937*x2945))+(((-1.0)*x2937*x2942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2946=cj4*cj4;
IkReal x2947=(cj0*px);
IkReal x2948=(py*sj0);
IkReal x2949=((0.0325)*sj4);
IkReal x2950=((0.2688)*cj4);
IkReal x2951=((1.0)*pz);
IkReal x2952=((0.0325)*pz);
IkReal x2953=(cj4*sj4);
CheckValue<IkReal> x2954=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*x2952))+(((-0.2688)*pz*sj4))+((x2947*x2950))+((x2948*x2950))+(((-1.0)*x2948*x2949))+(((-1.0)*x2947*x2949))+(((0.3351)*x2947))+(((0.3351)*x2948))+x2952)),-1);
if(!x2954.valid){
continue;
}
CheckValue<IkReal> x2955 = IKatan2WithCheck(IkReal(((-0.11334826)+(((0.017472)*x2953))+(((-0.18014976)*cj4))+(pz*pz)+(((-0.07119719)*x2946))+(((0.0217815)*sj4)))),IkReal(((-0.01962675)+(((-1.0)*x2947*x2951))+(((-1.0)*x2948*x2951))+(((0.00215475)*cj4))+(((0.017472)*x2946))+(((0.09113113)*sj4))+(((0.07119719)*x2953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2955.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2954.value)))+(x2955.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2956=IKsin(j1);
IkReal x2957=IKcos(j1);
IkReal x2958=((0.0325)*sj4);
IkReal x2959=(cj0*px);
IkReal x2960=(py*sj0);
IkReal x2961=((0.2688)*sj4);
IkReal x2962=((0.2688)*cj4);
IkReal x2963=((0.0325)*cj4);
IkReal x2964=((0.6702)*x2956);
IkReal x2965=(pz*x2957);
IkReal x2966=(pz*x2956);
IkReal x2967=((0.065)*x2957);
evalcond[0]=((0.3351)+((x2956*x2960))+(((-1.0)*x2958))+x2965+x2962+((x2956*x2959)));
evalcond[1]=((0.0325)+(((-1.0)*x2966))+((x2957*x2959))+(((-1.0)*x2963))+(((-1.0)*x2961))+((x2957*x2960)));
evalcond[2]=(((x2956*x2963))+((x2956*x2961))+((x2957*x2962))+pz+(((-1.0)*x2957*x2958))+(((-0.0325)*x2956))+(((0.3351)*x2957)));
evalcond[3]=((((-1.0)*x2959))+(((-1.0)*x2960))+((x2957*x2963))+((x2957*x2961))+(((-0.3351)*x2956))+(((-1.0)*x2956*x2962))+(((-0.0325)*x2957))+((x2956*x2958)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((0.065)*x2966))+(((-0.6702)*x2965))+(((-1.0)*x2959*x2967))+(((-1.0)*x2959*x2964))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-1.0)*x2960*x2967))+(((-1.0)*x2960*x2964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x2968=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2968);
rxp0_1=(px*r20);
rxp1_0=(r21*x2968);
rxp1_1=(px*r21);
rxp2_0=(r22*x2968);
rxp2_1=(px*r22);
IkReal x2969=((1.0)*sj2);
j1eval[0]=sj2;
j1eval[1]=((((-1.0)*cj0*px*x2969))+(((-1.0)*py*sj0*x2969)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2970=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2970);
rxp0_1=(px*r20);
rxp1_0=(r21*x2970);
rxp1_1=(px*r21);
rxp2_0=(r22*x2970);
rxp2_1=(px*r22);
IkReal x2971=cj0*cj0;
IkReal x2972=py*py;
IkReal x2973=(cj0*px);
IkReal x2974=(py*sj0*sj2);
IkReal x2975=(sj2*x2972);
j1eval[0]=((((-1.0)*x2974))+(((-1.0)*sj2*x2973)));
j1eval[1]=(((sj2*x2971*(px*px)))+(((2.0)*x2973*x2974))+(((-1.0)*x2971*x2975))+x2975);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2976=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2976);
rxp0_1=(px*r20);
rxp1_0=(r21*x2976);
rxp1_1=(px*r21);
rxp2_0=(r22*x2976);
rxp2_1=(px*r22);
IkReal x2977=py*py;
IkReal x2978=cj0*cj0;
IkReal x2979=((1.0)*cj2);
IkReal x2980=(cj0*px);
IkReal x2981=(cj2*py*sj0);
j1eval[0]=(((cj2*x2980))+x2981);
j1eval[1]=((((-1.0)*x2977*x2979))+(((-2.0)*x2980*x2981))+(((-1.0)*x2978*x2979*(px*px)))+((cj2*x2977*x2978)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2982=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2982);
rxp0_1=(px*r20);
rxp1_0=(r21*x2982);
rxp1_1=(px*r21);
rxp2_0=(r22*x2982);
rxp2_1=(px*r22);
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2983=(cj0*px);
IkReal x2984=(py*sj0);
op[0]=((((-1.0)*x2983))+(((-1.0)*x2984)));
op[1]=0;
op[2]=(x2983+x2984);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2985=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2985);
rxp0_1=(px*r20);
rxp1_0=(r21*x2985);
rxp1_1=(px*r21);
rxp2_0=(r22*x2985);
rxp2_1=(px*r22);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2986=(cj0*px);
IkReal x2987=(py*sj0);
op[0]=((((-1.0)*x2987))+(((-1.0)*x2986)));
op[1]=0;
op[2]=(x2987+x2986);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2988=px*px;
IkReal x2989=py*py;
IkReal x2990=cj0*cj0;
IkReal x2991=(cj0*py);
IkReal x2992=(cj2*px);
IkReal x2993=(py*sj0);
IkReal x2994=(cj0*cj2);
IkReal x2995=(px*py);
IkReal x2996=((0.2982)*sj0);
IkReal x2997=(cj2*x2988);
IkReal x2998=((0.065)*x2990);
IkReal x2999=((0.6702)*cj0*sj0);
IkReal x3000=(cj2*x2989);
CheckValue<IkReal> x3001=IKPowWithIntegerCheck((((cj0*x2992))+((cj2*x2993))),-1);
if(!x3001.valid){
continue;
}
CheckValue<IkReal> x3002=IKPowWithIntegerCheck((((x2998*x3000))+(((-1.0)*x2997*x2998))+(((-0.065)*x3000))+(((-0.13)*sj0*x2991*x2992))),-1);
if(!x3002.valid){
continue;
}
if( IKabs(((x3001.value)*(((((-1.0)*px*sj0*sj2))+(((-0.1491)*sj2))+((sj2*x2991)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3002.value)*(((((0.6702)*x2995))+(((0.2982)*py*x2992))+((x2988*x2994*x2996))+(((0.06226938)*cj2*x2993))+((cj2*x2993*(py*py)))+(((0.09992682)*cj0*px))+(((-1.0)*x2989*x2999))+(((-0.5964)*py*x2990*x2992))+(((0.09992682)*x2993))+(((-1.0)*x2989*x2994*x2996))+((cj0*x2992*(px*px)))+((x2993*x2997))+(((0.06226938)*cj0*x2992))+((x2988*x2999))+(((-1.3404)*x2990*x2995))+((cj0*x2989*x2992)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3001.value)*(((((-1.0)*px*sj0*sj2))+(((-0.1491)*sj2))+((sj2*x2991))))))+IKsqr(((x3002.value)*(((((0.6702)*x2995))+(((0.2982)*py*x2992))+((x2988*x2994*x2996))+(((0.06226938)*cj2*x2993))+((cj2*x2993*(py*py)))+(((0.09992682)*cj0*px))+(((-1.0)*x2989*x2999))+(((-0.5964)*py*x2990*x2992))+(((0.09992682)*x2993))+(((-1.0)*x2989*x2994*x2996))+((cj0*x2992*(px*px)))+((x2993*x2997))+(((0.06226938)*cj0*x2992))+((x2988*x2999))+(((-1.3404)*x2990*x2995))+((cj0*x2989*x2992))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3001.value)*(((((-1.0)*px*sj0*sj2))+(((-0.1491)*sj2))+((sj2*x2991))))), ((x3002.value)*(((((0.6702)*x2995))+(((0.2982)*py*x2992))+((x2988*x2994*x2996))+(((0.06226938)*cj2*x2993))+((cj2*x2993*(py*py)))+(((0.09992682)*cj0*px))+(((-1.0)*x2989*x2999))+(((-0.5964)*py*x2990*x2992))+(((0.09992682)*x2993))+(((-1.0)*x2989*x2994*x2996))+((cj0*x2992*(px*px)))+((x2993*x2997))+(((0.06226938)*cj0*x2992))+((x2988*x2999))+(((-1.3404)*x2990*x2995))+((cj0*x2989*x2992))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3003=IKcos(j1);
IkReal x3004=IKsin(j1);
IkReal x3005=(px*sj2);
IkReal x3006=(cj0*px);
IkReal x3007=(py*sj0);
IkReal x3008=(cj0*py);
IkReal x3009=((0.6702)*cj2);
IkReal x3010=(px*sj0);
IkReal x3011=((0.6702)*x3004);
IkReal x3012=(cj2*x3004);
IkReal x3013=((1.0)*x3004);
IkReal x3014=((0.065)*x3003);
evalcond[0]=((-0.6039)*sj2*x3003);
evalcond[1]=(((x3003*x3006))+((x3003*x3007)));
evalcond[2]=((((0.6039)*sj2*x3004))+(((-1.0)*x3007))+(((-1.0)*x3006)));
evalcond[3]=((((-1.0)*sj2*x3008))+((sj0*x3005))+(((0.1491)*sj2))+((x3007*x3012))+((x3006*x3012)));
evalcond[4]=((0.6039)+(((-1.0)*cj0*x3005*x3013))+(((0.1491)*cj2))+((cj2*x3010))+(((-1.0)*cj2*x3008))+(((-1.0)*sj2*x3007*x3013)));
evalcond[5]=((-0.06226938)+(((-1.0)*(px*px)))+(((-0.2982)*x3010))+((x3008*x3009))+(((0.2982)*x3008))+((cj0*x3005*x3011))+(((-1.0)*x3007*x3014))+(((-1.0)*x3006*x3014))+(((-0.09992682)*cj2))+(((-1.0)*(py*py)))+((sj2*x3007*x3011))+(((-1.0)*x3009*x3010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3015=py*py;
IkReal x3016=px*px;
IkReal x3017=cj0*cj0;
IkReal x3018=(px*sj2);
IkReal x3019=((1.0)*cj0);
IkReal x3020=((1.0)*sj0);
IkReal x3021=(py*sj2);
IkReal x3022=(cj0*py);
IkReal x3023=(sj2*x3015);
IkReal x3024=((0.2982)*cj0*sj0);
IkReal x3025=(sj2*x3016);
IkReal x3026=((0.065)*x3017);
CheckValue<IkReal> x3027=IKPowWithIntegerCheck(((((-1.0)*x3020*x3021))+(((-1.0)*x3018*x3019))),-1);
if(!x3027.valid){
continue;
}
CheckValue<IkReal> x3028=IKPowWithIntegerCheck((((x3025*x3026))+(((-1.0)*x3023*x3026))+(((0.065)*x3023))+(((0.13)*sj0*x3018*x3022))),-1);
if(!x3028.valid){
continue;
}
if( IKabs(((x3027.value)*(((-0.6039)+(((-0.1491)*cj2))+((cj2*x3022))+(((-1.0)*cj2*px*x3020)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3028.value)*(((((-1.0)*x3015*x3018*x3019))+(((0.3424644)*sj0*x3021))+(((-1.0)*x3018*x3019*(px*px)))+(((-1.0)*x3024*x3025))+(((-0.2982)*py*x3018))+(((-1.0)*x3016*x3020*x3021))+((x3023*x3024))+(((0.5964)*py*x3017*x3018))+(((0.3424644)*cj0*x3018))+(((-1.0)*x3020*x3021*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3027.value)*(((-0.6039)+(((-0.1491)*cj2))+((cj2*x3022))+(((-1.0)*cj2*px*x3020))))))+IKsqr(((x3028.value)*(((((-1.0)*x3015*x3018*x3019))+(((0.3424644)*sj0*x3021))+(((-1.0)*x3018*x3019*(px*px)))+(((-1.0)*x3024*x3025))+(((-0.2982)*py*x3018))+(((-1.0)*x3016*x3020*x3021))+((x3023*x3024))+(((0.5964)*py*x3017*x3018))+(((0.3424644)*cj0*x3018))+(((-1.0)*x3020*x3021*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3027.value)*(((-0.6039)+(((-0.1491)*cj2))+((cj2*x3022))+(((-1.0)*cj2*px*x3020))))), ((x3028.value)*(((((-1.0)*x3015*x3018*x3019))+(((0.3424644)*sj0*x3021))+(((-1.0)*x3018*x3019*(px*px)))+(((-1.0)*x3024*x3025))+(((-0.2982)*py*x3018))+(((-1.0)*x3016*x3020*x3021))+((x3023*x3024))+(((0.5964)*py*x3017*x3018))+(((0.3424644)*cj0*x3018))+(((-1.0)*x3020*x3021*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3029=IKcos(j1);
IkReal x3030=IKsin(j1);
IkReal x3031=(px*sj2);
IkReal x3032=(cj0*px);
IkReal x3033=(py*sj0);
IkReal x3034=(cj0*py);
IkReal x3035=((0.6702)*cj2);
IkReal x3036=(px*sj0);
IkReal x3037=((0.6702)*x3030);
IkReal x3038=(cj2*x3030);
IkReal x3039=((1.0)*x3030);
IkReal x3040=((0.065)*x3029);
evalcond[0]=((-0.6039)*sj2*x3029);
evalcond[1]=(((x3029*x3033))+((x3029*x3032)));
evalcond[2]=((((-1.0)*x3032))+(((-1.0)*x3033))+(((0.6039)*sj2*x3030)));
evalcond[3]=(((sj0*x3031))+((x3033*x3038))+(((-1.0)*sj2*x3034))+((x3032*x3038))+(((0.1491)*sj2)));
evalcond[4]=((0.6039)+((cj2*x3036))+(((0.1491)*cj2))+(((-1.0)*cj0*x3031*x3039))+(((-1.0)*sj2*x3033*x3039))+(((-1.0)*cj2*x3034)));
evalcond[5]=((-0.06226938)+(((-0.2982)*x3036))+(((-1.0)*x3032*x3040))+(((-1.0)*(px*px)))+(((-1.0)*x3033*x3040))+((x3034*x3035))+(((-1.0)*x3035*x3036))+((sj2*x3033*x3037))+(((0.2982)*x3034))+((cj0*x3031*x3037))+(((-0.09992682)*cj2))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3041=cj0*cj0;
IkReal x3042=px*px;
IkReal x3043=py*py;
IkReal x3044=(py*sj2);
IkReal x3045=((4047.3378)*cj2);
IkReal x3046=(px*sj0);
IkReal x3047=(cj0*px);
IkReal x3048=((6702.0)*sj2*x3041);
CheckValue<IkReal> x3049=IKPowWithIntegerCheck(sj2,-1);
if(!x3049.valid){
continue;
}
CheckValue<IkReal> x3050=IKPowWithIntegerCheck(((((-392.535)*sj0*x3044))+(((-392.535)*sj2*x3047))),-1);
if(!x3050.valid){
continue;
}
if( IKabs(((0.000165590329524756)*(x3049.value)*(((((10000.0)*py*sj0))+(((10000.0)*x3047)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3050.value)*(((((-663.0)*sj2*x3043))+(((-1.0)*x3042*x3048))+((x3043*x3048))+(((603.45806598)*cj2*sj2))+(((1800.8298)*sj2*x3046))+(((-13404.0)*cj0*x3044*x3046))+((sj2*x3045*x3046))+(((-1800.8298)*cj0*x3044))+(((-1.0)*cj0*x3044*x3045))+(((6039.0)*sj2*x3042))+(((376.04478582)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000165590329524756)*(x3049.value)*(((((10000.0)*py*sj0))+(((10000.0)*x3047))))))+IKsqr(((x3050.value)*(((((-663.0)*sj2*x3043))+(((-1.0)*x3042*x3048))+((x3043*x3048))+(((603.45806598)*cj2*sj2))+(((1800.8298)*sj2*x3046))+(((-13404.0)*cj0*x3044*x3046))+((sj2*x3045*x3046))+(((-1800.8298)*cj0*x3044))+(((-1.0)*cj0*x3044*x3045))+(((6039.0)*sj2*x3042))+(((376.04478582)*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.000165590329524756)*(x3049.value)*(((((10000.0)*py*sj0))+(((10000.0)*x3047))))), ((x3050.value)*(((((-663.0)*sj2*x3043))+(((-1.0)*x3042*x3048))+((x3043*x3048))+(((603.45806598)*cj2*sj2))+(((1800.8298)*sj2*x3046))+(((-13404.0)*cj0*x3044*x3046))+((sj2*x3045*x3046))+(((-1800.8298)*cj0*x3044))+(((-1.0)*cj0*x3044*x3045))+(((6039.0)*sj2*x3042))+(((376.04478582)*sj2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3051=IKcos(j1);
IkReal x3052=IKsin(j1);
IkReal x3053=(px*sj2);
IkReal x3054=(cj0*px);
IkReal x3055=(py*sj0);
IkReal x3056=(cj0*py);
IkReal x3057=((0.6702)*cj2);
IkReal x3058=(px*sj0);
IkReal x3059=((0.6702)*x3052);
IkReal x3060=(cj2*x3052);
IkReal x3061=((1.0)*x3052);
IkReal x3062=((0.065)*x3051);
evalcond[0]=((-0.6039)*sj2*x3051);
evalcond[1]=(((x3051*x3054))+((x3051*x3055)));
evalcond[2]=((((-1.0)*x3054))+(((-1.0)*x3055))+(((0.6039)*sj2*x3052)));
evalcond[3]=(((sj0*x3053))+(((0.1491)*sj2))+(((-1.0)*sj2*x3056))+((x3054*x3060))+((x3055*x3060)));
evalcond[4]=((0.6039)+(((-1.0)*cj0*x3053*x3061))+((cj2*x3058))+(((0.1491)*cj2))+(((-1.0)*sj2*x3055*x3061))+(((-1.0)*cj2*x3056)));
evalcond[5]=((-0.06226938)+((cj0*x3053*x3059))+(((-1.0)*(px*px)))+(((-1.0)*x3054*x3062))+((x3056*x3057))+(((-1.0)*x3057*x3058))+((sj2*x3055*x3059))+(((-1.0)*x3055*x3062))+(((-0.2982)*x3058))+(((-0.09992682)*cj2))+(((-1.0)*(py*py)))+(((0.2982)*x3056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=0;
sj2=0;
cj2=1.0;
j4=0;
sj4=0;
cj4=1.0;
j1eval[0]=IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3063=(cj0*px);
IkReal x3064=(py*sj0);
op[0]=((((-1.0)*x3064))+(((-1.0)*x3063)));
op[1]=0;
op[2]=(x3063+x3064);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j4=0;
sj4=0;
cj4=1.0;
j1eval[0]=IKabs(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3065=(cj0*px);
IkReal x3066=(py*sj0);
op[0]=((((-1.0)*x3065))+(((-1.0)*x3066)));
op[1]=0;
op[2]=(x3066+x3065);
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3067=cj0*cj0;
IkReal x3068=py*py;
IkReal x3069=px*px;
IkReal x3070=(py*sj0);
IkReal x3071=((0.0325)*cj2);
IkReal x3072=((0.1491)*sj2);
IkReal x3073=(cj0*px);
IkReal x3074=(py*sj2);
IkReal x3075=(cj2*x3068);
IkReal x3076=((0.2688)*cj2*sj4);
IkReal x3077=((1.0)*sj0*sj2);
CheckValue<IkReal> x3078=IKPowWithIntegerCheck(IKsign(((((2.0)*cj2*x3070*x3073))+x3075+((cj2*x3067*x3069))+((cj2*(pz*pz)))+(((-1.0)*x3067*x3075)))),-1);
if(!x3078.valid){
continue;
}
CheckValue<IkReal> x3079 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x3076))+((pz*x3071))+(((-1.0)*x3072*x3073))+(((-1.0)*cj0*x3069*x3077))+(((-1.0)*cj4*pz*x3071))+(((2.0)*px*x3067*x3074))+(((-1.0)*px*x3074))+(((-1.0)*x3070*x3072))+((cj0*sj0*sj2*x3068)))),IkReal(((((-1.0)*pz*x3072))+(((-1.0)*px*pz*x3077))+(((-1.0)*x3071*x3073))+(((-1.0)*x3070*x3071))+((x3070*x3076))+((x3073*x3076))+((cj4*x3071*x3073))+((cj0*pz*x3074))+((cj4*x3070*x3071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3079.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3078.value)))+(x3079.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3080=IKcos(j1);
IkReal x3081=IKsin(j1);
IkReal x3082=(px*sj2);
IkReal x3083=((0.0325)*sj4);
IkReal x3084=((0.6702)*cj0);
IkReal x3085=(cj0*px);
IkReal x3086=(px*sj0);
IkReal x3087=((0.2688)*sj4);
IkReal x3088=(py*sj0);
IkReal x3089=(cj0*py);
IkReal x3090=((0.0325)*cj4);
IkReal x3091=((0.2688)*cj4);
IkReal x3092=((1.0)*sj2);
IkReal x3093=(sj2*x3081);
IkReal x3094=(pz*x3080);
IkReal x3095=(pz*x3081);
IkReal x3096=(cj2*x3081);
IkReal x3097=(sj2*x3080);
IkReal x3098=((0.065)*x3080);
evalcond[0]=((0.0325)+(((-1.0)*x3087))+((x3080*x3085))+((x3080*x3088))+(((-1.0)*x3090))+(((-1.0)*x3095)));
evalcond[1]=(((sj0*x3082))+((x3088*x3096))+(((-1.0)*x3089*x3092))+((x3085*x3096))+((cj2*x3094))+(((0.1491)*sj2)));
evalcond[2]=(((x3081*x3087))+(((-0.0325)*x3081))+pz+(((-1.0)*x3091*x3097))+((x3083*x3097))+((x3081*x3090))+(((-0.3351)*x3097)));
evalcond[3]=((0.3351)+(((-1.0)*cj2*x3089))+(((-1.0)*x3083))+((cj2*x3086))+x3091+(((-1.0)*x3092*x3094))+(((0.1491)*cj2))+(((-1.0)*cj0*x3081*x3082))+(((-1.0)*x3081*x3088*x3092)));
evalcond[4]=((((-0.0325)*x3080))+((x3080*x3087))+(((-1.0)*x3083*x3093))+(((-1.0)*x3085))+(((-1.0)*x3088))+(((0.3351)*x3093))+((x3091*x3093))+((x3080*x3090)));
evalcond[5]=((-0.06226938)+(((0.2982)*x3089))+(((-1.0)*x3085*x3098))+(((0.065)*x3095))+(((-1.0)*pp))+((cj2*py*x3084))+(((0.6702)*sj2*x3094))+(((-0.2982)*x3086))+(((-0.6702)*cj2*x3086))+(((-1.0)*x3088*x3098))+(((-0.09992682)*cj2))+((x3081*x3082*x3084))+(((0.6702)*x3088*x3093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3099=cj0*cj0;
IkReal x3100=py*py;
IkReal x3101=cj4*cj4;
IkReal x3102=((0.2688)*cj4);
IkReal x3103=((0.017472)*sj4);
IkReal x3104=((0.0325)*sj4);
IkReal x3105=(cj0*px);
IkReal x3106=(sj2*sj4);
IkReal x3107=((0.0325)*pz);
IkReal x3108=(py*sj0);
IkReal x3109=(sj2*x3108);
CheckValue<IkReal> x3110 = IKatan2WithCheck(IkReal(((-0.07330969)+(((-1.0)*x3099*x3100))+x3100+x3103+(((-1.0)*cj4*x3103))+((x3099*(px*px)))+(((2.0)*x3105*x3108))+(((0.0021125)*cj4))+(((0.07119719)*x3101)))),IkReal((((pz*x3105))+((pz*x3108))+(((0.00215475)*cj4*sj2))+(((-0.01962675)*sj2))+(((0.09113113)*x3106))+(((0.017472)*sj2*x3101))+(((0.07119719)*cj4*x3106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3110.valid){
continue;
}
CheckValue<IkReal> x3111=IKPowWithIntegerCheck(IKsign((((cj4*x3107))+(((-1.0)*x3107))+(((0.3351)*x3109))+(((0.2688)*pz*sj4))+(((-1.0)*sj2*x3104*x3105))+((x3102*x3109))+(((-1.0)*x3104*x3109))+((sj2*x3102*x3105))+(((0.3351)*sj2*x3105)))),-1);
if(!x3111.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3110.value)+(((1.5707963267949)*(x3111.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3112=IKcos(j1);
IkReal x3113=IKsin(j1);
IkReal x3114=(px*sj2);
IkReal x3115=((0.0325)*sj4);
IkReal x3116=((0.6702)*cj0);
IkReal x3117=(cj0*px);
IkReal x3118=(px*sj0);
IkReal x3119=((0.2688)*sj4);
IkReal x3120=(py*sj0);
IkReal x3121=(cj0*py);
IkReal x3122=((0.0325)*cj4);
IkReal x3123=((0.2688)*cj4);
IkReal x3124=((1.0)*sj2);
IkReal x3125=(sj2*x3113);
IkReal x3126=(pz*x3112);
IkReal x3127=(pz*x3113);
IkReal x3128=(cj2*x3113);
IkReal x3129=(sj2*x3112);
IkReal x3130=((0.065)*x3112);
evalcond[0]=((0.0325)+((x3112*x3117))+(((-1.0)*x3119))+(((-1.0)*x3127))+((x3112*x3120))+(((-1.0)*x3122)));
evalcond[1]=(((x3120*x3128))+((sj0*x3114))+((cj2*x3126))+(((0.1491)*sj2))+(((-1.0)*x3121*x3124))+((x3117*x3128)));
evalcond[2]=((((-0.0325)*x3113))+((x3115*x3129))+((x3113*x3119))+(((-0.3351)*x3129))+pz+(((-1.0)*x3123*x3129))+((x3113*x3122)));
evalcond[3]=((0.3351)+x3123+((cj2*x3118))+(((-1.0)*x3113*x3120*x3124))+(((-1.0)*x3115))+(((-1.0)*x3124*x3126))+(((-1.0)*cj0*x3113*x3114))+(((0.1491)*cj2))+(((-1.0)*cj2*x3121)));
evalcond[4]=((((-0.0325)*x3112))+((x3112*x3119))+(((-1.0)*x3120))+(((-1.0)*x3115*x3125))+(((0.3351)*x3125))+(((-1.0)*x3117))+((x3112*x3122))+((x3123*x3125)));
evalcond[5]=((-0.06226938)+(((-0.2982)*x3118))+(((-1.0)*x3117*x3130))+(((-0.6702)*cj2*x3118))+(((0.065)*x3127))+(((-1.0)*pp))+(((0.2982)*x3121))+(((0.6702)*x3120*x3125))+((cj2*py*x3116))+(((-1.0)*x3120*x3130))+(((-0.09992682)*cj2))+(((0.6702)*sj2*x3126))+((x3113*x3114*x3116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3131=cj4*cj4;
IkReal x3132=((0.017472)*sj4);
IkReal x3133=(cj0*px);
IkReal x3134=((0.2688)*sj4);
IkReal x3135=(sj2*sj4);
IkReal x3136=(pz*sj2);
IkReal x3137=((0.0325)*cj4);
IkReal x3138=(py*sj0);
IkReal x3139=((1.0)*pz);
CheckValue<IkReal> x3140 = IKatan2WithCheck(IkReal(((((0.00215475)*cj4*sj2))+(((-0.01962675)*sj2))+(((-1.0)*x3138*x3139))+(((0.017472)*sj2*x3131))+(((-1.0)*x3133*x3139))+(((0.07119719)*cj4*x3135))+(((0.09113113)*x3135)))),IkReal(((0.07330969)+(((-0.07119719)*x3131))+(((-1.0)*pz*x3139))+(((-0.0021125)*cj4))+((cj4*x3132))+(((-1.0)*x3132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3140.valid){
continue;
}
CheckValue<IkReal> x3141=IKPowWithIntegerCheck(IKsign(((((0.0325)*pz*x3135))+((x3133*x3137))+((x3133*x3134))+((x3134*x3138))+((x3137*x3138))+(((-0.0325)*x3133))+(((-0.0325)*x3138))+(((-0.3351)*x3136))+(((-0.2688)*cj4*x3136)))),-1);
if(!x3141.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3140.value)+(((1.5707963267949)*(x3141.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3142=IKcos(j1);
IkReal x3143=IKsin(j1);
IkReal x3144=(px*sj2);
IkReal x3145=((0.0325)*sj4);
IkReal x3146=((0.6702)*cj0);
IkReal x3147=(cj0*px);
IkReal x3148=(px*sj0);
IkReal x3149=((0.2688)*sj4);
IkReal x3150=(py*sj0);
IkReal x3151=(cj0*py);
IkReal x3152=((0.0325)*cj4);
IkReal x3153=((0.2688)*cj4);
IkReal x3154=((1.0)*sj2);
IkReal x3155=(sj2*x3143);
IkReal x3156=(pz*x3142);
IkReal x3157=(pz*x3143);
IkReal x3158=(cj2*x3143);
IkReal x3159=(sj2*x3142);
IkReal x3160=((0.065)*x3142);
evalcond[0]=((0.0325)+(((-1.0)*x3152))+((x3142*x3150))+(((-1.0)*x3149))+((x3142*x3147))+(((-1.0)*x3157)));
evalcond[1]=(((x3147*x3158))+((sj0*x3144))+((x3150*x3158))+((cj2*x3156))+(((0.1491)*sj2))+(((-1.0)*x3151*x3154)));
evalcond[2]=((((-0.0325)*x3143))+(((-1.0)*x3153*x3159))+(((-0.3351)*x3159))+((x3143*x3149))+((x3143*x3152))+((x3145*x3159))+pz);
evalcond[3]=((0.3351)+x3153+(((-1.0)*x3145))+(((-1.0)*cj2*x3151))+(((-1.0)*x3143*x3150*x3154))+(((0.1491)*cj2))+((cj2*x3148))+(((-1.0)*x3154*x3156))+(((-1.0)*cj0*x3143*x3144)));
evalcond[4]=((((-0.0325)*x3142))+((x3142*x3152))+(((-1.0)*x3147))+(((-1.0)*x3145*x3155))+((x3142*x3149))+(((-1.0)*x3150))+((x3153*x3155))+(((0.3351)*x3155)));
evalcond[5]=((-0.06226938)+(((-1.0)*x3147*x3160))+(((0.2982)*x3151))+((cj2*py*x3146))+(((-1.0)*x3150*x3160))+(((0.6702)*sj2*x3156))+(((-0.6702)*cj2*x3148))+(((-0.2982)*x3148))+((x3143*x3144*x3146))+(((-1.0)*pp))+(((0.6702)*x3150*x3155))+(((-0.09992682)*cj2))+(((0.065)*x3157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3161=(cj0*px);
IkReal x3162=((0.2688)*sj4);
IkReal x3163=(py*sj0);
IkReal x3164=((8.27076923076923)*sj4);
IkReal x3165=((0.0325)*cj4);
IkReal x3166=(pz*sj2);
j1eval[0]=((((-1.0)*sj4*x3166))+(((10.3107692307692)*x3166))+((cj4*x3161))+((cj4*x3163))+(((-1.0)*x3163))+(((-1.0)*x3161))+((x3163*x3164))+(((8.27076923076923)*cj4*x3166))+((x3161*x3164)));
j1eval[1]=IKsign(((((0.2688)*cj4*x3166))+((x3163*x3165))+((x3162*x3163))+(((0.3351)*x3166))+((x3161*x3162))+((x3161*x3165))+(((-0.0325)*x3163))+(((-0.0325)*x3161))+(((-0.0325)*sj4*x3166))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3167=(cj4*sj2);
IkReal x3168=(cj0*px);
IkReal x3169=(py*sj0);
IkReal x3170=((0.0325)*pz);
IkReal x3171=((10.3107692307692)*sj2);
IkReal x3172=(sj2*sj4);
IkReal x3173=(pz*sj4);
IkReal x3174=((0.3351)*sj2);
IkReal x3175=((0.0325)*x3172);
j1eval[0]=((((-1.0)*x3169*x3171))+(((-8.27076923076923)*x3167*x3168))+(((-8.27076923076923)*x3167*x3169))+((x3168*x3172))+((cj4*pz))+(((-1.0)*pz))+(((-1.0)*x3168*x3171))+(((8.27076923076923)*x3173))+((x3169*x3172)));
j1eval[1]=IKsign(((((-1.0)*x3169*x3174))+((cj4*x3170))+((x3168*x3175))+(((-1.0)*x3170))+(((-1.0)*x3168*x3174))+(((0.2688)*x3173))+((x3169*x3175))+(((-0.2688)*x3167*x3169))+(((-0.2688)*x3167*x3168))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3176=py*py;
IkReal x3177=cj0*cj0;
IkReal x3178=((1.0)*cj2);
IkReal x3179=((((-1.0)*x3178*(pz*pz)))+(((-1.0)*x3177*x3178*(px*px)))+(((-1.0)*x3176*x3178))+(((-2.0)*cj0*cj2*px*py*sj0))+((cj2*x3176*x3177)));
j1eval[0]=x3179;
j1eval[1]=IKsign(x3179);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x3180=cj4*cj4;
IkReal x3181=(pz*sj4);
IkReal x3182=((0.017472)*sj4);
IkReal x3183=(cj4*pz);
IkReal x3184=(cj0*px);
IkReal x3185=((0.2688)*sj4);
IkReal x3186=(py*sj0);
IkReal x3187=((8.27076923076923)*sj4);
IkReal x3188=((0.0325)*cj4);
j1eval[0]=((((10.3107692307692)*pz))+(((8.27076923076923)*x3183))+((x3184*x3187))+((cj4*x3184))+((cj4*x3186))+(((-1.0)*x3186))+(((-1.0)*x3181))+(((-1.0)*x3184))+((x3186*x3187)));
j1eval[1]=((IKabs(((-0.01962675)+(((0.00215475)*cj4))+(((0.07119719)*cj4*sj4))+((pz*x3186))+((pz*x3184))+(((0.09113113)*sj4))+(((0.017472)*x3180)))))+(IKabs(((-0.07330969)+x3182+(((0.07119719)*x3180))+(pz*pz)+(((0.0021125)*cj4))+(((-1.0)*cj4*x3182))))));
j1eval[2]=IKsign(((((0.3351)*pz))+(((0.2688)*x3183))+((x3184*x3185))+((x3184*x3188))+((x3185*x3186))+((x3186*x3188))+(((-0.0325)*x3184))+(((-0.0325)*x3181))+(((-0.0325)*x3186))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x3189=cj4*cj4;
IkReal x3190=(py*sj0);
IkReal x3191=((0.0325)*sj4);
IkReal x3192=((0.2688)*cj4);
IkReal x3193=(cj0*px);
IkReal x3194=(cj4*sj4);
IkReal x3195=(pz*sj4);
IkReal x3196=((1.0)*pz);
IkReal x3197=((8.27076923076923)*cj4);
IkReal x3198=(cj4*pz);
j1eval[0]=((((-1.0)*x3190*x3197))+x3198+(((8.27076923076923)*x3195))+((sj4*x3190))+((sj4*x3193))+(((-1.0)*x3193*x3197))+(((-10.3107692307692)*x3193))+(((-10.3107692307692)*x3190))+(((-1.0)*x3196)));
j1eval[1]=((IKabs(((-0.11334826)+(((0.017472)*x3194))+(((-0.18014976)*cj4))+(((-0.07119719)*x3189))+(pz*pz)+(((0.0217815)*sj4)))))+(IKabs(((-0.01962675)+(((-1.0)*x3190*x3196))+(((0.00215475)*cj4))+(((-1.0)*x3193*x3196))+(((0.09113113)*sj4))+(((0.017472)*x3189))+(((0.07119719)*x3194))))));
j1eval[2]=IKsign(((((-1.0)*x3190*x3192))+(((-0.3351)*x3190))+(((-0.3351)*x3193))+(((0.2688)*x3195))+(((-1.0)*x3192*x3193))+(((-0.0325)*pz))+(((0.0325)*x3198))+((x3190*x3191))+((x3191*x3193))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=((-4.75519253060237)+sj4+(((-4.53557670016686)*cj4)));
j1eval[1]=IKsign(((-0.18665795)+(((-0.17803726)*cj4))+(((0.0392535)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x3199=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x3199);
rxp0_1=(px*r20);
rxp1_0=(r21*x3199);
rxp1_1=(px*r21);
rxp2_0=(r22*x3199);
rxp2_1=(px*r22);
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x3200=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x3200);
rxp0_1=(px*r20);
rxp1_0=(r21*x3200);
rxp1_1=(px*r21);
rxp2_0=(r22*x3200);
rxp2_1=(px*r22);
IkReal x3201=py*py;
IkReal x3202=cj0*cj0;
IkReal x3203=(cj0*px);
IkReal x3204=(py*sj0);
j1eval[0]=((((-1.0)*x3204))+(((-1.0)*x3203)));
j1eval[1]=((((-2.0)*x3203*x3204))+(((-1.0)*x3202*(px*px)))+(((-1.0)*x3201))+((x3201*x3202)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3205=py*py;
IkReal x3206=px*px;
IkReal x3207=cj0*cj0;
IkReal x3208=(py*sj0);
IkReal x3209=(px*py);
IkReal x3210=((10000.0)*cj0);
IkReal x3211=(cj0*px);
IkReal x3212=((650.0)*x3205);
IkReal x3213=((2982.0)*cj0*sj0);
CheckValue<IkReal> x3214=IKPowWithIntegerCheck(((((-1.0)*px*x3210))+(((-10000.0)*x3208))),-1);
if(!x3214.valid){
continue;
}
CheckValue<IkReal> x3215=IKPowWithIntegerCheck(((((-650.0)*x3206*x3207))+((x3207*x3212))+(((-1300.0)*x3208*x3211))+(((-1.0)*x3212))),-1);
if(!x3215.valid){
continue;
}
if( IKabs(((-6039.0)*(x3214.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3215.value)*(((((3424.644)*x3208))+(((-2982.0)*x3209))+(((3424.644)*x3211))+(((-1.0)*x3206*x3213))+(((-10000.0)*x3206*x3208))+((x3205*x3213))+(((5964.0)*x3207*x3209))+(((-1.0)*px*x3205*x3210))+(((-1.0)*x3210*(px*px*px)))+(((-10000.0)*x3208*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6039.0)*(x3214.value)))+IKsqr(((x3215.value)*(((((3424.644)*x3208))+(((-2982.0)*x3209))+(((3424.644)*x3211))+(((-1.0)*x3206*x3213))+(((-10000.0)*x3206*x3208))+((x3205*x3213))+(((5964.0)*x3207*x3209))+(((-1.0)*px*x3205*x3210))+(((-1.0)*x3210*(px*px*px)))+(((-10000.0)*x3208*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-6039.0)*(x3214.value)), ((x3215.value)*(((((3424.644)*x3208))+(((-2982.0)*x3209))+(((3424.644)*x3211))+(((-1.0)*x3206*x3213))+(((-10000.0)*x3206*x3208))+((x3205*x3213))+(((5964.0)*x3207*x3209))+(((-1.0)*px*x3205*x3210))+(((-1.0)*x3210*(px*px*px)))+(((-10000.0)*x3208*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3216=IKcos(j1);
IkReal x3217=IKsin(j1);
IkReal x3218=(cj0*px);
IkReal x3219=(py*sj0);
IkReal x3220=((1.0)*x3219);
IkReal x3221=((1.0)*x3218);
IkReal x3222=((0.6702)*x3217);
IkReal x3223=((0.065)*x3216);
evalcond[0]=((-0.6039)*x3216);
evalcond[1]=((((0.6039)*x3217))+(((-1.0)*x3221))+(((-1.0)*x3220)));
evalcond[2]=((((-1.0)*x3216*x3220))+(((-1.0)*x3216*x3221)));
evalcond[3]=((0.6039)+(((-1.0)*x3217*x3221))+(((-1.0)*x3217*x3220)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-1.0)*(px*px)))+((x3218*x3222))+((x3218*x3223))+(((0.2982)*cj0*py))+((x3219*x3222))+((x3219*x3223))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3224=py*py;
IkReal x3225=cj0*cj0;
IkReal x3226=px*px;
IkReal x3227=(cj0*px);
IkReal x3228=(py*sj0);
IkReal x3229=((6702.0)*x3225);
CheckValue<IkReal> x3230=IKPowWithIntegerCheck(((((392.535)*x3227))+(((392.535)*x3228))),-1);
if(!x3230.valid){
continue;
}
if( IKabs(((((1.65590329524756)*x3228))+(((1.65590329524756)*x3227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3230.value)*(((376.04478582)+(((-1800.8298)*cj0*py))+(((6039.0)*x3226))+(((1800.8298)*px*sj0))+((x3224*x3229))+(((-1.0)*x3226*x3229))+(((-13404.0)*x3227*x3228))+(((-663.0)*x3224)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.65590329524756)*x3228))+(((1.65590329524756)*x3227))))+IKsqr(((x3230.value)*(((376.04478582)+(((-1800.8298)*cj0*py))+(((6039.0)*x3226))+(((1800.8298)*px*sj0))+((x3224*x3229))+(((-1.0)*x3226*x3229))+(((-13404.0)*x3227*x3228))+(((-663.0)*x3224))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.65590329524756)*x3228))+(((1.65590329524756)*x3227))), ((x3230.value)*(((376.04478582)+(((-1800.8298)*cj0*py))+(((6039.0)*x3226))+(((1800.8298)*px*sj0))+((x3224*x3229))+(((-1.0)*x3226*x3229))+(((-13404.0)*x3227*x3228))+(((-663.0)*x3224))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3231=IKcos(j1);
IkReal x3232=IKsin(j1);
IkReal x3233=(cj0*px);
IkReal x3234=(py*sj0);
IkReal x3235=((1.0)*x3234);
IkReal x3236=((1.0)*x3233);
IkReal x3237=((0.6702)*x3232);
IkReal x3238=((0.065)*x3231);
evalcond[0]=((-0.6039)*x3231);
evalcond[1]=((((0.6039)*x3232))+(((-1.0)*x3235))+(((-1.0)*x3236)));
evalcond[2]=((((-1.0)*x3231*x3236))+(((-1.0)*x3231*x3235)));
evalcond[3]=((0.6039)+(((-1.0)*x3232*x3236))+(((-1.0)*x3232*x3235)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-1.0)*(px*px)))+((x3234*x3238))+((x3234*x3237))+(((0.2982)*cj0*py))+(((-1.0)*(py*py)))+((x3233*x3237))+((x3233*x3238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3239=(cj0*px);
IkReal x3240=((0.0325)*pz);
IkReal x3241=(py*sj0);
IkReal x3242=((0.0325)*cj4);
IkReal x3243=((0.2688)*cj4);
IkReal x3244=((0.2688)*sj4);
IkReal x3245=(sj4*x3241);
CheckValue<IkReal> x3246=IKPowWithIntegerCheck(IKsign(((-0.18665795)+(((-0.17803726)*cj4))+(((0.0392535)*sj4)))),-1);
if(!x3246.valid){
continue;
}
CheckValue<IkReal> x3247 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x3244))+(((-1.0)*x3239*x3243))+(((-1.0)*cj4*x3240))+x3240+(((-0.3351)*x3239))+(((-0.3351)*x3241))+(((-1.0)*x3241*x3243))+(((0.0325)*sj4*x3239))+(((0.0325)*x3245)))),IkReal(((((-0.0325)*x3241))+(((-1.0)*pz*x3243))+(((-0.0325)*x3239))+((x3239*x3244))+((x3239*x3242))+((x3241*x3244))+((x3241*x3242))+(((-0.3351)*pz))+((sj4*x3240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3247.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3246.value)))+(x3247.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3248=IKcos(j1);
IkReal x3249=IKsin(j1);
IkReal x3250=((0.0325)*sj4);
IkReal x3251=((0.2688)*sj4);
IkReal x3252=((0.2688)*cj4);
IkReal x3253=((0.0325)*cj4);
IkReal x3254=(cj0*px);
IkReal x3255=(py*sj0);
IkReal x3256=((1.0)*x3254);
IkReal x3257=(pz*x3248);
IkReal x3258=((1.0)*x3255);
IkReal x3259=(pz*x3249);
IkReal x3260=((0.065)*x3248);
IkReal x3261=((0.6702)*x3249);
evalcond[0]=((0.0325)+x3259+(((-1.0)*x3248*x3258))+(((-1.0)*x3248*x3256))+(((-1.0)*x3253))+(((-1.0)*x3251)));
evalcond[1]=((0.3351)+x3252+(((-1.0)*x3249*x3258))+(((-1.0)*x3249*x3256))+(((-1.0)*x3257))+(((-1.0)*x3250)));
evalcond[2]=(((x3248*x3250))+(((-1.0)*x3249*x3253))+(((-1.0)*x3249*x3251))+(((-1.0)*x3248*x3252))+pz+(((-0.3351)*x3248))+(((0.0325)*x3249)));
evalcond[3]=(((x3249*x3252))+(((-1.0)*x3249*x3250))+(((0.3351)*x3249))+(((-1.0)*x3248*x3251))+(((-1.0)*x3248*x3253))+(((-1.0)*x3256))+(((-1.0)*x3258))+(((0.0325)*x3248)));
evalcond[4]=((-0.06226938)+(((0.6702)*x3257))+(((-0.2982)*px*sj0))+((x3255*x3261))+((x3255*x3260))+((x3254*x3261))+((x3254*x3260))+(((-0.065)*x3259))+(((0.2982)*cj0*py))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3262=cj4*cj4;
IkReal x3263=(cj0*px);
IkReal x3264=((0.0325)*sj4);
IkReal x3265=(py*sj0);
IkReal x3266=((0.2688)*cj4);
IkReal x3267=((1.0)*pz);
IkReal x3268=((0.0325)*pz);
IkReal x3269=(cj4*sj4);
CheckValue<IkReal> x3270 = IKatan2WithCheck(IkReal(((-0.11334826)+(((-0.07119719)*x3262))+(((-0.18014976)*cj4))+(((0.017472)*x3269))+(pz*pz)+(((0.0217815)*sj4)))),IkReal(((-0.01962675)+(((0.07119719)*x3269))+(((0.00215475)*cj4))+(((0.017472)*x3262))+(((-1.0)*x3265*x3267))+(((-1.0)*x3263*x3267))+(((0.09113113)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3270.valid){
continue;
}
CheckValue<IkReal> x3271=IKPowWithIntegerCheck(IKsign((((cj4*x3268))+((x3263*x3264))+(((-1.0)*x3268))+(((0.2688)*pz*sj4))+(((-1.0)*x3265*x3266))+(((-1.0)*x3263*x3266))+(((-0.3351)*x3265))+(((-0.3351)*x3263))+((x3264*x3265)))),-1);
if(!x3271.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3270.value)+(((1.5707963267949)*(x3271.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3272=IKcos(j1);
IkReal x3273=IKsin(j1);
IkReal x3274=((0.0325)*sj4);
IkReal x3275=((0.2688)*sj4);
IkReal x3276=((0.2688)*cj4);
IkReal x3277=((0.0325)*cj4);
IkReal x3278=(cj0*px);
IkReal x3279=(py*sj0);
IkReal x3280=((1.0)*x3278);
IkReal x3281=(pz*x3272);
IkReal x3282=((1.0)*x3279);
IkReal x3283=(pz*x3273);
IkReal x3284=((0.065)*x3272);
IkReal x3285=((0.6702)*x3273);
evalcond[0]=((0.0325)+(((-1.0)*x3272*x3282))+(((-1.0)*x3272*x3280))+x3283+(((-1.0)*x3275))+(((-1.0)*x3277)));
evalcond[1]=((0.3351)+(((-1.0)*x3273*x3280))+(((-1.0)*x3273*x3282))+x3276+(((-1.0)*x3274))+(((-1.0)*x3281)));
evalcond[2]=((((0.0325)*x3273))+(((-1.0)*x3272*x3276))+(((-1.0)*x3273*x3275))+(((-1.0)*x3273*x3277))+((x3272*x3274))+pz+(((-0.3351)*x3272)));
evalcond[3]=((((0.0325)*x3272))+(((-1.0)*x3272*x3277))+(((-1.0)*x3272*x3275))+(((-1.0)*x3273*x3274))+(((0.3351)*x3273))+(((-1.0)*x3280))+(((-1.0)*x3282))+((x3273*x3276)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+((x3279*x3285))+((x3279*x3284))+(((-0.065)*x3283))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.6702)*x3281))+((x3278*x3284))+((x3278*x3285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3286=cj4*cj4;
IkReal x3287=((0.2688)*sj4);
IkReal x3288=(cj0*px);
IkReal x3289=((0.017472)*sj4);
IkReal x3290=(py*sj0);
IkReal x3291=((0.0325)*cj4);
CheckValue<IkReal> x3292 = IKatan2WithCheck(IkReal(((-0.01962675)+(((0.00215475)*cj4))+(((0.07119719)*cj4*sj4))+((pz*x3290))+((pz*x3288))+(((0.017472)*x3286))+(((0.09113113)*sj4)))),IkReal(((-0.07330969)+(((0.07119719)*x3286))+x3289+(((-1.0)*cj4*x3289))+(pz*pz)+(((0.0021125)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3292.valid){
continue;
}
CheckValue<IkReal> x3293=IKPowWithIntegerCheck(IKsign((((x3287*x3290))+((x3287*x3288))+(((-0.0325)*pz*sj4))+((x3288*x3291))+(((0.3351)*pz))+((x3290*x3291))+(((0.2688)*cj4*pz))+(((-0.0325)*x3288))+(((-0.0325)*x3290)))),-1);
if(!x3293.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3292.value)+(((1.5707963267949)*(x3293.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3294=IKcos(j1);
IkReal x3295=IKsin(j1);
IkReal x3296=((0.0325)*sj4);
IkReal x3297=((0.2688)*sj4);
IkReal x3298=((0.2688)*cj4);
IkReal x3299=((0.0325)*cj4);
IkReal x3300=(cj0*px);
IkReal x3301=(py*sj0);
IkReal x3302=((1.0)*x3300);
IkReal x3303=(pz*x3294);
IkReal x3304=((1.0)*x3301);
IkReal x3305=(pz*x3295);
IkReal x3306=((0.065)*x3294);
IkReal x3307=((0.6702)*x3295);
evalcond[0]=((0.0325)+(((-1.0)*x3297))+(((-1.0)*x3299))+x3305+(((-1.0)*x3294*x3302))+(((-1.0)*x3294*x3304)));
evalcond[1]=((0.3351)+(((-1.0)*x3296))+x3298+(((-1.0)*x3303))+(((-1.0)*x3295*x3304))+(((-1.0)*x3295*x3302)));
evalcond[2]=((((-0.3351)*x3294))+(((0.0325)*x3295))+(((-1.0)*x3295*x3297))+(((-1.0)*x3295*x3299))+pz+(((-1.0)*x3294*x3298))+((x3294*x3296)));
evalcond[3]=((((0.0325)*x3294))+(((-1.0)*x3304))+(((-1.0)*x3302))+((x3295*x3298))+(((-1.0)*x3295*x3296))+(((0.3351)*x3295))+(((-1.0)*x3294*x3297))+(((-1.0)*x3294*x3299)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+((x3300*x3307))+((x3300*x3306))+(((-0.065)*x3305))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x3301*x3307))+((x3301*x3306))+(((0.6702)*x3303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x3308=cj4*cj4;
IkReal x3309=((0.017472)*sj4);
IkReal x3310=(cj4*pz);
IkReal x3311=(cj0*px);
IkReal x3312=((0.2688)*sj4);
IkReal x3313=(py*sj0);
IkReal x3314=((8.27076923076923)*sj4);
IkReal x3315=((0.0325)*cj4);
IkReal x3316=(pz*sj4);
j1eval[0]=(((cj4*x3311))+((cj4*x3313))+(((-8.27076923076923)*x3310))+x3316+(((-10.3107692307692)*pz))+((x3313*x3314))+(((-1.0)*x3313))+(((-1.0)*x3311))+((x3311*x3314)));
j1eval[1]=((IKabs(((0.01962675)+(((-0.00215475)*cj4))+((pz*x3313))+((pz*x3311))+(((-0.09113113)*sj4))+(((-0.07119719)*cj4*sj4))+(((-0.017472)*x3308)))))+(IKabs(((-0.07330969)+x3309+(((-1.0)*cj4*x3309))+(((0.07119719)*x3308))+(pz*pz)+(((0.0021125)*cj4))))));
j1eval[2]=IKsign(((((-0.2688)*x3310))+(((-0.0325)*x3311))+(((-0.0325)*x3313))+((x3312*x3313))+((x3313*x3315))+(((-0.3351)*pz))+(((0.0325)*x3316))+((x3311*x3315))+((x3311*x3312))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x3317=cj4*cj4;
IkReal x3318=(py*sj0);
IkReal x3319=((0.0325)*sj4);
IkReal x3320=((0.2688)*cj4);
IkReal x3321=(cj0*px);
IkReal x3322=(cj4*sj4);
IkReal x3323=(pz*sj4);
IkReal x3324=((1.0)*pz);
IkReal x3325=((8.27076923076923)*cj4);
IkReal x3326=(cj4*pz);
IkReal x3327=((1.0)*sj4);
j1eval[0]=((((-1.0)*x3324))+x3326+(((10.3107692307692)*x3321))+(((8.27076923076923)*x3323))+(((-1.0)*x3321*x3327))+(((-1.0)*x3318*x3327))+((x3321*x3325))+(((10.3107692307692)*x3318))+((x3318*x3325)));
j1eval[1]=IKsign(((((0.0325)*x3326))+(((0.3351)*x3321))+(((-1.0)*x3318*x3319))+(((0.2688)*x3323))+(((-1.0)*x3319*x3321))+(((0.3351)*x3318))+(((-0.0325)*pz))+((x3320*x3321))+((x3318*x3320))));
j1eval[2]=((IKabs(((0.01962675)+(((-0.017472)*x3317))+(((-0.00215475)*cj4))+(((-1.0)*x3321*x3324))+(((-0.07119719)*x3322))+(((-1.0)*x3318*x3324))+(((-0.09113113)*sj4)))))+(IKabs(((-0.11334826)+(((-0.18014976)*cj4))+(((0.017472)*x3322))+(pz*pz)+(((-0.07119719)*x3317))+(((0.0217815)*sj4))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x3328=(cj0*px);
IkReal x3329=(pz*sj4);
IkReal x3330=(cj4*pz);
IkReal x3331=(py*sj0);
IkReal x3332=((0.0325)*cj4);
IkReal x3333=((1.0)*cj4);
IkReal x3334=(sj4*x3331);
j1eval[0]=((((-1.0)*x3329))+(((8.27076923076923)*x3330))+(((-1.0)*x3331*x3333))+x3328+x3331+(((10.3107692307692)*pz))+(((-8.27076923076923)*x3334))+(((-8.27076923076923)*sj4*x3328))+(((-1.0)*x3328*x3333)));
j1eval[1]=IKsign(((((0.0325)*x3328))+(((-0.2688)*sj4*x3328))+(((0.3351)*pz))+(((-1.0)*x3331*x3332))+(((-0.2688)*x3334))+(((-0.0325)*x3329))+(((0.2688)*x3330))+(((0.0325)*x3331))+(((-1.0)*x3328*x3332))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x3335=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x3335);
rxp0_1=(px*r20);
rxp1_0=(r21*x3335);
rxp1_1=(px*r21);
rxp2_0=(r22*x3335);
rxp2_1=(px*r22);
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x3336=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x3336);
rxp0_1=(px*r20);
rxp1_0=(r21*x3336);
rxp1_1=(px*r21);
rxp2_0=(r22*x3336);
rxp2_1=(px*r22);
IkReal x3337=cj0*cj0;
IkReal x3338=py*py;
IkReal x3339=(cj0*px);
IkReal x3340=(py*sj0);
j1eval[0]=(x3340+x3339);
j1eval[1]=(((x3337*(px*px)))+x3338+(((2.0)*x3339*x3340))+(((-1.0)*x3337*x3338)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3341=px*px;
IkReal x3342=py*py;
IkReal x3343=cj0*cj0;
IkReal x3344=(px*py);
IkReal x3345=((10000.0)*cj0);
IkReal x3346=(py*sj0);
IkReal x3347=(cj0*sj0);
IkReal x3348=((650.0)*x3343);
CheckValue<IkReal> x3349=IKPowWithIntegerCheck((((px*x3345))+(((10000.0)*x3346))),-1);
if(!x3349.valid){
continue;
}
CheckValue<IkReal> x3350=IKPowWithIntegerCheck(((((650.0)*x3342))+((x3341*x3348))+(((1300.0)*x3344*x3347))+(((-1.0)*x3342*x3348))),-1);
if(!x3350.valid){
continue;
}
if( IKabs(((-6039.0)*(x3349.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3350.value)*(((((-3424.644)*cj0*px))+(((-3424.644)*x3346))+(((2982.0)*x3341*x3347))+(((10000.0)*x3346*(py*py)))+(((-5964.0)*x3343*x3344))+(((10000.0)*x3341*x3346))+(((2982.0)*x3344))+((x3345*(px*px*px)))+((px*x3342*x3345))+(((-2982.0)*x3342*x3347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6039.0)*(x3349.value)))+IKsqr(((x3350.value)*(((((-3424.644)*cj0*px))+(((-3424.644)*x3346))+(((2982.0)*x3341*x3347))+(((10000.0)*x3346*(py*py)))+(((-5964.0)*x3343*x3344))+(((10000.0)*x3341*x3346))+(((2982.0)*x3344))+((x3345*(px*px*px)))+((px*x3342*x3345))+(((-2982.0)*x3342*x3347))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-6039.0)*(x3349.value)), ((x3350.value)*(((((-3424.644)*cj0*px))+(((-3424.644)*x3346))+(((2982.0)*x3341*x3347))+(((10000.0)*x3346*(py*py)))+(((-5964.0)*x3343*x3344))+(((10000.0)*x3341*x3346))+(((2982.0)*x3344))+((x3345*(px*px*px)))+((px*x3342*x3345))+(((-2982.0)*x3342*x3347))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3351=IKsin(j1);
IkReal x3352=IKcos(j1);
IkReal x3353=(py*sj0);
IkReal x3354=(cj0*px);
IkReal x3355=((1.0)*x3352);
IkReal x3356=((0.6702)*x3351);
IkReal x3357=((0.065)*x3352);
evalcond[0]=((0.6039)*x3352);
evalcond[1]=((0.6039)+((x3351*x3354))+((x3351*x3353)));
evalcond[2]=((((-0.6039)*x3351))+(((-1.0)*x3354))+(((-1.0)*x3353)));
evalcond[3]=((((-1.0)*x3354*x3355))+(((-1.0)*x3353*x3355)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-1.0)*(px*px)))+(((-1.0)*x3354*x3356))+(((0.2982)*cj0*py))+(((-1.0)*x3353*x3356))+((x3354*x3357))+(((-1.0)*(py*py)))+((x3353*x3357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3358=py*py;
IkReal x3359=cj0*cj0;
IkReal x3360=px*px;
IkReal x3361=(cj0*px);
IkReal x3362=(py*sj0);
IkReal x3363=((6702.0)*x3359);
CheckValue<IkReal> x3364=IKPowWithIntegerCheck(((((392.535)*x3362))+(((392.535)*x3361))),-1);
if(!x3364.valid){
continue;
}
if( IKabs(((((-1.65590329524756)*x3361))+(((-1.65590329524756)*x3362)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3364.value)*(((376.04478582)+(((-1.0)*x3360*x3363))+(((-1800.8298)*cj0*py))+(((-13404.0)*x3361*x3362))+((x3358*x3363))+(((6039.0)*x3360))+(((1800.8298)*px*sj0))+(((-663.0)*x3358)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.65590329524756)*x3361))+(((-1.65590329524756)*x3362))))+IKsqr(((x3364.value)*(((376.04478582)+(((-1.0)*x3360*x3363))+(((-1800.8298)*cj0*py))+(((-13404.0)*x3361*x3362))+((x3358*x3363))+(((6039.0)*x3360))+(((1800.8298)*px*sj0))+(((-663.0)*x3358))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.65590329524756)*x3361))+(((-1.65590329524756)*x3362))), ((x3364.value)*(((376.04478582)+(((-1.0)*x3360*x3363))+(((-1800.8298)*cj0*py))+(((-13404.0)*x3361*x3362))+((x3358*x3363))+(((6039.0)*x3360))+(((1800.8298)*px*sj0))+(((-663.0)*x3358))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3365=IKsin(j1);
IkReal x3366=IKcos(j1);
IkReal x3367=(py*sj0);
IkReal x3368=(cj0*px);
IkReal x3369=((1.0)*x3366);
IkReal x3370=((0.6702)*x3365);
IkReal x3371=((0.065)*x3366);
evalcond[0]=((0.6039)*x3366);
evalcond[1]=((0.6039)+((x3365*x3368))+((x3365*x3367)));
evalcond[2]=((((-0.6039)*x3365))+(((-1.0)*x3367))+(((-1.0)*x3368)));
evalcond[3]=((((-1.0)*x3367*x3369))+(((-1.0)*x3368*x3369)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-1.0)*(px*px)))+(((-1.0)*x3367*x3370))+((x3368*x3371))+(((0.2982)*cj0*py))+((x3367*x3371))+(((-1.0)*(py*py)))+(((-1.0)*x3368*x3370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3372=cj0*cj0;
IkReal x3373=py*py;
IkReal x3374=cj4*cj4;
IkReal x3375=(cj0*px);
IkReal x3376=((0.2688)*sj4);
IkReal x3377=(cj4*sj4);
IkReal x3378=(py*sj0);
IkReal x3379=((0.0325)*cj4);
IkReal x3380=((1.0)*pz);
CheckValue<IkReal> x3381=IKPowWithIntegerCheck(IKsign(((((-0.0325)*pz*sj4))+(((0.3351)*pz))+(((-1.0)*x3375*x3376))+(((-1.0)*x3375*x3379))+(((0.2688)*cj4*pz))+(((-1.0)*x3376*x3378))+(((-1.0)*x3378*x3379))+(((0.0325)*x3378))+(((0.0325)*x3375)))),-1);
if(!x3381.valid){
continue;
}
CheckValue<IkReal> x3382 = IKatan2WithCheck(IkReal(((-0.01962675)+(((-1.0)*x3378*x3380))+(((0.00215475)*cj4))+(((0.017472)*x3374))+(((-1.0)*x3375*x3380))+(((0.07119719)*x3377))+(((0.09113113)*sj4)))),IkReal(((-0.11334826)+(((-0.18014976)*cj4))+x3373+(((0.017472)*x3377))+((x3372*(px*px)))+(((2.0)*x3375*x3378))+(((-1.0)*x3372*x3373))+(((-0.07119719)*x3374))+(((0.0217815)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3382.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3381.value)))+(x3382.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3383=IKsin(j1);
IkReal x3384=IKcos(j1);
IkReal x3385=((0.0325)*sj4);
IkReal x3386=(cj0*px);
IkReal x3387=(py*sj0);
IkReal x3388=((0.2688)*sj4);
IkReal x3389=((0.2688)*cj4);
IkReal x3390=((0.0325)*cj4);
IkReal x3391=((1.0)*x3384);
IkReal x3392=((0.6702)*x3383);
IkReal x3393=(pz*x3384);
IkReal x3394=(pz*x3383);
IkReal x3395=((0.065)*x3384);
evalcond[0]=((0.3351)+x3389+x3393+(((-1.0)*x3385))+((x3383*x3386))+((x3383*x3387)));
evalcond[1]=((0.0325)+(((-1.0)*x3387*x3391))+x3394+(((-1.0)*x3386*x3391))+(((-1.0)*x3390))+(((-1.0)*x3388)));
evalcond[2]=((((-1.0)*x3383*x3390))+(((-1.0)*x3384*x3385))+(((-1.0)*x3383*x3388))+(((0.0325)*x3383))+pz+((x3384*x3389))+(((0.3351)*x3384)));
evalcond[3]=((((-0.3351)*x3383))+(((-1.0)*x3387))+(((-1.0)*x3386))+(((-1.0)*x3384*x3388))+(((-1.0)*x3383*x3389))+(((-1.0)*x3384*x3390))+(((0.0325)*x3384))+((x3383*x3385)));
evalcond[4]=((-0.06226938)+(((-0.065)*x3394))+(((-0.2982)*px*sj0))+((x3386*x3395))+(((-1.0)*x3387*x3392))+(((-0.6702)*x3393))+((x3387*x3395))+(((0.2982)*cj0*py))+(((-1.0)*x3386*x3392))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3396=cj4*cj4;
IkReal x3397=(cj0*px);
IkReal x3398=((0.0325)*pz);
IkReal x3399=((0.0325)*sj4);
IkReal x3400=(py*sj0);
IkReal x3401=((1.0)*pz);
IkReal x3402=(cj4*sj4);
IkReal x3403=((0.2688)*cj4);
CheckValue<IkReal> x3404=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3399*x3400))+(((0.3351)*x3400))+(((0.2688)*pz*sj4))+((x3397*x3403))+(((-1.0)*x3398))+((x3400*x3403))+(((0.3351)*x3397))+(((-1.0)*x3397*x3399))+((cj4*x3398)))),-1);
if(!x3404.valid){
continue;
}
CheckValue<IkReal> x3405 = IKatan2WithCheck(IkReal(((-0.11334826)+(((-0.18014976)*cj4))+(((-0.07119719)*x3396))+(((0.017472)*x3402))+(pz*pz)+(((0.0217815)*sj4)))),IkReal(((0.01962675)+(((-1.0)*x3400*x3401))+(((-0.00215475)*cj4))+(((-1.0)*x3397*x3401))+(((-0.017472)*x3396))+(((-0.09113113)*sj4))+(((-0.07119719)*x3402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3405.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3404.value)))+(x3405.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3406=IKsin(j1);
IkReal x3407=IKcos(j1);
IkReal x3408=((0.0325)*sj4);
IkReal x3409=(cj0*px);
IkReal x3410=(py*sj0);
IkReal x3411=((0.2688)*sj4);
IkReal x3412=((0.2688)*cj4);
IkReal x3413=((0.0325)*cj4);
IkReal x3414=((1.0)*x3407);
IkReal x3415=((0.6702)*x3406);
IkReal x3416=(pz*x3407);
IkReal x3417=(pz*x3406);
IkReal x3418=((0.065)*x3407);
evalcond[0]=((0.3351)+((x3406*x3410))+((x3406*x3409))+x3416+x3412+(((-1.0)*x3408)));
evalcond[1]=((0.0325)+x3417+(((-1.0)*x3409*x3414))+(((-1.0)*x3410*x3414))+(((-1.0)*x3411))+(((-1.0)*x3413)));
evalcond[2]=((((-1.0)*x3407*x3408))+(((0.3351)*x3407))+((x3407*x3412))+pz+(((-1.0)*x3406*x3411))+(((-1.0)*x3406*x3413))+(((0.0325)*x3406)));
evalcond[3]=((((-1.0)*x3407*x3413))+(((-1.0)*x3407*x3411))+(((-1.0)*x3410))+(((-1.0)*x3409))+((x3406*x3408))+(((-1.0)*x3406*x3412))+(((0.0325)*x3407))+(((-0.3351)*x3406)));
evalcond[4]=((-0.06226938)+((x3409*x3418))+(((-0.2982)*px*sj0))+(((-0.065)*x3417))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-1.0)*x3409*x3415))+(((-1.0)*x3410*x3415))+(((-0.6702)*x3416))+((x3410*x3418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3419=cj4*cj4;
IkReal x3420=(cj0*px);
IkReal x3421=((0.017472)*sj4);
IkReal x3422=((0.0325)*cj4);
IkReal x3423=(py*sj0);
IkReal x3424=((0.2688)*sj4);
CheckValue<IkReal> x3425 = IKatan2WithCheck(IkReal(((0.01962675)+(((-0.017472)*x3419))+(((-0.00215475)*cj4))+((pz*x3420))+((pz*x3423))+(((-0.09113113)*sj4))+(((-0.07119719)*cj4*sj4)))),IkReal(((-0.07330969)+x3421+(pz*pz)+(((0.0021125)*cj4))+(((-1.0)*cj4*x3421))+(((0.07119719)*x3419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3425.valid){
continue;
}
CheckValue<IkReal> x3426=IKPowWithIntegerCheck(IKsign(((((-0.2688)*cj4*pz))+((x3420*x3422))+((x3420*x3424))+(((-0.0325)*x3423))+(((-0.0325)*x3420))+((x3422*x3423))+(((-0.3351)*pz))+((x3423*x3424))+(((0.0325)*pz*sj4)))),-1);
if(!x3426.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3425.value)+(((1.5707963267949)*(x3426.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x3427=IKsin(j1);
IkReal x3428=IKcos(j1);
IkReal x3429=((0.0325)*sj4);
IkReal x3430=(cj0*px);
IkReal x3431=(py*sj0);
IkReal x3432=((0.2688)*sj4);
IkReal x3433=((0.2688)*cj4);
IkReal x3434=((0.0325)*cj4);
IkReal x3435=((1.0)*x3428);
IkReal x3436=((0.6702)*x3427);
IkReal x3437=(pz*x3428);
IkReal x3438=(pz*x3427);
IkReal x3439=((0.065)*x3428);
evalcond[0]=((0.3351)+((x3427*x3430))+((x3427*x3431))+(((-1.0)*x3429))+x3433+x3437);
evalcond[1]=((0.0325)+(((-1.0)*x3431*x3435))+(((-1.0)*x3430*x3435))+x3438+(((-1.0)*x3434))+(((-1.0)*x3432)));
evalcond[2]=((((-1.0)*x3427*x3432))+(((-1.0)*x3427*x3434))+((x3428*x3433))+(((0.3351)*x3428))+(((0.0325)*x3427))+pz+(((-1.0)*x3428*x3429)));
evalcond[3]=((((-1.0)*x3427*x3433))+(((-1.0)*x3428*x3432))+(((-1.0)*x3428*x3434))+((x3427*x3429))+(((-0.3351)*x3427))+(((0.0325)*x3428))+(((-1.0)*x3430))+(((-1.0)*x3431)));
evalcond[4]=((-0.06226938)+(((-0.2982)*px*sj0))+(((-0.6702)*x3437))+(((-1.0)*x3431*x3436))+(((-1.0)*x3430*x3436))+((x3430*x3439))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x3431*x3439))+(((-0.065)*x3438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x3440=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x3440);
rxp0_1=(px*r20);
rxp1_0=(r21*x3440);
rxp1_1=(px*r21);
rxp2_0=(r22*x3440);
rxp2_1=(px*r22);
j1eval[0]=sj2;
j1eval[1]=(((cj0*px*sj2))+((py*sj0*sj2)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x3441=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x3441);
rxp0_1=(px*r20);
rxp1_0=(r21*x3441);
rxp1_1=(px*r21);
rxp2_0=(r22*x3441);
rxp2_1=(px*r22);
IkReal x3442=py*py;
IkReal x3443=cj0*cj0;
IkReal x3444=(cj0*px);
IkReal x3445=((1.0)*sj2);
IkReal x3446=(py*sj0*sj2);
IkReal x3447=(sj2*x3442);
j1eval[0]=((((-1.0)*x3444*x3445))+(((-1.0)*py*sj0*x3445)));
j1eval[1]=((((-1.0)*x3443*x3445*(px*px)))+(((-2.0)*x3444*x3446))+((x3443*x3447))+(((-1.0)*x3442*x3445)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x3448=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x3448);
rxp0_1=(px*r20);
rxp1_0=(r21*x3448);
rxp1_1=(px*r21);
rxp2_0=(r22*x3448);
rxp2_1=(px*r22);
IkReal x3449=py*py;
IkReal x3450=cj0*cj0;
IkReal x3451=((1.0)*cj2);
IkReal x3452=(cj0*px);
IkReal x3453=(py*sj0);
j1eval[0]=((((-1.0)*x3451*x3452))+(((-1.0)*x3451*x3453)));
j1eval[1]=(((cj2*x3449*x3450))+(((-1.0)*x3450*x3451*(px*px)))+(((-1.0)*x3449*x3451))+(((-2.0)*cj2*x3452*x3453)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x3454=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x3454);
rxp0_1=(px*r20);
rxp1_0=(r21*x3454);
rxp1_1=(px*r21);
rxp2_0=(r22*x3454);
rxp2_1=(px*r22);
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=IKabs((((cj0*px))+((py*sj0))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3455=(cj0*px);
IkReal x3456=(py*sj0);
op[0]=(x3456+x3455);
op[1]=0;
op[2]=((((-1.0)*x3455))+(((-1.0)*x3456)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x3457=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
pz=0;
j4=0;
sj4=0;
cj4=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x3457);
rxp0_1=(px*r20);
rxp1_0=(r21*x3457);
rxp1_1=(px*r21);
rxp2_0=(r22*x3457);
rxp2_1=(px*r22);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=IKabs((((cj0*px))+((py*sj0))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3458=(cj0*px);
IkReal x3459=(py*sj0);
op[0]=(x3458+x3459);
op[1]=0;
op[2]=((((-1.0)*x3458))+(((-1.0)*x3459)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3460=cj0*cj0;
IkReal x3461=py*py;
IkReal x3462=px*px;
IkReal x3463=(px*sj0);
IkReal x3464=(cj0*cj2);
IkReal x3465=(py*sj0);
IkReal x3466=((1.0)*px);
IkReal x3467=(cj0*sj0);
IkReal x3468=(px*py);
IkReal x3469=(cj2*x3462);
IkReal x3470=((0.065)*x3460);
IkReal x3471=((1.0)*cj2*sj0);
IkReal x3472=(cj2*x3461);
CheckValue<IkReal> x3473=IKPowWithIntegerCheck(((((-1.0)*cj2*x3465))+(((-1.0)*x3464*x3466))),-1);
if(!x3473.valid){
continue;
}
CheckValue<IkReal> x3474=IKPowWithIntegerCheck((((x3470*x3472))+(((-0.13)*py*x3463*x3464))+(((-1.0)*x3469*x3470))+(((-0.065)*x3472))),-1);
if(!x3474.valid){
continue;
}
if( IKabs(((x3473.value)*(((((-1.0)*cj0*py*sj2))+((sj2*x3463))+(((0.1491)*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3474.value)*(((((-1.0)*x3461*x3464*x3466))+(((-0.09992682)*cj0*px))+(((0.2982)*sj0*x3461*x3464))+(((1.3404)*x3460*x3468))+(((-0.06226938)*cj2*x3465))+(((-1.0)*x3464*x3466*(px*px)))+(((0.6702)*x3461*x3467))+(((-0.2982)*sj0*x3462*x3464))+(((-1.0)*cj2*x3465*(py*py)))+(((-1.0)*x3465*x3469))+(((-0.2982)*cj2*x3468))+(((-0.06226938)*px*x3464))+(((-0.09992682)*x3465))+(((-0.6702)*x3462*x3467))+(((0.5964)*cj2*x3460*x3468))+(((-0.6702)*x3468)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3473.value)*(((((-1.0)*cj0*py*sj2))+((sj2*x3463))+(((0.1491)*sj2))))))+IKsqr(((x3474.value)*(((((-1.0)*x3461*x3464*x3466))+(((-0.09992682)*cj0*px))+(((0.2982)*sj0*x3461*x3464))+(((1.3404)*x3460*x3468))+(((-0.06226938)*cj2*x3465))+(((-1.0)*x3464*x3466*(px*px)))+(((0.6702)*x3461*x3467))+(((-0.2982)*sj0*x3462*x3464))+(((-1.0)*cj2*x3465*(py*py)))+(((-1.0)*x3465*x3469))+(((-0.2982)*cj2*x3468))+(((-0.06226938)*px*x3464))+(((-0.09992682)*x3465))+(((-0.6702)*x3462*x3467))+(((0.5964)*cj2*x3460*x3468))+(((-0.6702)*x3468))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3473.value)*(((((-1.0)*cj0*py*sj2))+((sj2*x3463))+(((0.1491)*sj2))))), ((x3474.value)*(((((-1.0)*x3461*x3464*x3466))+(((-0.09992682)*cj0*px))+(((0.2982)*sj0*x3461*x3464))+(((1.3404)*x3460*x3468))+(((-0.06226938)*cj2*x3465))+(((-1.0)*x3464*x3466*(px*px)))+(((0.6702)*x3461*x3467))+(((-0.2982)*sj0*x3462*x3464))+(((-1.0)*cj2*x3465*(py*py)))+(((-1.0)*x3465*x3469))+(((-0.2982)*cj2*x3468))+(((-0.06226938)*px*x3464))+(((-0.09992682)*x3465))+(((-0.6702)*x3462*x3467))+(((0.5964)*cj2*x3460*x3468))+(((-0.6702)*x3468))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3475=IKcos(j1);
IkReal x3476=IKsin(j1);
IkReal x3477=(cj0*sj2);
IkReal x3478=((0.6702)*px);
IkReal x3479=(px*sj0);
IkReal x3480=(cj2*sj0);
IkReal x3481=(py*sj0);
IkReal x3482=(cj0*py);
IkReal x3483=((1.0)*cj2);
IkReal x3484=(cj0*px);
IkReal x3485=((1.0)*x3475);
IkReal x3486=(sj2*x3476);
IkReal x3487=((1.0)*x3476);
IkReal x3488=((0.065)*x3475);
evalcond[0]=((-0.6039)*sj2*x3475);
evalcond[1]=((((-1.0)*x3484))+(((-1.0)*x3481))+(((0.6039)*x3486)));
evalcond[2]=((((-1.0)*x3481*x3485))+(((-1.0)*x3484*x3485)));
evalcond[3]=((((-1.0)*x3476*x3483*x3484))+(((-1.0)*py*x3480*x3487))+((py*x3477))+(((-1.0)*sj2*x3479))+(((-0.1491)*sj2)));
evalcond[4]=((0.6039)+(((-1.0)*x3482*x3483))+(((0.1491)*cj2))+(((-1.0)*x3481*x3486))+(((-1.0)*px*x3477*x3487))+((cj2*x3479)));
evalcond[5]=((-0.06226938)+(((-1.0)*(px*px)))+((x3484*x3488))+((x3476*x3477*x3478))+(((0.6702)*cj2*x3482))+(((0.2982)*x3482))+(((-0.2982)*x3479))+(((0.6702)*x3481*x3486))+(((-0.09992682)*cj2))+(((-1.0)*(py*py)))+(((-1.0)*x3478*x3480))+((x3481*x3488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3489=py*py;
IkReal x3490=px*px;
IkReal x3491=cj0*cj0;
IkReal x3492=(px*sj2);
IkReal x3493=((1.0)*cj0);
IkReal x3494=((1.0)*sj0);
IkReal x3495=(py*sj2);
IkReal x3496=(cj0*py);
IkReal x3497=(sj2*x3489);
IkReal x3498=((0.2982)*cj0*sj0);
IkReal x3499=(sj2*x3490);
IkReal x3500=((0.065)*x3491);
CheckValue<IkReal> x3501=IKPowWithIntegerCheck(((((-1.0)*x3494*x3495))+(((-1.0)*x3492*x3493))),-1);
if(!x3501.valid){
continue;
}
CheckValue<IkReal> x3502=IKPowWithIntegerCheck(((((-0.065)*x3497))+(((-0.13)*sj0*x3492*x3496))+((x3497*x3500))+(((-1.0)*x3499*x3500))),-1);
if(!x3502.valid){
continue;
}
if( IKabs(((x3501.value)*(((-0.6039)+(((-1.0)*cj2*px*x3494))+(((-0.1491)*cj2))+((cj2*x3496)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3502.value)*(((((0.5964)*py*x3491*x3492))+(((-1.0)*x3498*x3499))+(((-0.2982)*py*x3492))+((x3497*x3498))+(((-1.0)*x3494*x3495*(py*py)))+(((0.3424644)*sj0*x3495))+(((-1.0)*x3490*x3494*x3495))+(((0.3424644)*cj0*x3492))+(((-1.0)*x3492*x3493*(px*px)))+(((-1.0)*x3489*x3492*x3493)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3501.value)*(((-0.6039)+(((-1.0)*cj2*px*x3494))+(((-0.1491)*cj2))+((cj2*x3496))))))+IKsqr(((x3502.value)*(((((0.5964)*py*x3491*x3492))+(((-1.0)*x3498*x3499))+(((-0.2982)*py*x3492))+((x3497*x3498))+(((-1.0)*x3494*x3495*(py*py)))+(((0.3424644)*sj0*x3495))+(((-1.0)*x3490*x3494*x3495))+(((0.3424644)*cj0*x3492))+(((-1.0)*x3492*x3493*(px*px)))+(((-1.0)*x3489*x3492*x3493))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3501.value)*(((-0.6039)+(((-1.0)*cj2*px*x3494))+(((-0.1491)*cj2))+((cj2*x3496))))), ((x3502.value)*(((((0.5964)*py*x3491*x3492))+(((-1.0)*x3498*x3499))+(((-0.2982)*py*x3492))+((x3497*x3498))+(((-1.0)*x3494*x3495*(py*py)))+(((0.3424644)*sj0*x3495))+(((-1.0)*x3490*x3494*x3495))+(((0.3424644)*cj0*x3492))+(((-1.0)*x3492*x3493*(px*px)))+(((-1.0)*x3489*x3492*x3493))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3503=IKcos(j1);
IkReal x3504=IKsin(j1);
IkReal x3505=(cj0*sj2);
IkReal x3506=((0.6702)*px);
IkReal x3507=(px*sj0);
IkReal x3508=(cj2*sj0);
IkReal x3509=(py*sj0);
IkReal x3510=(cj0*py);
IkReal x3511=((1.0)*cj2);
IkReal x3512=(cj0*px);
IkReal x3513=((1.0)*x3503);
IkReal x3514=(sj2*x3504);
IkReal x3515=((1.0)*x3504);
IkReal x3516=((0.065)*x3503);
evalcond[0]=((-0.6039)*sj2*x3503);
evalcond[1]=((((0.6039)*x3514))+(((-1.0)*x3509))+(((-1.0)*x3512)));
evalcond[2]=((((-1.0)*x3512*x3513))+(((-1.0)*x3509*x3513)));
evalcond[3]=(((py*x3505))+(((-1.0)*py*x3508*x3515))+(((-0.1491)*sj2))+(((-1.0)*x3504*x3511*x3512))+(((-1.0)*sj2*x3507)));
evalcond[4]=((0.6039)+(((-1.0)*px*x3505*x3515))+(((-1.0)*x3510*x3511))+(((0.1491)*cj2))+(((-1.0)*x3509*x3514))+((cj2*x3507)));
evalcond[5]=((-0.06226938)+(((-1.0)*(px*px)))+(((-1.0)*x3506*x3508))+((x3504*x3505*x3506))+((x3509*x3516))+(((0.6702)*x3509*x3514))+(((0.6702)*cj2*x3510))+(((0.2982)*x3510))+(((-0.2982)*x3507))+(((-0.09992682)*cj2))+(((-1.0)*(py*py)))+((x3512*x3516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3517=cj0*cj0;
IkReal x3518=px*px;
IkReal x3519=py*py;
IkReal x3520=(cj0*sj2);
IkReal x3521=((4047.3378)*cj2);
IkReal x3522=(py*sj0);
IkReal x3523=(px*sj0*sj2);
IkReal x3524=((6702.0)*sj2*x3517);
CheckValue<IkReal> x3525=IKPowWithIntegerCheck(sj2,-1);
if(!x3525.valid){
continue;
}
CheckValue<IkReal> x3526=IKPowWithIntegerCheck(((((392.535)*sj2*x3522))+(((392.535)*px*x3520))),-1);
if(!x3526.valid){
continue;
}
if( IKabs(((0.000165590329524756)*(x3525.value)*(((((10000.0)*x3522))+(((10000.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3526.value)*(((((603.45806598)*cj2*sj2))+(((-1800.8298)*py*x3520))+(((-1.0)*py*x3520*x3521))+(((6039.0)*sj2*x3518))+(((-13404.0)*px*x3520*x3522))+(((1800.8298)*x3523))+((x3521*x3523))+(((376.04478582)*sj2))+(((-663.0)*sj2*x3519))+((x3519*x3524))+(((-1.0)*x3518*x3524)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000165590329524756)*(x3525.value)*(((((10000.0)*x3522))+(((10000.0)*cj0*px))))))+IKsqr(((x3526.value)*(((((603.45806598)*cj2*sj2))+(((-1800.8298)*py*x3520))+(((-1.0)*py*x3520*x3521))+(((6039.0)*sj2*x3518))+(((-13404.0)*px*x3520*x3522))+(((1800.8298)*x3523))+((x3521*x3523))+(((376.04478582)*sj2))+(((-663.0)*sj2*x3519))+((x3519*x3524))+(((-1.0)*x3518*x3524))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.000165590329524756)*(x3525.value)*(((((10000.0)*x3522))+(((10000.0)*cj0*px))))), ((x3526.value)*(((((603.45806598)*cj2*sj2))+(((-1800.8298)*py*x3520))+(((-1.0)*py*x3520*x3521))+(((6039.0)*sj2*x3518))+(((-13404.0)*px*x3520*x3522))+(((1800.8298)*x3523))+((x3521*x3523))+(((376.04478582)*sj2))+(((-663.0)*sj2*x3519))+((x3519*x3524))+(((-1.0)*x3518*x3524))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3527=IKcos(j1);
IkReal x3528=IKsin(j1);
IkReal x3529=(cj0*sj2);
IkReal x3530=((0.6702)*px);
IkReal x3531=(px*sj0);
IkReal x3532=(cj2*sj0);
IkReal x3533=(py*sj0);
IkReal x3534=(cj0*py);
IkReal x3535=((1.0)*cj2);
IkReal x3536=(cj0*px);
IkReal x3537=((1.0)*x3527);
IkReal x3538=(sj2*x3528);
IkReal x3539=((1.0)*x3528);
IkReal x3540=((0.065)*x3527);
evalcond[0]=((-0.6039)*sj2*x3527);
evalcond[1]=((((0.6039)*x3538))+(((-1.0)*x3536))+(((-1.0)*x3533)));
evalcond[2]=((((-1.0)*x3533*x3537))+(((-1.0)*x3536*x3537)));
evalcond[3]=(((py*x3529))+(((-1.0)*x3528*x3535*x3536))+(((-1.0)*sj2*x3531))+(((-1.0)*py*x3532*x3539))+(((-0.1491)*sj2)));
evalcond[4]=((0.6039)+((cj2*x3531))+(((0.1491)*cj2))+(((-1.0)*x3533*x3538))+(((-1.0)*px*x3529*x3539))+(((-1.0)*x3534*x3535)));
evalcond[5]=((-0.06226938)+(((-1.0)*(px*px)))+((x3533*x3540))+(((0.6702)*cj2*x3534))+(((0.6702)*x3533*x3538))+((x3528*x3529*x3530))+(((0.2982)*x3534))+(((-0.2982)*x3531))+(((-1.0)*x3530*x3532))+((x3536*x3540))+(((-0.09992682)*cj2))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=0;
sj2=0;
cj2=1.0;
j4=0;
sj4=0;
cj4=1.0;
j1eval[0]=IKabs((((cj0*px))+((py*sj0))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3541=(cj0*px);
IkReal x3542=(py*sj0);
op[0]=(x3541+x3542);
op[1]=0;
op[2]=((((-1.0)*x3541))+(((-1.0)*x3542)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j4=0;
sj4=0;
cj4=1.0;
j1eval[0]=IKabs((((cj0*px))+((py*sj0))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3543=(cj0*px);
IkReal x3544=(py*sj0);
op[0]=(x3544+x3543);
op[1]=0;
op[2]=((((-1.0)*x3543))+(((-1.0)*x3544)));
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3545=cj0*cj0;
IkReal x3546=py*py;
IkReal x3547=px*px;
IkReal x3548=(py*sj0);
IkReal x3549=((0.0325)*cj2);
IkReal x3550=((1.0)*cj2);
IkReal x3551=((0.1491)*sj2);
IkReal x3552=(cj0*px);
IkReal x3553=(pz*sj2);
IkReal x3554=((0.2688)*cj2*sj4);
IkReal x3555=(cj0*sj0*sj2);
IkReal x3556=(px*py*sj2);
CheckValue<IkReal> x3557=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3550*(pz*pz)))+(((-1.0)*x3546*x3550))+(((-2.0)*cj2*x3548*x3552))+(((-1.0)*x3545*x3547*x3550))+((cj2*x3545*x3546)))),-1);
if(!x3557.valid){
continue;
}
CheckValue<IkReal> x3558 = IKatan2WithCheck(IkReal((((pz*x3549))+(((-1.0)*x3546*x3555))+(((-1.0)*pz*x3554))+x3556+((x3547*x3555))+((x3548*x3551))+((x3551*x3552))+(((-1.0)*cj4*pz*x3549))+(((-2.0)*x3545*x3556)))),IkReal((((pz*x3551))+((cj4*x3548*x3549))+((x3548*x3554))+((x3552*x3554))+(((-1.0)*x3548*x3549))+((px*sj0*x3553))+(((-1.0)*cj0*py*x3553))+(((-1.0)*x3549*x3552))+((cj4*x3549*x3552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3558.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3557.value)))+(x3558.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3559=IKcos(j1);
IkReal x3560=IKsin(j1);
IkReal x3561=((0.0325)*sj4);
IkReal x3562=(cj0*px);
IkReal x3563=(cj0*py);
IkReal x3564=(py*sj0);
IkReal x3565=(px*sj0);
IkReal x3566=((0.6702)*cj2);
IkReal x3567=((0.2688)*sj4);
IkReal x3568=((1.0)*cj2);
IkReal x3569=((0.0325)*cj4);
IkReal x3570=((0.2688)*cj4);
IkReal x3571=(sj2*x3560);
IkReal x3572=((1.0)*x3559);
IkReal x3573=((0.065)*x3559);
IkReal x3574=(pz*x3560);
IkReal x3575=(sj2*x3559);
evalcond[0]=((0.0325)+x3574+(((-1.0)*x3569))+(((-1.0)*x3567))+(((-1.0)*x3564*x3572))+(((-1.0)*x3562*x3572)));
evalcond[1]=((((-1.0)*sj2*x3565))+(((-1.0)*pz*x3559*x3568))+(((-1.0)*x3560*x3564*x3568))+(((-1.0)*x3560*x3562*x3568))+((sj2*x3563))+(((-0.1491)*sj2)));
evalcond[2]=((((-1.0)*x3560*x3569))+(((-1.0)*x3560*x3567))+(((0.0325)*x3560))+pz+(((-0.3351)*x3575))+((x3561*x3575))+(((-1.0)*x3570*x3575)));
evalcond[3]=((0.3351)+(((-1.0)*x3564*x3571))+(((-1.0)*pz*sj2*x3572))+x3570+(((0.1491)*cj2))+(((-1.0)*x3563*x3568))+(((-1.0)*x3562*x3571))+(((-1.0)*x3561))+((cj2*x3565)));
evalcond[4]=(((x3570*x3571))+(((-1.0)*x3561*x3571))+(((0.0325)*x3559))+(((-1.0)*x3559*x3569))+(((-1.0)*x3559*x3567))+(((0.3351)*x3571))+(((-1.0)*x3564))+(((-1.0)*x3562)));
evalcond[5]=((-0.06226938)+((x3563*x3566))+(((0.6702)*pz*x3575))+(((-1.0)*x3565*x3566))+((x3562*x3573))+(((-0.2982)*x3565))+((x3564*x3573))+(((0.6702)*x3564*x3571))+(((-1.0)*pp))+(((0.6702)*x3562*x3571))+(((0.2982)*x3563))+(((-0.09992682)*cj2))+(((-0.065)*x3574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3576=py*py;
IkReal x3577=cj0*cj0;
IkReal x3578=cj4*cj4;
IkReal x3579=((0.017472)*sj4);
IkReal x3580=((0.2688)*cj4);
IkReal x3581=((0.0325)*sj4);
IkReal x3582=(cj0*px);
IkReal x3583=(sj2*sj4);
IkReal x3584=(py*sj0);
IkReal x3585=((0.0325)*pz);
IkReal x3586=((1.0)*pz);
IkReal x3587=(sj2*x3584);
CheckValue<IkReal> x3588=IKPowWithIntegerCheck(IKsign(((((-0.3351)*sj2*x3582))+((cj4*x3585))+(((-0.3351)*x3587))+(((0.2688)*pz*sj4))+(((-1.0)*x3580*x3587))+(((-1.0)*sj2*x3580*x3582))+((sj2*x3581*x3582))+((x3581*x3587))+(((-1.0)*x3585)))),-1);
if(!x3588.valid){
continue;
}
CheckValue<IkReal> x3589 = IKatan2WithCheck(IkReal(((0.07330969)+(((-0.07119719)*x3578))+(((-1.0)*x3577*(px*px)))+((cj4*x3579))+(((-1.0)*x3579))+(((-0.0021125)*cj4))+(((-1.0)*x3576))+(((-2.0)*x3582*x3584))+((x3576*x3577)))),IkReal(((((0.00215475)*cj4*sj2))+(((-0.01962675)*sj2))+(((0.07119719)*cj4*x3583))+(((-1.0)*x3582*x3586))+(((0.017472)*sj2*x3578))+(((-1.0)*x3584*x3586))+(((0.09113113)*x3583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3589.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3588.value)))+(x3589.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3590=IKcos(j1);
IkReal x3591=IKsin(j1);
IkReal x3592=((0.0325)*sj4);
IkReal x3593=(cj0*px);
IkReal x3594=(cj0*py);
IkReal x3595=(py*sj0);
IkReal x3596=(px*sj0);
IkReal x3597=((0.6702)*cj2);
IkReal x3598=((0.2688)*sj4);
IkReal x3599=((1.0)*cj2);
IkReal x3600=((0.0325)*cj4);
IkReal x3601=((0.2688)*cj4);
IkReal x3602=(sj2*x3591);
IkReal x3603=((1.0)*x3590);
IkReal x3604=((0.065)*x3590);
IkReal x3605=(pz*x3591);
IkReal x3606=(sj2*x3590);
evalcond[0]=((0.0325)+x3605+(((-1.0)*x3593*x3603))+(((-1.0)*x3600))+(((-1.0)*x3595*x3603))+(((-1.0)*x3598)));
evalcond[1]=((((-1.0)*x3591*x3595*x3599))+((sj2*x3594))+(((-1.0)*x3591*x3593*x3599))+(((-1.0)*pz*x3590*x3599))+(((-1.0)*sj2*x3596))+(((-0.1491)*sj2)));
evalcond[2]=((((0.0325)*x3591))+((x3592*x3606))+(((-1.0)*x3601*x3606))+(((-1.0)*x3591*x3598))+pz+(((-0.3351)*x3606))+(((-1.0)*x3591*x3600)));
evalcond[3]=((0.3351)+(((-1.0)*x3594*x3599))+(((0.1491)*cj2))+x3601+((cj2*x3596))+(((-1.0)*x3595*x3602))+(((-1.0)*x3592))+(((-1.0)*pz*sj2*x3603))+(((-1.0)*x3593*x3602)));
evalcond[4]=((((0.0325)*x3590))+(((-1.0)*x3590*x3598))+(((-1.0)*x3590*x3600))+(((0.3351)*x3602))+(((-1.0)*x3592*x3602))+((x3601*x3602))+(((-1.0)*x3595))+(((-1.0)*x3593)));
evalcond[5]=((-0.06226938)+(((0.2982)*x3594))+((x3593*x3604))+(((-1.0)*pp))+((x3595*x3604))+(((0.6702)*pz*x3606))+(((0.6702)*x3593*x3602))+(((0.6702)*x3595*x3602))+(((-0.09992682)*cj2))+(((-0.065)*x3605))+(((-1.0)*x3596*x3597))+((x3594*x3597))+(((-0.2982)*x3596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3607=cj4*cj4;
IkReal x3608=(pz*sj2);
IkReal x3609=((0.017472)*sj4);
IkReal x3610=(py*sj0);
IkReal x3611=((0.2688)*sj4);
IkReal x3612=((0.0325)*cj4);
IkReal x3613=(sj2*sj4);
IkReal x3614=(cj0*px);
CheckValue<IkReal> x3615 = IKatan2WithCheck(IkReal(((((0.00215475)*cj4*sj2))+(((-0.01962675)*sj2))+(((0.07119719)*cj4*x3613))+(((0.09113113)*x3613))+((pz*x3610))+((pz*x3614))+(((0.017472)*sj2*x3607)))),IkReal(((-0.07330969)+x3609+(pz*pz)+(((0.0021125)*cj4))+(((-1.0)*cj4*x3609))+(((0.07119719)*x3607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3615.valid){
continue;
}
CheckValue<IkReal> x3616=IKPowWithIntegerCheck(IKsign((((x3612*x3614))+(((0.2688)*cj4*x3608))+((x3610*x3611))+((x3610*x3612))+(((-0.0325)*x3614))+(((-0.0325)*x3610))+(((0.3351)*x3608))+((x3611*x3614))+(((-0.0325)*sj4*x3608)))),-1);
if(!x3616.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3615.value)+(((1.5707963267949)*(x3616.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3617=IKcos(j1);
IkReal x3618=IKsin(j1);
IkReal x3619=((0.0325)*sj4);
IkReal x3620=(cj0*px);
IkReal x3621=(cj0*py);
IkReal x3622=(py*sj0);
IkReal x3623=(px*sj0);
IkReal x3624=((0.6702)*cj2);
IkReal x3625=((0.2688)*sj4);
IkReal x3626=((1.0)*cj2);
IkReal x3627=((0.0325)*cj4);
IkReal x3628=((0.2688)*cj4);
IkReal x3629=(sj2*x3618);
IkReal x3630=((1.0)*x3617);
IkReal x3631=((0.065)*x3617);
IkReal x3632=(pz*x3618);
IkReal x3633=(sj2*x3617);
evalcond[0]=((0.0325)+(((-1.0)*x3625))+(((-1.0)*x3627))+(((-1.0)*x3620*x3630))+x3632+(((-1.0)*x3622*x3630)));
evalcond[1]=((((-1.0)*pz*x3617*x3626))+(((-1.0)*sj2*x3623))+((sj2*x3621))+(((-1.0)*x3618*x3622*x3626))+(((-1.0)*x3618*x3620*x3626))+(((-0.1491)*sj2)));
evalcond[2]=((((0.0325)*x3618))+(((-1.0)*x3628*x3633))+pz+(((-1.0)*x3618*x3625))+(((-1.0)*x3618*x3627))+(((-0.3351)*x3633))+((x3619*x3633)));
evalcond[3]=((0.3351)+(((-1.0)*pz*sj2*x3630))+((cj2*x3623))+(((-1.0)*x3621*x3626))+(((0.1491)*cj2))+x3628+(((-1.0)*x3622*x3629))+(((-1.0)*x3620*x3629))+(((-1.0)*x3619)));
evalcond[4]=((((0.3351)*x3629))+((x3628*x3629))+(((0.0325)*x3617))+(((-1.0)*x3619*x3629))+(((-1.0)*x3617*x3627))+(((-1.0)*x3617*x3625))+(((-1.0)*x3622))+(((-1.0)*x3620)));
evalcond[5]=((-0.06226938)+(((0.6702)*x3622*x3629))+((x3620*x3631))+(((-0.2982)*x3623))+((x3622*x3631))+(((-1.0)*x3623*x3624))+(((0.6702)*x3620*x3629))+(((-1.0)*pp))+(((0.2982)*x3621))+((x3621*x3624))+(((0.6702)*pz*x3633))+(((-0.09992682)*cj2))+(((-0.065)*x3632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3634 = IKatan2WithCheck(IkReal(((((0.2688)*cj0*cj3*py*sj4*(cj2*cj2)))+(((0.00484575)*cj3*(cj2*cj2)))+(((0.0325)*cj2*px*sj0*sj2*sj4))+(((0.0325)*cj3*px*sj0*(cj2*cj2)))+(((-0.04996341)*cj2*sj2))+(((-0.00215475)*cj2*cj3*cj4))+(((-0.017472)*cj2*cj3*(cj4*cj4)))+(((-0.0325)*cj0*cj3*py*(cj2*cj2)))+(((-0.09113113)*cj2*cj3*sj4))+(((0.00484575)*cj2*sj2*sj4))+(((-0.00484575)*cj3*cj4*(cj2*cj2)))+(((0.3351)*cj0*cj2*py*sj2))+(((-0.07119719)*cj2*cj3*cj4*sj4))+(((-0.18014976)*cj4*sj2))+(((0.0325)*cj0*cj3*cj4*py*(cj2*cj2)))+(((0.2688)*cj0*cj2*cj4*py*sj2))+(((-0.2688)*cj3*px*sj0*sj4*(cj2*cj2)))+(((-0.2688)*cj2*cj4*px*sj0*sj2))+(((0.0217815)*sj2*sj4))+(((0.017472)*cj4*sj2*sj4))+(((-0.3351)*cj2*px*sj0*sj2))+((sj2*(pz*pz)))+(((-0.0325)*cj0*cj2*py*sj2*sj4))+(((-0.0325)*cj3*cj4*px*sj0*(cj2*cj2)))+(((-0.11334826)*sj2))+(((-0.04007808)*cj2*cj4*sj2))+(((-0.07119719)*sj2*(cj4*cj4)))+(((-0.04007808)*cj3*sj4*(cj2*cj2)))+(((0.01962675)*cj2*cj3)))),IkReal(((((-1.0)*cj0*px*pz*sj2))+(((-1.0)*py*pz*sj0*sj2))+(((0.0325)*cj0*cj2*cj4*py*sj3))+(((-0.0325)*cj0*cj2*py*sj3))+(((-0.00215475)*cj4*sj3))+(((-0.017472)*sj3*(cj4*cj4)))+(((-0.07119719)*cj4*sj3*sj4))+(((-0.09113113)*sj3*sj4))+(((0.00484575)*cj2*sj3))+(((-0.04007808)*cj2*sj3*sj4))+(((-0.00484575)*cj2*cj4*sj3))+(((0.01962675)*sj3))+(((0.2688)*cj0*cj2*py*sj3*sj4))+(((0.0325)*cj2*px*sj0*sj3))+(((-0.0325)*cj2*cj4*px*sj0*sj3))+(((-0.2688)*cj2*px*sj0*sj3*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3634.valid){
continue;
}
CheckValue<IkReal> x3635=IKPowWithIntegerCheck(IKsign(((((-0.0325)*cj2*cj3*cj4*py*sj0*sj2))+(((-0.0325)*cj0*cj2*cj3*cj4*px*sj2))+(((0.0325)*py*sj0*sj4))+(((-0.2688)*pz*sj2*sj3*sj4))+(((-0.2688)*cj2*cj3*py*sj0*sj2*sj4))+(((-0.0325)*cj0*px*sj4*(cj2*cj2)))+(((0.0325)*cj0*cj2*cj3*px*sj2))+(((-0.3351)*py*sj0))+(((0.3351)*cj0*px*(cj2*cj2)))+(((0.2688)*cj0*cj4*px*(cj2*cj2)))+(((-0.2688)*cj4*py*sj0))+(((0.0325)*pz*sj2*sj3))+(((0.0325)*cj2*cj3*py*sj0*sj2))+(((-0.2688)*cj0*cj2*cj3*px*sj2*sj4))+(((0.2688)*cj4*py*sj0*(cj2*cj2)))+(((-0.2688)*cj0*cj4*px))+(((-0.3351)*cj0*px))+(((-0.0325)*py*sj0*sj4*(cj2*cj2)))+(((-0.0325)*cj4*pz*sj2*sj3))+(((0.3351)*py*sj0*(cj2*cj2)))+(((0.0325)*cj0*px*sj4)))),-1);
if(!x3635.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3634.value)+(((1.5707963267949)*(x3635.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3636=IKsin(j1);
IkReal x3637=IKcos(j1);
IkReal x3638=(cj0*sj2);
IkReal x3639=(py*sj3);
IkReal x3640=(cj2*cj3);
IkReal x3641=((0.2688)*sj4);
IkReal x3642=((0.0325)*sj4);
IkReal x3643=((0.6702)*px);
IkReal x3644=(sj2*sj3);
IkReal x3645=(px*sj0);
IkReal x3646=(cj3*sj2);
IkReal x3647=(cj0*py);
IkReal x3648=(py*sj0);
IkReal x3649=(cj2*sj0);
IkReal x3650=((0.0325)*sj3);
IkReal x3651=((0.0325)*cj4);
IkReal x3652=((0.2688)*cj4);
IkReal x3653=(cj0*px);
IkReal x3654=(cj3*py);
IkReal x3655=(sj2*x3636);
IkReal x3656=((0.065)*x3637);
IkReal x3657=(pz*x3637);
IkReal x3658=(sj3*x3637);
IkReal x3659=((0.065)*x3636);
IkReal x3660=(sj2*x3637);
IkReal x3661=(sj3*x3636);
IkReal x3662=(pz*x3661);
IkReal x3663=((1.0)*cj3*x3637);
evalcond[0]=((0.3351)+((cj2*x3645))+(((-1.0)*x3648*x3655))+(((-1.0)*sj2*x3657))+(((0.1491)*cj2))+x3652+(((-1.0)*cj2*x3647))+(((-1.0)*px*x3636*x3638))+(((-1.0)*x3642)));
evalcond[1]=(((x3636*x3639*x3649))+(((-1.0)*x3648*x3663))+((cj2*sj3*x3657))+(((0.1491)*x3644))+((cj2*x3653*x3661))+((cj3*pz*x3636))+(((-1.0)*x3638*x3639))+(((-1.0)*x3653*x3663))+((x3644*x3645)));
evalcond[2]=((((-1.0)*x3637*x3640*x3641))+(((-1.0)*x3637*x3640*x3651))+((x3642*x3660))+(((-1.0)*x3652*x3660))+(((0.0325)*x3637*x3640))+(((-1.0)*x3636*x3650))+pz+((x3641*x3661))+((cj4*x3636*x3650))+(((-0.3351)*x3660)));
evalcond[3]=((0.0325)+((x3653*x3658))+((x3640*x3657))+(((-1.0)*x3662))+((x3636*x3640*x3648))+((x3636*x3640*x3653))+(((0.1491)*x3646))+((x3645*x3646))+((sj0*x3637*x3639))+(((-1.0)*x3641))+(((-1.0)*x3638*x3654))+(((-1.0)*x3651)));
evalcond[4]=((((-0.0325)*x3636*x3640))+(((-1.0)*x3642*x3655))+((cj4*x3637*x3650))+((x3652*x3655))+(((-1.0)*x3637*x3650))+(((-1.0)*x3653))+(((-1.0)*x3648))+((x3636*x3640*x3641))+(((0.3351)*x3655))+((x3636*x3640*x3651))+((x3641*x3658)));
evalcond[5]=((-0.06226938)+(((-1.0)*sj0*x3639*x3656))+(((-0.065)*x3645*x3646))+(((-0.2982)*x3645))+(((-1.0)*sj3*x3653*x3656))+(((0.6702)*cj2*x3647))+(((0.065)*x3638*x3654))+(((0.2982)*x3647))+(((-1.0)*x3640*x3648*x3659))+((x3636*x3638*x3643))+(((-1.0)*pz*x3640*x3656))+(((-1.0)*x3643*x3649))+(((-1.0)*pp))+((pz*sj3*x3659))+(((-0.0096915)*x3646))+(((0.6702)*sj2*x3657))+(((-0.09992682)*cj2))+(((-1.0)*x3640*x3653*x3659))+(((0.6702)*x3648*x3655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3664=IKPowWithIntegerCheck(IKsign(((((0.0325)*cj2*cj3*pz*sj2))+(((-0.0325)*cj0*px*sj2*sj3))+(((-0.2688)*cj4*pz))+(((-0.0325)*pz*sj4*(cj2*cj2)))+(((-0.0325)*cj2*cj3*cj4*pz*sj2))+(((-0.2688)*cj2*cj3*pz*sj2*sj4))+(((0.0325)*cj0*cj4*px*sj2*sj3))+(((0.2688)*cj4*pz*(cj2*cj2)))+(((0.0325)*cj4*py*sj0*sj2*sj3))+(((0.2688)*cj0*px*sj2*sj3*sj4))+(((-0.3351)*pz))+(((0.2688)*py*sj0*sj2*sj3*sj4))+(((-0.0325)*py*sj0*sj2*sj3))+(((0.3351)*pz*(cj2*cj2)))+(((0.0325)*pz*sj4)))),-1);
if(!x3664.valid){
continue;
}
CheckValue<IkReal> x3665 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*px*pz*sj2))+(((0.00215475)*cj4*sj3))+(((-0.01962675)*sj3))+(((-0.2688)*cj0*cj2*py*sj3*sj4))+(((-1.0)*py*pz*sj0*sj2))+(((0.2688)*cj2*px*sj0*sj3*sj4))+(((-0.0325)*cj0*cj2*cj4*py*sj3))+(((-0.00484575)*cj2*sj3))+(((0.04007808)*cj2*sj3*sj4))+(((-0.0325)*cj2*px*sj0*sj3))+(((0.0325)*cj0*cj2*py*sj3))+(((0.09113113)*sj3*sj4))+(((0.017472)*sj3*(cj4*cj4)))+(((0.0325)*cj2*cj4*px*sj0*sj3))+(((0.00484575)*cj2*cj4*sj3))+(((0.07119719)*cj4*sj3*sj4)))),IkReal(((((0.2688)*cj0*cj3*py*sj4*(cj2*cj2)))+(((0.00484575)*cj3*(cj2*cj2)))+(((0.0325)*cj2*px*sj0*sj2*sj4))+(((0.0325)*cj3*px*sj0*(cj2*cj2)))+(((-0.04996341)*cj2*sj2))+(((-0.00215475)*cj2*cj3*cj4))+(((-0.017472)*cj2*cj3*(cj4*cj4)))+(((-0.0325)*cj0*cj3*py*(cj2*cj2)))+(((-0.09113113)*cj2*cj3*sj4))+(((0.00484575)*cj2*sj2*sj4))+(((-0.00484575)*cj3*cj4*(cj2*cj2)))+(((0.3351)*cj0*cj2*py*sj2))+(((-0.07119719)*cj2*cj3*cj4*sj4))+(((-0.18014976)*cj4*sj2))+(((0.0325)*cj0*cj3*cj4*py*(cj2*cj2)))+(((0.2688)*cj0*cj2*cj4*py*sj2))+(((-0.2688)*cj3*px*sj0*sj4*(cj2*cj2)))+(((-0.2688)*cj2*cj4*px*sj0*sj2))+(((0.0217815)*sj2*sj4))+(((0.017472)*cj4*sj2*sj4))+(((-0.3351)*cj2*px*sj0*sj2))+((sj2*(cj0*cj0)*(px*px)))+(((-0.0325)*cj0*cj2*py*sj2*sj4))+(((-0.0325)*cj3*cj4*px*sj0*(cj2*cj2)))+(((2.0)*cj0*px*py*sj0*sj2))+(((-0.11334826)*sj2))+(((-0.04007808)*cj2*cj4*sj2))+(((-1.0)*sj2*(cj0*cj0)*(py*py)))+(((-0.07119719)*sj2*(cj4*cj4)))+(((-0.04007808)*cj3*sj4*(cj2*cj2)))+(((0.01962675)*cj2*cj3))+((sj2*(py*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3665.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3664.value)))+(x3665.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3666=IKsin(j1);
IkReal x3667=IKcos(j1);
IkReal x3668=(cj0*sj2);
IkReal x3669=(py*sj3);
IkReal x3670=(cj2*cj3);
IkReal x3671=((0.2688)*sj4);
IkReal x3672=((0.0325)*sj4);
IkReal x3673=((0.6702)*px);
IkReal x3674=(sj2*sj3);
IkReal x3675=(px*sj0);
IkReal x3676=(cj3*sj2);
IkReal x3677=(cj0*py);
IkReal x3678=(py*sj0);
IkReal x3679=(cj2*sj0);
IkReal x3680=((0.0325)*sj3);
IkReal x3681=((0.0325)*cj4);
IkReal x3682=((0.2688)*cj4);
IkReal x3683=(cj0*px);
IkReal x3684=(cj3*py);
IkReal x3685=(sj2*x3666);
IkReal x3686=((0.065)*x3667);
IkReal x3687=(pz*x3667);
IkReal x3688=(sj3*x3667);
IkReal x3689=((0.065)*x3666);
IkReal x3690=(sj2*x3667);
IkReal x3691=(sj3*x3666);
IkReal x3692=(pz*x3691);
IkReal x3693=((1.0)*cj3*x3667);
evalcond[0]=((0.3351)+((cj2*x3675))+(((-1.0)*px*x3666*x3668))+(((-1.0)*x3678*x3685))+(((0.1491)*cj2))+(((-1.0)*sj2*x3687))+x3682+(((-1.0)*cj2*x3677))+(((-1.0)*x3672)));
evalcond[1]=(((cj3*pz*x3666))+((cj2*sj3*x3687))+((x3674*x3675))+(((-1.0)*x3678*x3693))+(((0.1491)*x3674))+(((-1.0)*x3683*x3693))+(((-1.0)*x3668*x3669))+((x3666*x3669*x3679))+((cj2*x3683*x3691)));
evalcond[2]=(((x3672*x3690))+(((0.0325)*x3667*x3670))+(((-1.0)*x3667*x3670*x3681))+(((-0.3351)*x3690))+(((-1.0)*x3666*x3680))+pz+(((-1.0)*x3682*x3690))+(((-1.0)*x3667*x3670*x3671))+((x3671*x3691))+((cj4*x3666*x3680)));
evalcond[3]=((0.0325)+((sj0*x3667*x3669))+((x3670*x3687))+(((-1.0)*x3681))+((x3675*x3676))+(((0.1491)*x3676))+(((-1.0)*x3668*x3684))+(((-1.0)*x3692))+((x3666*x3670*x3683))+(((-1.0)*x3671))+((x3666*x3670*x3678))+((x3683*x3688)));
evalcond[4]=(((cj4*x3667*x3680))+(((0.3351)*x3685))+((x3671*x3688))+(((-1.0)*x3667*x3680))+((x3682*x3685))+(((-1.0)*x3678))+(((-1.0)*x3683))+((x3666*x3670*x3681))+((x3666*x3670*x3671))+(((-1.0)*x3672*x3685))+(((-0.0325)*x3666*x3670)));
evalcond[5]=((-0.06226938)+(((-1.0)*pz*x3670*x3686))+(((0.6702)*cj2*x3677))+(((-1.0)*sj3*x3683*x3686))+(((0.2982)*x3677))+(((-1.0)*x3670*x3683*x3689))+(((-1.0)*sj0*x3669*x3686))+(((-0.065)*x3675*x3676))+(((-0.2982)*x3675))+(((-1.0)*x3673*x3679))+((x3666*x3668*x3673))+(((0.6702)*x3678*x3685))+(((-1.0)*pp))+((pz*sj3*x3689))+(((0.6702)*sj2*x3687))+(((-1.0)*x3670*x3678*x3689))+(((-0.0096915)*x3676))+(((-0.09992682)*cj2))+(((0.065)*x3668*x3684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3694=cj0*cj0;
IkReal x3695=py*py;
IkReal x3696=px*px;
IkReal x3697=(pz*sj3);
IkReal x3698=((0.0325)*sj4);
IkReal x3699=(cj0*py);
IkReal x3700=(cj2*sj3);
IkReal x3701=((1.0)*cj3);
IkReal x3702=(cj2*cj3);
IkReal x3703=(cj0*px);
IkReal x3704=(cj0*sj0);
IkReal x3705=(py*sj0);
IkReal x3706=(px*sj0);
IkReal x3707=((0.2688)*cj4);
IkReal x3708=((0.1491)*sj3);
IkReal x3709=(px*py);
IkReal x3710=((1.0)*sj3);
IkReal x3711=((0.3351)*cj3);
IkReal x3712=(cj3*pz);
IkReal x3713=(sj2*x3695);
IkReal x3714=((2.0)*x3694);
IkReal x3715=(x3703*x3707);
CheckValue<IkReal> x3716 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x3715))+(((0.3351)*cj2*x3697))+(((-0.1491)*x3702*x3705))+(((-0.1491)*x3702*x3703))+(((-1.0)*x3703*x3711))+((cj3*x3698*x3705))+((cj3*x3698*x3703))+(((-1.0)*x3705*x3711))+((x3702*x3709*x3714))+((x3697*x3706))+((cj2*x3697*x3707))+(((-1.0)*x3697*x3699))+(((-1.0)*cj2*x3696*x3701*x3704))+(((-1.0)*cj2*x3701*x3709))+(((-1.0)*cj3*x3705*x3707))+(((0.1491)*x3697))+(((-1.0)*cj2*x3697*x3698))+((x3695*x3702*x3704)))),IkReal((((sj3*x3709*x3714))+(((-1.0)*x3705*x3708))+((x3698*x3712))+(((-1.0)*x3700*x3715))+(((-1.0)*x3707*x3712))+(((-1.0)*cj2*pz*x3701*x3706))+((sj3*x3695*x3704))+((pz*x3699*x3702))+(((-1.0)*x3703*x3708))+((x3698*x3700*x3705))+((x3698*x3700*x3703))+(((-0.3351)*x3700*x3703))+(((-0.3351)*x3700*x3705))+(((-1.0)*pz*x3711))+(((-1.0)*x3709*x3710))+(((-0.1491)*pz*x3702))+(((-1.0)*x3700*x3705*x3707))+(((-1.0)*x3696*x3704*x3710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3716.valid){
continue;
}
CheckValue<IkReal> x3717=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj2*x3694*x3696*x3701))+((cj3*x3694*x3713))+(((-1.0)*x3701*x3713))+(((-2.0)*cj3*sj2*x3699*x3706))+(((-1.0)*sj2*x3701*(pz*pz))))),-1);
if(!x3717.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3716.value)+(((1.5707963267949)*(x3717.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3718=IKsin(j1);
IkReal x3719=IKcos(j1);
IkReal x3720=(cj0*sj2);
IkReal x3721=(py*sj3);
IkReal x3722=(cj2*cj3);
IkReal x3723=((0.2688)*sj4);
IkReal x3724=((0.0325)*sj4);
IkReal x3725=((0.6702)*px);
IkReal x3726=(sj2*sj3);
IkReal x3727=(px*sj0);
IkReal x3728=(cj3*sj2);
IkReal x3729=(cj0*py);
IkReal x3730=(py*sj0);
IkReal x3731=(cj2*sj0);
IkReal x3732=((0.0325)*sj3);
IkReal x3733=((0.0325)*cj4);
IkReal x3734=((0.2688)*cj4);
IkReal x3735=(cj0*px);
IkReal x3736=(cj3*py);
IkReal x3737=(sj2*x3718);
IkReal x3738=((0.065)*x3719);
IkReal x3739=(pz*x3719);
IkReal x3740=(sj3*x3719);
IkReal x3741=((0.065)*x3718);
IkReal x3742=(sj2*x3719);
IkReal x3743=(sj3*x3718);
IkReal x3744=(pz*x3743);
IkReal x3745=((1.0)*cj3*x3719);
evalcond[0]=((0.3351)+(((-1.0)*sj2*x3739))+((cj2*x3727))+(((-1.0)*x3724))+(((0.1491)*cj2))+(((-1.0)*cj2*x3729))+x3734+(((-1.0)*px*x3718*x3720))+(((-1.0)*x3730*x3737)));
evalcond[1]=(((cj2*x3735*x3743))+(((0.1491)*x3726))+((x3718*x3721*x3731))+((x3726*x3727))+((cj2*sj3*x3739))+(((-1.0)*x3730*x3745))+((cj3*pz*x3718))+(((-1.0)*x3720*x3721))+(((-1.0)*x3735*x3745)));
evalcond[2]=((((-1.0)*x3719*x3722*x3723))+(((-1.0)*x3719*x3722*x3733))+((cj4*x3718*x3732))+((x3724*x3742))+(((0.0325)*x3719*x3722))+(((-1.0)*x3734*x3742))+pz+(((-0.3351)*x3742))+(((-1.0)*x3718*x3732))+((x3723*x3743)));
evalcond[3]=((0.0325)+((x3727*x3728))+((sj0*x3719*x3721))+(((-1.0)*x3733))+(((-1.0)*x3723))+(((0.1491)*x3728))+((x3735*x3740))+((x3718*x3722*x3730))+((x3718*x3722*x3735))+(((-1.0)*x3744))+((x3722*x3739))+(((-1.0)*x3720*x3736)));
evalcond[4]=(((x3734*x3737))+((x3718*x3722*x3723))+((cj4*x3719*x3732))+(((-1.0)*x3724*x3737))+((x3718*x3722*x3733))+(((-0.0325)*x3718*x3722))+(((-1.0)*x3719*x3732))+(((0.3351)*x3737))+(((-1.0)*x3730))+(((-1.0)*x3735))+((x3723*x3740)));
evalcond[5]=((-0.06226938)+(((0.6702)*x3730*x3737))+(((0.6702)*sj2*x3739))+(((-1.0)*pz*x3722*x3738))+(((-0.2982)*x3727))+((x3718*x3720*x3725))+(((-0.0096915)*x3728))+(((0.2982)*x3729))+(((-1.0)*x3725*x3731))+(((-1.0)*pp))+(((-1.0)*x3722*x3730*x3741))+(((-1.0)*sj0*x3721*x3738))+(((-1.0)*x3722*x3735*x3741))+(((0.6702)*cj2*x3729))+(((-1.0)*sj3*x3735*x3738))+(((-0.065)*x3727*x3728))+(((-0.09992682)*cj2))+((pz*sj3*x3741))+(((0.065)*x3720*x3736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x259=((1.0)*sj2);
IkReal x260=(cj2*cj4);
IkReal x261=(sj0*sj3);
IkReal x262=((1.0)*sj0);
IkReal x263=(cj4*sj3);
IkReal x264=((1.0)*cj2);
IkReal x265=(sj1*sj3);
IkReal x266=(cj3*sj4);
IkReal x267=((1.0)*sj1);
IkReal x268=(sj1*x263);
IkReal x269=((1.0)*cj1*sj3);
IkReal x270=((-1.0)*cj1);
IkReal x271=(((cj1*cj3))+(((-1.0)*x264*x265)));
IkReal x272=((((-1.0)*sj4*x259))+((cj3*x260)));
IkReal x273=(((cj2*sj4))+((cj3*cj4*sj2)));
IkReal x274=((((-1.0)*x259*x266))+x260);
IkReal x275=(cj0*x271);
IkReal x276=(cj0*x273);
IkReal x277=((1.0)*x272);
IkReal x278=((((-1.0)*cj3*x267))+(((-1.0)*cj1*sj3*x264)));
IkReal x279=((((-1.0)*cj4*x259))+(((-1.0)*x264*x266)));
IkReal x280=((-1.0)*sj0*x273);
IkReal x281=(((sj0*x271))+((cj0*sj2*sj3)));
IkReal x282=((((-1.0)*sj2*x261))+x275);
IkReal x283=(((x270*x272))+x268);
IkReal x284=((((-1.0)*x267*x272))+(((-1.0)*cj1*x263)));
IkReal x285=((((-1.0)*x267*x279))+((cj1*sj3*sj4)));
IkReal x286=(((x263*x270))+(((-1.0)*sj1*x272)));
IkReal x287=(cj0*x284);
IkReal x288=(((x270*x279))+(((-1.0)*sj4*x265)));
IkReal x289=(x276+((sj0*x284)));
IkReal x290=((((-1.0)*x262*x274))+((cj0*x285)));
IkReal x291=(((sj0*x285))+((cj0*x274)));
new_r00=(((r00*x282))+((r10*x281))+((r20*x278)));
new_r01=(((r01*x282))+((r11*x281))+((r21*x278)));
new_r02=(((r22*x278))+((r12*x281))+((r02*(((((-1.0)*x259*x261))+x275)))));
new_r10=(((r20*(((((-1.0)*cj1*x277))+x268))))+((r00*((((cj0*x286))+x280))))+((r10*((x276+((sj0*x286)))))));
new_r11=(((r21*x283))+((r11*x289))+((r01*((x287+x280)))));
new_r12=(((r22*x283))+((r12*x289))+((r02*(((((-1.0)*x262*x273))+x287)))));
new_r20=(((r00*x290))+((r10*x291))+((r20*x288)));
new_r21=(((r21*x288))+((r01*x290))+((r11*x291)));
new_r22=(((r12*x291))+((r22*x288))+((r02*x290)));
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
sj6array[0]=((-1.0)*new_r22);
if( sj6array[0] >= -1-IKFAST_SINCOS_THRESH && sj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKasin(sj6array[0]);
    cj6array[0] = IKcos(j6array[0]);
    sj6array[1] = sj6array[0];
    j6array[1] = j6array[0] > 0 ? (IKPI-j6array[0]) : (-IKPI-j6array[0]);
    cj6array[1] = -cj6array[0];
}
else if( isnan(sj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
j7eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
j5eval[0]=cj6;
j5eval[1]=IKsign(cj6);
j5eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj6;
j5eval[1]=new_r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j7mul = 1;
j7=0;
j5mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].fmul = j7mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 7;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j7mul = 1;
j7=0;
j5mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5=IKatan2(((-1.0)*new_r01), new_r11);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].fmul = j7mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 7;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x292=new_r22*new_r22;
IkReal x293=((16.0)*new_r10);
IkReal x294=((16.0)*new_r01);
IkReal x295=((16.0)*new_r00);
IkReal x296=(new_r11*new_r22);
IkReal x297=((8.0)*new_r00);
IkReal x298=(x292*x293);
IkReal x299=(x292*x294);
j5eval[0]=((IKabs(((((-1.0)*x294))+x299)))+(IKabs(((((-8.0)*x296))+((x292*x297)))))+(IKabs(((((-1.0)*x298))+x293)))+(IKabs((((new_r22*x297))+(((-8.0)*new_r11)))))+(IKabs(((((-1.0)*x299))+x294)))+(IKabs(((((-1.0)*x293))+x298)))+(IKabs((((new_r22*x295))+(((16.0)*new_r11))+(((-32.0)*new_r11*x292)))))+(IKabs(((((32.0)*new_r00))+(((-16.0)*x296))+(((-1.0)*x292*x295))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5, j7]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j5evalpoly[1];
IkReal x300=new_r22*new_r22;
IkReal x301=((16.0)*new_r01);
IkReal x302=(new_r00*new_r22);
IkReal x303=(x300*x301);
IkReal x304=((((8.0)*x302))+(((-8.0)*new_r11)));
op[0]=x304;
op[1]=(x303+(((-1.0)*x301)));
op[2]=((((-32.0)*new_r11*x300))+(((16.0)*x302))+(((16.0)*new_r11)));
op[3]=(x301+(((-1.0)*x303)));
op[4]=x304;
polyroots4(op,zeror,numroots);
IkReal j5array[4], cj5array[4], sj5array[4], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[4]={true,true,true,true};
_nj5 = 4;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x305=new_r22*new_r22;
IkReal x306=((16.0)*new_r10);
IkReal x307=(new_r11*new_r22);
IkReal x308=((8.0)*x307);
IkReal x309=(new_r00*x305);
IkReal x310=((8.0)*x309);
IkReal x311=(x305*x306);
j5evalpoly[0]=((((htj5*htj5*htj5)*((x306+(((-1.0)*x311))))))+x310+(((htj5*htj5*htj5*htj5)*((x310+(((-1.0)*x308))))))+(((htj5*htj5)*(((((32.0)*new_r00))+(((-16.0)*x309))+(((-16.0)*x307))))))+((htj5*((x311+(((-1.0)*x306))))))+(((-1.0)*x308)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j7eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x312=cj5*cj5;
IkReal x313=new_r22*new_r22;
IkReal x314=(new_r22*sj5);
IkReal x315=(((x312*x313))+(((-1.0)*x313))+(((-1.0)*x312)));
j7eval[0]=x315;
j7eval[1]=((IKabs(((((-1.0)*cj5*new_r00))+((new_r01*x314)))))+(IKabs((((new_r00*x314))+((cj5*new_r01))))));
j7eval[2]=IKsign(x315);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=new_r22;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=cj5;
j7eval[1]=new_r22;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x316=IKsin(j7);
IkReal x317=IKcos(j7);
IkReal x318=((1.0)*new_r01);
IkReal x319=((1.0)*new_r00);
IkReal x320=((1.0)*x317);
IkReal x321=((1.0)*x316);
evalcond[0]=(x316+new_r11);
evalcond[1]=((((-1.0)*x320))+new_r10);
evalcond[2]=((((-1.0)*new_r22*x321))+(((-1.0)*x319)));
evalcond[3]=((((-1.0)*new_r22*x320))+(((-1.0)*x318)));
evalcond[4]=((((-1.0)*x321))+(((-1.0)*new_r22*x319)));
evalcond[5]=((((-1.0)*x320))+(((-1.0)*new_r22*x318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x322=IKsin(j7);
IkReal x323=IKcos(j7);
IkReal x324=((1.0)*x323);
IkReal x325=((1.0)*x322);
evalcond[0]=(x322+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*new_r22*x325))+new_r00);
evalcond[2]=((((-1.0)*new_r22*x324))+new_r01);
evalcond[3]=((((-1.0)*x324))+(((-1.0)*new_r10)));
evalcond[4]=(((new_r00*new_r22))+(((-1.0)*x325)));
evalcond[5]=(((new_r01*new_r22))+(((-1.0)*x324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x326=new_r22*new_r22;
CheckValue<IkReal> x327=IKPowWithIntegerCheck(((-1.0)+x326),-1);
if(!x327.valid){
continue;
}
if(((x326*(x327.value))) < -0.00001)
continue;
IkReal gconst54=IKsqrt((x326*(x327.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj5)))))+(IKabs(((((-1.0)*gconst54))+cj5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst54*gconst54))))) < -0.00001)
continue;
IkReal x328=IKsqrt(((1.0)+(((-1.0)*(gconst54*gconst54)))));
if( IKabs(((((-1.0)*new_r11*x328))+(((-1.0)*gconst54*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst54*new_r00))+((new_r10*x328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*x328))+(((-1.0)*gconst54*new_r01))))+IKsqr((((gconst54*new_r00))+((new_r10*x328))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r11*x328))+(((-1.0)*gconst54*new_r01))), (((gconst54*new_r00))+((new_r10*x328))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x329=IKcos(j7);
IkReal x330=IKsin(j7);
IkReal x331=(gconst54*new_r10);
IkReal x332=((1.0)*new_r01);
IkReal x333=((1.0)*new_r22);
IkReal x334=(gconst54*new_r11);
IkReal x335=((1.0)*x329);
IkReal x336=(gconst54*x330);
IkReal x337=(gconst54*x335);
IkReal x338=x328;
IkReal x339=(new_r22*x338);
IkReal x340=((1.0)*x338);
IkReal x341=(x330*x338);
evalcond[0]=(((new_r11*x338))+x330+((gconst54*new_r01)));
evalcond[1]=(((new_r10*x338))+(((-1.0)*x335))+((gconst54*new_r00)));
evalcond[2]=(x336+((x329*x339))+new_r01);
evalcond[3]=((((-1.0)*gconst54*x329*x333))+x341+new_r11);
evalcond[4]=(x331+(((-1.0)*x330*x333))+(((-1.0)*new_r00*x340)));
evalcond[5]=((((-1.0)*x329*x333))+x334+(((-1.0)*x332*x338)));
evalcond[6]=(((x330*x339))+(((-1.0)*x337))+new_r00);
evalcond[7]=((((-1.0)*x333*x336))+new_r10+(((-1.0)*x335*x338)));
evalcond[8]=(((new_r22*x331))+(((-1.0)*new_r00*x333*x338))+(((-1.0)*x330)));
evalcond[9]=(((new_r22*x334))+(((-1.0)*x335))+(((-1.0)*x332*x339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x342=new_r22*new_r22;
CheckValue<IkReal> x343=IKPowWithIntegerCheck(((-1.0)+x342),-1);
if(!x343.valid){
continue;
}
if(((x342*(x343.value))) < -0.00001)
continue;
IkReal gconst54=IKsqrt((x342*(x343.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj5)))))+(IKabs(((((-1.0)*gconst54))+cj5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst54*gconst54))))) < -0.00001)
continue;
IkReal x344=IKsqrt(((1.0)+(((-1.0)*(gconst54*gconst54)))));
if( IKabs((((new_r11*x344))+(((-1.0)*gconst54*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r10*x344))+((gconst54*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*x344))+(((-1.0)*gconst54*new_r01))))+IKsqr(((((-1.0)*new_r10*x344))+((gconst54*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((new_r11*x344))+(((-1.0)*gconst54*new_r01))), ((((-1.0)*new_r10*x344))+((gconst54*new_r00))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x345=IKsin(j7);
IkReal x346=IKcos(j7);
IkReal x347=(gconst54*new_r10);
IkReal x348=(gconst54*new_r11);
IkReal x349=((1.0)*x346);
IkReal x350=(gconst54*x349);
IkReal x351=((1.0)*new_r22*x345);
IkReal x352=x344;
IkReal x353=(new_r22*x352);
IkReal x354=((1.0)*x352);
evalcond[0]=(x345+(((-1.0)*new_r11*x354))+((gconst54*new_r01)));
evalcond[1]=(((gconst54*new_r00))+(((-1.0)*x349))+(((-1.0)*new_r10*x354)));
evalcond[2]=((((-1.0)*x351))+x347+((new_r00*x352)));
evalcond[3]=(((new_r01*x352))+x348+(((-1.0)*new_r22*x349)));
evalcond[4]=((((-1.0)*x349*x353))+new_r01+((gconst54*x345)));
evalcond[5]=((((-1.0)*gconst54*x351))+((x346*x352))+new_r10);
evalcond[6]=(((new_r22*x347))+(((-1.0)*x345))+((new_r00*x353)));
evalcond[7]=(((new_r01*x353))+((new_r22*x348))+(((-1.0)*x349)));
evalcond[8]=((((-1.0)*new_r22*x350))+(((-1.0)*x345*x354))+new_r11);
evalcond[9]=((((-1.0)*x350))+(((-1.0)*x351*x352))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x355=new_r22*new_r22;
CheckValue<IkReal> x356=IKPowWithIntegerCheck(((-1.0)+x355),-1);
if(!x356.valid){
continue;
}
if(((x355*(x356.value))) < -0.00001)
continue;
IkReal gconst55=((-1.0)*(IKsqrt((x355*(x356.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj5)))))+(IKabs(((((-1.0)*gconst55))+cj5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst55*gconst55))))) < -0.00001)
continue;
IkReal x357=IKsqrt(((1.0)+(((-1.0)*(gconst55*gconst55)))));
if( IKabs(((((-1.0)*gconst55*new_r01))+(((-1.0)*new_r11*x357)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst55*new_r00))+((new_r10*x357)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst55*new_r01))+(((-1.0)*new_r11*x357))))+IKsqr((((gconst55*new_r00))+((new_r10*x357))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*gconst55*new_r01))+(((-1.0)*new_r11*x357))), (((gconst55*new_r00))+((new_r10*x357))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x358=IKcos(j7);
IkReal x359=IKsin(j7);
IkReal x360=(gconst55*new_r10);
IkReal x361=(gconst55*new_r22);
IkReal x362=((1.0)*x358);
IkReal x363=((1.0)*x359);
IkReal x364=x357;
IkReal x365=((1.0)*x364);
IkReal x366=(new_r22*x365);
IkReal x367=(x359*x364);
evalcond[0]=(x359+((gconst55*new_r01))+((new_r11*x364)));
evalcond[1]=((((-1.0)*x362))+((gconst55*new_r00))+((new_r10*x364)));
evalcond[2]=(((new_r22*x358*x364))+new_r01+((gconst55*x359)));
evalcond[3]=((((-1.0)*x361*x362))+x367+new_r11);
evalcond[4]=((((-1.0)*new_r00*x365))+(((-1.0)*new_r22*x363))+x360);
evalcond[5]=((((-1.0)*new_r22*x362))+((gconst55*new_r11))+(((-1.0)*new_r01*x365)));
evalcond[6]=(((new_r22*x367))+(((-1.0)*gconst55*x362))+new_r00);
evalcond[7]=((((-1.0)*x362*x364))+(((-1.0)*x361*x363))+new_r10);
evalcond[8]=(((new_r22*x360))+(((-1.0)*new_r00*x366))+(((-1.0)*x363)));
evalcond[9]=((((-1.0)*x362))+(((-1.0)*new_r01*x366))+((new_r11*x361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x368=new_r22*new_r22;
CheckValue<IkReal> x369=IKPowWithIntegerCheck(((-1.0)+x368),-1);
if(!x369.valid){
continue;
}
if(((x368*(x369.value))) < -0.00001)
continue;
IkReal gconst55=((-1.0)*(IKsqrt((x368*(x369.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst55))+cj5)))+(IKabs(((1.0)+(IKsign(sj5)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst55*gconst55))))) < -0.00001)
continue;
IkReal x370=IKsqrt(((1.0)+(((-1.0)*(gconst55*gconst55)))));
if( IKabs(((((-1.0)*gconst55*new_r01))+((new_r11*x370)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r10*x370))+((gconst55*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst55*new_r01))+((new_r11*x370))))+IKsqr(((((-1.0)*new_r10*x370))+((gconst55*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*gconst55*new_r01))+((new_r11*x370))), ((((-1.0)*new_r10*x370))+((gconst55*new_r00))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x371=IKsin(j7);
IkReal x372=IKcos(j7);
IkReal x373=(gconst55*new_r22);
IkReal x374=((1.0)*x372);
IkReal x375=((1.0)*x371);
IkReal x376=x370;
IkReal x377=((1.0)*x376);
IkReal x378=(new_r22*x376);
evalcond[0]=(x371+(((-1.0)*new_r11*x377))+((gconst55*new_r01)));
evalcond[1]=((((-1.0)*x374))+(((-1.0)*new_r10*x377))+((gconst55*new_r00)));
evalcond[2]=((((-1.0)*new_r22*x375))+((new_r00*x376))+((gconst55*new_r10)));
evalcond[3]=((((-1.0)*new_r22*x374))+((new_r01*x376))+((gconst55*new_r11)));
evalcond[4]=(((gconst55*x371))+(((-1.0)*x374*x378))+new_r01);
evalcond[5]=(((x372*x376))+(((-1.0)*x373*x375))+new_r10);
evalcond[6]=((((-1.0)*x375))+((new_r00*x378))+((new_r10*x373)));
evalcond[7]=((((-1.0)*x374))+((new_r01*x378))+((new_r11*x373)));
evalcond[8]=((((-1.0)*x373*x374))+new_r11+(((-1.0)*x375*x376)));
evalcond[9]=((((-1.0)*gconst55*x374))+new_r00+(((-1.0)*x375*x378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x379=((1.0)*cj5*new_r01);
CheckValue<IkReal> x380=IKPowWithIntegerCheck(cj5,-1);
if(!x380.valid){
continue;
}
CheckValue<IkReal> x381=IKPowWithIntegerCheck(new_r22,-1);
if(!x381.valid){
continue;
}
if( IKabs(((((-1.0)*x379))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x380.value)*(x381.value)*((((new_r11*(cj5*cj5)))+(((-1.0)*sj5*x379)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x379))+(((-1.0)*new_r11*sj5))))+IKsqr(((x380.value)*(x381.value)*((((new_r11*(cj5*cj5)))+(((-1.0)*sj5*x379))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*x379))+(((-1.0)*new_r11*sj5))), ((x380.value)*(x381.value)*((((new_r11*(cj5*cj5)))+(((-1.0)*sj5*x379))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x382=IKsin(j7);
IkReal x383=IKcos(j7);
IkReal x384=((1.0)*sj5);
IkReal x385=(cj5*new_r22);
IkReal x386=((1.0)*x383);
IkReal x387=((1.0)*x382);
IkReal x388=(sj5*x382);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x382);
evalcond[1]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x386)));
evalcond[2]=(((new_r22*sj5*x383))+((cj5*x382))+new_r01);
evalcond[3]=(x388+new_r11+(((-1.0)*x385*x386)));
evalcond[4]=(((cj5*new_r10))+(((-1.0)*new_r00*x384))+(((-1.0)*new_r22*x387)));
evalcond[5]=(((cj5*new_r11))+(((-1.0)*new_r01*x384))+(((-1.0)*new_r22*x386)));
evalcond[6]=(((new_r22*x388))+(((-1.0)*cj5*x386))+new_r00);
evalcond[7]=(new_r10+(((-1.0)*x385*x387))+(((-1.0)*x383*x384)));
evalcond[8]=((((-1.0)*new_r00*new_r22*x384))+((new_r10*x385))+(((-1.0)*x387)));
evalcond[9]=((((-1.0)*new_r01*new_r22*x384))+((new_r11*x385))+(((-1.0)*x386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x389=((1.0)*new_r01);
CheckValue<IkReal> x390=IKPowWithIntegerCheck(new_r22,-1);
if(!x390.valid){
continue;
}
if( IKabs(((((-1.0)*cj5*x389))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x390.value)*(((((-1.0)*sj5*x389))+((cj5*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x389))+(((-1.0)*new_r11*sj5))))+IKsqr(((x390.value)*(((((-1.0)*sj5*x389))+((cj5*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj5*x389))+(((-1.0)*new_r11*sj5))), ((x390.value)*(((((-1.0)*sj5*x389))+((cj5*new_r11))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x391=IKsin(j7);
IkReal x392=IKcos(j7);
IkReal x393=((1.0)*sj5);
IkReal x394=(cj5*new_r22);
IkReal x395=((1.0)*x392);
IkReal x396=((1.0)*x391);
IkReal x397=(sj5*x391);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x391);
evalcond[1]=((((-1.0)*x395))+((new_r10*sj5))+((cj5*new_r00)));
evalcond[2]=(((cj5*x391))+new_r01+((new_r22*sj5*x392)));
evalcond[3]=((((-1.0)*x394*x395))+x397+new_r11);
evalcond[4]=((((-1.0)*new_r22*x396))+((cj5*new_r10))+(((-1.0)*new_r00*x393)));
evalcond[5]=((((-1.0)*new_r01*x393))+(((-1.0)*new_r22*x395))+((cj5*new_r11)));
evalcond[6]=((((-1.0)*cj5*x395))+new_r00+((new_r22*x397)));
evalcond[7]=((((-1.0)*x394*x396))+new_r10+(((-1.0)*x392*x393)));
evalcond[8]=((((-1.0)*x396))+(((-1.0)*new_r00*new_r22*x393))+((new_r10*x394)));
evalcond[9]=(((new_r11*x394))+(((-1.0)*x395))+(((-1.0)*new_r01*new_r22*x393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x398=cj5*cj5;
IkReal x399=new_r22*new_r22;
IkReal x400=(new_r22*sj5);
CheckValue<IkReal> x401 = IKatan2WithCheck(IkReal((((cj5*new_r01))+((new_r00*x400)))),IkReal(((((-1.0)*cj5*new_r00))+((new_r01*x400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x401.valid){
continue;
}
CheckValue<IkReal> x402=IKPowWithIntegerCheck(IKsign(((((-1.0)*x399))+(((-1.0)*x398))+((x398*x399)))),-1);
if(!x402.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x401.value)+(((1.5707963267949)*(x402.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x403=IKsin(j7);
IkReal x404=IKcos(j7);
IkReal x405=((1.0)*sj5);
IkReal x406=(cj5*new_r22);
IkReal x407=((1.0)*x404);
IkReal x408=((1.0)*x403);
IkReal x409=(sj5*x403);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x403);
evalcond[1]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x407)));
evalcond[2]=(((new_r22*sj5*x404))+((cj5*x403))+new_r01);
evalcond[3]=((((-1.0)*x406*x407))+x409+new_r11);
evalcond[4]=(((cj5*new_r10))+(((-1.0)*new_r00*x405))+(((-1.0)*new_r22*x408)));
evalcond[5]=(((cj5*new_r11))+(((-1.0)*new_r01*x405))+(((-1.0)*new_r22*x407)));
evalcond[6]=(((new_r22*x409))+(((-1.0)*cj5*x407))+new_r00);
evalcond[7]=((((-1.0)*x406*x408))+(((-1.0)*x404*x405))+new_r10);
evalcond[8]=((((-1.0)*new_r00*new_r22*x405))+((new_r10*x406))+(((-1.0)*x408)));
evalcond[9]=((((-1.0)*new_r01*new_r22*x405))+((new_r11*x406))+(((-1.0)*x407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5, j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x411=IKPowWithIntegerCheck(cj6,-1);
if(!x411.valid){
continue;
}
IkReal x410=x411.value;
CheckValue<IkReal> x412=IKPowWithIntegerCheck(new_r02,-1);
if(!x412.valid){
continue;
}
CheckValue<IkReal> x413=IKPowWithIntegerCheck(x410,-2);
if(!x413.valid){
continue;
}
if( IKabs((x410*(x412.value)*(((x413.value)+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x410)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x410*(x412.value)*(((x413.value)+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x410))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x410*(x412.value)*(((x413.value)+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x410));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x414=IKsin(j5);
IkReal x415=IKcos(j5);
IkReal x416=(new_r12*x415);
IkReal x417=(cj6*x415);
IkReal x418=(new_r02*x414);
IkReal x419=((1.0)*cj6*x414);
evalcond[0]=(x417+new_r12);
evalcond[1]=(new_r02+(((-1.0)*x419)));
evalcond[2]=(((new_r12*x414))+((new_r02*x415)));
evalcond[3]=(cj6+x416+(((-1.0)*x418)));
evalcond[4]=(((new_r20*sj6))+((new_r10*x417))+(((-1.0)*new_r00*x419)));
evalcond[5]=(((new_r11*x417))+((new_r21*sj6))+(((-1.0)*new_r01*x419)));
evalcond[6]=(((sj6*x418))+(((-1.0)*sj6*x416))+((cj6*new_r22)));
evalcond[7]=((1.0)+((cj6*x416))+(((-1.0)*cj6*x418))+((new_r22*sj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
j7eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj6;
j7eval[1]=sj5;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=sj5;
j7eval[2]=sj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x420=((1.0)*cj5);
if( IKabs(((((-1.0)*new_r11*sj5))+(((-1.0)*new_r01*x420)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj5))+(((-1.0)*new_r11*x420)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj5))+(((-1.0)*new_r01*x420))))+IKsqr((((new_r01*sj5))+(((-1.0)*new_r11*x420))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r11*sj5))+(((-1.0)*new_r01*x420))), (((new_r01*sj5))+(((-1.0)*new_r11*x420))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x421=IKsin(j7);
IkReal x422=IKcos(j7);
IkReal x423=((1.0)*sj5);
IkReal x424=(cj5*x421);
IkReal x425=(cj5*x422);
IkReal x426=(x422*x423);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x421);
evalcond[1]=((((-1.0)*new_r00*x423))+((cj5*new_r10))+x421);
evalcond[2]=(((cj5*new_r11))+x422+(((-1.0)*new_r01*x423)));
evalcond[3]=((((-1.0)*x422))+((new_r10*sj5))+((cj5*new_r00)));
evalcond[4]=(x425+((sj5*x421))+new_r11);
evalcond[5]=((((-1.0)*x426))+x424+new_r01);
evalcond[6]=((((-1.0)*x426))+x424+new_r10);
evalcond[7]=((((-1.0)*x425))+(((-1.0)*x421*x423))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x427=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj5*x427))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x427))+((cj5*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x427))+(((-1.0)*new_r11*sj5))))+IKsqr(((((-1.0)*sj5*x427))+((cj5*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj5*x427))+(((-1.0)*new_r11*sj5))), ((((-1.0)*sj5*x427))+((cj5*new_r11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x428=IKsin(j7);
IkReal x429=IKcos(j7);
IkReal x430=((1.0)*sj5);
IkReal x431=((1.0)*x429);
IkReal x432=(sj5*x428);
IkReal x433=((1.0)*x428);
IkReal x434=(cj5*x431);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x428);
evalcond[1]=((((-1.0)*x431))+((new_r10*sj5))+((cj5*new_r00)));
evalcond[2]=(((cj5*x428))+((sj5*x429))+new_r01);
evalcond[3]=((((-1.0)*x434))+x432+new_r11);
evalcond[4]=((((-1.0)*new_r00*x430))+(((-1.0)*x433))+((cj5*new_r10)));
evalcond[5]=((((-1.0)*x431))+(((-1.0)*new_r01*x430))+((cj5*new_r11)));
evalcond[6]=((((-1.0)*x434))+x432+new_r00);
evalcond[7]=((((-1.0)*x429*x430))+(((-1.0)*cj5*x433))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x435=IKcos(j7);
IkReal x436=IKsin(j7);
IkReal x437=((1.0)*sj6);
IkReal x438=((1.0)*x435);
IkReal x439=((1.0)*x436);
evalcond[0]=(x436+new_r01);
evalcond[1]=((((-1.0)*x438))+new_r00);
evalcond[2]=(((sj6*x435))+new_r11);
evalcond[3]=(((sj6*x436))+new_r10);
evalcond[4]=((((-1.0)*cj6*x439))+new_r20);
evalcond[5]=((((-1.0)*cj6*x438))+new_r21);
evalcond[6]=((((-1.0)*x439))+(((-1.0)*new_r10*x437))+((cj6*new_r20)));
evalcond[7]=((((-1.0)*x438))+(((-1.0)*new_r11*x437))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x440=IKsin(j7);
IkReal x441=IKcos(j7);
IkReal x442=((1.0)*x441);
IkReal x443=((1.0)*x440);
evalcond[0]=(x440+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*cj6*x443))+new_r20);
evalcond[2]=((((-1.0)*cj6*x442))+new_r21);
evalcond[3]=(new_r11+(((-1.0)*sj6*x442)));
evalcond[4]=((((-1.0)*x442))+(((-1.0)*new_r00)));
evalcond[5]=(((sj6*x440))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x443))+((new_r10*sj6))+((cj6*new_r20)));
evalcond[7]=((((-1.0)*x442))+((new_r11*sj6))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r20, new_r21);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x444=IKsin(j7);
IkReal x445=IKcos(j7);
IkReal x446=((1.0)*x445);
evalcond[0]=((((-1.0)*x444))+new_r20);
evalcond[1]=((((-1.0)*x446))+new_r21);
evalcond[2]=(((new_r02*x444))+new_r11);
evalcond[3]=(((cj5*x444))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x446))+new_r10);
evalcond[5]=((((-1.0)*cj5*x446))+new_r00);
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x444);
evalcond[7]=((((-1.0)*x446))+((new_r10*sj5))+((cj5*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x447=IKsin(j7);
IkReal x448=IKcos(j7);
IkReal x449=((1.0)*x448);
evalcond[0]=(x447+new_r20);
evalcond[1]=(x448+new_r21);
evalcond[2]=(((cj5*x447))+new_r01);
evalcond[3]=(((new_r02*x448))+new_r10);
evalcond[4]=((((-1.0)*new_r02*x447))+new_r11);
evalcond[5]=((((-1.0)*cj5*x449))+new_r00);
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x447);
evalcond[7]=((((-1.0)*x449))+((new_r10*sj5))+((cj5*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x451=IKPowWithIntegerCheck(cj6,-1);
if(!x451.valid){
continue;
}
IkReal x450=x451.value;
CheckValue<IkReal> x452=IKPowWithIntegerCheck(sj5,-1);
if(!x452.valid){
continue;
}
CheckValue<IkReal> x453=IKPowWithIntegerCheck(sj6,-1);
if(!x453.valid){
continue;
}
if( IKabs((new_r20*x450)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x450*(x452.value)*(x453.value)*((((cj5*new_r20))+((cj6*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x450))+IKsqr((x450*(x452.value)*(x453.value)*((((cj5*new_r20))+((cj6*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x450), (x450*(x452.value)*(x453.value)*((((cj5*new_r20))+((cj6*new_r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x454=IKsin(j7);
IkReal x455=IKcos(j7);
IkReal x456=(new_r01*sj5);
IkReal x457=((1.0)*sj5);
IkReal x458=(cj5*sj6);
IkReal x459=(sj5*sj6);
IkReal x460=((1.0)*x455);
IkReal x461=(sj6*x454);
IkReal x462=((1.0)*x454);
evalcond[0]=(new_r20+(((-1.0)*cj6*x462)));
evalcond[1]=(new_r21+(((-1.0)*cj6*x460)));
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x454);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x460)));
evalcond[4]=(((x455*x458))+new_r11+((sj5*x454)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*new_r00*x457))+x461);
evalcond[6]=(((sj6*x455))+((cj5*new_r11))+(((-1.0)*x456)));
evalcond[7]=(((cj5*x454))+(((-1.0)*sj6*x455*x457))+new_r01);
evalcond[8]=(((x454*x458))+(((-1.0)*x455*x457))+new_r10);
evalcond[9]=((((-1.0)*cj5*x460))+new_r00+(((-1.0)*x457*x461)));
evalcond[10]=(((new_r00*x459))+(((-1.0)*new_r10*x458))+(((-1.0)*x462))+((cj6*new_r20)));
evalcond[11]=(((sj6*x456))+(((-1.0)*new_r11*x458))+(((-1.0)*x460))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x464=IKPowWithIntegerCheck(cj6,-1);
if(!x464.valid){
continue;
}
IkReal x463=x464.value;
CheckValue<IkReal> x465=IKPowWithIntegerCheck(sj5,-1);
if(!x465.valid){
continue;
}
if( IKabs((new_r20*x463)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x463*(x465.value)*((((cj6*new_r10))+((cj5*new_r20*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x463))+IKsqr((x463*(x465.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x463), (x463*(x465.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x466=IKsin(j7);
IkReal x467=IKcos(j7);
IkReal x468=(new_r01*sj5);
IkReal x469=((1.0)*sj5);
IkReal x470=(cj5*sj6);
IkReal x471=(sj5*sj6);
IkReal x472=((1.0)*x467);
IkReal x473=(sj6*x466);
IkReal x474=((1.0)*x466);
evalcond[0]=(new_r20+(((-1.0)*cj6*x474)));
evalcond[1]=(new_r21+(((-1.0)*cj6*x472)));
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x466);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x472)));
evalcond[4]=(((x467*x470))+new_r11+((sj5*x466)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*new_r00*x469))+x473);
evalcond[6]=(((sj6*x467))+((cj5*new_r11))+(((-1.0)*x468)));
evalcond[7]=(((cj5*x466))+(((-1.0)*sj6*x467*x469))+new_r01);
evalcond[8]=(((x466*x470))+new_r10+(((-1.0)*x467*x469)));
evalcond[9]=((((-1.0)*cj5*x472))+(((-1.0)*x469*x473))+new_r00);
evalcond[10]=((((-1.0)*new_r10*x470))+(((-1.0)*x474))+((new_r00*x471))+((cj6*new_r20)));
evalcond[11]=(((sj6*x468))+(((-1.0)*new_r11*x470))+(((-1.0)*x472))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x475=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x475.valid){
continue;
}
CheckValue<IkReal> x476 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x476.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x475.value)))+(x476.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x477=IKsin(j7);
IkReal x478=IKcos(j7);
IkReal x479=(new_r01*sj5);
IkReal x480=((1.0)*sj5);
IkReal x481=(cj5*sj6);
IkReal x482=(sj5*sj6);
IkReal x483=((1.0)*x478);
IkReal x484=(sj6*x477);
IkReal x485=((1.0)*x477);
evalcond[0]=((((-1.0)*cj6*x485))+new_r20);
evalcond[1]=((((-1.0)*cj6*x483))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x477);
evalcond[3]=(((new_r10*sj5))+(((-1.0)*x483))+((cj5*new_r00)));
evalcond[4]=(((sj5*x477))+((x478*x481))+new_r11);
evalcond[5]=(((cj5*new_r10))+(((-1.0)*new_r00*x480))+x484);
evalcond[6]=(((sj6*x478))+((cj5*new_r11))+(((-1.0)*x479)));
evalcond[7]=(((cj5*x477))+(((-1.0)*sj6*x478*x480))+new_r01);
evalcond[8]=(new_r10+((x477*x481))+(((-1.0)*x478*x480)));
evalcond[9]=((((-1.0)*x480*x484))+new_r00+(((-1.0)*cj5*x483)));
evalcond[10]=((((-1.0)*new_r10*x481))+(((-1.0)*x485))+((new_r00*x482))+((cj6*new_r20)));
evalcond[11]=(((sj6*x479))+(((-1.0)*x483))+(((-1.0)*new_r11*x481))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x486=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x486.valid){
continue;
}
CheckValue<IkReal> x487 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x487.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x486.value)))+(x487.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x488=IKsin(j5);
IkReal x489=IKcos(j5);
IkReal x490=(new_r12*x489);
IkReal x491=(cj6*x489);
IkReal x492=(new_r02*x488);
IkReal x493=((1.0)*cj6*x488);
evalcond[0]=(x491+new_r12);
evalcond[1]=((((-1.0)*x493))+new_r02);
evalcond[2]=(((new_r02*x489))+((new_r12*x488)));
evalcond[3]=(cj6+(((-1.0)*x492))+x490);
evalcond[4]=((((-1.0)*new_r00*x493))+((new_r20*sj6))+((new_r10*x491)));
evalcond[5]=((((-1.0)*new_r01*x493))+((new_r11*x491))+((new_r21*sj6)));
evalcond[6]=(((sj6*x492))+(((-1.0)*sj6*x490))+((cj6*new_r22)));
evalcond[7]=((1.0)+((cj6*x490))+((new_r22*sj6))+(((-1.0)*cj6*x492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
j7eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj6;
j7eval[1]=sj5;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=sj5;
j7eval[2]=sj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x494=((1.0)*cj5);
if( IKabs(((((-1.0)*new_r01*x494))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj5))+(((-1.0)*new_r11*x494)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x494))+(((-1.0)*new_r11*sj5))))+IKsqr((((new_r01*sj5))+(((-1.0)*new_r11*x494))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r01*x494))+(((-1.0)*new_r11*sj5))), (((new_r01*sj5))+(((-1.0)*new_r11*x494))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x495=IKsin(j7);
IkReal x496=IKcos(j7);
IkReal x497=((1.0)*sj5);
IkReal x498=(cj5*x495);
IkReal x499=(cj5*x496);
IkReal x500=(x496*x497);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x495);
evalcond[1]=((((-1.0)*new_r00*x497))+((cj5*new_r10))+x495);
evalcond[2]=((((-1.0)*new_r01*x497))+((cj5*new_r11))+x496);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x496)));
evalcond[4]=(x499+new_r11+((sj5*x495)));
evalcond[5]=((((-1.0)*x500))+x498+new_r01);
evalcond[6]=((((-1.0)*x500))+x498+new_r10);
evalcond[7]=((((-1.0)*x495*x497))+(((-1.0)*x499))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x501=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj5*x501))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*new_r11))+(((-1.0)*sj5*x501)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x501))+(((-1.0)*new_r11*sj5))))+IKsqr((((cj5*new_r11))+(((-1.0)*sj5*x501))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj5*x501))+(((-1.0)*new_r11*sj5))), (((cj5*new_r11))+(((-1.0)*sj5*x501))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x502=IKsin(j7);
IkReal x503=IKcos(j7);
IkReal x504=((1.0)*sj5);
IkReal x505=((1.0)*x503);
IkReal x506=(sj5*x502);
IkReal x507=((1.0)*x502);
IkReal x508=(cj5*x505);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x502);
evalcond[1]=(((new_r10*sj5))+(((-1.0)*x505))+((cj5*new_r00)));
evalcond[2]=(((sj5*x503))+((cj5*x502))+new_r01);
evalcond[3]=((((-1.0)*x508))+x506+new_r11);
evalcond[4]=((((-1.0)*new_r00*x504))+((cj5*new_r10))+(((-1.0)*x507)));
evalcond[5]=((((-1.0)*new_r01*x504))+((cj5*new_r11))+(((-1.0)*x505)));
evalcond[6]=((((-1.0)*x508))+x506+new_r00);
evalcond[7]=((((-1.0)*cj5*x507))+(((-1.0)*x503*x504))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x509=IKcos(j7);
IkReal x510=IKsin(j7);
IkReal x511=((1.0)*sj6);
IkReal x512=((1.0)*x509);
IkReal x513=((1.0)*x510);
evalcond[0]=(x510+new_r01);
evalcond[1]=(new_r00+(((-1.0)*x512)));
evalcond[2]=(((sj6*x509))+new_r11);
evalcond[3]=(((sj6*x510))+new_r10);
evalcond[4]=((((-1.0)*cj6*x513))+new_r20);
evalcond[5]=((((-1.0)*cj6*x512))+new_r21);
evalcond[6]=((((-1.0)*new_r10*x511))+(((-1.0)*x513))+((cj6*new_r20)));
evalcond[7]=((((-1.0)*new_r11*x511))+(((-1.0)*x512))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x514=IKsin(j7);
IkReal x515=IKcos(j7);
IkReal x516=((1.0)*x515);
IkReal x517=((1.0)*x514);
evalcond[0]=(x514+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*cj6*x517))+new_r20);
evalcond[2]=((((-1.0)*cj6*x516))+new_r21);
evalcond[3]=((((-1.0)*sj6*x516))+new_r11);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x516)));
evalcond[5]=(((sj6*x514))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r10*sj6))+(((-1.0)*x517))+((cj6*new_r20)));
evalcond[7]=(((new_r11*sj6))+(((-1.0)*x516))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r20, new_r21);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x518=IKsin(j7);
IkReal x519=IKcos(j7);
IkReal x520=((1.0)*x519);
evalcond[0]=((((-1.0)*x518))+new_r20);
evalcond[1]=((((-1.0)*x520))+new_r21);
evalcond[2]=(((new_r02*x518))+new_r11);
evalcond[3]=(((cj5*x518))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x520))+new_r10);
evalcond[5]=(new_r00+(((-1.0)*cj5*x520)));
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x518);
evalcond[7]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x521=IKsin(j7);
IkReal x522=IKcos(j7);
IkReal x523=((1.0)*x522);
evalcond[0]=(x521+new_r20);
evalcond[1]=(x522+new_r21);
evalcond[2]=(((cj5*x521))+new_r01);
evalcond[3]=(((new_r02*x522))+new_r10);
evalcond[4]=((((-1.0)*new_r02*x521))+new_r11);
evalcond[5]=(new_r00+(((-1.0)*cj5*x523)));
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x521);
evalcond[7]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x525=IKPowWithIntegerCheck(cj6,-1);
if(!x525.valid){
continue;
}
IkReal x524=x525.value;
CheckValue<IkReal> x526=IKPowWithIntegerCheck(sj5,-1);
if(!x526.valid){
continue;
}
CheckValue<IkReal> x527=IKPowWithIntegerCheck(sj6,-1);
if(!x527.valid){
continue;
}
if( IKabs((new_r20*x524)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x524*(x526.value)*(x527.value)*((((cj5*new_r20))+((cj6*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x524))+IKsqr((x524*(x526.value)*(x527.value)*((((cj5*new_r20))+((cj6*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x524), (x524*(x526.value)*(x527.value)*((((cj5*new_r20))+((cj6*new_r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x528=IKsin(j7);
IkReal x529=IKcos(j7);
IkReal x530=(new_r01*sj5);
IkReal x531=((1.0)*sj5);
IkReal x532=(cj5*sj6);
IkReal x533=(sj5*sj6);
IkReal x534=((1.0)*x529);
IkReal x535=(sj6*x528);
IkReal x536=((1.0)*x528);
evalcond[0]=((((-1.0)*cj6*x536))+new_r20);
evalcond[1]=((((-1.0)*cj6*x534))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x528);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x534)));
evalcond[4]=(((sj5*x528))+new_r11+((x529*x532)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*new_r00*x531))+x535);
evalcond[6]=(((cj5*new_r11))+(((-1.0)*x530))+((sj6*x529)));
evalcond[7]=((((-1.0)*sj6*x529*x531))+((cj5*x528))+new_r01);
evalcond[8]=((((-1.0)*x529*x531))+new_r10+((x528*x532)));
evalcond[9]=((((-1.0)*x531*x535))+new_r00+(((-1.0)*cj5*x534)));
evalcond[10]=((((-1.0)*x536))+(((-1.0)*new_r10*x532))+((new_r00*x533))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x534))+((sj6*x530))+(((-1.0)*new_r11*x532))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x538=IKPowWithIntegerCheck(cj6,-1);
if(!x538.valid){
continue;
}
IkReal x537=x538.value;
CheckValue<IkReal> x539=IKPowWithIntegerCheck(sj5,-1);
if(!x539.valid){
continue;
}
if( IKabs((new_r20*x537)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x537*(x539.value)*((((cj6*new_r10))+((cj5*new_r20*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x537))+IKsqr((x537*(x539.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x537), (x537*(x539.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x540=IKsin(j7);
IkReal x541=IKcos(j7);
IkReal x542=(new_r01*sj5);
IkReal x543=((1.0)*sj5);
IkReal x544=(cj5*sj6);
IkReal x545=(sj5*sj6);
IkReal x546=((1.0)*x541);
IkReal x547=(sj6*x540);
IkReal x548=((1.0)*x540);
evalcond[0]=((((-1.0)*cj6*x548))+new_r20);
evalcond[1]=((((-1.0)*cj6*x546))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x540);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x546)));
evalcond[4]=(((x541*x544))+((sj5*x540))+new_r11);
evalcond[5]=(((cj5*new_r10))+(((-1.0)*new_r00*x543))+x547);
evalcond[6]=((((-1.0)*x542))+((cj5*new_r11))+((sj6*x541)));
evalcond[7]=(((cj5*x540))+(((-1.0)*sj6*x541*x543))+new_r01);
evalcond[8]=((((-1.0)*x541*x543))+((x540*x544))+new_r10);
evalcond[9]=(new_r00+(((-1.0)*cj5*x546))+(((-1.0)*x543*x547)));
evalcond[10]=(((new_r00*x545))+(((-1.0)*x548))+(((-1.0)*new_r10*x544))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x546))+((sj6*x542))+(((-1.0)*new_r11*x544))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x549=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x549.valid){
continue;
}
CheckValue<IkReal> x550 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x550.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x549.value)))+(x550.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x551=IKsin(j7);
IkReal x552=IKcos(j7);
IkReal x553=(new_r01*sj5);
IkReal x554=((1.0)*sj5);
IkReal x555=(cj5*sj6);
IkReal x556=(sj5*sj6);
IkReal x557=((1.0)*x552);
IkReal x558=(sj6*x551);
IkReal x559=((1.0)*x551);
evalcond[0]=((((-1.0)*cj6*x559))+new_r20);
evalcond[1]=((((-1.0)*cj6*x557))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x551);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x557)));
evalcond[4]=(((sj5*x551))+new_r11+((x552*x555)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*new_r00*x554))+x558);
evalcond[6]=((((-1.0)*x553))+((cj5*new_r11))+((sj6*x552)));
evalcond[7]=(((cj5*x551))+(((-1.0)*sj6*x552*x554))+new_r01);
evalcond[8]=((((-1.0)*x552*x554))+((x551*x555))+new_r10);
evalcond[9]=((((-1.0)*cj5*x557))+(((-1.0)*x554*x558))+new_r00);
evalcond[10]=((((-1.0)*x559))+((new_r00*x556))+(((-1.0)*new_r10*x555))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x557))+((sj6*x553))+(((-1.0)*new_r11*x555))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x560=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x560.valid){
continue;
}
CheckValue<IkReal> x561 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x561.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x560.value)))+(x561.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x562=((1.0)*cj6);
evalcond[0]=((((-1.0)*x562*(IKsin(j7))))+new_r20);
evalcond[1]=((((-1.0)*x562*(IKcos(j7))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=cj6;
j5eval[1]=IKsign(cj6);
j5eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj6;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x563=((1.0)*sj7);
IkReal x564=(((new_r10*new_r11))+((new_r00*new_r01)));
j5eval[0]=x564;
j5eval[1]=IKsign(x564);
j5eval[2]=((IKabs((((new_r01*sj7))+(((-1.0)*new_r10*x563)))))+(IKabs(((((-1.0)*new_r00*x563))+(((-1.0)*new_r11*x563))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x565=((1.0)*new_r11);
IkReal x566=((new_r01*new_r01)+(new_r11*new_r11));
j5eval[0]=x566;
j5eval[1]=((IKabs(((((-1.0)*new_r01*sj7))+(((-1.0)*cj7*x565)))))+(IKabs(((((-1.0)*sj7*x565))+((cj7*new_r01))))));
j5eval[2]=IKsign(x566);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x567=(((new_r11*sj7))+((cj7*new_r01)));
j5eval[0]=x567;
j5eval[1]=IKsign(x567);
j5eval[2]=((IKabs(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj7*sj7)))))+(IKabs(((-1.0)+(cj7*cj7)+(new_r01*new_r01)))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x569 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x569)==0){
continue;
}
IkReal x568=pow(x569,-0.5);
CheckValue<IkReal> x570 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x570.valid){
continue;
}
IkReal gconst48=((-1.0)*(x570.value));
IkReal gconst49=((-1.0)*new_r01*x568);
IkReal gconst50=(new_r11*x568);
CheckValue<IkReal> x571 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x571.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x571.value)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
IkReal x572=((-1.0)*(x574.value));
IkReal x573=x568;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x572;
IkReal gconst48=x572;
IkReal gconst49=((-1.0)*new_r01*x573);
IkReal gconst50=(new_r11*x573);
IkReal x575=new_r01*new_r01;
IkReal x576=(new_r00*new_r01);
IkReal x577=(((new_r10*new_r11))+x576);
IkReal x578=x568;
IkReal x579=(new_r01*x578);
j5eval[0]=x577;
j5eval[1]=IKsign(x577);
j5eval[2]=((IKabs((((x576*x578))+((new_r11*x579)))))+(IKabs((((new_r10*x579))+(((-1.0)*x575*x578))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x582 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x582.valid){
continue;
}
IkReal x580=((-1.0)*(x582.value));
IkReal x581=x568;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x580;
IkReal gconst48=x580;
IkReal gconst49=((-1.0)*new_r01*x581);
IkReal gconst50=(new_r11*x581);
IkReal x583=((new_r01*new_r01)+(new_r11*new_r11));
j5eval[0]=x583;
j5eval[1]=IKsign(x583);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x586 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x586.valid){
continue;
}
IkReal x584=((-1.0)*(x586.value));
IkReal x585=x568;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x584;
IkReal gconst48=x584;
IkReal gconst49=((-1.0)*new_r01*x585);
IkReal gconst50=(new_r11*x585);
IkReal x587=new_r01*new_r01;
IkReal x588=new_r11*new_r11;
IkReal x589=((1.0)*x587);
CheckValue<IkReal> x595=IKPowWithIntegerCheck((x587+x588),-1);
if(!x595.valid){
continue;
}
IkReal x590=x595.value;
CheckValue<IkReal> x596=IKPowWithIntegerCheck(((((-1.0)*x588))+(((-1.0)*x589))),-1);
if(!x596.valid){
continue;
}
IkReal x591=x596.value;
IkReal x592=((1.0)*x591);
IkReal x593=(new_r11*x592);
IkReal x594=(new_r01*x592);
j5eval[0]=((IKabs(((((-1.0)*x589*x590))+((x590*(x588*x588)))+((x587*x588*x590)))))+(IKabs(((((-1.0)*new_r01*x593))+(((-1.0)*x593*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x593*(new_r11*new_r11)))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x598 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x598.valid){
continue;
}
IkReal x597=((-1.0)*(x598.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x597;
new_r11=0;
new_r00=0;
IkReal gconst48=x597;
IkReal x599 = new_r01*new_r01;
if(IKabs(x599)==0){
continue;
}
IkReal gconst49=((-1.0)*new_r01*(pow(x599,-0.5)));
IkReal gconst50=0;
j5eval[0]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x601 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x601.valid){
continue;
}
IkReal x600=((-1.0)*(x601.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x600;
new_r11=0;
new_r00=0;
IkReal gconst48=x600;
IkReal x602 = new_r01*new_r01;
if(IKabs(x602)==0){
continue;
}
IkReal gconst49=((-1.0)*new_r01*(pow(x602,-0.5)));
IkReal gconst50=0;
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x603=IKPowWithIntegerCheck(gconst49,-1);
if(!x603.valid){
continue;
}
cj5array[0]=((-1.0)*new_r01*(x603.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x604=IKsin(j5);
IkReal x605=IKcos(j5);
evalcond[0]=(new_r10*x604);
evalcond[1]=(gconst49*x604);
evalcond[2]=((-1.0)*new_r01*x604);
evalcond[3]=(gconst49+((new_r01*x605)));
evalcond[4]=(gconst49+((new_r10*x605)));
evalcond[5]=(((gconst49*x605))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x606=IKPowWithIntegerCheck(new_r10,-1);
if(!x606.valid){
continue;
}
cj5array[0]=((-1.0)*gconst49*(x606.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x607=IKsin(j5);
IkReal x608=IKcos(j5);
IkReal x609=(gconst49*x608);
evalcond[0]=(new_r10*x607);
evalcond[1]=(gconst49*x607);
evalcond[2]=((-1.0)*new_r01*x607);
evalcond[3]=(gconst49+((new_r01*x608)));
evalcond[4]=(x609+new_r01);
evalcond[5]=(x609+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x610=IKPowWithIntegerCheck(new_r01,-1);
if(!x610.valid){
continue;
}
cj5array[0]=((-1.0)*gconst49*(x610.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x611=IKsin(j5);
IkReal x612=IKcos(j5);
IkReal x613=(gconst49*x612);
evalcond[0]=(new_r10*x611);
evalcond[1]=(gconst49*x611);
evalcond[2]=((-1.0)*new_r01*x611);
evalcond[3]=(gconst49+((new_r10*x612)));
evalcond[4]=(x613+new_r01);
evalcond[5]=(x613+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst49;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x615 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x615.valid){
continue;
}
IkReal x614=((-1.0)*(x615.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x614;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst48=x614;
IkReal gconst49=((-1.0)*new_r01);
IkReal gconst50=new_r11;
j5eval[0]=-1.0;
j5eval[1]=-1.0;
j5eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x617 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x617.valid){
continue;
}
IkReal x616=((-1.0)*(x617.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x616;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst48=x616;
IkReal gconst49=((-1.0)*new_r01);
IkReal gconst50=new_r11;
j5eval[0]=-1.0;
j5eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j5eval[2]=-1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x619 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x619.valid){
continue;
}
IkReal x618=((-1.0)*(x619.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x618;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst48=x618;
IkReal gconst49=((-1.0)*new_r01);
IkReal gconst50=new_r11;
j5eval[0]=1.0;
j5eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j5eval[2]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x620=((1.0)*gconst49);
CheckValue<IkReal> x621 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x620))+((gconst50*new_r01)))),IkReal(((((-1.0)*new_r01*x620))+(((-1.0)*gconst50*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x621.valid){
continue;
}
CheckValue<IkReal> x622=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x622.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x621.value)+(((1.5707963267949)*(x622.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x623=IKcos(j5);
IkReal x624=IKsin(j5);
IkReal x625=((1.0)*gconst50);
IkReal x626=(gconst49*x623);
IkReal x627=(gconst49*x624);
IkReal x628=(x624*x625);
evalcond[0]=(gconst49+((new_r01*x623))+((new_r11*x624)));
evalcond[1]=(((gconst50*x623))+x627+new_r11);
evalcond[2]=((((-1.0)*x628))+x626);
evalcond[3]=((((-1.0)*new_r01*x624))+gconst50+((new_r11*x623)));
evalcond[4]=((((-1.0)*x628))+x626+new_r01);
evalcond[5]=((((-1.0)*x623*x625))+(((-1.0)*x627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x629 = IKatan2WithCheck(IkReal((gconst49*new_r11)),IkReal((gconst50*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x629.valid){
continue;
}
CheckValue<IkReal> x630=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst50*gconst50)))+(((-1.0)*(gconst49*gconst49))))),-1);
if(!x630.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x629.value)+(((1.5707963267949)*(x630.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x631=IKcos(j5);
IkReal x632=IKsin(j5);
IkReal x633=((1.0)*gconst50);
IkReal x634=(gconst49*x631);
IkReal x635=(gconst49*x632);
IkReal x636=(x632*x633);
evalcond[0]=(gconst49+((new_r01*x631))+((new_r11*x632)));
evalcond[1]=(((gconst50*x631))+x635+new_r11);
evalcond[2]=((((-1.0)*x636))+x634);
evalcond[3]=((((-1.0)*new_r01*x632))+gconst50+((new_r11*x631)));
evalcond[4]=((((-1.0)*x636))+x634+new_r01);
evalcond[5]=((((-1.0)*x631*x633))+(((-1.0)*x635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x637 = IKatan2WithCheck(IkReal((gconst49*gconst50)),IkReal(((-1.0)*(gconst49*gconst49))),IKFAST_ATAN2_MAGTHRESH);
if(!x637.valid){
continue;
}
CheckValue<IkReal> x638=IKPowWithIntegerCheck(IKsign((((gconst49*new_r01))+(((-1.0)*gconst50*new_r11)))),-1);
if(!x638.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x637.value)+(((1.5707963267949)*(x638.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x639=IKcos(j5);
IkReal x640=IKsin(j5);
IkReal x641=((1.0)*gconst50);
IkReal x642=(gconst49*x639);
IkReal x643=(gconst49*x640);
IkReal x644=(x640*x641);
evalcond[0]=(gconst49+((new_r01*x639))+((new_r11*x640)));
evalcond[1]=(((gconst50*x639))+x643+new_r11);
evalcond[2]=((((-1.0)*x644))+x642);
evalcond[3]=((((-1.0)*new_r01*x640))+gconst50+((new_r11*x639)));
evalcond[4]=((((-1.0)*x644))+x642+new_r01);
evalcond[5]=((((-1.0)*x643))+(((-1.0)*x639*x641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x645=IKPowWithIntegerCheck(gconst50,-1);
if(!x645.valid){
continue;
}
cj5array[0]=(new_r00*(x645.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x646=IKsin(j5);
IkReal x647=IKcos(j5);
IkReal x648=((-1.0)*x646);
evalcond[0]=(new_r11*x646);
evalcond[1]=(new_r00*x648);
evalcond[2]=(gconst50*x648);
evalcond[3]=(((gconst50*x647))+new_r11);
evalcond[4]=(gconst50+((new_r11*x647)));
evalcond[5]=((((-1.0)*gconst50))+((new_r00*x647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x650 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x650.valid){
continue;
}
IkReal x649=((-1.0)*(x650.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x649;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst48=x649;
IkReal gconst49=0;
IkReal x651 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x651)==0){
continue;
}
IkReal gconst50=(new_r11*(pow(x651,-0.5)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x653 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x653.valid){
continue;
}
IkReal x652=((-1.0)*(x653.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x652;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst48=x652;
IkReal gconst49=0;
IkReal x654 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x654)==0){
continue;
}
IkReal gconst50=(new_r11*(pow(x654,-0.5)));
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x656 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x656.valid){
continue;
}
IkReal x655=((-1.0)*(x656.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x655;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst48=x655;
IkReal gconst49=0;
IkReal x657 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x657)==0){
continue;
}
IkReal gconst50=(new_r11*(pow(x657,-0.5)));
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x658=IKPowWithIntegerCheck(new_r10,-1);
if(!x658.valid){
continue;
}
CheckValue<IkReal> x659=IKPowWithIntegerCheck(gconst50,-1);
if(!x659.valid){
continue;
}
if( IKabs((gconst50*(x658.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x659.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst50*(x658.value)))+IKsqr(((-1.0)*new_r11*(x659.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((gconst50*(x658.value)), ((-1.0)*new_r11*(x659.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x660=IKsin(j5);
IkReal x661=IKcos(j5);
IkReal x662=((1.0)*gconst50);
IkReal x663=((-1.0)*gconst50);
evalcond[0]=(new_r11*x660);
evalcond[1]=(new_r10*x661);
evalcond[2]=(x660*x663);
evalcond[3]=(x661*x663);
evalcond[4]=(((gconst50*x661))+new_r11);
evalcond[5]=(gconst50+((new_r11*x661)));
evalcond[6]=((((-1.0)*x660*x662))+new_r10);
evalcond[7]=(((new_r10*x660))+(((-1.0)*x662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x664=IKPowWithIntegerCheck(gconst50,-1);
if(!x664.valid){
continue;
}
CheckValue<IkReal> x665=IKPowWithIntegerCheck(new_r11,-1);
if(!x665.valid){
continue;
}
if( IKabs((new_r10*(x664.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst50*(x665.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x664.value)))+IKsqr(((-1.0)*gconst50*(x665.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r10*(x664.value)), ((-1.0)*gconst50*(x665.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x666=IKsin(j5);
IkReal x667=IKcos(j5);
IkReal x668=((1.0)*gconst50);
IkReal x669=((-1.0)*gconst50);
evalcond[0]=(new_r11*x666);
evalcond[1]=(new_r10*x667);
evalcond[2]=(x666*x669);
evalcond[3]=(x667*x669);
evalcond[4]=(((gconst50*x667))+new_r11);
evalcond[5]=(gconst50+((new_r11*x667)));
evalcond[6]=((((-1.0)*x666*x668))+new_r10);
evalcond[7]=(((new_r10*x666))+(((-1.0)*x668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x670=IKPowWithIntegerCheck(IKsign(gconst50),-1);
if(!x670.valid){
continue;
}
CheckValue<IkReal> x671 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x671.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x670.value)))+(x671.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x672=IKsin(j5);
IkReal x673=IKcos(j5);
IkReal x674=((1.0)*gconst50);
IkReal x675=((-1.0)*gconst50);
evalcond[0]=(new_r11*x672);
evalcond[1]=(new_r10*x673);
evalcond[2]=(x672*x675);
evalcond[3]=(x673*x675);
evalcond[4]=(new_r11+((gconst50*x673)));
evalcond[5]=(((new_r11*x673))+gconst50);
evalcond[6]=((((-1.0)*x672*x674))+new_r10);
evalcond[7]=(((new_r10*x672))+(((-1.0)*x674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x677 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x677.valid){
continue;
}
IkReal x676=((-1.0)*(x677.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x676;
new_r01=0;
IkReal gconst48=x676;
IkReal gconst49=0;
IkReal x678 = new_r11*new_r11;
if(IKabs(x678)==0){
continue;
}
IkReal gconst50=(new_r11*(pow(x678,-0.5)));
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x680 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x680.valid){
continue;
}
IkReal x679=((-1.0)*(x680.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x679;
new_r01=0;
IkReal gconst48=x679;
IkReal gconst49=0;
IkReal x681 = new_r11*new_r11;
if(IKabs(x681)==0){
continue;
}
IkReal gconst50=(new_r11*(pow(x681,-0.5)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x683 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x683.valid){
continue;
}
IkReal x682=((-1.0)*(x683.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst49;
cj7=gconst50;
j7=x682;
new_r01=0;
IkReal gconst48=x682;
IkReal gconst49=0;
IkReal x684 = new_r11*new_r11;
if(IKabs(x684)==0){
continue;
}
IkReal gconst50=(new_r11*(pow(x684,-0.5)));
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x685=IKPowWithIntegerCheck(gconst50,-1);
if(!x685.valid){
continue;
}
CheckValue<IkReal> x686=IKPowWithIntegerCheck(new_r11,-1);
if(!x686.valid){
continue;
}
if( IKabs((new_r10*(x685.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst50*(x686.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x685.value)))+IKsqr(((-1.0)*gconst50*(x686.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r10*(x685.value)), ((-1.0)*gconst50*(x686.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x687=IKsin(j5);
IkReal x688=IKcos(j5);
IkReal x689=((1.0)*gconst50);
IkReal x690=(gconst50*x687);
evalcond[0]=(new_r11*x687);
evalcond[1]=((-1.0)*x690);
evalcond[2]=(((gconst50*x688))+new_r11);
evalcond[3]=(gconst50+((new_r11*x688)));
evalcond[4]=((((-1.0)*x687*x689))+new_r10);
evalcond[5]=((((-1.0)*x688*x689))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x687))+((new_r10*x688)));
evalcond[7]=((((-1.0)*x689))+((new_r00*x688))+((new_r10*x687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x691=IKPowWithIntegerCheck(IKsign(gconst50),-1);
if(!x691.valid){
continue;
}
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x691.value)))+(x692.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x693=IKsin(j5);
IkReal x694=IKcos(j5);
IkReal x695=((1.0)*gconst50);
IkReal x696=(gconst50*x693);
evalcond[0]=(new_r11*x693);
evalcond[1]=((-1.0)*x696);
evalcond[2]=(((gconst50*x694))+new_r11);
evalcond[3]=(gconst50+((new_r11*x694)));
evalcond[4]=((((-1.0)*x693*x695))+new_r10);
evalcond[5]=((((-1.0)*x694*x695))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x693))+((new_r10*x694)));
evalcond[7]=(((new_r10*x693))+(((-1.0)*x695))+((new_r00*x694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x697=IKPowWithIntegerCheck(IKsign(gconst50),-1);
if(!x697.valid){
continue;
}
CheckValue<IkReal> x698 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x698.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x697.value)))+(x698.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x699=IKsin(j5);
IkReal x700=IKcos(j5);
IkReal x701=((1.0)*gconst50);
IkReal x702=(gconst50*x699);
evalcond[0]=(new_r11*x699);
evalcond[1]=((-1.0)*x702);
evalcond[2]=(new_r11+((gconst50*x700)));
evalcond[3]=(gconst50+((new_r11*x700)));
evalcond[4]=((((-1.0)*x699*x701))+new_r10);
evalcond[5]=(new_r00+(((-1.0)*x700*x701)));
evalcond[6]=((((-1.0)*new_r00*x699))+((new_r10*x700)));
evalcond[7]=(((new_r00*x700))+((new_r10*x699))+(((-1.0)*x701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x703=((1.0)*new_r11);
CheckValue<IkReal> x704=IKPowWithIntegerCheck(IKsign((((gconst49*new_r01))+(((-1.0)*gconst50*x703)))),-1);
if(!x704.valid){
continue;
}
CheckValue<IkReal> x705 = IKatan2WithCheck(IkReal((((gconst49*gconst50))+(((-1.0)*new_r01*x703)))),IkReal(((new_r11*new_r11)+(((-1.0)*(gconst49*gconst49))))),IKFAST_ATAN2_MAGTHRESH);
if(!x705.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x704.value)))+(x705.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x706=IKcos(j5);
IkReal x707=IKsin(j5);
IkReal x708=((1.0)*gconst50);
IkReal x709=(gconst49*x706);
IkReal x710=(gconst49*x707);
IkReal x711=((1.0)*x707);
IkReal x712=(x707*x708);
evalcond[0]=(((new_r01*x706))+gconst49+((new_r11*x707)));
evalcond[1]=(x710+new_r11+((gconst50*x706)));
evalcond[2]=(gconst49+((new_r10*x706))+(((-1.0)*new_r00*x711)));
evalcond[3]=(gconst50+((new_r11*x706))+(((-1.0)*new_r01*x711)));
evalcond[4]=((((-1.0)*x712))+x709+new_r01);
evalcond[5]=((((-1.0)*x712))+x709+new_r10);
evalcond[6]=(((new_r00*x706))+(((-1.0)*x708))+((new_r10*x707)));
evalcond[7]=((((-1.0)*x706*x708))+(((-1.0)*x710))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x713=((1.0)*gconst49);
CheckValue<IkReal> x714=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x714.valid){
continue;
}
CheckValue<IkReal> x715 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x713))+((gconst50*new_r01)))),IkReal(((((-1.0)*gconst50*new_r11))+(((-1.0)*new_r01*x713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x715.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x714.value)))+(x715.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x716=IKcos(j5);
IkReal x717=IKsin(j5);
IkReal x718=((1.0)*gconst50);
IkReal x719=(gconst49*x716);
IkReal x720=(gconst49*x717);
IkReal x721=((1.0)*x717);
IkReal x722=(x717*x718);
evalcond[0]=(((new_r01*x716))+gconst49+((new_r11*x717)));
evalcond[1]=(x720+new_r11+((gconst50*x716)));
evalcond[2]=(gconst49+((new_r10*x716))+(((-1.0)*new_r00*x721)));
evalcond[3]=(gconst50+((new_r11*x716))+(((-1.0)*new_r01*x721)));
evalcond[4]=((((-1.0)*x722))+x719+new_r01);
evalcond[5]=((((-1.0)*x722))+x719+new_r10);
evalcond[6]=(((new_r00*x716))+(((-1.0)*x718))+((new_r10*x717)));
evalcond[7]=((((-1.0)*x720))+(((-1.0)*x716*x718))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x723=((1.0)*gconst49);
CheckValue<IkReal> x724 = IKatan2WithCheck(IkReal((((gconst49*new_r01))+(((-1.0)*new_r10*x723)))),IkReal(((((-1.0)*new_r00*x723))+(((-1.0)*new_r11*x723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x724.valid){
continue;
}
CheckValue<IkReal> x725=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x725.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x724.value)+(((1.5707963267949)*(x725.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x726=IKcos(j5);
IkReal x727=IKsin(j5);
IkReal x728=((1.0)*gconst50);
IkReal x729=(gconst49*x726);
IkReal x730=(gconst49*x727);
IkReal x731=((1.0)*x727);
IkReal x732=(x727*x728);
evalcond[0]=(gconst49+((new_r01*x726))+((new_r11*x727)));
evalcond[1]=(x730+new_r11+((gconst50*x726)));
evalcond[2]=(gconst49+(((-1.0)*new_r00*x731))+((new_r10*x726)));
evalcond[3]=(gconst50+(((-1.0)*new_r01*x731))+((new_r11*x726)));
evalcond[4]=((((-1.0)*x732))+x729+new_r01);
evalcond[5]=((((-1.0)*x732))+x729+new_r10);
evalcond[6]=(((new_r00*x726))+(((-1.0)*x728))+((new_r10*x727)));
evalcond[7]=((((-1.0)*x730))+(((-1.0)*x726*x728))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x734 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x734)==0){
continue;
}
IkReal x733=pow(x734,-0.5);
CheckValue<IkReal> x735 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x735.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x735.value))));
IkReal gconst52=((1.0)*new_r01*x733);
IkReal gconst53=((-1.0)*new_r11*x733);
CheckValue<IkReal> x736 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x736.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x736.value)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x739 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x739.valid){
continue;
}
IkReal x737=((1.0)*(x739.value));
IkReal x738=x733;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x737)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x737)));
IkReal gconst52=((1.0)*new_r01*x738);
IkReal gconst53=((-1.0)*new_r11*x738);
IkReal x740=new_r01*new_r01;
IkReal x741=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x742=x733;
IkReal x743=((1.0)*new_r01*x742);
j5eval[0]=x741;
j5eval[1]=IKsign(x741);
j5eval[2]=((IKabs((((x740*x742))+(((-1.0)*new_r10*x743)))))+(IKabs(((((-1.0)*new_r00*x743))+(((-1.0)*new_r11*x743))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x746 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x746.valid){
continue;
}
IkReal x744=((1.0)*(x746.value));
IkReal x745=x733;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x744)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x744)));
IkReal gconst52=((1.0)*new_r01*x745);
IkReal gconst53=((-1.0)*new_r11*x745);
IkReal x747=((new_r01*new_r01)+(new_r11*new_r11));
j5eval[0]=x747;
j5eval[1]=IKsign(x747);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x750 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x750.valid){
continue;
}
IkReal x748=((1.0)*(x750.value));
IkReal x749=x733;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x748)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x748)));
IkReal gconst52=((1.0)*new_r01*x749);
IkReal gconst53=((-1.0)*new_r11*x749);
IkReal x751=new_r01*new_r01;
IkReal x752=new_r11*new_r11;
IkReal x753=((1.0)*x751);
CheckValue<IkReal> x759=IKPowWithIntegerCheck((x751+x752),-1);
if(!x759.valid){
continue;
}
IkReal x754=x759.value;
CheckValue<IkReal> x760=IKPowWithIntegerCheck(((((-1.0)*x752))+(((-1.0)*x753))),-1);
if(!x760.valid){
continue;
}
IkReal x755=x760.value;
IkReal x756=((1.0)*x755);
IkReal x757=(new_r11*x756);
IkReal x758=(new_r01*x756);
j5eval[0]=((IKabs((((x751*x752*x754))+(((-1.0)*x753*x754))+((x754*(x752*x752))))))+(IKabs(((((-1.0)*new_r01*x757*(new_r11*new_r11)))+(((-1.0)*new_r01*x757))+(((-1.0)*x757*(new_r01*new_r01*new_r01)))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x762 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x762.valid){
continue;
}
IkReal x761=((1.0)*(x762.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x761)));
new_r11=0;
new_r00=0;
IkReal gconst51=((3.14159265358979)+(((-1.0)*x761)));
IkReal x763 = new_r01*new_r01;
if(IKabs(x763)==0){
continue;
}
IkReal gconst52=((1.0)*new_r01*(pow(x763,-0.5)));
IkReal gconst53=0;
j5eval[0]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x765 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x765.valid){
continue;
}
IkReal x764=((1.0)*(x765.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x764)));
new_r11=0;
new_r00=0;
IkReal gconst51=((3.14159265358979)+(((-1.0)*x764)));
IkReal x766 = new_r01*new_r01;
if(IKabs(x766)==0){
continue;
}
IkReal gconst52=((1.0)*new_r01*(pow(x766,-0.5)));
IkReal gconst53=0;
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x767=IKPowWithIntegerCheck(gconst52,-1);
if(!x767.valid){
continue;
}
cj5array[0]=((-1.0)*new_r01*(x767.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x768=IKsin(j5);
IkReal x769=IKcos(j5);
evalcond[0]=(new_r10*x768);
evalcond[1]=(gconst52*x768);
evalcond[2]=((-1.0)*new_r01*x768);
evalcond[3]=(gconst52+((new_r01*x769)));
evalcond[4]=(((new_r10*x769))+gconst52);
evalcond[5]=(((gconst52*x769))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x770=IKPowWithIntegerCheck(new_r10,-1);
if(!x770.valid){
continue;
}
cj5array[0]=((-1.0)*gconst52*(x770.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x771=IKsin(j5);
IkReal x772=IKcos(j5);
IkReal x773=(gconst52*x772);
evalcond[0]=(new_r10*x771);
evalcond[1]=(gconst52*x771);
evalcond[2]=((-1.0)*new_r01*x771);
evalcond[3]=(gconst52+((new_r01*x772)));
evalcond[4]=(x773+new_r01);
evalcond[5]=(x773+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x774=IKPowWithIntegerCheck(new_r01,-1);
if(!x774.valid){
continue;
}
cj5array[0]=((-1.0)*gconst52*(x774.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x775=IKsin(j5);
IkReal x776=IKcos(j5);
IkReal x777=(gconst52*x776);
evalcond[0]=(new_r10*x775);
evalcond[1]=(gconst52*x775);
evalcond[2]=((-1.0)*new_r01*x775);
evalcond[3]=(gconst52+((new_r10*x776)));
evalcond[4]=(x777+new_r01);
evalcond[5]=(x777+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst52;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[4];
CheckValue<IkReal> x779 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x779.valid){
continue;
}
IkReal x778=((1.0)*(x779.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x778)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst51=((3.14159265358979)+(((-1.0)*x778)));
IkReal gconst52=((1.0)*new_r01);
IkReal gconst53=((-1.0)*new_r11);
j5eval[0]=1.0;
j5eval[1]=1.0;
j5eval[2]=new_r01;
j5eval[3]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x781 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x781.valid){
continue;
}
IkReal x780=((1.0)*(x781.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x780)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst51=((3.14159265358979)+(((-1.0)*x780)));
IkReal gconst52=((1.0)*new_r01);
IkReal gconst53=((-1.0)*new_r11);
j5eval[0]=-1.0;
j5eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j5eval[2]=-1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x783 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x783.valid){
continue;
}
IkReal x782=((1.0)*(x783.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x782)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst51=((3.14159265358979)+(((-1.0)*x782)));
IkReal gconst52=((1.0)*new_r01);
IkReal gconst53=((-1.0)*new_r11);
j5eval[0]=1.0;
j5eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j5eval[2]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x784=((1.0)*gconst52);
CheckValue<IkReal> x785 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x784))+((gconst53*new_r01)))),IkReal(((((-1.0)*new_r01*x784))+(((-1.0)*gconst53*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x785.valid){
continue;
}
CheckValue<IkReal> x786=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x786.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x785.value)+(((1.5707963267949)*(x786.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x787=IKcos(j5);
IkReal x788=IKsin(j5);
IkReal x789=(gconst52*x787);
IkReal x790=((1.0)*x788);
IkReal x791=(gconst53*x787);
IkReal x792=(gconst53*x790);
evalcond[0]=(((new_r11*x788))+gconst52+((new_r01*x787)));
evalcond[1]=(((gconst52*x788))+x791+new_r11);
evalcond[2]=((((-1.0)*x792))+x789);
evalcond[3]=((((-1.0)*new_r01*x790))+((new_r11*x787))+gconst53);
evalcond[4]=((((-1.0)*x792))+x789+new_r01);
evalcond[5]=((((-1.0)*gconst52*x790))+(((-1.0)*x791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x793 = IKatan2WithCheck(IkReal((gconst52*new_r11)),IkReal((gconst53*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x793.valid){
continue;
}
CheckValue<IkReal> x794=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst53*gconst53)))+(((-1.0)*(gconst52*gconst52))))),-1);
if(!x794.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x793.value)+(((1.5707963267949)*(x794.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x795=IKcos(j5);
IkReal x796=IKsin(j5);
IkReal x797=(gconst52*x795);
IkReal x798=((1.0)*x796);
IkReal x799=(gconst53*x795);
IkReal x800=(gconst53*x798);
evalcond[0]=(((new_r11*x796))+gconst52+((new_r01*x795)));
evalcond[1]=(((gconst52*x796))+x799+new_r11);
evalcond[2]=(x797+(((-1.0)*x800)));
evalcond[3]=((((-1.0)*new_r01*x798))+((new_r11*x795))+gconst53);
evalcond[4]=(x797+new_r01+(((-1.0)*x800)));
evalcond[5]=((((-1.0)*gconst52*x798))+(((-1.0)*x799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x801=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst53*new_r11))+((gconst52*new_r01)))),-1);
if(!x801.valid){
continue;
}
CheckValue<IkReal> x802 = IKatan2WithCheck(IkReal((gconst52*gconst53)),IkReal(((-1.0)*(gconst52*gconst52))),IKFAST_ATAN2_MAGTHRESH);
if(!x802.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x801.value)))+(x802.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x803=IKcos(j5);
IkReal x804=IKsin(j5);
IkReal x805=(gconst52*x803);
IkReal x806=((1.0)*x804);
IkReal x807=(gconst53*x803);
IkReal x808=(gconst53*x806);
evalcond[0]=(gconst52+((new_r11*x804))+((new_r01*x803)));
evalcond[1]=(new_r11+((gconst52*x804))+x807);
evalcond[2]=(x805+(((-1.0)*x808)));
evalcond[3]=((((-1.0)*new_r01*x806))+gconst53+((new_r11*x803)));
evalcond[4]=(new_r01+x805+(((-1.0)*x808)));
evalcond[5]=((((-1.0)*x807))+(((-1.0)*gconst52*x806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x809=IKPowWithIntegerCheck(gconst53,-1);
if(!x809.valid){
continue;
}
cj5array[0]=(new_r00*(x809.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x810=IKsin(j5);
IkReal x811=IKcos(j5);
IkReal x812=((-1.0)*x810);
evalcond[0]=(new_r11*x810);
evalcond[1]=(new_r00*x812);
evalcond[2]=(gconst53*x812);
evalcond[3]=(((gconst53*x811))+new_r11);
evalcond[4]=(((new_r11*x811))+gconst53);
evalcond[5]=((((-1.0)*gconst53))+((new_r00*x811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x814 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x814.valid){
continue;
}
IkReal x813=((1.0)*(x814.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x813)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst51=((3.14159265358979)+(((-1.0)*x813)));
IkReal gconst52=0;
IkReal x815 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x815)==0){
continue;
}
IkReal gconst53=((-1.0)*new_r11*(pow(x815,-0.5)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x817 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x817.valid){
continue;
}
IkReal x816=((1.0)*(x817.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x816)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst51=((3.14159265358979)+(((-1.0)*x816)));
IkReal gconst52=0;
IkReal x818 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x818)==0){
continue;
}
IkReal gconst53=((-1.0)*new_r11*(pow(x818,-0.5)));
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x820 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x820.valid){
continue;
}
IkReal x819=((1.0)*(x820.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x819)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst51=((3.14159265358979)+(((-1.0)*x819)));
IkReal gconst52=0;
IkReal x821 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x821)==0){
continue;
}
IkReal gconst53=((-1.0)*new_r11*(pow(x821,-0.5)));
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x822=IKPowWithIntegerCheck(new_r10,-1);
if(!x822.valid){
continue;
}
CheckValue<IkReal> x823=IKPowWithIntegerCheck(gconst53,-1);
if(!x823.valid){
continue;
}
if( IKabs((gconst53*(x822.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x823.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst53*(x822.value)))+IKsqr(((-1.0)*new_r11*(x823.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((gconst53*(x822.value)), ((-1.0)*new_r11*(x823.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x824=IKsin(j5);
IkReal x825=IKcos(j5);
IkReal x826=((1.0)*gconst53);
IkReal x827=(gconst53*x825);
evalcond[0]=(new_r11*x824);
evalcond[1]=(new_r10*x825);
evalcond[2]=((-1.0)*gconst53*x824);
evalcond[3]=((-1.0)*x827);
evalcond[4]=(new_r11+x827);
evalcond[5]=(gconst53+((new_r11*x825)));
evalcond[6]=((((-1.0)*x824*x826))+new_r10);
evalcond[7]=(((new_r10*x824))+(((-1.0)*x826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x828=IKPowWithIntegerCheck(gconst53,-1);
if(!x828.valid){
continue;
}
CheckValue<IkReal> x829=IKPowWithIntegerCheck(new_r11,-1);
if(!x829.valid){
continue;
}
if( IKabs((new_r10*(x828.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst53*(x829.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x828.value)))+IKsqr(((-1.0)*gconst53*(x829.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r10*(x828.value)), ((-1.0)*gconst53*(x829.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x830=IKsin(j5);
IkReal x831=IKcos(j5);
IkReal x832=((1.0)*gconst53);
IkReal x833=(gconst53*x831);
evalcond[0]=(new_r11*x830);
evalcond[1]=(new_r10*x831);
evalcond[2]=((-1.0)*gconst53*x830);
evalcond[3]=((-1.0)*x833);
evalcond[4]=(new_r11+x833);
evalcond[5]=(((new_r11*x831))+gconst53);
evalcond[6]=((((-1.0)*x830*x832))+new_r10);
evalcond[7]=((((-1.0)*x832))+((new_r10*x830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x834 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x834.valid){
continue;
}
CheckValue<IkReal> x835=IKPowWithIntegerCheck(IKsign(gconst53),-1);
if(!x835.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x834.value)+(((1.5707963267949)*(x835.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x836=IKsin(j5);
IkReal x837=IKcos(j5);
IkReal x838=((1.0)*gconst53);
IkReal x839=(gconst53*x837);
evalcond[0]=(new_r11*x836);
evalcond[1]=(new_r10*x837);
evalcond[2]=((-1.0)*gconst53*x836);
evalcond[3]=((-1.0)*x839);
evalcond[4]=(new_r11+x839);
evalcond[5]=(((new_r11*x837))+gconst53);
evalcond[6]=((((-1.0)*x836*x838))+new_r10);
evalcond[7]=((((-1.0)*x838))+((new_r10*x836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x841 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
IkReal x840=((1.0)*(x841.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x840)));
new_r01=0;
IkReal gconst51=((3.14159265358979)+(((-1.0)*x840)));
IkReal gconst52=0;
IkReal x842 = new_r11*new_r11;
if(IKabs(x842)==0){
continue;
}
IkReal gconst53=((-1.0)*new_r11*(pow(x842,-0.5)));
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x844 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x844.valid){
continue;
}
IkReal x843=((1.0)*(x844.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x843)));
new_r01=0;
IkReal gconst51=((3.14159265358979)+(((-1.0)*x843)));
IkReal gconst52=0;
IkReal x845 = new_r11*new_r11;
if(IKabs(x845)==0){
continue;
}
IkReal gconst53=((-1.0)*new_r11*(pow(x845,-0.5)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x847 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x847.valid){
continue;
}
IkReal x846=((1.0)*(x847.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst52;
cj7=gconst53;
j7=((3.14159265)+(((-1.0)*x846)));
new_r01=0;
IkReal gconst51=((3.14159265358979)+(((-1.0)*x846)));
IkReal gconst52=0;
IkReal x848 = new_r11*new_r11;
if(IKabs(x848)==0){
continue;
}
IkReal gconst53=((-1.0)*new_r11*(pow(x848,-0.5)));
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x849=IKPowWithIntegerCheck(gconst53,-1);
if(!x849.valid){
continue;
}
CheckValue<IkReal> x850=IKPowWithIntegerCheck(new_r11,-1);
if(!x850.valid){
continue;
}
if( IKabs((new_r10*(x849.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst53*(x850.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x849.value)))+IKsqr(((-1.0)*gconst53*(x850.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r10*(x849.value)), ((-1.0)*gconst53*(x850.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x851=IKsin(j5);
IkReal x852=IKcos(j5);
IkReal x853=((1.0)*gconst53);
evalcond[0]=(new_r11*x851);
evalcond[1]=((-1.0)*gconst53*x851);
evalcond[2]=(((gconst53*x852))+new_r11);
evalcond[3]=(gconst53+((new_r11*x852)));
evalcond[4]=(new_r10+(((-1.0)*x851*x853)));
evalcond[5]=((((-1.0)*x852*x853))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x851))+((new_r10*x852)));
evalcond[7]=((((-1.0)*x853))+((new_r10*x851))+((new_r00*x852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x854 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x854.valid){
continue;
}
CheckValue<IkReal> x855=IKPowWithIntegerCheck(IKsign(gconst53),-1);
if(!x855.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x854.value)+(((1.5707963267949)*(x855.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x856=IKsin(j5);
IkReal x857=IKcos(j5);
IkReal x858=((1.0)*gconst53);
evalcond[0]=(new_r11*x856);
evalcond[1]=((-1.0)*gconst53*x856);
evalcond[2]=(((gconst53*x857))+new_r11);
evalcond[3]=(gconst53+((new_r11*x857)));
evalcond[4]=((((-1.0)*x856*x858))+new_r10);
evalcond[5]=(new_r00+(((-1.0)*x857*x858)));
evalcond[6]=((((-1.0)*new_r00*x856))+((new_r10*x857)));
evalcond[7]=((((-1.0)*x858))+((new_r10*x856))+((new_r00*x857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x859=IKPowWithIntegerCheck(IKsign(gconst53),-1);
if(!x859.valid){
continue;
}
CheckValue<IkReal> x860 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x860.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x859.value)))+(x860.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x861=IKsin(j5);
IkReal x862=IKcos(j5);
IkReal x863=((1.0)*gconst53);
evalcond[0]=(new_r11*x861);
evalcond[1]=((-1.0)*gconst53*x861);
evalcond[2]=(((gconst53*x862))+new_r11);
evalcond[3]=(gconst53+((new_r11*x862)));
evalcond[4]=((((-1.0)*x861*x863))+new_r10);
evalcond[5]=((((-1.0)*x862*x863))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x861))+((new_r10*x862)));
evalcond[7]=((((-1.0)*x863))+((new_r00*x862))+((new_r10*x861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x864=((1.0)*new_r11);
CheckValue<IkReal> x865=IKPowWithIntegerCheck(IKsign((((gconst52*new_r01))+(((-1.0)*gconst53*x864)))),-1);
if(!x865.valid){
continue;
}
CheckValue<IkReal> x866 = IKatan2WithCheck(IkReal(((((-1.0)*new_r01*x864))+((gconst52*gconst53)))),IkReal(((new_r11*new_r11)+(((-1.0)*(gconst52*gconst52))))),IKFAST_ATAN2_MAGTHRESH);
if(!x866.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x865.value)))+(x866.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x867=IKcos(j5);
IkReal x868=IKsin(j5);
IkReal x869=((1.0)*gconst53);
IkReal x870=(gconst52*x867);
IkReal x871=((1.0)*x868);
IkReal x872=(x868*x869);
evalcond[0]=(((new_r01*x867))+gconst52+((new_r11*x868)));
evalcond[1]=(((gconst52*x868))+((gconst53*x867))+new_r11);
evalcond[2]=((((-1.0)*new_r00*x871))+gconst52+((new_r10*x867)));
evalcond[3]=(gconst53+(((-1.0)*new_r01*x871))+((new_r11*x867)));
evalcond[4]=(new_r01+x870+(((-1.0)*x872)));
evalcond[5]=(new_r10+x870+(((-1.0)*x872)));
evalcond[6]=((((-1.0)*x869))+((new_r00*x867))+((new_r10*x868)));
evalcond[7]=(new_r00+(((-1.0)*gconst52*x871))+(((-1.0)*x867*x869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x873=((1.0)*gconst52);
CheckValue<IkReal> x874=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x874.valid){
continue;
}
CheckValue<IkReal> x875 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x873))+((gconst53*new_r01)))),IkReal(((((-1.0)*gconst53*new_r11))+(((-1.0)*new_r01*x873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x875.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x874.value)))+(x875.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x876=IKcos(j5);
IkReal x877=IKsin(j5);
IkReal x878=((1.0)*gconst53);
IkReal x879=(gconst52*x876);
IkReal x880=((1.0)*x877);
IkReal x881=(x877*x878);
evalcond[0]=(((new_r01*x876))+gconst52+((new_r11*x877)));
evalcond[1]=(((gconst53*x876))+new_r11+((gconst52*x877)));
evalcond[2]=(gconst52+(((-1.0)*new_r00*x880))+((new_r10*x876)));
evalcond[3]=(gconst53+(((-1.0)*new_r01*x880))+((new_r11*x876)));
evalcond[4]=((((-1.0)*x881))+new_r01+x879);
evalcond[5]=((((-1.0)*x881))+new_r10+x879);
evalcond[6]=(((new_r00*x876))+((new_r10*x877))+(((-1.0)*x878)));
evalcond[7]=((((-1.0)*x876*x878))+(((-1.0)*gconst52*x880))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x882=((1.0)*gconst52);
CheckValue<IkReal> x883 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x882))+((gconst52*new_r01)))),IkReal(((((-1.0)*new_r11*x882))+(((-1.0)*new_r00*x882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
CheckValue<IkReal> x884=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x884.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x883.value)+(((1.5707963267949)*(x884.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x885=IKcos(j5);
IkReal x886=IKsin(j5);
IkReal x887=((1.0)*gconst53);
IkReal x888=(gconst52*x885);
IkReal x889=((1.0)*x886);
IkReal x890=(x886*x887);
evalcond[0]=(((new_r01*x885))+((new_r11*x886))+gconst52);
evalcond[1]=(((gconst52*x886))+new_r11+((gconst53*x885)));
evalcond[2]=(((new_r10*x885))+gconst52+(((-1.0)*new_r00*x889)));
evalcond[3]=(((new_r11*x885))+gconst53+(((-1.0)*new_r01*x889)));
evalcond[4]=((((-1.0)*x890))+new_r01+x888);
evalcond[5]=((((-1.0)*x890))+new_r10+x888);
evalcond[6]=(((new_r10*x886))+((new_r00*x885))+(((-1.0)*x887)));
evalcond[7]=((((-1.0)*gconst52*x889))+new_r00+(((-1.0)*x885*x887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r11=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x892 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x892.valid){
continue;
}
IkReal x891=x892.value;
j5array[0]=((-1.0)*x891);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x891)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j5))))+((new_r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x893=IKcos(j5);
IkReal x894=IKsin(j5);
IkReal x895=((1.0)*x894);
evalcond[0]=(new_r11+x893);
evalcond[1]=((((-1.0)*x895))+new_r01);
evalcond[2]=((((-1.0)*x895))+new_r10);
evalcond[3]=((((-1.0)*x893))+new_r00);
evalcond[4]=(((new_r11*x894))+((new_r01*x893)));
evalcond[5]=((-1.0)+((new_r00*x893))+((new_r10*x894)));
evalcond[6]=(((new_r10*x893))+(((-1.0)*new_r00*x895)));
evalcond[7]=((1.0)+((new_r11*x893))+(((-1.0)*new_r01*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x896=IKsin(j5);
IkReal x897=IKcos(j5);
IkReal x898=((1.0)*x896);
evalcond[0]=(new_r01+x896);
evalcond[1]=(new_r10+x896);
evalcond[2]=(new_r00+x897);
evalcond[3]=((((-1.0)*x897))+new_r11);
evalcond[4]=(((new_r11*x896))+((new_r01*x897)));
evalcond[5]=((1.0)+((new_r00*x897))+((new_r10*x896)));
evalcond[6]=(((new_r10*x897))+(((-1.0)*new_r00*x898)));
evalcond[7]=((-1.0)+((new_r11*x897))+(((-1.0)*new_r01*x898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r11=0;
new_r00=0;
j5eval[0]=new_r01;
j5eval[1]=IKsign(new_r01);
j5eval[2]=((IKabs(cj7))+(IKabs(sj7)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r11=0;
new_r00=0;
j5eval[0]=new_r01;
j5eval[1]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x899=IKPowWithIntegerCheck(new_r01,-1);
if(!x899.valid){
continue;
}
CheckValue<IkReal> x900=IKPowWithIntegerCheck(new_r10,-1);
if(!x900.valid){
continue;
}
if( IKabs((cj7*(x899.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj7*(x900.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*(x899.value)))+IKsqr(((-1.0)*sj7*(x900.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj7*(x899.value)), ((-1.0)*sj7*(x900.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x901=IKcos(j5);
IkReal x902=IKsin(j5);
IkReal x903=((1.0)*cj7);
IkReal x904=(sj7*x901);
IkReal x905=(x902*x903);
evalcond[0]=(sj7+((new_r01*x901)));
evalcond[1]=(sj7+((new_r10*x901)));
evalcond[2]=(cj7+(((-1.0)*new_r01*x902)));
evalcond[3]=((((-1.0)*x903))+((new_r10*x902)));
evalcond[4]=(((sj7*x902))+((cj7*x901)));
evalcond[5]=((((-1.0)*x905))+new_r01+x904);
evalcond[6]=((((-1.0)*x905))+new_r10+x904);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x906=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x906.valid){
continue;
}
CheckValue<IkReal> x907 = IKatan2WithCheck(IkReal(cj7),IkReal(((-1.0)*sj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x907.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x906.value)))+(x907.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x908=IKcos(j5);
IkReal x909=IKsin(j5);
IkReal x910=((1.0)*cj7);
IkReal x911=(sj7*x908);
IkReal x912=(x909*x910);
evalcond[0]=(sj7+((new_r01*x908)));
evalcond[1]=(sj7+((new_r10*x908)));
evalcond[2]=(cj7+(((-1.0)*new_r01*x909)));
evalcond[3]=((((-1.0)*x910))+((new_r10*x909)));
evalcond[4]=(((sj7*x909))+((cj7*x908)));
evalcond[5]=((((-1.0)*x912))+new_r01+x911);
evalcond[6]=((((-1.0)*x912))+new_r10+x911);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x914 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x914.valid){
continue;
}
IkReal x913=x914.value;
j5array[0]=((-1.0)*x913);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x913)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j5))))+((new_r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x916 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x916.valid){
continue;
}
IkReal x915=x916.value;
j5array[0]=((-1.0)*x915);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x915)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j5))))+(((-1.0)*new_r01*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r10=0;
j5eval[0]=new_r11;
j5eval[1]=((IKabs(cj7))+(IKabs(sj7)));
j5eval[2]=IKsign(new_r11);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r10=0;
j5eval[0]=new_r00;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r10=0;
j5eval[0]=new_r11;
j5eval[1]=cj7;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
sj5array[0]=new_r00;
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x917=IKcos(j5);
IkReal x918=IKsin(j5);
evalcond[0]=x917;
evalcond[1]=(new_r00*x917);
evalcond[2]=(new_r11+x918);
evalcond[3]=(new_r11*x917);
evalcond[4]=((1.0)+((new_r11*x918)));
evalcond[5]=((1.0)+(((-1.0)*new_r00*x918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
sj5array[0]=new_r11;
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x919=IKcos(j5);
IkReal x920=IKsin(j5);
evalcond[0]=(new_r00*x919);
evalcond[1]=(new_r11*x919);
evalcond[2]=((-1.0)*x919);
evalcond[3]=(new_r00+x920);
evalcond[4]=((-1.0)+((new_r11*x920)));
evalcond[5]=((-1.0)+(((-1.0)*new_r00*x920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x922=IKPowWithIntegerCheck(new_r11,-1);
if(!x922.valid){
continue;
}
IkReal x921=x922.value;
CheckValue<IkReal> x923=IKPowWithIntegerCheck(cj7,-1);
if(!x923.valid){
continue;
}
CheckValue<IkReal> x924=IKPowWithIntegerCheck(x921,-2);
if(!x924.valid){
continue;
}
if( IKabs(((-1.0)*sj7*x921)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x921*(x923.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(x924.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj7*x921))+IKsqr((x921*(x923.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(x924.value)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj7*x921), (x921*(x923.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(x924.value)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x925=IKsin(j5);
IkReal x926=IKcos(j5);
IkReal x927=((1.0)*cj7);
IkReal x928=((1.0)*x925);
evalcond[0]=(sj7+((new_r11*x925)));
evalcond[1]=(cj7+((new_r11*x926)));
evalcond[2]=(sj7+(((-1.0)*new_r00*x928)));
evalcond[3]=((((-1.0)*x927))+((new_r00*x926)));
evalcond[4]=(((cj7*x926))+new_r11+((sj7*x925)));
evalcond[5]=((((-1.0)*x925*x927))+((sj7*x926)));
evalcond[6]=((((-1.0)*x926*x927))+new_r00+(((-1.0)*sj7*x928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x929=IKPowWithIntegerCheck(new_r00,-1);
if(!x929.valid){
continue;
}
CheckValue<IkReal> x930=IKPowWithIntegerCheck(new_r11,-1);
if(!x930.valid){
continue;
}
if( IKabs((sj7*(x929.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj7*(x930.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj7*(x929.value)))+IKsqr(((-1.0)*cj7*(x930.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj7*(x929.value)), ((-1.0)*cj7*(x930.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x931=IKsin(j5);
IkReal x932=IKcos(j5);
IkReal x933=((1.0)*cj7);
IkReal x934=((1.0)*x931);
evalcond[0]=(sj7+((new_r11*x931)));
evalcond[1]=(cj7+((new_r11*x932)));
evalcond[2]=(sj7+(((-1.0)*new_r00*x934)));
evalcond[3]=(((new_r00*x932))+(((-1.0)*x933)));
evalcond[4]=(((cj7*x932))+new_r11+((sj7*x931)));
evalcond[5]=((((-1.0)*x931*x933))+((sj7*x932)));
evalcond[6]=((((-1.0)*x932*x933))+new_r00+(((-1.0)*sj7*x934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x935 = IKatan2WithCheck(IkReal(((-1.0)*sj7)),IkReal(((-1.0)*cj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x935.valid){
continue;
}
CheckValue<IkReal> x936=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x936.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x935.value)+(((1.5707963267949)*(x936.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x937=IKsin(j5);
IkReal x938=IKcos(j5);
IkReal x939=((1.0)*cj7);
IkReal x940=((1.0)*x937);
evalcond[0]=(sj7+((new_r11*x937)));
evalcond[1]=(cj7+((new_r11*x938)));
evalcond[2]=(sj7+(((-1.0)*new_r00*x940)));
evalcond[3]=(((new_r00*x938))+(((-1.0)*x939)));
evalcond[4]=(((cj7*x938))+new_r11+((sj7*x937)));
evalcond[5]=((((-1.0)*x937*x939))+((sj7*x938)));
evalcond[6]=((((-1.0)*sj7*x940))+(((-1.0)*x938*x939))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x941 = IKatan2WithCheck(IkReal(((-1.0)+(cj7*cj7)+(new_r01*new_r01))),IkReal(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj7*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x941.valid){
continue;
}
CheckValue<IkReal> x942=IKPowWithIntegerCheck(IKsign((((new_r11*sj7))+((cj7*new_r01)))),-1);
if(!x942.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x941.value)+(((1.5707963267949)*(x942.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x943=IKcos(j5);
IkReal x944=IKsin(j5);
IkReal x945=((1.0)*cj7);
IkReal x946=(sj7*x943);
IkReal x947=((1.0)*x944);
IkReal x948=(x944*x945);
evalcond[0]=(sj7+((new_r01*x943))+((new_r11*x944)));
evalcond[1]=(((sj7*x944))+((cj7*x943))+new_r11);
evalcond[2]=(sj7+((new_r10*x943))+(((-1.0)*new_r00*x947)));
evalcond[3]=(cj7+((new_r11*x943))+(((-1.0)*new_r01*x947)));
evalcond[4]=((((-1.0)*x948))+new_r01+x946);
evalcond[5]=((((-1.0)*x948))+new_r10+x946);
evalcond[6]=((((-1.0)*x945))+((new_r00*x943))+((new_r10*x944)));
evalcond[7]=((((-1.0)*sj7*x947))+(((-1.0)*x943*x945))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x949=((1.0)*sj7);
CheckValue<IkReal> x950=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x950.valid){
continue;
}
CheckValue<IkReal> x951 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x949))+((cj7*new_r01)))),IkReal(((((-1.0)*cj7*new_r11))+(((-1.0)*new_r01*x949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x951.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x950.value)))+(x951.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x952=IKcos(j5);
IkReal x953=IKsin(j5);
IkReal x954=((1.0)*cj7);
IkReal x955=(sj7*x952);
IkReal x956=((1.0)*x953);
IkReal x957=(x953*x954);
evalcond[0]=(sj7+((new_r01*x952))+((new_r11*x953)));
evalcond[1]=(((sj7*x953))+new_r11+((cj7*x952)));
evalcond[2]=(((new_r10*x952))+sj7+(((-1.0)*new_r00*x956)));
evalcond[3]=(cj7+(((-1.0)*new_r01*x956))+((new_r11*x952)));
evalcond[4]=(new_r01+(((-1.0)*x957))+x955);
evalcond[5]=(new_r10+(((-1.0)*x957))+x955);
evalcond[6]=(((new_r10*x953))+((new_r00*x952))+(((-1.0)*x954)));
evalcond[7]=(new_r00+(((-1.0)*sj7*x956))+(((-1.0)*x952*x954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x958=((1.0)*sj7);
CheckValue<IkReal> x959 = IKatan2WithCheck(IkReal((((new_r01*sj7))+(((-1.0)*new_r10*x958)))),IkReal(((((-1.0)*new_r00*x958))+(((-1.0)*new_r11*x958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x959.valid){
continue;
}
CheckValue<IkReal> x960=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x960.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x959.value)+(((1.5707963267949)*(x960.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x961=IKcos(j5);
IkReal x962=IKsin(j5);
IkReal x963=((1.0)*cj7);
IkReal x964=(sj7*x961);
IkReal x965=((1.0)*x962);
IkReal x966=(x962*x963);
evalcond[0]=(((new_r11*x962))+((new_r01*x961))+sj7);
evalcond[1]=(((sj7*x962))+new_r11+((cj7*x961)));
evalcond[2]=(sj7+(((-1.0)*new_r00*x965))+((new_r10*x961)));
evalcond[3]=(((new_r11*x961))+cj7+(((-1.0)*new_r01*x965)));
evalcond[4]=(new_r01+x964+(((-1.0)*x966)));
evalcond[5]=(new_r10+x964+(((-1.0)*x966)));
evalcond[6]=(((new_r00*x961))+(((-1.0)*x963))+((new_r10*x962)));
evalcond[7]=((((-1.0)*x961*x963))+new_r00+(((-1.0)*sj7*x965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x967=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj7*x967))+(((-1.0)*new_r11*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj7*x967))+((cj7*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*x967))+(((-1.0)*new_r11*sj7))))+IKsqr(((((-1.0)*sj7*x967))+((cj7*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj7*x967))+(((-1.0)*new_r11*sj7))), ((((-1.0)*sj7*x967))+((cj7*new_r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x968=IKcos(j5);
IkReal x969=IKsin(j5);
IkReal x970=((1.0)*cj7);
IkReal x971=((1.0)*sj7);
IkReal x972=(sj7*x969);
IkReal x973=((1.0)*x969);
IkReal x974=(x968*x970);
evalcond[0]=(((new_r11*x969))+((new_r01*x968))+sj7);
evalcond[1]=(((sj7*x968))+new_r01+((cj7*x969)));
evalcond[2]=(new_r11+x972+(((-1.0)*x974)));
evalcond[3]=(new_r00+x972+(((-1.0)*x974)));
evalcond[4]=(((new_r00*x968))+((new_r10*x969))+(((-1.0)*x970)));
evalcond[5]=((((-1.0)*x969*x970))+new_r10+(((-1.0)*x968*x971)));
evalcond[6]=((((-1.0)*new_r00*x973))+((new_r10*x968))+(((-1.0)*x971)));
evalcond[7]=(((new_r11*x968))+(((-1.0)*new_r01*x973))+(((-1.0)*x970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x976 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x976.valid){
continue;
}
IkReal x975=x976.value;
j5array[0]=((-1.0)*x975);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x975)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x977=IKsin(j5);
IkReal x978=IKcos(j5);
IkReal x979=((1.0)*x977);
IkReal x980=(new_r11*x978);
evalcond[0]=(((new_r01*x978))+((new_r11*x977)));
evalcond[1]=(((new_r10*x977))+((new_r00*x978)));
evalcond[2]=((((-1.0)*new_r00*x979))+((new_r10*x978)));
evalcond[3]=((((-1.0)*new_r01*x979))+x980);
evalcond[4]=((((-1.0)*new_r01*new_r22*x979))+((new_r22*x980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x982 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x982.valid){
continue;
}
IkReal x981=x982.value;
j5array[0]=((-1.0)*x981);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x981)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x983=IKcos(j5);
IkReal x984=IKsin(j5);
IkReal x985=(new_r11*x983);
IkReal x986=((1.0)*x984);
IkReal x987=(new_r10*x983);
IkReal x988=(new_r22*x986);
evalcond[0]=(((new_r11*x984))+((new_r01*x983)));
evalcond[1]=((((-1.0)*new_r00*x986))+x987);
evalcond[2]=((((-1.0)*new_r01*x986))+x985);
evalcond[3]=(((new_r22*x987))+(((-1.0)*new_r00*x988)));
evalcond[4]=((((-1.0)*new_r01*x988))+((new_r22*x985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x990 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x990.valid){
continue;
}
IkReal x989=x990.value;
j5array[0]=((-1.0)*x989);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x989)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x991=IKcos(j5);
IkReal x992=IKsin(j5);
IkReal x993=(new_r11*x991);
IkReal x994=((1.0)*x992);
IkReal x995=(new_r10*x991);
IkReal x996=(new_r22*x994);
evalcond[0]=(((new_r10*x992))+((new_r00*x991)));
evalcond[1]=((((-1.0)*new_r00*x994))+x995);
evalcond[2]=((((-1.0)*new_r01*x994))+x993);
evalcond[3]=((((-1.0)*new_r00*x996))+((new_r22*x995)));
evalcond[4]=((((-1.0)*new_r01*x996))+((new_r22*x993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x998=IKPowWithIntegerCheck(cj6,-1);
if(!x998.valid){
continue;
}
IkReal x997=x998.value;
CheckValue<IkReal> x999=IKPowWithIntegerCheck(new_r11,-1);
if(!x999.valid){
continue;
}
if( IKabs((x997*(x999.value)*((((new_r01*new_r12))+(((-1.0)*cj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x997)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x997*(x999.value)*((((new_r01*new_r12))+(((-1.0)*cj6*sj7))))))+IKsqr(((-1.0)*new_r12*x997))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x997*(x999.value)*((((new_r01*new_r12))+(((-1.0)*cj6*sj7))))), ((-1.0)*new_r12*x997));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x1000=IKsin(j5);
IkReal x1001=IKcos(j5);
IkReal x1002=((1.0)*cj7);
IkReal x1003=(cj7*sj6);
IkReal x1004=((1.0)*x1001);
IkReal x1005=(new_r11*x1001);
IkReal x1006=(sj7*x1001);
IkReal x1007=(new_r00*x1000);
IkReal x1008=(sj7*x1000);
IkReal x1009=(new_r12*x1001);
IkReal x1010=(sj6*x1000);
IkReal x1011=(cj6*x1001);
IkReal x1012=((1.0)*x1000);
IkReal x1013=(cj6*x1012);
evalcond[0]=(x1011+new_r12);
evalcond[1]=((((-1.0)*x1013))+new_r02);
evalcond[2]=(((new_r12*x1000))+((new_r02*x1001)));
evalcond[3]=(sj7+((new_r11*x1000))+((new_r01*x1001)));
evalcond[4]=(x1009+cj6+(((-1.0)*new_r02*x1012)));
evalcond[5]=(x1008+new_r11+((x1001*x1003)));
evalcond[6]=((((-1.0)*x1002))+((new_r10*x1000))+((new_r00*x1001)));
evalcond[7]=(x1006+new_r01+(((-1.0)*x1002*x1010)));
evalcond[8]=(((sj6*x1006))+new_r10+(((-1.0)*x1000*x1002)));
evalcond[9]=((((-1.0)*x1007))+((new_r10*x1001))+((sj6*sj7)));
evalcond[10]=(x1005+x1003+(((-1.0)*new_r01*x1012)));
evalcond[11]=((((-1.0)*x1001*x1002))+(((-1.0)*sj6*x1008))+new_r00);
evalcond[12]=(((new_r20*sj6))+((new_r10*x1011))+(((-1.0)*cj6*x1007)));
evalcond[13]=(((cj6*x1005))+(((-1.0)*new_r01*x1013))+((new_r21*sj6)));
evalcond[14]=(((new_r02*x1010))+(((-1.0)*new_r12*sj6*x1004))+((cj6*new_r22)));
evalcond[15]=((1.0)+((cj6*x1009))+(((-1.0)*new_r02*x1013))+((new_r22*sj6)));
evalcond[16]=(((sj6*x1007))+(((-1.0)*sj7))+(((-1.0)*new_r10*sj6*x1004))+((cj6*new_r20)));
evalcond[17]=((((-1.0)*x1002))+((new_r01*x1010))+(((-1.0)*new_r11*sj6*x1004))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1014=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x1014.valid){
continue;
}
CheckValue<IkReal> x1015 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1015.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1014.value)))+(x1015.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x1016=IKsin(j5);
IkReal x1017=IKcos(j5);
IkReal x1018=((1.0)*cj7);
IkReal x1019=(cj7*sj6);
IkReal x1020=((1.0)*x1017);
IkReal x1021=(new_r11*x1017);
IkReal x1022=(sj7*x1017);
IkReal x1023=(new_r00*x1016);
IkReal x1024=(sj7*x1016);
IkReal x1025=(new_r12*x1017);
IkReal x1026=(sj6*x1016);
IkReal x1027=(cj6*x1017);
IkReal x1028=((1.0)*x1016);
IkReal x1029=(cj6*x1028);
evalcond[0]=(x1027+new_r12);
evalcond[1]=((((-1.0)*x1029))+new_r02);
evalcond[2]=(((new_r02*x1017))+((new_r12*x1016)));
evalcond[3]=(sj7+((new_r11*x1016))+((new_r01*x1017)));
evalcond[4]=((((-1.0)*new_r02*x1028))+x1025+cj6);
evalcond[5]=(x1024+((x1017*x1019))+new_r11);
evalcond[6]=((((-1.0)*x1018))+((new_r10*x1016))+((new_r00*x1017)));
evalcond[7]=(x1022+(((-1.0)*x1018*x1026))+new_r01);
evalcond[8]=((((-1.0)*x1016*x1018))+new_r10+((sj6*x1022)));
evalcond[9]=((((-1.0)*x1023))+((new_r10*x1017))+((sj6*sj7)));
evalcond[10]=(x1019+x1021+(((-1.0)*new_r01*x1028)));
evalcond[11]=((((-1.0)*sj6*x1024))+(((-1.0)*x1017*x1018))+new_r00);
evalcond[12]=(((new_r10*x1027))+((new_r20*sj6))+(((-1.0)*cj6*x1023)));
evalcond[13]=(((new_r21*sj6))+((cj6*x1021))+(((-1.0)*new_r01*x1029)));
evalcond[14]=((((-1.0)*new_r12*sj6*x1020))+((new_r02*x1026))+((cj6*new_r22)));
evalcond[15]=((1.0)+(((-1.0)*new_r02*x1029))+((new_r22*sj6))+((cj6*x1025)));
evalcond[16]=((((-1.0)*sj7))+(((-1.0)*new_r10*sj6*x1020))+((sj6*x1023))+((cj6*new_r20)));
evalcond[17]=((((-1.0)*x1018))+(((-1.0)*new_r11*sj6*x1020))+((new_r01*x1026))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "c2779ee6ed2e4715e453f9e1e8c24bec"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
