/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2023-04-14 02:05:33.107619
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[1]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=IKcos(j[7]);
x13=IKsin(j[6]);
x14=IKsin(j[7]);
x15=IKcos(j[6]);
x16=((1.0)*x11);
x17=((0.0375)*x13);
x18=((1.0)*x9);
x19=((1.0)*x10);
x20=((0.0375)*x11);
x21=((0.0925)*x4);
x22=((1.0)*x7);
x23=((1.0)*x4);
x24=((0.0325)*x4);
x25=((0.0375)*x15);
x26=((0.2151)*x4);
x27=((0.0375)*x10);
x28=(x4*x7);
x29=(x1*x2);
x30=(x5*x6);
x31=(x0*x3);
x32=((-1.0)*x10);
x33=(x1*x3);
x34=(x0*x2);
x35=((-1.0)*x11);
x36=((-0.0325)*x6);
x37=(x1*x5);
x38=((-1.0)*x6);
x39=((-1.0)*x7);
x40=((-0.2688)*x6);
x41=(x2*x5);
x42=((0.2688)*x2*x4);
x43=(x0*x5*x7);
x44=(x41*x8);
x45=(x0*x22*x5);
x46=(x22*x37);
x47=((1.0)*x3*x30);
x48=((((-1.0)*x33))+((x34*x4)));
x49=(x34+(((-1.0)*x23*x33)));
x50=(((x29*x4))+x31);
x51=(x47+(((-1.0)*x22*x4)));
x52=((((-1.0)*x29))+(((-1.0)*x23*x31)));
x53=(x48*x9);
x54=(x50*x9);
x55=(x49*x6);
x56=(x50*x8);
x57=(((x23*x6))+((x22*x3*x5)));
x58=((-1.0)*x57);
x59=(x48*x8);
x60=(x52*x6);
x61=((-1.0)*x52);
x62=(((x49*x7))+((x1*x30)));
x63=(((x8*(((((-1.0)*x47))+x28))))+((x41*x9)));
x64=(x46+(((-1.0)*x55)));
x65=(((x51*x9))+x44);
x66=(((x52*x7))+((x0*x30)));
x67=(x10*x62);
x68=(x11*x63);
x69=(x15*x65);
x70=(x64*x9);
x71=(((x38*x52))+x45);
x72=(x10*x66);
x73=(((x39*x52))+(((-1.0)*x0*x30)));
x74=(x71*x9);
x75=(x35*(((((-1.0)*x1*x30))+((x39*x49)))));
x76=(((x8*(((((-1.0)*x46))+x55))))+x54);
x77=(((x8*((((x37*x39))+x55))))+x54);
x78=(((x8*(((((-1.0)*x45))+x60))))+x53);
x79=(((x8*((((x0*x39*x5))+x60))))+x53);
x80=(x11*x77);
x81=(x74+x59);
x82=(x15*((x56+((x9*((((x38*x49))+x46)))))));
x83=((((-1.0)*x16*x57))+(((-1.0)*x19*x63)));
x84=(((x35*x57))+((x32*x63)));
x85=(x15*x81);
x86=(x13*x84);
x87=(((x32*x77))+x75);
x88=((((-1.0)*x19*x78))+(((-1.0)*x16*x73)));
x89=(((x32*x79))+((x35*x73)));
eerot[0]=(((x14*((((x13*x89))+x85))))+((x12*((x72+((x11*x79)))))));
eerot[1]=(((x12*((((x13*x88))+x85))))+((x14*((((x32*x66))+((x35*x78)))))));
eerot[2]=(((x15*x88))+((x13*(((((-1.0)*x74))+(((-1.0)*x59)))))));
eetrans[0]=((0.038)+(((-0.0925)*x43))+((x8*(((((0.2688)*x34*x4))+(((-0.2688)*x33))))))+((x6*(((((-1.0)*x21*x31))+(((-0.0925)*x29))))))+((x26*x34))+((x8*((((x36*x52))+(((0.0325)*x43))))))+(((0.04)*x0))+(((-0.2151)*x33))+((x9*(((((0.2688)*x43))+((x40*x52))))))+((x12*((((x25*x81))+((x17*x89))))))+((x14*(((((-1.0)*x20*x79))+(((-1.0)*x27*x66))))))+((x9*(((((0.0325)*x33))+(((-1.0)*x24*x34))))))+(((-0.1491)*x1)));
eerot[3]=(((x14*((x82+((x13*((((x32*x76))+x75))))))))+((x12*((x67+((x11*x76)))))));
eerot[4]=(((x12*((x82+(((-1.0)*x13*((((x16*(((((-1.0)*x1*x30))+(((-1.0)*x22*x49))))))+((x19*x77))))))))))+((x14*((((x32*x62))+((x35*x77)))))));
eerot[5]=(((x15*x87))+((x13*(((((-1.0)*x18*x64))+(((-1.0)*x56)))))));
IkReal x90=(x37*x7);
eetrans[1]=((0.124)+((x12*((((x17*x87))+((x25*((x70+x56))))))))+((x9*(((((-1.0)*x24*x29))+(((-0.0325)*x31))))))+(((0.1491)*x0))+((x9*((((x40*x49))+(((0.2688)*x90))))))+(((0.04)*x1))+(((-0.0925)*x90))+(((0.2151)*x31))+((x8*(((((0.2688)*x31))+(((0.2688)*x29*x4))))))+((x14*(((((-0.0375)*x67))+(((-0.0375)*x80))))))+((x8*((((x36*x49))+(((0.0325)*x90))))))+((x26*x29))+((x6*(((((0.0925)*x34))+(((-1.0)*x21*x33)))))));
eerot[6]=(((x12*((((x10*x58))+x68))))+((x14*((x69+x86)))));
eerot[7]=(((x14*((((x35*x63))+((x32*x58))))))+((x12*((((x13*x83))+x69)))));
eerot[8]=(((x13*(((((-1.0)*x44))+(((-1.0)*x18*x51))))))+((x15*x83)));
IkReal x91=(x3*x30);
eetrans[2]=((0.3325)+((x21*x7))+(((0.2688)*x44))+(((-0.0925)*x91))+(((-0.0325)*x41*x9))+(((0.2151)*x41))+((x14*(((((-1.0)*x27*x58))+(((-1.0)*x20*x63))))))+((x8*(((((-1.0)*x24*x7))+(((0.0325)*x91))))))+((x9*(((((0.2688)*x91))+(((-0.2688)*x28))))))+((x12*((((x17*x84))+((x25*x65)))))));
}

IKFAST_API int GetNumFreeParameters() { return 2; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2, 3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 8; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij2[2], _nj2,_ij3[2], _nj3;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
j3=pfree[1]; cj3=cos(pfree[1]); sj3=sin(pfree[1]), htj3=tan(pfree[1]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.038)+px+(((-0.0375)*r01)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.124)+py+(((-0.0375)*r11)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.3325)+(((-0.0375)*r21))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x92=((1.0)*px);
IkReal x93=((1.0)*pz);
IkReal x94=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x94))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x93)));
rxp0_2=((((-1.0)*r10*x92))+((py*r00)));
rxp1_0=((((-1.0)*r21*x94))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x93)));
rxp1_2=((((-1.0)*r11*x92))+((py*r01)));
rxp2_0=((((-1.0)*r22*x94))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x93)));
rxp2_2=((((-1.0)*r12*x92))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x95=((0.2982)*py);
IkReal x96=((0.08)*px);
IkReal x97=((1.0)*pp);
IkReal x98=((1.0)*py);
IkReal x99=((0.4839)*cj2);
IkReal x100=((0.0537)*cj2);
IkReal x101=(cj3*sj2);
IkReal x102=((((0.16)*py))+(((-0.5964)*px)));
IkReal x103=((0.06)*x101);
IkReal x104=((0.125)*x101);
IkReal x105=(x95+x96);
IkReal x106=((0.1491)+x104);
IkReal x107=((((-0.5376)*x101))+(((-0.065)*cj2)));
IkReal x108=((0.2139284)+x105+(((-1.0)*x97)));
IkReal x109=((-0.00532212)+x105+(((-1.0)*x97)));
IkReal x110=(x105+x97);
IkReal x111=((0.2139284)+(((-1.0)*x110)));
IkReal x112=((-0.00532212)+(((-1.0)*x110)));
IkReal x113=((((-1.0)*x100))+x106+py);
IkReal x114=((0.1491)+x103+x99);
IkReal x115=(x114+(((-1.0)*x98)));
IkReal x116=((((-1.0)*x100))+x106+(((-1.0)*x98)));
IkReal x117=(x114+py);
IkReal gconst0=x108;
IkReal gconst1=x109;
IkReal gconst2=x115;
IkReal gconst3=x107;
IkReal gconst4=x116;
IkReal gconst5=x108;
IkReal gconst6=x109;
IkReal gconst7=x115;
IkReal gconst8=x107;
IkReal gconst9=x116;
IkReal gconst10=x102;
IkReal gconst11=x102;
IkReal gconst12=x102;
IkReal gconst13=x102;
IkReal gconst14=x111;
IkReal gconst15=x112;
IkReal gconst16=x117;
IkReal gconst17=x107;
IkReal gconst18=x113;
IkReal gconst19=x111;
IkReal gconst20=x112;
IkReal gconst21=x117;
IkReal gconst22=x107;
IkReal gconst23=x113;
IkReal x118=px*px;
IkReal x119=(gconst1*gconst3);
IkReal x120=((0.127419)*gconst21);
IkReal x121=((0.254838)*px);
IkReal x122=(gconst11*gconst17);
IkReal x123=((1.0)*gconst19);
IkReal x124=(gconst14*gconst18);
IkReal x125=(gconst4*px);
IkReal x126=((2.0)*px);
IkReal x127=(gconst2*gconst5);
IkReal x128=(gconst11*gconst9);
IkReal x129=(gconst21*gconst6);
IkReal x130=((2.0)*gconst10);
IkReal x131=(gconst12*gconst8);
IkReal x132=(gconst1*gconst13);
IkReal x133=(gconst0*gconst5);
IkReal x134=(gconst0*gconst6);
IkReal x135=(gconst13*gconst15);
IkReal x136=(gconst15*gconst16);
IkReal x137=(gconst4*gconst7);
IkReal x138=(gconst10*gconst13);
IkReal x139=(gconst15*gconst17);
IkReal x140=(gconst11*gconst3);
IkReal x141=((0.127419)*gconst7);
IkReal x142=(gconst19*gconst23);
IkReal x143=(gconst18*gconst21);
IkReal x144=(gconst18*gconst7);
IkReal x145=((0.032471203122)*px);
IkReal x146=((1.0)*gconst21);
IkReal x147=(gconst11*gconst16);
IkReal x148=(gconst1*gconst20);
IkReal x149=(gconst15*gconst3);
IkReal x150=(gconst21*gconst4);
IkReal x151=(gconst12*gconst23);
IkReal x152=((1.0)*gconst22);
IkReal x153=(gconst1*gconst16);
IkReal x154=(gconst1*gconst17);
IkReal x155=(gconst12*gconst9);
IkReal x156=(gconst10*gconst18);
IkReal x157=(gconst23*gconst5);
IkReal x158=((1.0)*gconst7);
IkReal x159=(gconst1*gconst2);
IkReal x160=((0.127419)*gconst8);
IkReal x161=(gconst15*gconst20);
IkReal x162=(gconst1*gconst5);
IkReal x163=((1.0)*gconst4);
IkReal x164=(gconst1*gconst6);
IkReal x165=((2.0)*gconst0);
IkReal x166=(gconst19*gconst9);
IkReal x167=(gconst20*gconst21);
IkReal x168=(gconst14*gconst20);
IkReal x169=(gconst0*gconst13);
IkReal x170=(gconst0*gconst4);
IkReal x171=(gconst5*gconst9);
IkReal x172=(gconst11*gconst6);
IkReal x173=(gconst13*gconst21);
IkReal x174=(gconst0*gconst20);
IkReal x175=(gconst10*gconst6);
IkReal x176=((0.016235601561)*x144);
IkReal x177=((0.064942406244)*x118);
IkReal x178=((0.016235601561)*x150);
IkReal x179=(gconst15*x151);
IkReal x180=(gconst17*x141);
IkReal x181=(gconst2*x158);
IkReal x182=((4.0)*x118);
IkReal x183=((0.127419)*gconst22*gconst4);
IkReal x184=((1.0)*gconst5*gconst8);
IkReal x185=((0.127419)*gconst18*gconst22);
IkReal x186=(x120*x139);
IkReal x187=(gconst19*x185);
IkReal x188=(x119*x141);
IkReal x189=(gconst4*gconst5*x160);
IkReal x190=(x188+x189);
IkReal x191=(x186+x187);
IkReal x192=(x178+x177+x176);
op[0]=(((x136*x142))+(((-1.0)*x191))+(((-1.0)*gconst23*x123*x124))+(((-1.0)*gconst20*x136*x146))+(((-1.0)*gconst22*x123*x139))+((x124*x167))+(((-0.016235601561)*x143)));
op[1]=((((-1.0)*gconst23*x123*x156))+(((-1.0)*x120*x122))+((x142*x147))+(((-1.0)*gconst21*x126*x161))+(((-1.0)*gconst16*x135*x146))+(((-1.0)*gconst19*x124*x126))+(((-1.0)*gconst19*gconst22*x121))+(((-1.0)*gconst22*x122*x123))+((x136*x151))+(((-1.0)*gconst21*x145))+(((-1.0)*x124*x151))+((gconst20*x124*x126))+((gconst19*x126*x136))+(((-1.0)*gconst12*x185))+(((-1.0)*x121*x139))+((gconst10*gconst20*x143))+((x124*x173))+(((-1.0)*gconst20*x146*x147))+(((-1.0)*gconst20*x126*x136))+(((-1.0)*gconst18*x145))+((gconst15*x126*x142))+(((-1.0)*gconst14*x126*x142))+(((-1.0)*gconst12*x139*x152))+((gconst14*x126*x167)));
op[2]=((((-0.032471203122)*x143))+((gconst13*x124*x126))+((gconst14*x126*x173))+(((-1.0)*gconst11*x126*x167))+((x143*x174))+((x136*x166))+(((-1.0)*gconst8*x123*x139))+(((-1.0)*gconst9*x123*x124))+((x142*x153))+((x168*x182))+(((-1.0)*x161*x182))+(((-1.0)*x120*x149))+(((-1.0)*gconst14*gconst23*gconst4*x123))+((gconst15*gconst19*x182))+(((-1.0)*gconst12*x122*x152))+(((-1.0)*x120*x154))+((x136*x157))+((x126*x179))+((gconst20*gconst7*x124))+(((-1.0)*x191))+(((-1.0)*x192))+((x150*x168))+(((-1.0)*gconst10*x126*x142))+((x138*x143))+(((-1.0)*gconst5*x185))+(((-1.0)*gconst12*gconst22*x121))+(((-1.0)*x139*x141))+((gconst20*x126*x156))+(((-1.0)*x124*x157))+(((-1.0)*gconst20*x136*x158))+((gconst11*x126*x142))+(((-1.0)*gconst20*x126*x147))+((gconst10*x126*x167))+(((-1.0)*gconst14*gconst19*x182))+(((-1.0)*gconst12*x124*x126))+(((-1.0)*x151*x156))+((gconst12*x126*x136))+(((-1.0)*gconst5*x139*x152))+(((-1.0)*gconst2*x146*x161))+(((-1.0)*gconst0*gconst18*gconst23*x123))+(((-1.0)*gconst18*gconst19*x160))+(((-1.0)*gconst16*x146*x148))+((x124*x129))+(((-1.0)*x121*x122))+((gconst15*gconst2*x142))+((x147*x151))+(((-1.0)*gconst16*x126*x135))+(((-1.0)*x129*x136))+(((-1.0)*gconst22*x123*x149))+(((-1.0)*gconst19*x183))+(((-1.0)*gconst14*x126*x151))+(((-1.0)*gconst22*x123*x154))+((gconst19*x126*x147))+(((-1.0)*gconst13*x146*x147))+(((-1.0)*gconst21*x126*x135))+(((-1.0)*gconst19*x126*x156)));
op[3]=((((-2.0)*gconst0*gconst18*gconst19*px))+(((-1.0)*gconst10*gconst19*gconst23*gconst4))+((gconst10*gconst20*gconst21*gconst4))+(((-2.0)*gconst1*gconst16*gconst20*px))+(((-2.0)*gconst15*gconst16*gconst6*px))+(((-0.064942406244)*gconst21*px))+(((-1.0)*gconst10*gconst18*gconst19*gconst9))+(((-2.0)*gconst15*gconst2*gconst20*px))+(((-4.0)*gconst10*gconst19*(px*px)))+(((2.0)*gconst1*gconst19*gconst23*px))+(((2.0)*gconst15*gconst19*gconst2*px))+(((-0.254838)*gconst19*gconst22*px))+(((-2.0)*gconst1*gconst20*gconst21*px))+(((2.0)*gconst14*gconst20*gconst4*px))+(((2.0)*gconst0*gconst20*gconst21*px))+((gconst0*gconst13*gconst18*gconst21))+(((-0.127419)*gconst11*gconst21*gconst3))+(((-0.127419)*gconst12*gconst18*gconst8))+(((-1.0)*gconst1*gconst13*gconst16*gconst21))+(((-2.0)*gconst11*gconst13*gconst16*px))+(((2.0)*gconst11*gconst12*gconst23*px))+(((-1.0)*gconst11*gconst2*gconst20*gconst21))+(((-0.064942406244)*gconst18*px))+(((2.0)*gconst1*gconst16*gconst19*px))+((gconst11*gconst19*gconst2*gconst23))+(((-1.0)*gconst0*gconst12*gconst18*gconst23))+((gconst13*gconst14*gconst18*gconst7))+(((-0.032471203122)*gconst7*px))+(((-2.0)*gconst14*gconst23*gconst5*px))+(((-1.0)*gconst11*gconst17*gconst19*gconst8))+(((2.0)*gconst14*gconst20*gconst7*px))+(((-1.0)*gconst1*gconst12*gconst17*gconst22))+(((-2.0)*gconst0*gconst19*gconst23*px))+(((-0.127419)*gconst11*gconst17*gconst21))+(((2.0)*gconst10*gconst13*gconst18*px))+(((-1.0)*gconst11*gconst17*gconst22*gconst5))+(((-1.0)*gconst12*gconst14*gconst18*gconst9))+(((-0.254838)*gconst15*gconst17*px))+(((-0.254838)*gconst22*gconst5*px))+(((4.0)*gconst13*gconst14*(px*px)))+(((2.0)*gconst10*gconst13*gconst21*px))+((gconst11*gconst16*gconst19*gconst9))+((gconst11*gconst16*gconst23*gconst5))+(((-2.0)*gconst10*gconst12*gconst18*px))+(((-0.127419)*gconst11*gconst17*gconst7))+(((-2.0)*gconst14*gconst18*gconst5*px))+(((-0.254838)*gconst15*gconst3*px))+(((-1.0)*gconst12*gconst14*gconst23*gconst4))+((gconst1*gconst12*gconst16*gconst23))+(((-1.0)*gconst11*gconst16*gconst20*gconst7))+(((2.0)*gconst15*gconst16*gconst5*px))+(((2.0)*gconst15*gconst23*gconst5*px))+(((-2.0)*gconst14*gconst19*gconst9*px))+(((4.0)*gconst11*gconst19*(px*px)))+(((-1.0)*gconst12*gconst15*gconst22*gconst3))+(((-2.0)*gconst14*gconst19*gconst4*px))+((gconst12*gconst15*gconst16*gconst9))+(((2.0)*gconst14*gconst18*gconst6*px))+(((-2.0)*gconst15*gconst20*gconst7*px))+(((-4.0)*gconst13*gconst15*(px*px)))+(((-1.0)*gconst10*gconst18*gconst23*gconst5))+(((2.0)*gconst15*gconst19*gconst9*px))+(((-1.0)*gconst13*gconst15*gconst2*gconst21))+(((2.0)*gconst14*gconst21*gconst6*px))+(((-0.254838)*gconst19*gconst8*px))+(((-1.0)*gconst11*gconst19*gconst22*gconst3))+(((2.0)*gconst11*gconst12*gconst16*px))+(((-0.127419)*gconst12*gconst18*gconst22))+(((-4.0)*gconst11*gconst20*(px*px)))+(((-1.0)*gconst12*gconst15*gconst17*gconst8))+(((-2.0)*gconst11*gconst13*gconst21*px))+(((-1.0)*gconst11*gconst16*gconst21*gconst6))+((gconst10*gconst18*gconst21*gconst6))+(((2.0)*gconst0*gconst18*gconst20*px))+((gconst12*gconst15*gconst2*gconst23))+(((-4.0)*gconst12*gconst14*(px*px)))+(((-1.0)*gconst13*gconst15*gconst16*gconst7))+((gconst13*gconst14*gconst21*gconst4))+(((4.0)*gconst10*gconst20*(px*px)))+(((4.0)*gconst12*gconst15*(px*px)))+(((-2.0)*gconst15*gconst21*gconst6*px))+(((-2.0)*gconst10*gconst12*gconst23*px))+((gconst10*gconst18*gconst20*gconst7))+(((-0.032471203122)*gconst4*px))+(((-0.254838)*gconst1*gconst17*px))+(((-0.127419)*gconst12*gconst22*gconst4)));
op[4]=((((-4.0)*gconst1*gconst20*(px*px)))+(((4.0)*gconst14*gconst6*(px*px)))+(((-1.0)*gconst0*gconst19*gconst23*gconst4))+(((-1.0)*gconst15*gconst19*gconst3*gconst8))+(((-1.0)*gconst11*gconst13*gconst16*gconst7))+(((-0.127419)*gconst19*gconst22*gconst4))+((gconst14*gconst21*gconst4*gconst6))+(((-1.0)*gconst11*gconst13*gconst2*gconst21))+(((-1.0)*gconst14*gconst19*gconst4*gconst9))+(((-1.0)*gconst1*gconst17*gconst19*gconst8))+(((2.0)*gconst11*gconst19*gconst2*px))+(((-4.0)*gconst14*gconst5*(px*px)))+(((-4.0)*gconst11*gconst13*(px*px)))+(((-1.0)*gconst14*gconst18*gconst5*gconst9))+(((-0.129884812488)*(px*px)))+(((-1.0)*gconst11*gconst12*gconst17*gconst8))+(((-2.0)*gconst10*gconst18*gconst5*px))+((gconst10*gconst13*gconst21*gconst4))+(((-4.0)*gconst15*gconst6*(px*px)))+(((-2.0)*gconst13*gconst15*gconst7*px))+(((-0.127419)*gconst18*gconst5*gconst8))+(((-0.032471203122)*gconst18*gconst7))+(((-1.0)*gconst1*gconst16*gconst21*gconst6))+(((4.0)*gconst15*gconst5*(px*px)))+(((-0.254838)*gconst12*gconst8*px))+(((4.0)*gconst0*gconst20*(px*px)))+((gconst15*gconst16*gconst5*gconst9))+(((-2.0)*gconst1*gconst13*gconst21*px))+((gconst0*gconst18*gconst21*gconst6))+(((-1.0)*gconst15*gconst2*gconst21*gconst6))+(((-2.0)*gconst0*gconst12*gconst18*px))+((gconst0*gconst20*gconst21*gconst4))+((gconst15*gconst2*gconst23*gconst5))+(((-0.127419)*gconst15*gconst3*gconst7))+((gconst15*gconst19*gconst2*gconst9))+(((4.0)*gconst10*gconst13*(px*px)))+(((-0.127419)*gconst18*gconst22*gconst5))+((gconst14*gconst20*gconst4*gconst7))+(((-0.127419)*gconst22*gconst4*gconst5))+(((-2.0)*gconst12*gconst14*gconst4*px))+(((-4.0)*gconst10*gconst12*(px*px)))+(((-1.0)*gconst15*gconst22*gconst3*gconst5))+(((-2.0)*gconst10*gconst23*gconst5*px))+(((2.0)*gconst12*gconst15*gconst9*px))+(((-0.127419)*gconst1*gconst17*gconst21))+((gconst1*gconst16*gconst23*gconst5))+(((2.0)*gconst10*gconst20*gconst4*px))+(((-2.0)*gconst11*gconst2*gconst20*px))+(((-1.0)*gconst15*gconst17*gconst5*gconst8))+((gconst1*gconst16*gconst19*gconst9))+(((-2.0)*gconst11*gconst21*gconst6*px))+(((2.0)*gconst0*gconst13*gconst18*px))+(((2.0)*gconst0*gconst13*gconst21*px))+(((-1.0)*gconst15*gconst2*gconst20*gconst7))+(((-0.127419)*gconst18*gconst19*gconst8))+(((-0.016235601561)*gconst4*gconst7))+(((-0.254838)*gconst12*gconst22*px))+(((-4.0)*gconst0*gconst19*(px*px)))+(((-1.0)*gconst10*gconst12*gconst18*gconst9))+(((-0.127419)*gconst15*gconst17*gconst7))+(((-2.0)*gconst1*gconst13*gconst16*px))+(((-1.0)*gconst1*gconst17*gconst22*gconst5))+((gconst10*gconst13*gconst18*gconst7))+(((-1.0)*gconst1*gconst19*gconst22*gconst3))+(((2.0)*gconst11*gconst19*gconst9*px))+(((2.0)*gconst10*gconst21*gconst6*px))+(((2.0)*gconst10*gconst20*gconst7*px))+(((2.0)*gconst10*gconst18*gconst6*px))+(((4.0)*gconst1*gconst19*(px*px)))+((gconst14*gconst18*gconst6*gconst7))+(((4.0)*gconst11*gconst12*(px*px)))+(((-0.127419)*gconst15*gconst21*gconst3))+(((2.0)*gconst11*gconst23*gconst5*px))+(((2.0)*gconst1*gconst12*gconst23*px))+(((-0.254838)*gconst11*gconst17*px))+(((2.0)*gconst11*gconst16*gconst5*px))+(((-1.0)*gconst14*gconst23*gconst4*gconst5))+(((2.0)*gconst13*gconst14*gconst7*px))+(((-0.127419)*gconst1*gconst17*gconst7))+(((-2.0)*gconst11*gconst16*gconst6*px))+(((-2.0)*gconst12*gconst14*gconst9*px))+(((-2.0)*gconst13*gconst15*gconst2*px))+(((2.0)*gconst1*gconst12*gconst16*px))+((gconst11*gconst12*gconst2*gconst23))+(((2.0)*gconst12*gconst15*gconst2*px))+(((-2.0)*gconst10*gconst19*gconst4*px))+(((-0.032471203122)*gconst21*gconst4))+(((-1.0)*gconst0*gconst18*gconst23*gconst5))+(((-2.0)*gconst10*gconst19*gconst9*px))+(((-1.0)*gconst0*gconst18*gconst19*gconst9))+(((-1.0)*gconst15*gconst16*gconst6*gconst7))+(((-1.0)*gconst1*gconst2*gconst20*gconst21))+(((-1.0)*gconst1*gconst16*gconst20*gconst7))+(((-2.0)*gconst11*gconst20*gconst7*px))+(((-0.127419)*gconst1*gconst21*gconst3))+(((-1.0)*gconst10*gconst12*gconst23*gconst4))+((gconst1*gconst19*gconst2*gconst23))+((gconst11*gconst12*gconst16*gconst9))+(((-0.254838)*gconst11*gconst3*px))+((gconst0*gconst18*gconst20*gconst7))+(((-0.016235601561)*gconst18*gconst21))+(((2.0)*gconst13*gconst14*gconst4*px))+(((-1.0)*gconst11*gconst12*gconst22*gconst3))+(((-0.127419)*gconst19*gconst4*gconst8))+(((-2.0)*gconst0*gconst12*gconst23*px)));
op[5]=((((-0.032471203122)*gconst18*px))+((gconst0*gconst13*gconst21*gconst4))+(((-2.0)*gconst0*gconst18*gconst5*px))+(((-1.0)*gconst11*gconst16*gconst6*gconst7))+(((-4.0)*gconst11*gconst6*(px*px)))+((gconst11*gconst2*gconst23*gconst5))+((gconst1*gconst12*gconst16*gconst9))+((gconst1*gconst12*gconst2*gconst23))+(((4.0)*gconst10*gconst6*(px*px)))+(((-1.0)*gconst1*gconst12*gconst22*gconst3))+(((-0.127419)*gconst11*gconst21*gconst3))+(((-2.0)*gconst0*gconst23*gconst5*px))+((gconst13*gconst14*gconst4*gconst7))+(((2.0)*gconst14*gconst4*gconst6*px))+(((2.0)*gconst1*gconst23*gconst5*px))+(((2.0)*gconst1*gconst19*gconst9*px))+(((-1.0)*gconst11*gconst2*gconst21*gconst6))+(((-0.127419)*gconst12*gconst18*gconst8))+(((-2.0)*gconst11*gconst13*gconst2*px))+(((-2.0)*gconst1*gconst20*gconst7*px))+(((-2.0)*gconst10*gconst12*gconst4*px))+((gconst0*gconst13*gconst18*gconst7))+(((-1.0)*gconst11*gconst2*gconst20*gconst7))+(((-1.0)*gconst10*gconst19*gconst4*gconst9))+(((-0.064942406244)*gconst7*px))+(((4.0)*gconst11*gconst5*(px*px)))+(((2.0)*gconst15*gconst2*gconst5*px))+(((2.0)*gconst11*gconst12*gconst2*px))+(((-1.0)*gconst11*gconst22*gconst3*gconst5))+(((2.0)*gconst0*gconst21*gconst6*px))+(((-1.0)*gconst11*gconst19*gconst3*gconst8))+((gconst10*gconst20*gconst4*gconst7))+(((-0.254838)*gconst22*gconst5*px))+(((-1.0)*gconst0*gconst12*gconst18*gconst9))+(((2.0)*gconst15*gconst5*gconst9*px))+(((-1.0)*gconst0*gconst12*gconst23*gconst4))+((gconst11*gconst16*gconst5*gconst9))+(((-4.0)*gconst1*gconst13*(px*px)))+(((2.0)*gconst0*gconst20*gconst4*px))+(((-1.0)*gconst1*gconst13*gconst2*gconst21))+(((-0.127419)*gconst11*gconst17*gconst7))+(((-2.0)*gconst15*gconst2*gconst6*px))+((gconst10*gconst21*gconst4*gconst6))+(((-0.254838)*gconst15*gconst3*px))+(((-0.127419)*gconst11*gconst3*gconst7))+(((-1.0)*gconst10*gconst18*gconst5*gconst9))+(((-1.0)*gconst13*gconst15*gconst2*gconst7))+(((-2.0)*gconst10*gconst12*gconst9*px))+(((2.0)*gconst14*gconst6*gconst7*px))+(((-1.0)*gconst1*gconst12*gconst17*gconst8))+(((-0.127419)*gconst12*gconst4*gconst8))+(((-1.0)*gconst10*gconst23*gconst4*gconst5))+((gconst12*gconst15*gconst2*gconst9))+(((-2.0)*gconst1*gconst2*gconst20*px))+((gconst11*gconst19*gconst2*gconst9))+(((-2.0)*gconst0*gconst19*gconst9*px))+(((2.0)*gconst0*gconst18*gconst6*px))+(((-2.0)*gconst0*gconst19*gconst4*px))+(((-1.0)*gconst11*gconst17*gconst5*gconst8))+(((-4.0)*gconst10*gconst5*(px*px)))+(((-0.254838)*gconst19*gconst8*px))+(((-1.0)*gconst12*gconst14*gconst4*gconst9))+(((-0.064942406244)*gconst4*px))+(((-2.0)*gconst14*gconst5*gconst9*px))+(((2.0)*gconst11*gconst12*gconst9*px))+(((-1.0)*gconst12*gconst15*gconst3*gconst8))+(((-2.0)*gconst1*gconst16*gconst6*px))+(((-0.254838)*gconst5*gconst8*px))+(((-4.0)*gconst0*gconst12*(px*px)))+(((-0.254838)*gconst1*gconst3*px))+(((-0.032471203122)*gconst21*px))+(((2.0)*gconst1*gconst16*gconst5*px))+((gconst10*gconst18*gconst6*gconst7))+(((-2.0)*gconst11*gconst13*gconst7*px))+(((2.0)*gconst1*gconst19*gconst2*px))+(((-1.0)*gconst1*gconst13*gconst16*gconst7))+(((2.0)*gconst10*gconst13*gconst4*px))+(((2.0)*gconst0*gconst20*gconst7*px))+(((2.0)*gconst10*gconst13*gconst7*px))+(((4.0)*gconst0*gconst13*(px*px)))+(((-0.254838)*gconst1*gconst17*px))+(((-2.0)*gconst14*gconst4*gconst5*px))+(((4.0)*gconst1*gconst12*(px*px)))+(((-2.0)*gconst1*gconst21*gconst6*px))+(((-2.0)*gconst15*gconst6*gconst7*px))+(((-0.127419)*gconst12*gconst22*gconst4)));
op[6]=((((-1.0)*x119*x120))+((gconst6*x125*x130))+((gconst12*x126*x159))+(((-1.0)*x149*x184))+((x137*x174))+(((-1.0)*gconst7*x126*x132))+(((-1.0)*gconst8*x119*x123))+((x162*x182))+(((-1.0)*x154*x184))+(((-1.0)*gconst18*gconst9*x133))+(((-1.0)*gconst11*gconst13*x181))+(((-1.0)*gconst18*gconst5*x160))+(((-1.0)*gconst12*x125*x165))+(((-1.0)*x190))+(((-1.0)*x192))+(((-1.0)*gconst14*x163*x171))+((x137*x138))+(((-1.0)*gconst9*x123*x170))+(((-1.0)*x133*x182))+((gconst12*gconst2*x128))+(((-1.0)*gconst5*x183))+((x129*x170))+(((-1.0)*gconst7*x126*x172))+(((-1.0)*gconst5*x125*x130))+(((-1.0)*gconst0*x126*x155))+(((-1.0)*gconst19*gconst4*x160))+(((-1.0)*gconst10*x155*x163))+(((-1.0)*x121*x140))+(((-1.0)*gconst10*x126*x171))+(((-1.0)*x148*x181))+((gconst14*gconst6*x137))+((gconst7*x126*x169))+(((-1.0)*x141*x154))+(((-1.0)*gconst2*x126*x132))+((gconst7*x126*x175))+((gconst11*x126*x127))+(((-1.0)*x129*x159))+(((-1.0)*gconst6*x153*x158))+(((-1.0)*x141*x149))+(((-0.032471203122)*x137))+((gconst1*gconst23*x127))+(((-1.0)*x131*x140))+((x134*x144))+(((-1.0)*x121*x131))+((x134*x182))+((gconst1*x126*x155))+((gconst5*x126*x128))+(((-1.0)*gconst15*gconst6*x181))+(((-1.0)*x164*x182))+((x159*x166))+((x153*x171))+(((-1.0)*gconst5*x119*x152))+((gconst15*gconst9*x127))+((gconst13*x125*x165))+(((-1.0)*gconst2*x126*x172))+(((-1.0)*gconst23*x133*x163)));
op[7]=(((gconst9*x126*x162))+(((-1.0)*x119*x131))+(((-1.0)*x119*x121))+(((-1.0)*x140*x184))+((x137*x175))+(((-1.0)*x140*x141))+((gconst1*x126*x127))+((x137*x169))+(((-1.0)*gconst0*x155*x163))+(((-2.0)*x125*x133))+((gconst7*x126*x134))+(((-1.0)*gconst10*x163*x171))+(((-1.0)*gconst6*x126*x159))+(((2.0)*x125*x134))+((x155*x159))+(((-1.0)*gconst5*gconst8*x121))+(((-1.0)*gconst9*x126*x133))+(((-1.0)*gconst7*x145))+(((-1.0)*gconst7*x126*x164))+(((-1.0)*x132*x181))+(((-0.032471203122)*x125))+(((-0.127419)*gconst4*x131))+(((-1.0)*x172*x181))+((x127*x128)));
op[8]=((((-1.0)*x190))+(((-1.0)*gconst9*x133*x163))+(((-1.0)*x119*x184))+(((-1.0)*gconst6*x158*x159))+((x134*x137))+(((-0.016235601561)*x137))+((gconst1*gconst9*x127)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j4eval[2];
IkReal x193=(cj3*sj2);
j4eval[0]=(cj2+(((-2.32540540540541)*x193)));
j4eval[1]=IKsign(((((-1576891.4319)*x193))+(((678114.6325)*cj2))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x194=py*py;
IkReal x195=cj0*cj0;
IkReal x196=pz*pz;
IkReal x197=px*px;
IkReal x198=(cj0*px);
IkReal x199=((0.0148)*cj2);
IkReal x200=(cj3*sj2);
IkReal x201=(py*sj0);
IkReal x202=((0.185)*cj2);
IkReal x203=((50.0)*cj2);
IkReal x204=((625.0)*cj2);
IkReal x205=((1453.37837837838)*x194);
IkReal x206=((0.4302)*x194);
IkReal x207=(x195*x197);
IkReal x208=(cj2*x194*x195);
j1eval[0]=((((-1.0)*x200*x205))+(((116.27027027027)*x198*x200))+(((-1.0)*x201*x203))+cj2+((x196*x204))+((x194*x204))+((x195*x200*x205))+(((116.27027027027)*x200*x201))+(((-2.32540540540541)*x200))+(((-2906.75675675676)*x198*x200*x201))+((x204*x207))+(((-1.0)*x198*x203))+(((1250.0)*cj2*x198*x201))+(((-1453.37837837838)*x196*x200))+(((-1.0)*x194*x195*x204))+(((-1453.37837837838)*x200*x207)));
j1eval[1]=IKsign(((((-1.0)*x200*x206))+(((-0.8604)*x198*x200*x201))+(((0.000296)*cj2))+((x196*x202))+(((-0.00068832)*x200))+((x194*x202))+((x195*x200*x206))+(((-0.4302)*x196*x200))+(((0.034416)*x198*x200))+((x202*x207))+(((-1.0)*x194*x195*x202))+(((-1.0)*x198*x199))+(((-1.0)*x199*x201))+(((-0.4302)*x200*x207))+(((0.034416)*x200*x201))+(((0.37)*cj2*x198*x201))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((0.822621974390716)+(((0.630947044846946)*py*sj0))+(((0.630947044846946)*cj0*px))+(((-2.35185510966699)*px*sj0))+(((-7.88683806058682)*pp))+(((2.35185510966699)*cj0*py)))) < -1-IKFAST_SINCOS_THRESH || (((0.822621974390716)+(((0.630947044846946)*py*sj0))+(((0.630947044846946)*cj0*px))+(((-2.35185510966699)*px*sj0))+(((-7.88683806058682)*pp))+(((2.35185510966699)*cj0*py)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x209=IKasin(((0.822621974390716)+(((0.630947044846946)*py*sj0))+(((0.630947044846946)*cj0*px))+(((-2.35185510966699)*px*sj0))+(((-7.88683806058682)*pp))+(((2.35185510966699)*cj0*py))));
j4array[0]=((-2.0972455314777)+(((-1.0)*x209)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((1.04434712211209)+x209);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j1eval[2];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x210=(py*sj0);
IkReal x211=((0.0325)*sj4);
IkReal x212=(pz*sj4);
IkReal x213=((0.2688)*cj4);
IkReal x214=(cj4*pz);
IkReal x215=(cj0*px);
IkReal x216=((25.0)*sj4);
IkReal x217=((206.769230769231)*cj4);
j1eval[0]=((6.61846153846154)+(((-1.0)*sj4))+(((-25.0)*x214))+((x210*x216))+((x215*x216))+(((-1.0)*x210*x217))+(((-165.461538461538)*x215))+(((-165.461538461538)*x210))+(((71.1538461538462)*pz))+(((-206.769230769231)*x212))+(((8.27076923076923)*cj4))+(((-1.0)*x215*x217)));
j1eval[1]=IKsign(((0.008604)+(((-0.0013)*sj4))+((x210*x211))+(((-0.2151)*x210))+(((-0.2151)*x215))+(((-0.2688)*x212))+((x211*x215))+(((0.0925)*pz))+(((-1.0)*x210*x213))+(((-1.0)*x213*x215))+(((-0.0325)*x214))+(((0.010752)*cj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x218=(cj0*px);
IkReal x219=((25.0)*cj4);
IkReal x220=(cj4*pz);
IkReal x221=((0.2688)*sj4);
IkReal x222=(pz*sj4);
IkReal x223=(py*sj0);
IkReal x224=((206.769230769231)*sj4);
IkReal x225=((0.0325)*cj4);
j1eval[0]=((2.84615384615385)+((x218*x219))+(((-71.1538461538462)*x223))+(((-206.769230769231)*x220))+((x223*x224))+((x219*x223))+(((25.0)*x222))+(((-165.461538461538)*pz))+((x218*x224))+(((-71.1538461538462)*x218))+(((-8.27076923076923)*sj4))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.0037)+(((-0.0013)*cj4))+(((-0.0925)*x218))+(((-0.2688)*x220))+(((0.0325)*x222))+((x223*x225))+(((-0.2151)*pz))+((x218*x221))+((x218*x225))+(((-0.010752)*sj4))+((x221*x223))+(((-0.0925)*x223))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1eval[0]=((-2.01122203125123)+sj4+(((-1.72070507538122)*cj4)));
j1eval[1]=IKsign(((-0.12813395)+(((-0.10962526)*cj4))+(((0.0637095)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x226=(py*sj0);
IkReal x227=((0.0325)*sj4);
IkReal x228=((0.2688)*cj4);
IkReal x229=((0.2688)*sj4);
IkReal x230=(cj0*px);
IkReal x231=((0.0325)*cj4);
CheckValue<IkReal> x232 = IKatan2WithCheck(IkReal(((0.008604)+(((-0.0013)*sj4))+((pz*x229))+((pz*x231))+(((-0.0925)*pz))+((x227*x230))+((x226*x227))+(((-1.0)*x226*x228))+(((-0.2151)*x226))+(((-0.2151)*x230))+(((-1.0)*x228*x230))+(((0.010752)*cj4)))),IkReal(((-0.0037)+(((-1.0)*x230*x231))+(((0.0925)*x226))+((pz*x227))+(((0.010752)*sj4))+(((-0.2151)*pz))+(((-1.0)*x226*x231))+(((-1.0)*pz*x228))+(((0.0013)*cj4))+(((0.0925)*x230))+(((-1.0)*x226*x229))+(((-1.0)*x229*x230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x232.valid){
continue;
}
CheckValue<IkReal> x233=IKPowWithIntegerCheck(IKsign(((-0.12813395)+(((-0.10962526)*cj4))+(((0.0637095)*sj4)))),-1);
if(!x233.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x232.value)+(((1.5707963267949)*(x233.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x234=IKcos(j1);
IkReal x235=IKsin(j1);
IkReal x236=(cj0*px);
IkReal x237=(py*sj0);
IkReal x238=((0.2688)*cj4);
IkReal x239=((0.0325)*cj4);
IkReal x240=((0.0325)*sj4);
IkReal x241=((0.2688)*sj4);
IkReal x242=((1.0)*x235);
IkReal x243=(sj4*x235);
IkReal x244=(pz*x234);
IkReal x245=((0.185)*x234);
IkReal x246=((0.4302)*x235);
evalcond[0]=((0.0925)+(((-0.04)*x234))+((x234*x236))+((x234*x237))+(((-1.0)*pz*x242))+(((-1.0)*x239))+(((-1.0)*x241)));
evalcond[1]=((0.2151)+(((-1.0)*x244))+(((-1.0)*x237*x242))+(((-1.0)*x236*x242))+x238+(((-1.0)*x240))+(((0.04)*x235)));
evalcond[2]=(((x234*x240))+((x235*x239))+pz+(((-0.0925)*x235))+(((-1.0)*x234*x238))+(((-0.2151)*x234))+((x235*x241)));
evalcond[3]=((0.04)+((x234*x239))+((x234*x241))+((x235*x238))+(((-1.0)*x235*x240))+(((0.2151)*x235))+(((-0.0925)*x234))+(((-1.0)*x236))+(((-1.0)*x237)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((0.08)*x237))+(((0.08)*x236))+(((0.185)*pz*x235))+((x237*x246))+((x236*x246))+(((-1.0)*x237*x245))+(((-1.0)*x236*x245))+(((0.2982)*cj0*py))+(((0.0074)*x234))+(((-1.0)*pp))+(((0.4302)*x244))+(((-0.017208)*x235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1027=cj4*cj4;
IkReal x1028=(cj0*px);
IkReal x1029=((0.2688)*sj4);
IkReal x1030=(cj4*sj4);
IkReal x1031=((0.0325)*cj4);
IkReal x1032=(py*sj0);
IkReal x1033=((1.0)*pz);
CheckValue<IkReal> x1034=IKPowWithIntegerCheck(IKsign(((0.0037)+((x1031*x1032))+(((-0.0925)*x1028))+(((-0.0925)*x1032))+((x1028*x1029))+(((-0.2688)*cj4*pz))+(((-0.0013)*cj4))+((x1028*x1031))+((x1029*x1032))+(((-0.2151)*pz))+(((-0.010752)*sj4))+(((0.0325)*pz*sj4)))),-1);
if(!x1034.valid){
continue;
}
CheckValue<IkReal> x1035 = IKatan2WithCheck(IkReal(((-0.02863275)+(((0.04)*pz))+(((-0.01787325)*cj4))+(((0.06082513)*sj4))+(((-1.0)*x1028*x1033))+(((-1.0)*x1032*x1033))+(((0.017472)*x1027))+(((0.07119719)*x1030)))),IkReal(((0.08080969)+(((0.017472)*x1030))+(((-1.0)*pz*x1033))+(((-0.0060125)*cj4))+(((-0.07119719)*x1027))+(((-0.049728)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1035.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1034.value)))+(x1035.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1036=IKcos(j1);
IkReal x1037=IKsin(j1);
IkReal x1038=(cj0*px);
IkReal x1039=(py*sj0);
IkReal x1040=((0.2688)*cj4);
IkReal x1041=((0.0325)*cj4);
IkReal x1042=((0.0325)*sj4);
IkReal x1043=((0.2688)*sj4);
IkReal x1044=((1.0)*x1037);
IkReal x1045=(sj4*x1037);
IkReal x1046=(pz*x1036);
IkReal x1047=((0.185)*x1036);
IkReal x1048=((0.4302)*x1037);
evalcond[0]=((0.0925)+((x1036*x1039))+((x1036*x1038))+(((-0.04)*x1036))+(((-1.0)*pz*x1044))+(((-1.0)*x1041))+(((-1.0)*x1043)));
evalcond[1]=((0.2151)+x1040+(((-1.0)*x1038*x1044))+(((-1.0)*x1039*x1044))+(((-1.0)*x1046))+(((0.04)*x1037))+(((-1.0)*x1042)));
evalcond[2]=((((-0.0925)*x1037))+((x1037*x1041))+((x1037*x1043))+(((-0.2151)*x1036))+pz+((x1036*x1042))+(((-1.0)*x1036*x1040)));
evalcond[3]=((0.04)+(((-0.0925)*x1036))+(((-1.0)*x1038))+(((-1.0)*x1039))+((x1037*x1040))+(((0.2151)*x1037))+(((-1.0)*x1037*x1042))+((x1036*x1041))+((x1036*x1043)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((0.0074)*x1036))+((x1038*x1048))+(((-1.0)*x1038*x1047))+(((0.08)*x1039))+(((0.08)*x1038))+((x1039*x1048))+(((-1.0)*x1039*x1047))+(((0.2982)*cj0*py))+(((0.185)*pz*x1037))+(((-1.0)*pp))+(((0.4302)*x1046))+(((-0.017208)*x1037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1049=cj4*cj4;
IkReal x1050=(py*sj0);
IkReal x1051=((0.0325)*sj4);
IkReal x1052=((0.2688)*cj4);
IkReal x1053=(cj4*sj4);
IkReal x1054=(cj0*px);
IkReal x1055=((1.0)*pz);
CheckValue<IkReal> x1056 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((0.017472)*x1053))+(((0.0139815)*sj4))+(pz*pz)+(((-0.07119719)*x1049)))),IkReal(((0.02863275)+(((0.04)*pz))+(((0.01787325)*cj4))+(((-0.06082513)*sj4))+(((-1.0)*x1054*x1055))+(((-0.017472)*x1049))+(((-1.0)*x1050*x1055))+(((-0.07119719)*x1053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1056.valid){
continue;
}
CheckValue<IkReal> x1057=IKPowWithIntegerCheck(IKsign(((0.008604)+(((-1.0)*x1052*x1054))+(((-0.0013)*sj4))+(((-0.0325)*cj4*pz))+(((-0.2688)*pz*sj4))+((x1050*x1051))+(((0.0925)*pz))+((x1051*x1054))+(((-0.2151)*x1050))+(((-0.2151)*x1054))+(((-1.0)*x1050*x1052))+(((0.010752)*cj4)))),-1);
if(!x1057.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1056.value)+(((1.5707963267949)*(x1057.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1058=IKcos(j1);
IkReal x1059=IKsin(j1);
IkReal x1060=(cj0*px);
IkReal x1061=(py*sj0);
IkReal x1062=((0.2688)*cj4);
IkReal x1063=((0.0325)*cj4);
IkReal x1064=((0.0325)*sj4);
IkReal x1065=((0.2688)*sj4);
IkReal x1066=((1.0)*x1059);
IkReal x1067=(sj4*x1059);
IkReal x1068=(pz*x1058);
IkReal x1069=((0.185)*x1058);
IkReal x1070=((0.4302)*x1059);
evalcond[0]=((0.0925)+(((-1.0)*pz*x1066))+(((-1.0)*x1065))+(((-1.0)*x1063))+(((-0.04)*x1058))+((x1058*x1060))+((x1058*x1061)));
evalcond[1]=((0.2151)+(((-1.0)*x1060*x1066))+x1062+(((0.04)*x1059))+(((-1.0)*x1061*x1066))+(((-1.0)*x1064))+(((-1.0)*x1068)));
evalcond[2]=((((-1.0)*x1058*x1062))+(((-0.0925)*x1059))+pz+(((-0.2151)*x1058))+((x1059*x1063))+((x1059*x1065))+((x1058*x1064)));
evalcond[3]=((0.04)+(((0.2151)*x1059))+(((-1.0)*x1059*x1064))+(((-0.0925)*x1058))+((x1059*x1062))+(((-1.0)*x1060))+(((-1.0)*x1061))+((x1058*x1063))+((x1058*x1065)));
evalcond[4]=((-0.00534538)+(((-0.017208)*x1059))+(((-0.2982)*px*sj0))+(((-1.0)*x1060*x1069))+((x1061*x1070))+(((0.0074)*x1058))+((x1060*x1070))+(((0.4302)*x1068))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-1.0)*x1061*x1069))+(((0.08)*x1061))+(((0.08)*x1060))+(((0.185)*pz*x1059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((0.822621974390716)+(((0.630947044846946)*py*sj0))+(((0.630947044846946)*cj0*px))+(((-2.35185510966699)*px*sj0))+(((-7.88683806058682)*pp))+(((2.35185510966699)*cj0*py)))) < -1-IKFAST_SINCOS_THRESH || (((0.822621974390716)+(((0.630947044846946)*py*sj0))+(((0.630947044846946)*cj0*px))+(((-2.35185510966699)*px*sj0))+(((-7.88683806058682)*pp))+(((2.35185510966699)*cj0*py)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1071=IKasin(((0.822621974390716)+(((0.630947044846946)*py*sj0))+(((0.630947044846946)*cj0*px))+(((-2.35185510966699)*px*sj0))+(((-7.88683806058682)*pp))+(((2.35185510966699)*cj0*py))));
j4array[0]=((-2.0972455314777)+(((-1.0)*x1071)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((1.04434712211209)+x1071);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j1eval[3];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1072=cj4*cj4;
IkReal x1073=(cj0*px);
IkReal x1074=((25.0)*cj4);
IkReal x1075=(cj4*pz);
IkReal x1076=((0.2688)*sj4);
IkReal x1077=(cj4*sj4);
IkReal x1078=(pz*sj4);
IkReal x1079=(py*sj0);
IkReal x1080=((206.769230769231)*sj4);
IkReal x1081=((0.0325)*cj4);
j1eval[0]=((2.84615384615385)+((x1079*x1080))+((x1073*x1080))+((x1074*x1079))+(((165.461538461538)*pz))+((x1073*x1074))+(((206.769230769231)*x1075))+(((-25.0)*x1078))+(((-71.1538461538462)*x1079))+(((-71.1538461538462)*x1073))+(((-8.27076923076923)*sj4))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.0037)+((x1079*x1081))+((x1073*x1081))+(((-0.0013)*cj4))+(((-0.0325)*x1078))+(((-0.0925)*x1073))+(((-0.0925)*x1079))+((x1073*x1076))+((x1076*x1079))+(((0.2688)*x1075))+(((-0.010752)*sj4))+(((0.2151)*pz))));
j1eval[2]=((IKabs(((-0.02863275)+(((-0.01787325)*cj4))+(((0.07119719)*x1077))+(((0.06082513)*sj4))+((pz*x1073))+((pz*x1079))+(((0.017472)*x1072))+(((-0.04)*pz)))))+(IKabs(((-0.08080969)+(((0.07119719)*x1072))+(((0.0060125)*cj4))+(((-0.017472)*x1077))+(pz*pz)+(((0.049728)*sj4))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1082=(py*sj0);
IkReal x1083=((0.0325)*sj4);
IkReal x1084=(pz*sj4);
IkReal x1085=((0.2688)*cj4);
IkReal x1086=(cj4*pz);
IkReal x1087=(cj0*px);
IkReal x1088=((25.0)*sj4);
IkReal x1089=((206.769230769231)*cj4);
j1eval[0]=((6.61846153846154)+((x1082*x1088))+(((25.0)*x1086))+(((-165.461538461538)*x1082))+(((-165.461538461538)*x1087))+(((-1.0)*sj4))+(((206.769230769231)*x1084))+(((-1.0)*x1087*x1089))+((x1087*x1088))+(((-1.0)*x1082*x1089))+(((8.27076923076923)*cj4))+(((-71.1538461538462)*pz)));
j1eval[1]=IKsign(((0.008604)+((x1082*x1083))+(((-0.2151)*x1087))+(((-0.2151)*x1082))+(((-0.0013)*sj4))+(((-0.0925)*pz))+(((-1.0)*x1082*x1085))+(((-1.0)*x1085*x1087))+(((0.2688)*x1084))+(((0.0325)*x1086))+(((0.010752)*cj4))+((x1083*x1087))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1eval[0]=((-2.01122203125123)+sj4+(((-1.72070507538122)*cj4)));
j1eval[1]=IKsign(((-0.12813395)+(((-0.10962526)*cj4))+(((0.0637095)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1090=(py*sj0);
IkReal x1091=((0.0325)*sj4);
IkReal x1092=((0.2688)*cj4);
IkReal x1093=((0.2688)*sj4);
IkReal x1094=(cj0*px);
IkReal x1095=((0.0325)*cj4);
CheckValue<IkReal> x1096=IKPowWithIntegerCheck(IKsign(((-0.12813395)+(((-0.10962526)*cj4))+(((0.0637095)*sj4)))),-1);
if(!x1096.valid){
continue;
}
CheckValue<IkReal> x1097 = IKatan2WithCheck(IkReal(((0.008604)+(((-0.0013)*sj4))+(((-0.2151)*x1094))+(((-0.2151)*x1090))+(((-1.0)*x1090*x1092))+(((-1.0)*pz*x1093))+(((-1.0)*pz*x1095))+(((0.0925)*pz))+(((-1.0)*x1092*x1094))+((x1091*x1094))+((x1090*x1091))+(((0.010752)*cj4)))),IkReal(((0.0037)+(((-1.0)*pz*x1092))+(((-0.0013)*cj4))+((x1094*x1095))+(((-0.2151)*pz))+((x1093*x1094))+(((-0.010752)*sj4))+((pz*x1091))+((x1090*x1093))+((x1090*x1095))+(((-0.0925)*x1090))+(((-0.0925)*x1094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1097.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1096.value)))+(x1097.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1098=IKcos(j1);
IkReal x1099=IKsin(j1);
IkReal x1100=(cj0*px);
IkReal x1101=(py*sj0);
IkReal x1102=((0.2688)*cj4);
IkReal x1103=((0.0325)*cj4);
IkReal x1104=((0.0325)*sj4);
IkReal x1105=((0.2688)*sj4);
IkReal x1106=((1.0)*x1100);
IkReal x1107=((1.0)*x1098);
IkReal x1108=((0.185)*x1098);
IkReal x1109=(sj4*x1099);
IkReal x1110=(pz*x1099);
IkReal x1111=((0.4302)*x1099);
evalcond[0]=((0.0925)+x1110+(((-1.0)*x1098*x1106))+(((0.04)*x1098))+(((-1.0)*x1103))+(((-1.0)*x1105))+(((-1.0)*x1101*x1107)));
evalcond[1]=((0.2151)+x1102+(((-1.0)*pz*x1107))+(((-1.0)*x1099*x1106))+(((0.04)*x1099))+(((-1.0)*x1099*x1101))+(((-1.0)*x1104)));
evalcond[2]=((((-1.0)*x1098*x1102))+((x1098*x1104))+(((-0.2151)*x1098))+pz+(((-1.0)*x1099*x1105))+(((-1.0)*x1099*x1103))+(((0.0925)*x1099)));
evalcond[3]=((0.04)+(((-1.0)*x1098*x1103))+(((-1.0)*x1098*x1105))+(((-1.0)*x1101))+(((0.2151)*x1099))+((x1099*x1102))+(((-1.0)*x1099*x1104))+(((-1.0)*x1106))+(((0.0925)*x1098)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((-0.0074)*x1098))+(((0.08)*x1100))+(((0.08)*x1101))+((x1101*x1108))+((x1101*x1111))+(((-0.185)*x1110))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.4302)*pz*x1098))+(((-0.017208)*x1099))+((x1100*x1111))+((x1100*x1108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1112=cj4*cj4;
IkReal x1113=((0.0325)*sj4);
IkReal x1114=(cj0*px);
IkReal x1115=(py*sj0);
IkReal x1116=((0.2688)*cj4);
IkReal x1117=(cj4*sj4);
IkReal x1118=((1.0)*pz);
CheckValue<IkReal> x1119=IKPowWithIntegerCheck(IKsign(((0.008604)+(((-1.0)*x1114*x1116))+(((-0.0013)*sj4))+(((0.0325)*cj4*pz))+((x1113*x1114))+((x1113*x1115))+(((0.2688)*pz*sj4))+(((-0.0925)*pz))+(((-0.2151)*x1115))+(((-0.2151)*x1114))+(((-1.0)*x1115*x1116))+(((0.010752)*cj4)))),-1);
if(!x1119.valid){
continue;
}
CheckValue<IkReal> x1120 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((0.017472)*x1117))+(((0.0139815)*sj4))+(pz*pz)+(((-0.07119719)*x1112)))),IkReal(((-0.02863275)+(((0.04)*pz))+(((-0.01787325)*cj4))+(((-1.0)*x1114*x1118))+(((0.06082513)*sj4))+(((0.017472)*x1112))+(((0.07119719)*x1117))+(((-1.0)*x1115*x1118)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1120.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1119.value)))+(x1120.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1121=IKcos(j1);
IkReal x1122=IKsin(j1);
IkReal x1123=(cj0*px);
IkReal x1124=(py*sj0);
IkReal x1125=((0.2688)*cj4);
IkReal x1126=((0.0325)*cj4);
IkReal x1127=((0.0325)*sj4);
IkReal x1128=((0.2688)*sj4);
IkReal x1129=((1.0)*x1123);
IkReal x1130=((1.0)*x1121);
IkReal x1131=((0.185)*x1121);
IkReal x1132=(sj4*x1122);
IkReal x1133=(pz*x1122);
IkReal x1134=((0.4302)*x1122);
evalcond[0]=((0.0925)+x1133+(((0.04)*x1121))+(((-1.0)*x1121*x1129))+(((-1.0)*x1126))+(((-1.0)*x1128))+(((-1.0)*x1124*x1130)));
evalcond[1]=((0.2151)+x1125+(((0.04)*x1122))+(((-1.0)*x1122*x1129))+(((-1.0)*pz*x1130))+(((-1.0)*x1122*x1124))+(((-1.0)*x1127)));
evalcond[2]=(((x1121*x1127))+(((-1.0)*x1121*x1125))+(((-1.0)*x1122*x1126))+(((-1.0)*x1122*x1128))+(((-0.2151)*x1121))+(((0.0925)*x1122))+pz);
evalcond[3]=((0.04)+(((0.2151)*x1122))+(((-1.0)*x1121*x1128))+(((-1.0)*x1121*x1126))+(((-1.0)*x1122*x1127))+(((0.0925)*x1121))+(((-1.0)*x1124))+(((-1.0)*x1129))+((x1122*x1125)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((0.4302)*pz*x1121))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x1124*x1134))+((x1124*x1131))+(((-0.017208)*x1122))+(((-0.185)*x1133))+((x1123*x1131))+((x1123*x1134))+(((-0.0074)*x1121))+(((0.08)*x1124))+(((0.08)*x1123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1135=cj4*cj4;
IkReal x1136=(cj0*px);
IkReal x1137=(cj4*sj4);
IkReal x1138=((0.0325)*cj4);
IkReal x1139=(py*sj0);
IkReal x1140=((0.2688)*sj4);
CheckValue<IkReal> x1141=IKPowWithIntegerCheck(IKsign(((0.0037)+(((-0.0325)*pz*sj4))+(((-0.0013)*cj4))+((x1136*x1138))+(((0.2688)*cj4*pz))+((x1138*x1139))+(((-0.0925)*x1139))+(((-0.0925)*x1136))+((x1139*x1140))+(((-0.010752)*sj4))+(((0.2151)*pz))+((x1136*x1140)))),-1);
if(!x1141.valid){
continue;
}
CheckValue<IkReal> x1142 = IKatan2WithCheck(IkReal(((-0.02863275)+(((-0.01787325)*cj4))+(((0.06082513)*sj4))+(((0.017472)*x1135))+(((0.07119719)*x1137))+(((-0.04)*pz))+((pz*x1136))+((pz*x1139)))),IkReal(((-0.08080969)+(((0.0060125)*cj4))+(((0.07119719)*x1135))+(((-0.017472)*x1137))+(pz*pz)+(((0.049728)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1142.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1141.value)))+(x1142.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1143=IKcos(j1);
IkReal x1144=IKsin(j1);
IkReal x1145=(cj0*px);
IkReal x1146=(py*sj0);
IkReal x1147=((0.2688)*cj4);
IkReal x1148=((0.0325)*cj4);
IkReal x1149=((0.0325)*sj4);
IkReal x1150=((0.2688)*sj4);
IkReal x1151=((1.0)*x1145);
IkReal x1152=((1.0)*x1143);
IkReal x1153=((0.185)*x1143);
IkReal x1154=(sj4*x1144);
IkReal x1155=(pz*x1144);
IkReal x1156=((0.4302)*x1144);
evalcond[0]=((0.0925)+x1155+(((-1.0)*x1150))+(((-1.0)*x1143*x1151))+(((-1.0)*x1148))+(((0.04)*x1143))+(((-1.0)*x1146*x1152)));
evalcond[1]=((0.2151)+(((-1.0)*x1144*x1151))+x1147+(((-1.0)*x1144*x1146))+(((-1.0)*x1149))+(((0.04)*x1144))+(((-1.0)*pz*x1152)));
evalcond[2]=((((-1.0)*x1144*x1150))+((x1143*x1149))+(((-1.0)*x1143*x1147))+pz+(((-0.2151)*x1143))+(((0.0925)*x1144))+(((-1.0)*x1144*x1148)));
evalcond[3]=((0.04)+(((-1.0)*x1143*x1148))+(((-1.0)*x1151))+(((-1.0)*x1143*x1150))+(((-1.0)*x1146))+(((0.0925)*x1143))+((x1144*x1147))+(((-1.0)*x1144*x1149))+(((0.2151)*x1144)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((0.4302)*pz*x1143))+((x1146*x1153))+((x1146*x1156))+(((-0.0074)*x1143))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.08)*x1145))+(((0.08)*x1146))+(((-0.185)*x1155))+(((-0.017208)*x1144))+((x1145*x1153))+((x1145*x1156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((0.822621974390716)+(((0.630947044846946)*py*sj0))+(((0.630947044846946)*cj0*px))+(((-2.35185510966699)*px*sj0))+(((-7.88683806058682)*pp))+(((2.35185510966699)*cj0*py)))) < -1-IKFAST_SINCOS_THRESH || (((0.822621974390716)+(((0.630947044846946)*py*sj0))+(((0.630947044846946)*cj0*px))+(((-2.35185510966699)*px*sj0))+(((-7.88683806058682)*pp))+(((2.35185510966699)*cj0*py)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1157=IKasin(((0.822621974390716)+(((0.630947044846946)*py*sj0))+(((0.630947044846946)*cj0*px))+(((-2.35185510966699)*px*sj0))+(((-7.88683806058682)*pp))+(((2.35185510966699)*cj0*py))));
j4array[0]=((-2.0972455314777)+(((-1.0)*x1157)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((1.04434712211209)+x1157);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j1eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x1158=(cj4*pz);
IkReal x1159=(py*sj0);
IkReal x1160=((0.0325)*sj4);
IkReal x1161=((25.0)*sj4);
IkReal x1162=(cj0*px);
IkReal x1163=((0.2688)*cj4);
IkReal x1164=((206.769230769231)*cj4);
IkReal x1165=(pz*sj4);
j1eval[0]=((-6.61846153846154)+(((165.461538461538)*x1162))+((x1159*x1164))+(((-25.0)*x1158))+(((-8.27076923076923)*cj4))+sj4+(((-1.0)*x1159*x1161))+((x1162*x1164))+(((165.461538461538)*x1159))+(((-206.769230769231)*x1165))+(((71.1538461538462)*pz))+(((-1.0)*x1161*x1162)));
j1eval[1]=IKsign(((-0.008604)+((x1159*x1163))+(((-1.0)*x1159*x1160))+(((-0.2688)*x1165))+((x1162*x1163))+(((-0.0325)*x1158))+(((0.2151)*x1162))+(((0.0925)*pz))+(((-0.010752)*cj4))+(((0.2151)*x1159))+(((0.0013)*sj4))+(((-1.0)*x1160*x1162))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x1166=(cj0*px);
IkReal x1167=((25.0)*cj4);
IkReal x1168=(cj4*pz);
IkReal x1169=((0.2688)*sj4);
IkReal x1170=(pz*sj4);
IkReal x1171=(py*sj0);
IkReal x1172=((206.769230769231)*sj4);
IkReal x1173=((0.0325)*cj4);
j1eval[0]=((2.84615384615385)+((x1166*x1172))+((x1166*x1167))+(((165.461538461538)*pz))+(((-71.1538461538462)*x1171))+(((-71.1538461538462)*x1166))+(((-25.0)*x1170))+((x1167*x1171))+(((206.769230769231)*x1168))+(((-8.27076923076923)*sj4))+(((-1.0)*cj4))+((x1171*x1172)));
j1eval[1]=IKsign(((0.0037)+((x1166*x1173))+((x1166*x1169))+(((-0.0013)*cj4))+(((-0.0925)*x1171))+(((-0.0925)*x1166))+(((-0.010752)*sj4))+(((-0.0325)*x1170))+(((0.2151)*pz))+(((0.2688)*x1168))+((x1169*x1171))+((x1171*x1173))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
IkReal x1174=cj0*cj0;
IkReal x1175=py*py;
IkReal x1176=pz*pz;
IkReal x1177=px*px;
IkReal x1178=(py*sj0);
IkReal x1179=(cj0*px);
IkReal x1180=(x1174*x1175);
IkReal x1181=(x1174*x1177);
j1eval[0]=((1.0)+(((1250.0)*x1178*x1179))+(((625.0)*x1175))+(((625.0)*x1176))+(((-50.0)*x1178))+(((-50.0)*x1179))+(((625.0)*x1181))+(((-625.0)*x1180)));
j1eval[1]=IKsign(((0.0016)+(((-0.08)*x1179))+(((-0.08)*x1178))+x1181+x1176+x1175+(((-1.0)*x1180))+(((2.0)*x1178*x1179))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1182=cj0*cj0;
IkReal x1183=py*py;
IkReal x1184=(py*sj0);
IkReal x1185=((0.0325)*sj4);
IkReal x1186=((0.2688)*cj4);
IkReal x1187=((0.2688)*sj4);
IkReal x1188=(cj0*px);
IkReal x1189=((0.0325)*cj4);
CheckValue<IkReal> x1190=IKPowWithIntegerCheck(IKsign(((0.0016)+x1183+(((2.0)*x1184*x1188))+((x1182*(px*px)))+(((-1.0)*x1182*x1183))+(pz*pz)+(((-0.08)*x1184))+(((-0.08)*x1188)))),-1);
if(!x1190.valid){
continue;
}
CheckValue<IkReal> x1191 = IKatan2WithCheck(IkReal(((0.008604)+(((-0.0013)*sj4))+((x1184*x1185))+(((-0.2151)*x1188))+(((-0.2151)*x1184))+(((-1.0)*pz*x1189))+(((-1.0)*pz*x1187))+(((-1.0)*x1186*x1188))+((x1185*x1188))+(((0.0925)*pz))+(((-1.0)*x1184*x1186))+(((0.010752)*cj4)))),IkReal(((0.0037)+((x1187*x1188))+((x1184*x1187))+((x1184*x1189))+((pz*x1185))+(((-0.0013)*cj4))+((x1188*x1189))+(((-1.0)*pz*x1186))+(((-0.2151)*pz))+(((-0.0925)*x1184))+(((-0.0925)*x1188))+(((-0.010752)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1191.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1190.value)))+(x1191.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1192=IKsin(j1);
IkReal x1193=IKcos(j1);
IkReal x1194=((0.0325)*sj4);
IkReal x1195=(py*sj0);
IkReal x1196=((0.2688)*sj4);
IkReal x1197=((0.2688)*cj4);
IkReal x1198=((0.0325)*cj4);
IkReal x1199=(cj0*px);
IkReal x1200=(pz*x1193);
IkReal x1201=(pz*x1192);
IkReal x1202=((0.4302)*x1192);
IkReal x1203=(x1193*x1199);
evalcond[0]=((0.2151)+x1197+x1200+(((-0.04)*x1192))+(((-1.0)*x1194))+((x1192*x1195))+((x1192*x1199)));
evalcond[1]=((0.0925)+x1203+(((-0.04)*x1193))+(((-1.0)*x1196))+(((-1.0)*x1198))+(((-1.0)*x1201))+((x1193*x1195)));
evalcond[2]=((((-1.0)*x1193*x1194))+(((0.2151)*x1193))+(((-0.0925)*x1192))+pz+((x1192*x1196))+((x1192*x1198))+((x1193*x1197)));
evalcond[3]=((0.04)+(((-0.2151)*x1192))+(((-0.0925)*x1193))+((x1192*x1194))+((x1193*x1196))+((x1193*x1198))+(((-1.0)*x1192*x1197))+(((-1.0)*x1199))+(((-1.0)*x1195)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((-1.0)*x1199*x1202))+(((0.185)*x1201))+(((-0.185)*x1193*x1195))+(((0.0074)*x1193))+(((-0.185)*x1203))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.4302)*x1200))+(((0.08)*x1199))+(((0.08)*x1195))+(((-1.0)*x1195*x1202))+(((0.017208)*x1192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1204=cj4*cj4;
IkReal x1205=(cj0*px);
IkReal x1206=((0.2688)*sj4);
IkReal x1207=(cj4*sj4);
IkReal x1208=((0.0325)*cj4);
IkReal x1209=(py*sj0);
IkReal x1210=((1.0)*pz);
CheckValue<IkReal> x1211 = IKatan2WithCheck(IkReal(((0.02863275)+(((0.04)*pz))+(((-1.0)*x1209*x1210))+(((0.01787325)*cj4))+(((-0.017472)*x1204))+(((-0.07119719)*x1207))+(((-0.06082513)*sj4))+(((-1.0)*x1205*x1210)))),IkReal(((0.08080969)+(((-0.0060125)*cj4))+(((-0.07119719)*x1204))+(((-0.049728)*sj4))+(((0.017472)*x1207))+(((-1.0)*pz*x1210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1211.valid){
continue;
}
CheckValue<IkReal> x1212=IKPowWithIntegerCheck(IKsign(((0.0037)+(((-0.0325)*pz*sj4))+(((-0.0925)*x1205))+(((-0.0925)*x1209))+(((-0.0013)*cj4))+((x1208*x1209))+(((0.2688)*cj4*pz))+((x1205*x1208))+((x1205*x1206))+(((-0.010752)*sj4))+((x1206*x1209))+(((0.2151)*pz)))),-1);
if(!x1212.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1211.value)+(((1.5707963267949)*(x1212.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1213=IKsin(j1);
IkReal x1214=IKcos(j1);
IkReal x1215=((0.0325)*sj4);
IkReal x1216=(py*sj0);
IkReal x1217=((0.2688)*sj4);
IkReal x1218=((0.2688)*cj4);
IkReal x1219=((0.0325)*cj4);
IkReal x1220=(cj0*px);
IkReal x1221=(pz*x1214);
IkReal x1222=(pz*x1213);
IkReal x1223=((0.4302)*x1213);
IkReal x1224=(x1214*x1220);
evalcond[0]=((0.2151)+x1221+x1218+((x1213*x1216))+((x1213*x1220))+(((-1.0)*x1215))+(((-0.04)*x1213)));
evalcond[1]=((0.0925)+((x1214*x1216))+x1224+(((-1.0)*x1222))+(((-1.0)*x1219))+(((-1.0)*x1217))+(((-0.04)*x1214)));
evalcond[2]=(((x1214*x1218))+((x1213*x1219))+((x1213*x1217))+(((0.2151)*x1214))+(((-1.0)*x1214*x1215))+pz+(((-0.0925)*x1213)));
evalcond[3]=((0.04)+((x1214*x1217))+((x1214*x1219))+(((-1.0)*x1220))+((x1213*x1215))+(((-0.2151)*x1213))+(((-1.0)*x1213*x1218))+(((-0.0925)*x1214))+(((-1.0)*x1216)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((-0.4302)*x1221))+(((0.08)*x1216))+(((0.017208)*x1213))+(((-1.0)*x1220*x1223))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.0074)*x1214))+(((-0.185)*x1214*x1216))+(((0.08)*x1220))+(((-1.0)*x1216*x1223))+(((0.185)*x1222))+(((-0.185)*x1224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1225=cj4*cj4;
IkReal x1226=((0.0325)*sj4);
IkReal x1227=(cj0*px);
IkReal x1228=(py*sj0);
IkReal x1229=((0.2688)*cj4);
IkReal x1230=(cj4*sj4);
IkReal x1231=((1.0)*pz);
CheckValue<IkReal> x1232 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((0.017472)*x1230))+(((0.0139815)*sj4))+(pz*pz)+(((-0.07119719)*x1225)))),IkReal(((-0.02863275)+(((0.04)*pz))+(((-0.01787325)*cj4))+(((0.06082513)*sj4))+(((0.017472)*x1225))+(((-1.0)*x1227*x1231))+(((-1.0)*x1228*x1231))+(((0.07119719)*x1230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1232.valid){
continue;
}
CheckValue<IkReal> x1233=IKPowWithIntegerCheck(IKsign(((-0.008604)+(((-0.0325)*cj4*pz))+(((-0.2688)*pz*sj4))+(((0.2151)*x1227))+(((0.2151)*x1228))+(((-1.0)*x1226*x1228))+(((-1.0)*x1226*x1227))+(((0.0925)*pz))+(((-0.010752)*cj4))+((x1227*x1229))+(((0.0013)*sj4))+((x1228*x1229)))),-1);
if(!x1233.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1232.value)+(((1.5707963267949)*(x1233.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1234=IKsin(j1);
IkReal x1235=IKcos(j1);
IkReal x1236=((0.0325)*sj4);
IkReal x1237=(py*sj0);
IkReal x1238=((0.2688)*sj4);
IkReal x1239=((0.2688)*cj4);
IkReal x1240=((0.0325)*cj4);
IkReal x1241=(cj0*px);
IkReal x1242=(pz*x1235);
IkReal x1243=(pz*x1234);
IkReal x1244=((0.4302)*x1234);
IkReal x1245=(x1235*x1241);
evalcond[0]=((0.2151)+x1242+x1239+((x1234*x1237))+(((-1.0)*x1236))+(((-0.04)*x1234))+((x1234*x1241)));
evalcond[1]=((0.0925)+x1245+((x1235*x1237))+(((-1.0)*x1238))+(((-1.0)*x1243))+(((-1.0)*x1240))+(((-0.04)*x1235)));
evalcond[2]=(((x1234*x1238))+((x1235*x1239))+(((0.2151)*x1235))+(((-1.0)*x1235*x1236))+pz+(((-0.0925)*x1234))+((x1234*x1240)));
evalcond[3]=((0.04)+(((-1.0)*x1237))+((x1234*x1236))+((x1235*x1238))+(((-1.0)*x1241))+(((-0.2151)*x1234))+(((-1.0)*x1234*x1239))+(((-0.0925)*x1235))+((x1235*x1240)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((-0.185)*x1245))+(((0.017208)*x1234))+(((0.185)*x1243))+(((0.2982)*cj0*py))+(((0.0074)*x1235))+(((-1.0)*pp))+(((0.08)*x1237))+(((-1.0)*x1237*x1244))+(((-1.0)*x1241*x1244))+(((-0.4302)*x1242))+(((-0.185)*x1235*x1237))+(((0.08)*x1241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((0.822621974390716)+(((0.630947044846946)*py*sj0))+(((0.630947044846946)*cj0*px))+(((-2.35185510966699)*px*sj0))+(((-7.88683806058682)*pp))+(((2.35185510966699)*cj0*py)))) < -1-IKFAST_SINCOS_THRESH || (((0.822621974390716)+(((0.630947044846946)*py*sj0))+(((0.630947044846946)*cj0*px))+(((-2.35185510966699)*px*sj0))+(((-7.88683806058682)*pp))+(((2.35185510966699)*cj0*py)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1246=IKasin(((0.822621974390716)+(((0.630947044846946)*py*sj0))+(((0.630947044846946)*cj0*px))+(((-2.35185510966699)*px*sj0))+(((-7.88683806058682)*pp))+(((2.35185510966699)*cj0*py))));
j4array[0]=((-2.0972455314777)+(((-1.0)*x1246)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((1.04434712211209)+x1246);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j1eval[3];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1247=cj4*cj4;
IkReal x1248=(cj0*px);
IkReal x1249=((25.0)*cj4);
IkReal x1250=(cj4*pz);
IkReal x1251=(cj4*sj4);
IkReal x1252=(pz*sj4);
IkReal x1253=(py*sj0);
IkReal x1254=((206.769230769231)*sj4);
IkReal x1255=((0.0325)*cj4);
IkReal x1256=((0.2688)*sj4);
j1eval[0]=((2.84615384615385)+(((-206.769230769231)*x1250))+((x1248*x1249))+((x1253*x1254))+(((-71.1538461538462)*x1253))+(((25.0)*x1252))+(((-165.461538461538)*pz))+(((-8.27076923076923)*sj4))+((x1249*x1253))+(((-71.1538461538462)*x1248))+((x1248*x1254))+(((-1.0)*cj4)));
j1eval[1]=((IKabs(((-0.08080969)+(((-0.017472)*x1251))+(((0.0060125)*cj4))+(pz*pz)+(((0.049728)*sj4))+(((0.07119719)*x1247)))))+(IKabs(((0.02863275)+(((0.01787325)*cj4))+(((-0.06082513)*sj4))+((pz*x1248))+(((-0.04)*pz))+(((-0.07119719)*x1251))+(((-0.017472)*x1247))+((pz*x1253))))));
j1eval[2]=IKsign(((0.0037)+(((-0.2688)*x1250))+(((-0.0925)*x1253))+(((-0.0013)*cj4))+(((-0.0925)*x1248))+((x1253*x1256))+((x1253*x1255))+(((-0.2151)*pz))+(((-0.010752)*sj4))+((x1248*x1256))+((x1248*x1255))+(((0.0325)*x1252))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1257=(cj4*pz);
IkReal x1258=(py*sj0);
IkReal x1259=((0.0325)*sj4);
IkReal x1260=((25.0)*sj4);
IkReal x1261=(cj0*px);
IkReal x1262=((0.2688)*cj4);
IkReal x1263=((206.769230769231)*cj4);
IkReal x1264=(pz*sj4);
j1eval[0]=((-6.61846153846154)+(((-1.0)*x1258*x1260))+(((-8.27076923076923)*cj4))+sj4+(((-1.0)*x1260*x1261))+((x1261*x1263))+((x1258*x1263))+(((206.769230769231)*x1264))+(((25.0)*x1257))+(((165.461538461538)*x1258))+(((165.461538461538)*x1261))+(((-71.1538461538462)*pz)));
j1eval[1]=IKsign(((-0.008604)+(((0.2151)*x1261))+(((-1.0)*x1258*x1259))+((x1261*x1262))+((x1258*x1262))+(((-0.0925)*pz))+(((-0.010752)*cj4))+(((0.0013)*sj4))+(((-1.0)*x1259*x1261))+(((0.2688)*x1264))+(((0.2151)*x1258))+(((0.0325)*x1257))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
IkReal x1265=(pz*sj4);
IkReal x1266=(py*sj0);
IkReal x1267=((0.2688)*sj4);
IkReal x1268=(cj0*px);
IkReal x1269=(cj4*pz);
IkReal x1270=((206.769230769231)*sj4);
IkReal x1271=(cj4*x1268);
j1eval[0]=((-2.84615384615385)+(((-1.0)*x1268*x1270))+(((8.27076923076923)*sj4))+cj4+(((-25.0)*x1271))+(((206.769230769231)*x1269))+(((-25.0)*x1265))+(((-1.0)*x1266*x1270))+(((165.461538461538)*pz))+(((-25.0)*cj4*x1266))+(((71.1538461538462)*x1266))+(((71.1538461538462)*x1268)));
j1eval[1]=IKsign(((-0.0037)+(((0.0925)*x1268))+(((0.0925)*x1266))+(((-0.0325)*x1265))+(((-0.0325)*x1271))+(((-1.0)*x1267*x1268))+(((-1.0)*x1266*x1267))+(((0.010752)*sj4))+(((-0.0325)*cj4*x1266))+(((0.0013)*cj4))+(((0.2688)*x1269))+(((0.2151)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1272=cj0*cj0;
IkReal x1273=py*py;
IkReal x1274=cj4*cj4;
IkReal x1275=(cj4*sj4);
IkReal x1276=(cj0*px);
IkReal x1277=(py*sj0);
IkReal x1278=((0.0325)*cj4);
IkReal x1279=((0.2688)*sj4);
IkReal x1280=((1.0)*pz);
CheckValue<IkReal> x1281=IKPowWithIntegerCheck(IKsign(((-0.0037)+(((-0.0325)*pz*sj4))+(((-1.0)*x1276*x1278))+(((-1.0)*x1276*x1279))+(((0.010752)*sj4))+(((-1.0)*x1277*x1279))+(((-1.0)*x1277*x1278))+(((0.2688)*cj4*pz))+(((0.0013)*cj4))+(((0.0925)*x1276))+(((0.0925)*x1277))+(((0.2151)*pz)))),-1);
if(!x1281.valid){
continue;
}
CheckValue<IkReal> x1282 = IKatan2WithCheck(IkReal(((-0.02863275)+(((0.04)*pz))+(((-0.01787325)*cj4))+(((0.06082513)*sj4))+(((-1.0)*x1276*x1280))+(((0.07119719)*x1275))+(((-1.0)*x1277*x1280))+(((0.017472)*x1274)))),IkReal(((-0.04572426)+(((-0.11563776)*cj4))+x1273+(((2.0)*x1276*x1277))+(((-0.08)*x1276))+(((-0.08)*x1277))+(((0.0139815)*sj4))+(((-1.0)*x1272*x1273))+(((-0.07119719)*x1274))+(((0.017472)*x1275))+((x1272*(px*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1282.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1281.value)))+(x1282.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1283=IKsin(j1);
IkReal x1284=IKcos(j1);
IkReal x1285=(cj0*px);
IkReal x1286=(py*sj0);
IkReal x1287=((0.2688)*cj4);
IkReal x1288=((0.0325)*cj4);
IkReal x1289=((0.0325)*sj4);
IkReal x1290=((0.2688)*sj4);
IkReal x1291=(sj4*x1283);
IkReal x1292=((0.185)*x1284);
IkReal x1293=((1.0)*x1284);
IkReal x1294=(pz*x1284);
IkReal x1295=(pz*x1283);
IkReal x1296=((0.4302)*x1283);
evalcond[0]=((0.2151)+x1287+x1294+((x1283*x1286))+((x1283*x1285))+(((-1.0)*x1289))+(((-0.04)*x1283)));
evalcond[1]=((0.0925)+x1295+(((-1.0)*x1286*x1293))+(((-1.0)*x1290))+(((0.04)*x1284))+(((-1.0)*x1288))+(((-1.0)*x1285*x1293)));
evalcond[2]=((((-1.0)*x1283*x1290))+((x1284*x1287))+(((0.2151)*x1284))+(((-1.0)*x1284*x1289))+(((0.0925)*x1283))+pz+(((-1.0)*x1283*x1288)));
evalcond[3]=((0.04)+(((-1.0)*x1284*x1290))+(((-1.0)*x1286))+(((-1.0)*x1285))+(((-0.2151)*x1283))+(((-1.0)*x1284*x1288))+((x1283*x1289))+(((0.0925)*x1284))+(((-1.0)*x1283*x1287)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((0.08)*x1286))+(((0.08)*x1285))+(((-1.0)*x1286*x1296))+(((-0.4302)*x1294))+(((0.017208)*x1283))+((x1286*x1292))+(((-0.0074)*x1284))+(((-0.185)*x1295))+(((0.2982)*cj0*py))+((x1285*x1292))+(((-1.0)*pp))+(((-1.0)*x1285*x1296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1297=cj4*cj4;
IkReal x1298=((0.0325)*sj4);
IkReal x1299=(cj0*px);
IkReal x1300=(py*sj0);
IkReal x1301=((0.2688)*cj4);
IkReal x1302=(cj4*sj4);
IkReal x1303=((1.0)*pz);
CheckValue<IkReal> x1304 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((0.017472)*x1302))+(((0.0139815)*sj4))+(pz*pz)+(((-0.07119719)*x1297)))),IkReal(((0.02863275)+(((0.04)*pz))+(((-0.017472)*x1297))+(((0.01787325)*cj4))+(((-0.07119719)*x1302))+(((-1.0)*x1299*x1303))+(((-1.0)*x1300*x1303))+(((-0.06082513)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1304.valid){
continue;
}
CheckValue<IkReal> x1305=IKPowWithIntegerCheck(IKsign(((-0.008604)+((x1299*x1301))+(((0.0325)*cj4*pz))+(((0.2151)*x1300))+((x1300*x1301))+(((0.2688)*pz*sj4))+(((-0.0925)*pz))+(((-1.0)*x1298*x1299))+(((-1.0)*x1298*x1300))+(((-0.010752)*cj4))+(((0.0013)*sj4))+(((0.2151)*x1299)))),-1);
if(!x1305.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1304.value)+(((1.5707963267949)*(x1305.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1306=IKsin(j1);
IkReal x1307=IKcos(j1);
IkReal x1308=(cj0*px);
IkReal x1309=(py*sj0);
IkReal x1310=((0.2688)*cj4);
IkReal x1311=((0.0325)*cj4);
IkReal x1312=((0.0325)*sj4);
IkReal x1313=((0.2688)*sj4);
IkReal x1314=(sj4*x1306);
IkReal x1315=((0.185)*x1307);
IkReal x1316=((1.0)*x1307);
IkReal x1317=(pz*x1307);
IkReal x1318=(pz*x1306);
IkReal x1319=((0.4302)*x1306);
evalcond[0]=((0.2151)+x1317+x1310+(((-0.04)*x1306))+((x1306*x1309))+((x1306*x1308))+(((-1.0)*x1312)));
evalcond[1]=((0.0925)+(((0.04)*x1307))+x1318+(((-1.0)*x1308*x1316))+(((-1.0)*x1311))+(((-1.0)*x1313))+(((-1.0)*x1309*x1316)));
evalcond[2]=(((x1307*x1310))+(((-1.0)*x1306*x1313))+(((-1.0)*x1306*x1311))+(((0.2151)*x1307))+(((-1.0)*x1307*x1312))+pz+(((0.0925)*x1306)));
evalcond[3]=((0.04)+(((-1.0)*x1306*x1310))+(((-1.0)*x1308))+(((-1.0)*x1309))+(((-1.0)*x1307*x1311))+(((-1.0)*x1307*x1313))+((x1306*x1312))+(((-0.2151)*x1306))+(((0.0925)*x1307)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((-0.4302)*x1317))+(((0.017208)*x1306))+(((-1.0)*x1308*x1319))+((x1308*x1315))+((x1309*x1315))+(((0.2982)*cj0*py))+(((-0.0074)*x1307))+(((-1.0)*pp))+(((-0.185)*x1318))+(((0.08)*x1309))+(((0.08)*x1308))+(((-1.0)*x1309*x1319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1320=cj4*cj4;
IkReal x1321=(cj0*px);
IkReal x1322=((0.2688)*sj4);
IkReal x1323=(cj4*sj4);
IkReal x1324=((0.0325)*cj4);
IkReal x1325=(py*sj0);
CheckValue<IkReal> x1326=IKPowWithIntegerCheck(IKsign(((0.0037)+(((-0.2688)*cj4*pz))+(((-0.0013)*cj4))+((x1322*x1325))+((x1324*x1325))+(((-0.2151)*pz))+(((-0.0925)*x1321))+(((-0.0925)*x1325))+(((-0.010752)*sj4))+((x1321*x1322))+((x1321*x1324))+(((0.0325)*pz*sj4)))),-1);
if(!x1326.valid){
continue;
}
CheckValue<IkReal> x1327 = IKatan2WithCheck(IkReal(((0.02863275)+(((-0.07119719)*x1323))+((pz*x1325))+((pz*x1321))+(((0.01787325)*cj4))+(((-0.06082513)*sj4))+(((-0.04)*pz))+(((-0.017472)*x1320)))),IkReal(((-0.08080969)+(((0.0060125)*cj4))+(((0.07119719)*x1320))+(pz*pz)+(((0.049728)*sj4))+(((-0.017472)*x1323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1327.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1326.value)))+(x1327.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1328=IKsin(j1);
IkReal x1329=IKcos(j1);
IkReal x1330=(cj0*px);
IkReal x1331=(py*sj0);
IkReal x1332=((0.2688)*cj4);
IkReal x1333=((0.0325)*cj4);
IkReal x1334=((0.0325)*sj4);
IkReal x1335=((0.2688)*sj4);
IkReal x1336=(sj4*x1328);
IkReal x1337=((0.185)*x1329);
IkReal x1338=((1.0)*x1329);
IkReal x1339=(pz*x1329);
IkReal x1340=(pz*x1328);
IkReal x1341=((0.4302)*x1328);
evalcond[0]=((0.2151)+x1339+x1332+(((-0.04)*x1328))+((x1328*x1330))+((x1328*x1331))+(((-1.0)*x1334)));
evalcond[1]=((0.0925)+x1340+(((-1.0)*x1330*x1338))+(((-1.0)*x1331*x1338))+(((0.04)*x1329))+(((-1.0)*x1335))+(((-1.0)*x1333)));
evalcond[2]=((((0.0925)*x1328))+((x1329*x1332))+(((0.2151)*x1329))+(((-1.0)*x1328*x1333))+(((-1.0)*x1328*x1335))+(((-1.0)*x1329*x1334))+pz);
evalcond[3]=((0.04)+(((0.0925)*x1329))+(((-1.0)*x1330))+(((-1.0)*x1331))+(((-1.0)*x1328*x1332))+((x1328*x1334))+(((-1.0)*x1329*x1335))+(((-1.0)*x1329*x1333))+(((-0.2151)*x1328)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((-1.0)*x1331*x1341))+(((-0.4302)*x1339))+(((0.08)*x1331))+(((0.08)*x1330))+((x1331*x1337))+(((-0.185)*x1340))+(((0.017208)*x1328))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-1.0)*x1330*x1341))+(((-0.0074)*x1329))+((x1330*x1337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1342 = IKatan2WithCheck(IkReal(((((0.0074)*px*sj0*sj2))+(((-0.08)*cj0*cj2*px*pz*sj3))+(((0.16)*cj0*cj3*px*py*sj0))+(((0.4302)*cj0*cj2*cj3*sj0*(py*py)))+(((0.011928)*cj3*px*sj0))+(((-0.06414282)*cj0*cj2*cj3*px))+(((0.06414282)*pz*sj3))+(((-0.00854538)*cj0*cj3*px))+((cj2*pp*pz*sj3))+(((-0.2982)*cj3*px*py))+(((-0.011928)*cj0*cj3*py))+(((-0.185)*cj0*sj0*sj2*(px*px)))+(((-0.185)*px*py*sj2))+(((0.5964)*cj3*px*py*(cj0*cj0)))+(((0.4302)*px*pz*sj0*sj3))+(((0.017208)*cj2*cj3*px*sj0))+(((-1.0)*cj0*cj3*pp*px))+(((0.2982)*cj2*px*pz*sj0*sj3))+(((-0.08)*cj2*py*pz*sj0*sj3))+(((0.0002138152)*cj3))+(((0.08)*cj3*(py*py)))+(((-0.4302)*cj0*py*pz*sj3))+(((-0.0275835)*cj0*px*sj2))+(((0.04)*cj3*pp))+(((-1.0)*cj3*pp*py*sj0))+(((0.37)*px*py*sj2*(cj0*cj0)))+(((-0.0275835)*py*sj0*sj2))+(((-0.2982)*cj0*cj3*sj0*(px*px)))+(((0.8604)*cj2*cj3*px*py*(cj0*cj0)))+(((0.08)*cj3*(cj0*cj0)*(px*px)))+(((-0.2982)*cj0*cj2*py*pz*sj3))+(((0.0025657128)*cj2*cj3))+(((0.185)*cj0*sj0*sj2*(py*py)))+(((-0.00854538)*cj3*py*sj0))+(((-0.0074)*cj0*py*sj2))+(((-0.017208)*cj0*cj2*cj3*py))+(((-0.4302)*cj0*cj2*cj3*sj0*(px*px)))+(((-0.06414282)*cj2*cj3*py*sj0))+(((-0.4302)*cj2*cj3*px*py))+(((-0.08)*cj3*(cj0*cj0)*(py*py)))+(((0.00534538)*cj2*pz*sj3))+(((0.2982)*cj0*cj3*sj0*(py*py)))+(((0.00110334)*sj2)))),IkReal(((((-1.0)*cj0*cj2*pp*px*sj3))+(((-0.00854538)*cj2*py*sj0*sj3))+(((-0.017208)*cj0*py*sj3))+(((0.185)*cj0*py*pz*sj2))+(((-0.06414282)*py*sj0*sj3))+(((-0.06414282)*cj2*cj3*pz))+(((0.0002138152)*cj2*sj3))+(((0.8604)*px*py*sj3*(cj0*cj0)))+(((-0.0275835)*pz*sj2))+(((0.2982)*cj0*cj2*sj0*sj3*(py*py)))+(((0.2982)*cj0*cj3*py*pz))+(((-0.2982)*cj2*px*py*sj3))+(((-0.00534538)*cj3*pz))+(((-0.011928)*cj0*cj2*py*sj3))+(((-0.2982)*cj0*cj2*sj0*sj3*(px*px)))+(((-0.2982)*cj3*px*pz*sj0))+(((0.08)*cj3*py*pz*sj0))+(((-0.185)*px*pz*sj0*sj2))+(((0.4302)*cj0*sj0*sj3*(py*py)))+(((0.0025657128)*sj3))+(((-0.4302)*px*py*sj3))+(((-0.4302)*cj2*cj3*px*pz*sj0))+(((-0.4302)*cj0*sj0*sj3*(px*px)))+(((0.5964)*cj2*px*py*sj3*(cj0*cj0)))+(((-0.08)*cj2*sj3*(cj0*cj0)*(py*py)))+(((0.011928)*cj2*px*sj0*sj3))+(((0.4302)*cj0*cj2*cj3*py*pz))+(((0.16)*cj0*cj2*px*py*sj0*sj3))+(((-1.0)*cj3*pp*pz))+(((0.04)*cj2*pp*sj3))+(((-0.06414282)*cj0*px*sj3))+(((0.08)*cj0*cj3*px*pz))+(((-0.00854538)*cj0*cj2*px*sj3))+(((0.08)*cj2*sj3*(cj0*cj0)*(px*px)))+(((-1.0)*cj2*pp*py*sj0*sj3))+(((0.017208)*px*sj0*sj3))+(((0.08)*cj2*sj3*(py*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1342.valid){
continue;
}
CheckValue<IkReal> x1343=IKPowWithIntegerCheck(IKsign(((((0.034416)*cj0*cj3*px*sj2))+(((0.4302)*cj3*sj2*(cj0*cj0)*(py*py)))+(((-0.4302)*cj3*sj2*(cj0*cj0)*(px*px)))+(((0.000296)*cj2))+(((-0.0148)*cj0*cj2*px))+(((0.185)*cj2*(pz*pz)))+(((-0.00068832)*cj3*sj2))+(((-0.8604)*cj0*cj3*px*py*sj0*sj2))+(((0.185)*cj2*(py*py)))+(((0.37)*cj0*cj2*px*py*sj0))+(((-0.4302)*cj3*sj2*(pz*pz)))+(((-0.185)*cj2*(cj0*cj0)*(py*py)))+(((-0.0148)*cj2*py*sj0))+(((-0.4302)*cj3*sj2*(py*py)))+(((0.034416)*cj3*py*sj0*sj2))+(((0.185)*cj2*(cj0*cj0)*(px*px))))),-1);
if(!x1343.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1342.value)+(((1.5707963267949)*(x1343.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x1344=IKsin(j1);
IkReal x1345=IKcos(j1);
IkReal x1346=(cj0*sj2);
IkReal x1347=((1.0)*py);
IkReal x1348=(sj2*sj3);
IkReal x1349=(px*sj0);
IkReal x1350=(cj0*cj2);
IkReal x1351=((0.4302)*py);
IkReal x1352=((0.185)*cj3);
IkReal x1353=(cj0*px);
IkReal x1354=((0.185)*pz);
IkReal x1355=(py*sj0);
IkReal x1356=(cj2*sj3);
IkReal x1357=(px*x1344);
IkReal x1358=(py*x1352);
IkReal x1359=(sj0*x1344);
IkReal x1360=(cj3*x1345);
IkReal x1361=(pz*x1345);
IkReal x1362=(sj3*x1345);
IkReal x1363=(sj3*x1344);
IkReal x1364=(cj3*x1344);
evalcond[0]=(((x1356*x1361))+(((0.04)*x1360))+((x1344*x1355*x1356))+(((-1.0)*sj0*x1347*x1360))+(((-1.0)*x1353*x1360))+(((-1.0)*sj3*x1346*x1347))+((x1348*x1349))+(((-0.04)*x1344*x1356))+(((0.1491)*x1348))+((pz*x1364))+((sj3*x1350*x1357)));
evalcond[1]=((-0.00534538)+(((-1.0)*x1350*x1352*x1357))+(((-0.017208)*sj2*x1344))+(((-1.0)*cj2*x1352*x1361))+(((-0.4302)*cj2*x1349))+((x1354*x1363))+((sj2*x1351*x1359))+(((-0.185)*x1355*x1362))+(((-0.185)*x1353*x1362))+(((0.0074)*cj2*x1364))+(((0.4302)*sj2*x1361))+(((0.2982)*cj0*py))+(((-1.0)*pp))+((x1346*x1358))+(((0.08)*x1353))+(((0.08)*x1355))+(((-1.0)*sj2*x1349*x1352))+(((0.0074)*x1362))+((x1350*x1351))+(((-1.0)*cj2*x1344*x1352*x1355))+(((-0.0275835)*cj3*sj2))+(((0.4302)*x1346*x1357))+(((-0.06414282)*cj2))+(((-0.2982)*x1349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1365=(sj1*sj2);
IkReal x1366=((4.69754647271971)*py);
IkReal x1367=(cj0*px);
IkReal x1368=(cj0*cj2);
IkReal x1369=(px*sj0);
IkReal x1370=(py*sj0);
IkReal x1371=(cj0*py);
IkReal x1372=(cj1*pz*sj2);
if( IKabs(((0.328579446042259)+(((1.58557262809102)*x1370))+(((8.08309205744797)*x1365*x1367))+(((-19.8196578511377)*pp))+(((1.58557262809102)*x1367))+(((8.08309205744797)*x1365*x1370))+(((-1.20518902576549)*cj2))+(((-0.323323682297919)*x1365))+(((-5.91022197120927)*x1369))+(((5.91022197120927)*x1371))+(((-8.08309205744797)*cj2*x1369))+(((8.08309205744797)*py*x1368))+(((8.08309205744797)*x1372)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.760495416680158)+((x1366*x1368))+(((0.714591570179692)*x1371))+(((0.191708000048207)*x1370))+(((4.69754647271971)*x1372))+(((0.191708000048207)*x1367))+(((-4.69754647271971)*cj2*x1369))+(((-0.700404179082509)*cj2))+((sj0*x1365*x1366))+(((-0.187901858908789)*x1365))+(((-2.39635000060259)*pp))+(((4.69754647271971)*x1365*x1367))+(((-0.714591570179692)*x1369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.328579446042259)+(((1.58557262809102)*x1370))+(((8.08309205744797)*x1365*x1367))+(((-19.8196578511377)*pp))+(((1.58557262809102)*x1367))+(((8.08309205744797)*x1365*x1370))+(((-1.20518902576549)*cj2))+(((-0.323323682297919)*x1365))+(((-5.91022197120927)*x1369))+(((5.91022197120927)*x1371))+(((-8.08309205744797)*cj2*x1369))+(((8.08309205744797)*py*x1368))+(((8.08309205744797)*x1372))))+IKsqr(((-0.760495416680158)+((x1366*x1368))+(((0.714591570179692)*x1371))+(((0.191708000048207)*x1370))+(((4.69754647271971)*x1372))+(((0.191708000048207)*x1367))+(((-4.69754647271971)*cj2*x1369))+(((-0.700404179082509)*cj2))+((sj0*x1365*x1366))+(((-0.187901858908789)*x1365))+(((-2.39635000060259)*pp))+(((4.69754647271971)*x1365*x1367))+(((-0.714591570179692)*x1369))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.328579446042259)+(((1.58557262809102)*x1370))+(((8.08309205744797)*x1365*x1367))+(((-19.8196578511377)*pp))+(((1.58557262809102)*x1367))+(((8.08309205744797)*x1365*x1370))+(((-1.20518902576549)*cj2))+(((-0.323323682297919)*x1365))+(((-5.91022197120927)*x1369))+(((5.91022197120927)*x1371))+(((-8.08309205744797)*cj2*x1369))+(((8.08309205744797)*py*x1368))+(((8.08309205744797)*x1372))), ((-0.760495416680158)+((x1366*x1368))+(((0.714591570179692)*x1371))+(((0.191708000048207)*x1370))+(((4.69754647271971)*x1372))+(((0.191708000048207)*x1367))+(((-4.69754647271971)*cj2*x1369))+(((-0.700404179082509)*cj2))+((sj0*x1365*x1366))+(((-0.187901858908789)*x1365))+(((-2.39635000060259)*pp))+(((4.69754647271971)*x1365*x1367))+(((-0.714591570179692)*x1369))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1373=IKcos(j4);
IkReal x1374=IKsin(j4);
IkReal x1375=(cj1*sj2);
IkReal x1376=(cj1*cj2);
IkReal x1377=(cj3*sj2);
IkReal x1378=((1.0)*pz);
IkReal x1379=(px*sj0);
IkReal x1380=(sj1*sj2);
IkReal x1381=(cj1*sj3);
IkReal x1382=(cj0*py);
IkReal x1383=(sj1*sj3);
IkReal x1384=(py*sj0);
IkReal x1385=((0.0925)*cj3);
IkReal x1386=(cj0*px);
IkReal x1387=(cj2*sj1);
IkReal x1388=((0.0325)*x1373);
IkReal x1389=((0.2688)*x1374);
IkReal x1390=((0.2688)*x1373);
IkReal x1391=((0.0325)*x1374);
IkReal x1392=((1.0)*x1386);
IkReal x1393=(cj3*x1387);
IkReal x1394=(cj3*x1389);
evalcond[0]=((0.10430314)+(((0.08)*x1386))+(((0.08)*x1384))+(((-0.0637095)*x1374))+(((-1.0)*pp))+(((-0.2982)*x1379))+(((0.10962526)*x1373))+(((0.2982)*x1382)));
evalcond[1]=((0.1491)+x1379+((cj2*x1390))+(((-1.0)*x1377*x1388))+(((-1.0)*x1377*x1389))+(((-1.0)*cj2*x1391))+(((-1.0)*x1382))+(((0.2151)*cj2))+(((0.0925)*x1377)));
evalcond[2]=((0.2151)+x1390+(((-1.0)*x1380*x1384))+(((0.04)*x1380))+(((-1.0)*cj2*x1382))+(((0.1491)*cj2))+(((-1.0)*x1375*x1378))+(((-1.0)*x1380*x1392))+((cj2*x1379))+(((-1.0)*x1391)));
evalcond[3]=((((-0.0925)*x1383))+(((-1.0)*x1375*x1390))+(((-1.0)*x1376*x1394))+((x1375*x1391))+pz+((x1376*x1385))+(((-1.0)*cj3*x1376*x1388))+(((-0.2151)*x1375))+((x1383*x1388))+((x1383*x1389)));
evalcond[4]=((0.04)+((x1381*x1389))+((x1381*x1388))+(((-0.0925)*x1381))+((x1388*x1393))+(((0.2151)*x1380))+(((-1.0)*x1380*x1391))+((x1389*x1393))+(((-1.0)*x1384))+(((-1.0)*x1392))+(((-1.0)*x1385*x1387))+((x1380*x1390)));
evalcond[5]=((0.0925)+(((-1.0)*x1389))+(((-1.0)*x1388))+((x1381*x1384))+((x1381*x1386))+(((-1.0)*x1377*x1382))+((x1377*x1379))+((cj3*pz*x1376))+(((-0.04)*x1393))+((x1386*x1393))+(((-0.04)*x1381))+(((-1.0)*x1378*x1383))+((x1384*x1393))+(((0.1491)*x1377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1395=(cj0*py);
IkReal x1396=((1075200.0)*cj2);
IkReal x1397=(py*sj0);
IkReal x1398=(cj3*sj2);
IkReal x1399=((1625000.0)*pp);
IkReal x1400=((13440000.0)*pp);
IkReal x1401=((484575.0)*cj2);
IkReal x1402=(px*sj0);
IkReal x1403=(cj0*px);
IkReal x1404=((4007808.0)*cj2);
IkReal x1405=((130000.0)*cj2);
CheckValue<IkReal> x1406 = IKatan2WithCheck(IkReal(((-817256.3133)+(((484575.0)*x1398*x1402))+((x1398*x1399))+(((5481263.0)*x1395))+(((-130000.0)*x1398*x1403))+(((-1.0)*cj2*x1400))+((x1396*x1403))+((x1395*x1404))+(((222814.5303)*cj2))+((x1396*x1397))+(((-1.0)*x1402*x1404))+(((-676509.43)*x1398))+(((-484575.0)*x1395*x1398))+(((-130000.0)*x1397*x1398))+(((-5481263.0)*x1402)))),IkReal(((-474954.3225)+(((1075200.0)*x1398*x1403))+(((1075200.0)*x1397*x1398))+(((4007808.0)*x1395*x1398))+(((3185475.0)*x1395))+((x1397*x1405))+(((-1.0)*x1398*x1400))+((x1395*x1401))+(((1107177.7641)*x1398))+(((-515703.07)*cj2))+((x1403*x1405))+(((-1.0)*cj2*x1399))+(((-4007808.0)*x1398*x1402))+(((-3185475.0)*x1402))+(((-1.0)*x1401*x1402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1406.valid){
continue;
}
CheckValue<IkReal> x1407=IKPowWithIntegerCheck(IKsign(((((-1576891.4319)*x1398))+(((678114.6325)*cj2)))),-1);
if(!x1407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1406.value)+(((1.5707963267949)*(x1407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1408=IKcos(j4);
IkReal x1409=IKsin(j4);
IkReal x1410=(cj3*sj2);
IkReal x1411=(px*sj0);
IkReal x1412=(cj0*py);
evalcond[0]=((0.10430314)+(((-0.0637095)*x1409))+(((-0.2982)*x1411))+(((-1.0)*pp))+(((0.10962526)*x1408))+(((0.08)*cj0*px))+(((0.08)*py*sj0))+(((0.2982)*x1412)));
evalcond[1]=((0.1491)+(((0.0925)*x1410))+(((-0.0325)*x1408*x1410))+x1411+(((0.2151)*cj2))+(((-0.0325)*cj2*x1409))+(((-0.2688)*x1409*x1410))+(((0.2688)*cj2*x1408))+(((-1.0)*x1412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x1413=cj0*cj0;
IkReal x1414=py*py;
IkReal x1415=px*px;
IkReal x1416=pz*pz;
IkReal x1417=(cj3*sj2);
IkReal x1418=(py*sj0);
IkReal x1419=(cj0*px);
IkReal x1420=((625.0)*x1414);
IkReal x1421=(x1413*x1417);
j1eval[0]=(((x1420*x1421))+(((-625.0)*x1415*x1421))+(((-1.0)*x1417*x1420))+(((50.0)*x1417*x1418))+(((50.0)*x1417*x1419))+(((-625.0)*x1416*x1417))+(((-1250.0)*x1417*x1418*x1419))+(((-1.0)*x1417)));
j1eval[1]=IKsign(((((-0.0016)*x1417))+(((-1.0)*x1416*x1417))+(((-1.0)*x1414*x1417))+((x1414*x1421))+(((0.08)*x1417*x1418))+(((0.08)*x1417*x1419))+(((-2.0)*x1417*x1418*x1419))+(((-1.0)*x1415*x1421))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1422=cj3*cj3;
IkReal x1423=cj2*cj2;
IkReal x1424=cj4*cj4;
IkReal x1425=((2.90594594594595)*cj4);
IkReal x1426=((0.0060125)*cj4);
IkReal x1427=((0.017472)*cj4);
IkReal x1428=(cj4*sj4);
IkReal x1429=(cj2*cj3*sj2);
IkReal x1430=(sj4*x1422);
IkReal x1431=((0.07119719)*x1424);
IkReal x1432=(sj4*x1423);
IkReal x1433=(cj4*x1423);
IkReal x1434=(x1422*x1423);
IkReal x1435=((11.8415284823285)*x1423*x1424);
j1eval[0]=((-21.3112598752599)+(((-11.8415284823285)*x1422*x1424))+(((-13.4402810810811)*x1434))+(((-5.81189189189189)*x1424*x1429))+(((13.4402810810811)*x1422))+(((19.2328914760915)*x1433))+(((11.8415284823285)*x1424*x1434))+(((5.94536382536383)*cj4*x1429))+(((-1.0)*x1423*x1425*x1430))+(((-8.27076923076923)*x1430))+(((-20.2328914760915)*sj4*x1429))+((x1425*x1430))+(((-18.2328914760915)*cj4))+(((-1.0)*cj4*x1422))+(((-2.32540540540541)*x1432))+x1435+(((10.5961746361746)*sj4))+(((-1.0)*x1425*x1432))+((x1422*x1433))+(((-23.683056964657)*x1428*x1429))+(((8.27076923076923)*x1423*x1430))+(((7.87097879417879)*x1423))+(((9.52440748440748)*x1429)));
j1eval[1]=IKsign(((-0.12813395)+(((0.0572655)*x1429))+(((0.049728)*x1423*x1430))+(((-0.0139815)*x1432))+(((-0.049728)*x1430))+(((0.08080969)*x1422))+(((-1.0)*x1422*x1431))+(((-0.034944)*x1424*x1429))+(((0.11563776)*x1433))+(((-0.12165026)*sj4*x1429))+(((-0.10962526)*cj4))+(((-0.14239438)*x1428*x1429))+((x1427*x1430))+(((-1.0)*x1423*x1427*x1430))+(((-1.0)*x1422*x1426))+(((0.04732426)*x1423))+((x1426*x1434))+(((-1.0)*x1427*x1432))+((x1423*x1431))+(((0.0637095)*sj4))+(((-0.08080969)*x1434))+((x1431*x1434))+(((0.0357465)*cj4*x1429))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1436=cj2*cj2;
IkReal x1437=(sj2*sj3);
IkReal x1438=(cj0*px);
IkReal x1439=((165.461538461538)*pz);
IkReal x1440=(cj4*pz);
IkReal x1441=(py*sj0);
IkReal x1442=((206.769230769231)*sj4);
IkReal x1443=((0.0325)*cj4);
IkReal x1444=(pz*sj4);
IkReal x1445=((0.2688)*sj4);
IkReal x1446=((0.2151)*pz);
IkReal x1447=((25.0)*cj4);
IkReal x1448=(cj2*cj3*sj2);
j1eval[0]=((((71.1538461538462)*pz*x1448))+((x1436*x1439))+(((-25.0)*x1440*x1448))+(((-206.769230769231)*x1440))+((x1437*x1441*x1447))+((x1437*x1441*x1442))+(((-71.1538461538462)*x1437*x1438))+(((-1.0)*x1439))+(((25.0)*x1444))+(((2.84615384615385)*x1437))+(((-1.0)*pz*x1442*x1448))+(((-71.1538461538462)*x1437*x1441))+(((-25.0)*x1436*x1444))+((x1437*x1438*x1447))+((x1437*x1438*x1442))+(((206.769230769231)*x1436*x1440))+(((-1.0)*cj4*x1437))+(((-8.27076923076923)*sj4*x1437)));
j1eval[1]=IKsign(((((-0.010752)*sj4*x1437))+(((0.0925)*pz*x1448))+(((-0.2688)*x1444*x1448))+(((-0.0013)*cj4*x1437))+((x1437*x1441*x1445))+((x1437*x1441*x1443))+(((0.0037)*x1437))+((x1436*x1446))+(((-0.0925)*x1437*x1441))+(((-0.2688)*x1440))+(((-0.0325)*x1436*x1444))+(((-0.0925)*x1437*x1438))+(((0.2688)*x1436*x1440))+(((-1.0)*x1446))+(((-0.0325)*x1440*x1448))+((x1437*x1438*x1445))+((x1437*x1438*x1443))+(((0.0325)*x1444))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1449=pz*pz;
IkReal x1450=(pz*sj4);
IkReal x1451=(cj4*pz);
IkReal x1452=((25.0)*sj3);
IkReal x1453=((25.0)*cj3);
IkReal x1454=(py*pz*sj0);
IkReal x1455=(cj0*px*pz);
j1eval[0]=((((-8.27076923076923)*x1450))+(((-1.0)*x1451))+(((2.84615384615385)*pz)));
j1eval[1]=IKsign(((((-0.2688)*x1450))+(((0.0925)*pz))+(((-0.0325)*x1451))));
j1eval[2]=((IKabs(((((-1.0)*x1453*x1455))+(((-1.0)*x1453*x1454))+((cj3*pz))+((x1449*x1452)))))+(IKabs((((pz*sj3))+(((-1.0)*x1452*x1454))+(((-1.0)*x1452*x1455))+(((-1.0)*x1449*x1453))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1456=(py*sj0);
IkReal x1457=((0.2688)*sj4);
IkReal x1458=(cj0*px);
IkReal x1459=((206.769230769231)*sj4);
IkReal x1460=(cj4*x1458);
j1eval[0]=((-2.84615384615385)+(((8.27076923076923)*sj4))+(((-1.0)*x1458*x1459))+cj4+(((-25.0)*cj4*x1456))+(((71.1538461538462)*x1458))+(((71.1538461538462)*x1456))+(((-25.0)*x1460))+(((-1.0)*x1456*x1459)));
j1eval[1]=IKsign(((-0.0037)+(((-1.0)*x1457*x1458))+(((-0.0325)*cj4*x1456))+(((0.010752)*sj4))+(((0.0013)*cj4))+(((-0.0325)*x1460))+(((-1.0)*x1456*x1457))+(((0.0925)*x1458))+(((0.0925)*x1456))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1461=cj4*cj4;
IkReal x1462=(cj4*sj4);
j1eval[0]=((-13.4402810810811)+(((8.27076923076923)*sj4))+cj4+(((11.8415284823285)*x1461))+(((-2.90594594594595)*x1462)));
j1eval[1]=IKsign(((-0.08080969)+(((-0.017472)*x1462))+(((0.0060125)*cj4))+(((0.049728)*sj4))+(((0.07119719)*x1461))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1463=pz*pz;
IkReal x1464=IKabs(pz);
IkReal x1465=x1463;
CheckValue<IkReal> x1471=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*x1464)),-1);
if(!x1471.valid){
continue;
}
IkReal x1466=x1471.value;
IkReal x1472 = x1465;
if(IKabs(x1472)==0){
continue;
}
IkReal x1467=pow(x1472,-0.5);
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(x1464,-2);
if(!x1473.valid){
continue;
}
if((((1.0)+(((-0.116713765942811)*x1463*(x1473.value))))) < -0.00001)
continue;
IkReal x1468=IKsqrt(((1.0)+(((-0.116713765942811)*x1463*(x1473.value)))));
IkReal x1469=(x1463*x1466*x1467);
IkReal x1470=(pz*x1467*x1468);
if((x1465) < -0.00001)
continue;
CheckValue<IkReal> x1474=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x1465)))),-1);
if(!x1474.valid){
continue;
}
if( (((925.0)*pz*(x1474.value))) < -1-IKFAST_SINCOS_THRESH || (((925.0)*pz*(x1474.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1475 = IKatan2WithCheck(IkReal(((-1.0)*pz)),IkReal(((-8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1475.valid){
continue;
}
IkReal gconst40=((((-1.0)*(IKasin(((925.0)*pz*(x1474.value))))))+(((-1.0)*(x1475.value))));
IkReal gconst41=((((0.12003355521946)*x1470))+(((918.312097531275)*x1469)));
IkReal gconst42=((((-0.992769835168946)*x1470))+(((111.031038578)*x1469)));
CheckValue<IkReal> x1476 = IKatan2WithCheck(IkReal(((-1.0)*pz)),IkReal(((-8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1476.valid){
continue;
}
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x1477=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(pz*pz)))),-1);
if(!x1477.valid){
continue;
}
if( (((925.0)*pz*(x1477.value))) < -1-IKFAST_SINCOS_THRESH || (((925.0)*pz*(x1477.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1476.value)+(IKasin(((925.0)*pz*(x1477.value))))+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x1478=pz*pz;
IkReal x1479=IKabs(pz);
IkReal x1480=((-1.0)*pz);
IkReal x1481=x1478;
IkReal x1482=x1466;
IkReal x1488 = x1481;
if(IKabs(x1488)==0){
continue;
}
IkReal x1483=pow(x1488,-0.5);
IkReal x1484=x1468;
if((x1481) < -0.00001)
continue;
CheckValue<IkReal> x1489=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x1481)))),-1);
if(!x1489.valid){
continue;
}
if( (((925.0)*pz*(x1489.value))) < -1-IKFAST_SINCOS_THRESH || (((925.0)*pz*(x1489.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1485=((1.0)*(IKasin(((925.0)*pz*(x1489.value)))));
IkReal x1486=(x1478*x1482*x1483);
IkReal x1487=(pz*x1483*x1484);
sj2=0;
cj2=1.0;
j2=0;
sj4=gconst41;
cj4=gconst42;
CheckValue<IkReal> x1490 = IKatan2WithCheck(IkReal(x1480),IkReal(((-8.27076910047281)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1490.valid){
continue;
}
j4=((((-1.0)*x1485))+(((-1.0)*(x1490.value))));
CheckValue<IkReal> x1491 = IKatan2WithCheck(IkReal(x1480),IkReal(((-8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1491.valid){
continue;
}
IkReal gconst40=((((-1.0)*x1485))+(((-1.0)*(x1491.value))));
IkReal gconst41=((((0.12003355521946)*x1487))+(((918.312097531275)*x1486)));
IkReal gconst42=((((111.031038578)*x1486))+(((-0.992769835168946)*x1487)));
IkReal x1492=cj0*cj0;
IkReal x1493=py*py;
IkReal x1494=pz*pz;
IkReal x1495=px*px;
IkReal x1496=(py*sj0);
IkReal x1497=(cj0*px);
IkReal x1498=(x1492*x1493);
IkReal x1499=(x1492*x1495);
j1eval[0]=((1.0)+(((625.0)*x1493))+(((625.0)*x1499))+(((625.0)*x1494))+(((-50.0)*x1496))+(((-50.0)*x1497))+(((1250.0)*x1496*x1497))+(((-625.0)*x1498)));
j1eval[1]=IKsign(((0.0016)+(((-1.0)*x1498))+(((-0.08)*x1496))+(((-0.08)*x1497))+x1493+x1494+x1499+(((2.0)*x1496*x1497))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1500=cj0*cj0;
IkReal x1501=py*py;
IkReal x1502=((0.2688)*gconst41);
IkReal x1503=((0.0325)*gconst42);
IkReal x1504=(py*sj0);
IkReal x1505=(cj3*pz);
IkReal x1506=((0.0925)*cj3);
IkReal x1507=(pz*sj3);
IkReal x1508=((0.010752)*gconst41);
IkReal x1509=(cj0*px);
IkReal x1510=((0.0013)*gconst42);
IkReal x1511=(sj3*x1509);
CheckValue<IkReal> x1512=IKPowWithIntegerCheck(IKsign(((0.0016)+(((-1.0)*x1500*x1501))+(pz*pz)+x1501+(((-0.08)*x1509))+(((-0.08)*x1504))+(((2.0)*x1504*x1509))+((x1500*(px*px))))),-1);
if(!x1512.valid){
continue;
}
CheckValue<IkReal> x1513 = IKatan2WithCheck(IkReal(((((-1.0)*x1504*x1506))+(((-1.0)*x1506*x1509))+(((0.0037)*cj3))+(((-1.0)*cj3*x1508))+(((-1.0)*cj3*x1510))+(((-1.0)*x1503*x1507))+((cj3*x1503*x1509))+((cj3*x1503*x1504))+(((-1.0)*x1502*x1507))+((cj3*x1502*x1509))+((cj3*x1502*x1504))+(((0.0925)*x1507)))),IkReal(((((-1.0)*sj3*x1510))+(((-1.0)*sj3*x1508))+(((0.0037)*sj3))+(((-0.0925)*x1505))+(((-0.0925)*x1511))+(((-0.0925)*sj3*x1504))+((sj3*x1502*x1504))+((x1503*x1511))+((x1503*x1505))+((x1502*x1511))+((x1502*x1505))+((sj3*x1503*x1504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1513.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1512.value)))+(x1513.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1514=IKsin(j1);
IkReal x1515=IKcos(j1);
IkReal x1516=(py*sj0);
IkReal x1517=((0.0325)*gconst42);
IkReal x1518=((0.2688)*gconst41);
IkReal x1519=((0.185)*pz);
IkReal x1520=(cj0*px);
IkReal x1521=(sj3*x1514);
IkReal x1522=(sj3*x1515);
IkReal x1523=(cj3*x1514);
IkReal x1524=(cj3*x1515);
evalcond[0]=(((x1518*x1521))+(((-1.0)*x1518*x1524))+((x1517*x1521))+(((-0.0925)*x1521))+pz+(((-1.0)*x1517*x1524))+(((0.0925)*x1524)));
evalcond[1]=((0.04)+(((-1.0)*x1516))+((x1518*x1522))+((x1518*x1523))+((x1517*x1522))+((x1517*x1523))+(((-0.0925)*x1522))+(((-0.0925)*x1523))+(((-1.0)*x1520)));
evalcond[2]=((((-1.0)*x1516*x1524))+(((-0.04)*x1521))+(((-1.0)*x1520*x1524))+((x1520*x1521))+((x1516*x1521))+((pz*x1523))+((pz*x1522))+(((0.04)*x1524)));
evalcond[3]=((0.0925)+(((-1.0)*x1518))+(((-1.0)*x1517))+(((-0.04)*x1523))+(((-0.04)*x1522))+((x1520*x1522))+((x1520*x1523))+((x1516*x1522))+((x1516*x1523))+((pz*x1524))+(((-1.0)*pz*x1521)));
evalcond[4]=((-0.0694882)+(((-0.185)*x1516*x1522))+(((-0.185)*x1516*x1523))+(((0.08)*x1520))+(((0.0074)*x1523))+(((0.0074)*x1522))+((x1519*x1521))+(((-1.0)*x1519*x1524))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-1.0)*pp))+(((-0.185)*x1520*x1523))+(((-0.185)*x1520*x1522))+(((0.08)*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1525=pz*pz;
IkReal x1526=IKabs(pz);
IkReal x1527=x1525;
CheckValue<IkReal> x1533=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*x1526)),-1);
if(!x1533.valid){
continue;
}
IkReal x1528=x1533.value;
IkReal x1534 = x1527;
if(IKabs(x1534)==0){
continue;
}
IkReal x1529=pow(x1534,-0.5);
CheckValue<IkReal> x1535=IKPowWithIntegerCheck(x1526,-2);
if(!x1535.valid){
continue;
}
if((((1.0)+(((-0.116713765942811)*x1525*(x1535.value))))) < -0.00001)
continue;
IkReal x1530=IKsqrt(((1.0)+(((-0.116713765942811)*x1525*(x1535.value)))));
IkReal x1531=(x1525*x1528*x1529);
IkReal x1532=(pz*x1529*x1530);
if((x1527) < -0.00001)
continue;
CheckValue<IkReal> x1536=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x1527)))),-1);
if(!x1536.valid){
continue;
}
if( (((925.0)*pz*(x1536.value))) < -1-IKFAST_SINCOS_THRESH || (((925.0)*pz*(x1536.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1537 = IKatan2WithCheck(IkReal(((-1.0)*pz)),IkReal(((-8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1537.valid){
continue;
}
IkReal gconst43=((3.14159265358979)+(IKasin(((925.0)*pz*(x1536.value))))+(((-1.0)*(x1537.value))));
IkReal gconst44=((((-0.12003355521946)*x1532))+(((918.312097531275)*x1531)));
IkReal gconst45=((((111.031038578)*x1531))+(((0.992769835168946)*x1532)));
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x1538=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(pz*pz)))),-1);
if(!x1538.valid){
continue;
}
if( (((925.0)*pz*(x1538.value))) < -1-IKFAST_SINCOS_THRESH || (((925.0)*pz*(x1538.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1539 = IKatan2WithCheck(IkReal(((-1.0)*pz)),IkReal(((-8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1539.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((925.0)*pz*(x1538.value))))))+(x1539.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1540=pz*pz;
IkReal x1541=IKabs(pz);
IkReal x1542=((-1.0)*pz);
IkReal x1543=x1540;
IkReal x1544=x1528;
IkReal x1550 = x1543;
if(IKabs(x1550)==0){
continue;
}
IkReal x1545=pow(x1550,-0.5);
IkReal x1546=x1530;
if((x1543) < -0.00001)
continue;
CheckValue<IkReal> x1551=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x1543)))),-1);
if(!x1551.valid){
continue;
}
if( (((925.0)*pz*(x1551.value))) < -1-IKFAST_SINCOS_THRESH || (((925.0)*pz*(x1551.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1547=IKasin(((925.0)*pz*(x1551.value)));
IkReal x1548=(x1540*x1544*x1545);
IkReal x1549=(pz*x1545*x1546);
sj2=0;
cj2=1.0;
j2=0;
sj4=gconst44;
cj4=gconst45;
CheckValue<IkReal> x1552 = IKatan2WithCheck(IkReal(x1542),IkReal(((-8.27076910047281)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1552.valid){
continue;
}
j4=((3.14159265)+x1547+(((-1.0)*(x1552.value))));
CheckValue<IkReal> x1553 = IKatan2WithCheck(IkReal(x1542),IkReal(((-8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1553.valid){
continue;
}
IkReal gconst43=((3.14159265358979)+x1547+(((-1.0)*(x1553.value))));
IkReal gconst44=((((918.312097531275)*x1548))+(((-0.12003355521946)*x1549)));
IkReal gconst45=((((0.992769835168946)*x1549))+(((111.031038578)*x1548)));
IkReal x1554=pz*pz;
IkReal x1555=(cj0*px);
IkReal x1556=(py*sj0);
IkReal x1557=(cj3*pz);
IkReal x1558=((25.0)*pz*sj3);
IkReal x1559=((25.0)*x1554);
j1eval[0]=((IKabs(((((-1.0)*x1555*x1558))+(((-1.0)*x1556*x1558))+(((-1.0)*cj3*x1559))+((pz*sj3)))))+(IKabs((x1557+(((-25.0)*x1556*x1557))+((sj3*x1559))+(((-25.0)*x1555*x1557))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1560=pz*pz;
IkReal x1561=gconst45*gconst45;
IkReal x1562=gconst44*gconst44;
IkReal x1563=(cj3*gconst44);
IkReal x1564=(gconst45*sj3);
IkReal x1565=(py*sj0);
IkReal x1566=((0.0325)*gconst45);
IkReal x1567=(cj0*px);
IkReal x1568=(pz*sj3);
IkReal x1569=((0.2688)*gconst44);
IkReal x1570=(cj3*pz);
IkReal x1571=((0.00105625)*x1561);
IkReal x1572=((0.07225344)*x1562);
CheckValue<IkReal> x1573 = IKatan2WithCheck(IkReal((((x1567*x1568))+(((-0.04)*x1568))+(((-0.017472)*gconst45*x1563))+((cj3*x1560))+(((-0.00855625)*cj3))+(((0.049728)*x1563))+(((0.0060125)*cj3*gconst45))+(((-1.0)*cj3*x1572))+(((-1.0)*cj3*x1571))+((x1565*x1568)))),IkReal(((((0.04)*x1570))+(((-1.0)*sj3*x1571))+(((-1.0)*sj3*x1572))+(((0.049728)*gconst44*sj3))+(((-0.00855625)*sj3))+(((-1.0)*x1567*x1570))+(((0.0060125)*x1564))+(((-0.017472)*gconst44*x1564))+(((-1.0)*x1565*x1570))+((sj3*x1560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1573.valid){
continue;
}
CheckValue<IkReal> x1574=IKPowWithIntegerCheck(IKsign(((-0.0037)+(((-1.0)*x1565*x1569))+(((-1.0)*x1565*x1566))+(((0.0925)*x1565))+(((0.0925)*x1567))+(((-1.0)*x1566*x1567))+(((-1.0)*x1567*x1569))+(((0.0013)*gconst45))+(((0.010752)*gconst44)))),-1);
if(!x1574.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1573.value)+(((1.5707963267949)*(x1574.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1575=IKsin(j1);
IkReal x1576=IKcos(j1);
IkReal x1577=(cj0*px);
IkReal x1578=((0.2688)*gconst44);
IkReal x1579=((0.0325)*gconst45);
IkReal x1580=(py*sj0);
IkReal x1581=((0.185)*pz);
IkReal x1582=(sj3*x1575);
IkReal x1583=(cj3*x1576);
IkReal x1584=(sj3*x1576);
IkReal x1585=(cj3*x1575);
IkReal x1586=((0.185)*x1585);
evalcond[0]=((((-1.0)*x1578*x1583))+(((0.0925)*x1583))+pz+(((-1.0)*x1579*x1583))+(((-0.0925)*x1582))+((x1579*x1582))+((x1578*x1582)));
evalcond[1]=((0.04)+(((-1.0)*x1580))+(((-0.0925)*x1585))+(((-0.0925)*x1584))+((x1579*x1584))+((x1579*x1585))+((x1578*x1584))+((x1578*x1585))+(((-1.0)*x1577)));
evalcond[2]=((((-0.04)*x1582))+(((0.04)*x1583))+(((-1.0)*x1577*x1583))+(((-1.0)*x1580*x1583))+((x1580*x1582))+((pz*x1585))+((pz*x1584))+((x1577*x1582)));
evalcond[3]=((0.0925)+(((-0.04)*x1585))+(((-0.04)*x1584))+((x1580*x1585))+((x1580*x1584))+((pz*x1583))+(((-1.0)*pz*x1582))+((x1577*x1585))+((x1577*x1584))+(((-1.0)*x1578))+(((-1.0)*x1579)));
evalcond[4]=((-0.0694882)+(((-1.0)*x1580*x1586))+(((-1.0)*x1577*x1586))+(((0.0074)*x1584))+(((0.0074)*x1585))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-1.0)*pp))+(((-0.185)*x1580*x1584))+(((-1.0)*x1581*x1583))+(((-0.185)*x1577*x1584))+(((0.08)*x1580))+(((0.08)*x1577))+((x1581*x1582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1587=pz*pz;
IkReal x1588=(cj3*pz);
IkReal x1589=(pz*sj3);
IkReal x1590=((1.0)*py*sj0);
IkReal x1591=((1.0)*cj0*px);
CheckValue<IkReal> x1592 = IKatan2WithCheck(IkReal((((sj3*x1587))+(((0.04)*x1588))+(((-1.0)*x1588*x1590))+(((-1.0)*x1588*x1591)))),IkReal(((((0.04)*x1589))+(((-1.0)*x1589*x1590))+(((-1.0)*x1589*x1591))+(((-1.0)*cj3*x1587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1592.valid){
continue;
}
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(IKsign(((((-0.2688)*gconst44*pz))+(((0.0925)*pz))+(((-0.0325)*gconst45*pz)))),-1);
if(!x1593.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1592.value)+(((1.5707963267949)*(x1593.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1594=IKsin(j1);
IkReal x1595=IKcos(j1);
IkReal x1596=(cj0*px);
IkReal x1597=((0.2688)*gconst44);
IkReal x1598=((0.0325)*gconst45);
IkReal x1599=(py*sj0);
IkReal x1600=((0.185)*pz);
IkReal x1601=(sj3*x1594);
IkReal x1602=(cj3*x1595);
IkReal x1603=(sj3*x1595);
IkReal x1604=(cj3*x1594);
IkReal x1605=((0.185)*x1604);
evalcond[0]=((((0.0925)*x1602))+(((-1.0)*x1597*x1602))+pz+((x1598*x1601))+(((-0.0925)*x1601))+(((-1.0)*x1598*x1602))+((x1597*x1601)));
evalcond[1]=((0.04)+((x1598*x1604))+((x1598*x1603))+(((-0.0925)*x1604))+(((-0.0925)*x1603))+(((-1.0)*x1599))+(((-1.0)*x1596))+((x1597*x1603))+((x1597*x1604)));
evalcond[2]=((((-1.0)*x1596*x1602))+(((0.04)*x1602))+((x1599*x1601))+(((-1.0)*x1599*x1602))+(((-0.04)*x1601))+((x1596*x1601))+((pz*x1604))+((pz*x1603)));
evalcond[3]=((0.0925)+(((-1.0)*x1597))+(((-1.0)*x1598))+((x1599*x1603))+((x1599*x1604))+(((-0.04)*x1603))+(((-0.04)*x1604))+((x1596*x1604))+((x1596*x1603))+(((-1.0)*pz*x1601))+((pz*x1602)));
evalcond[4]=((-0.0694882)+(((-0.185)*x1599*x1603))+((x1600*x1601))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-1.0)*x1600*x1602))+(((-1.0)*pp))+(((-1.0)*x1599*x1605))+(((-1.0)*x1596*x1605))+(((0.0074)*x1604))+(((0.0074)*x1603))+(((-0.185)*x1596*x1603))+(((0.08)*x1596))+(((0.08)*x1599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
IkReal x1606=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1606);
rxp0_1=(px*r20);
rxp1_0=(r21*x1606);
rxp1_1=(px*r21);
rxp2_0=(r22*x1606);
rxp2_1=(px*r22);
IkReal x1607=cj4*cj4;
IkReal x1608=(cj3*sj4);
IkReal x1609=(cj0*px);
IkReal x1610=((25.0)*cj4);
IkReal x1611=((0.2688)*sj4);
IkReal x1612=(py*sj0);
IkReal x1613=((206.769230769231)*sj4);
IkReal x1614=((0.0325)*cj4);
IkReal x1615=((1747200.0)*cj4);
IkReal x1616=(sj3*sj4);
IkReal x1617=((601250.0)*cj4);
IkReal x1618=((7119719.0)*x1607);
j1eval[0]=((2.84615384615385)+(((-71.1538461538462)*x1612))+(((-71.1538461538462)*x1609))+((x1609*x1610))+((x1609*x1613))+((x1612*x1613))+(((-8.27076923076923)*sj4))+((x1610*x1612))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.0037)+(((-0.0013)*cj4))+((x1609*x1614))+((x1609*x1611))+((x1612*x1614))+(((-0.010752)*sj4))+(((-0.0925)*x1609))+(((-0.0925)*x1612))+((x1611*x1612))));
j1eval[2]=((IKabs(((((-1.0)*cj3*x1618))+(((-1.0)*cj3*x1617))+((x1608*x1615))+(((8080969.0)*cj3))+(((-4972800.0)*x1608)))))+(IKabs((((x1615*x1616))+(((8080969.0)*sj3))+(((-4972800.0)*x1616))+(((-1.0)*sj3*x1618))+(((-1.0)*sj3*x1617))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1619=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1619);
rxp0_1=(px*r20);
rxp1_0=(r21*x1619);
rxp1_1=(px*r21);
rxp2_0=(r22*x1619);
rxp2_1=(px*r22);
IkReal x1620=cj4*cj4;
IkReal x1621=(cj4*sj4);
j1eval[0]=((13.4402810810811)+(((-11.8415284823285)*x1620))+(((2.90594594594595)*x1621))+(((-8.27076923076923)*sj4))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.08080969)+(((-0.0060125)*cj4))+(((-0.07119719)*x1620))+(((-0.049728)*sj4))+(((0.017472)*x1621))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1622=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1622);
rxp0_1=(px*r20);
rxp1_0=(r21*x1622);
rxp1_1=(px*r21);
rxp2_0=(r22*x1622);
rxp2_1=(px*r22);
IkReal x1623=(cj0*px);
IkReal x1624=((25.0)*cj4);
IkReal x1625=(py*sj0);
IkReal x1626=((0.2688)*sj4);
IkReal x1627=((0.0325)*cj4);
IkReal x1628=((206.769230769231)*sj4);
j1eval[0]=((2.84615384615385)+((x1623*x1628))+((x1623*x1624))+(((-71.1538461538462)*x1623))+(((-71.1538461538462)*x1625))+(((-8.27076923076923)*sj4))+((x1624*x1625))+((x1625*x1628))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.0037)+((x1623*x1626))+((x1623*x1627))+(((-0.0013)*cj4))+(((-0.010752)*sj4))+((x1625*x1627))+((x1625*x1626))+(((-0.0925)*x1623))+(((-0.0925)*x1625))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1629=cj0*cj0;
IkReal x1630=py*py;
IkReal x1631=px*px;
IkReal x1632=(cj0*px);
IkReal x1633=((0.2688)*sj4);
IkReal x1634=(py*sj0);
IkReal x1635=((0.08)*cj3);
IkReal x1636=((0.0325)*cj4);
IkReal x1637=(sj3*x1630);
IkReal x1638=(sj3*x1634);
IkReal x1639=((1.0)*x1629);
IkReal x1640=(cj3*x1630);
IkReal x1641=(x1629*x1631);
CheckValue<IkReal> x1642 = IKatan2WithCheck(IkReal(((((-1.0)*x1634*x1635))+((cj3*x1641))+x1640+(((2.0)*cj3*x1632*x1634))+(((-1.0)*x1639*x1640))+(((0.0016)*cj3))+(((-1.0)*x1632*x1635)))),IkReal(((((-0.08)*x1638))+(((-0.08)*sj3*x1632))+x1637+((sj3*x1641))+(((-1.0)*x1637*x1639))+(((0.0016)*sj3))+(((2.0)*x1632*x1638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1642.valid){
continue;
}
CheckValue<IkReal> x1643=IKPowWithIntegerCheck(IKsign(((0.0037)+(((-0.0013)*cj4))+(((-0.0925)*x1632))+(((-0.0925)*x1634))+((x1632*x1636))+((x1632*x1633))+(((-0.010752)*sj4))+((x1634*x1636))+((x1633*x1634)))),-1);
if(!x1643.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1642.value)+(((1.5707963267949)*(x1643.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1644=IKsin(j1);
IkReal x1645=IKcos(j1);
IkReal x1646=((0.0325)*cj4);
IkReal x1647=(cj0*px);
IkReal x1648=(py*sj0);
IkReal x1649=((0.2688)*sj4);
IkReal x1650=(sj3*x1644);
IkReal x1651=(cj3*x1645);
IkReal x1652=(sj3*x1645);
IkReal x1653=(cj3*x1644);
IkReal x1654=((0.185)*x1653);
evalcond[0]=((((-1.0)*x1646*x1651))+((x1646*x1650))+((x1649*x1650))+(((-0.0925)*x1650))+(((-1.0)*x1649*x1651))+(((0.0925)*x1651)));
evalcond[1]=(((x1648*x1650))+(((-1.0)*x1647*x1651))+((x1647*x1650))+(((-1.0)*x1648*x1651))+(((-0.04)*x1650))+(((0.04)*x1651)));
evalcond[2]=((0.0925)+((x1648*x1652))+((x1648*x1653))+((x1647*x1652))+((x1647*x1653))+(((-1.0)*x1646))+(((-1.0)*x1649))+(((-0.04)*x1652))+(((-0.04)*x1653)));
evalcond[3]=((0.04)+((x1646*x1653))+((x1646*x1652))+(((-1.0)*x1648))+(((-1.0)*x1647))+((x1649*x1652))+((x1649*x1653))+(((-0.0925)*x1653))+(((-0.0925)*x1652)));
evalcond[4]=((-0.0694882)+(((-0.185)*x1647*x1652))+(((-1.0)*(px*px)))+(((0.08)*x1647))+(((0.08)*x1648))+(((-0.185)*x1648*x1652))+(((-1.0)*x1647*x1654))+(((0.0074)*x1653))+(((0.0074)*x1652))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-1.0)*(py*py)))+(((-1.0)*x1648*x1654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1655=(cj4*sj3);
IkReal x1656=((0.0325)*cj4);
IkReal x1657=(sj3*sj4);
IkReal x1658=((0.2688)*sj4);
IkReal x1659=(py*sj0);
IkReal x1660=(cj0*px);
IkReal x1661=((0.0925)*x1660);
IkReal x1662=(cj3*x1659);
CheckValue<IkReal> x1663 = IKatan2WithCheck(IkReal(((((-0.0013)*cj3*cj4))+((cj3*x1656*x1660))+(((0.0037)*cj3))+(((-0.010752)*cj3*sj4))+(((-1.0)*cj3*x1661))+(((-0.0925)*x1662))+((cj3*x1658*x1660))+((x1658*x1662))+((x1656*x1662)))),IkReal(((((0.0037)*sj3))+(((0.0325)*x1655*x1659))+(((-1.0)*sj3*x1661))+(((0.0325)*x1655*x1660))+(((0.2688)*x1657*x1660))+(((0.2688)*x1657*x1659))+(((-0.0925)*sj3*x1659))+(((-0.0013)*x1655))+(((-0.010752)*x1657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1663.valid){
continue;
}
CheckValue<IkReal> x1664=IKPowWithIntegerCheck(IKsign(((0.08080969)+(((-0.07119719)*(cj4*cj4)))+(((-0.0060125)*cj4))+(((0.017472)*cj4*sj4))+(((-0.049728)*sj4)))),-1);
if(!x1664.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1663.value)+(((1.5707963267949)*(x1664.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1665=IKsin(j1);
IkReal x1666=IKcos(j1);
IkReal x1667=((0.0325)*cj4);
IkReal x1668=(cj0*px);
IkReal x1669=(py*sj0);
IkReal x1670=((0.2688)*sj4);
IkReal x1671=(sj3*x1665);
IkReal x1672=(cj3*x1666);
IkReal x1673=(sj3*x1666);
IkReal x1674=(cj3*x1665);
IkReal x1675=((0.185)*x1674);
evalcond[0]=((((-0.0925)*x1671))+(((-1.0)*x1667*x1672))+((x1667*x1671))+(((0.0925)*x1672))+(((-1.0)*x1670*x1672))+((x1670*x1671)));
evalcond[1]=(((x1668*x1671))+((x1669*x1671))+(((0.04)*x1672))+(((-1.0)*x1669*x1672))+(((-0.04)*x1671))+(((-1.0)*x1668*x1672)));
evalcond[2]=((0.0925)+((x1668*x1673))+((x1668*x1674))+((x1669*x1674))+((x1669*x1673))+(((-1.0)*x1667))+(((-0.04)*x1674))+(((-0.04)*x1673))+(((-1.0)*x1670)));
evalcond[3]=((0.04)+(((-0.0925)*x1674))+(((-0.0925)*x1673))+((x1667*x1674))+((x1667*x1673))+(((-1.0)*x1669))+(((-1.0)*x1668))+((x1670*x1674))+((x1670*x1673)));
evalcond[4]=((-0.0694882)+(((-1.0)*(px*px)))+(((-1.0)*x1668*x1675))+(((0.0074)*x1674))+(((0.0074)*x1673))+(((0.08)*x1668))+(((0.08)*x1669))+(((-0.185)*x1668*x1673))+(((-1.0)*x1669*x1675))+(((-0.185)*x1669*x1673))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1676=cj4*cj4;
IkReal x1677=(cj0*px);
IkReal x1678=(cj4*sj3);
IkReal x1679=((0.017472)*sj4);
IkReal x1680=((0.0325)*cj4);
IkReal x1681=(py*sj0);
IkReal x1682=((0.2688)*sj4);
IkReal x1683=((0.049728)*sj4);
IkReal x1684=(cj3*cj4);
IkReal x1685=((0.07119719)*x1676);
CheckValue<IkReal> x1686 = IKatan2WithCheck(IkReal(((((-0.0060125)*x1684))+((x1679*x1684))+(((-1.0)*cj3*x1683))+(((-1.0)*cj3*x1685))+(((0.08080969)*cj3)))),IkReal((((x1678*x1679))+(((-0.0060125)*x1678))+(((-1.0)*sj3*x1683))+(((-1.0)*sj3*x1685))+(((0.08080969)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1686.valid){
continue;
}
CheckValue<IkReal> x1687=IKPowWithIntegerCheck(IKsign(((0.0037)+((x1681*x1682))+(((-0.0925)*x1677))+((x1680*x1681))+((x1677*x1682))+((x1677*x1680))+(((-0.0013)*cj4))+(((-0.0925)*x1681))+(((-0.010752)*sj4)))),-1);
if(!x1687.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1686.value)+(((1.5707963267949)*(x1687.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1688=IKsin(j1);
IkReal x1689=IKcos(j1);
IkReal x1690=((0.0325)*cj4);
IkReal x1691=(cj0*px);
IkReal x1692=(py*sj0);
IkReal x1693=((0.2688)*sj4);
IkReal x1694=(sj3*x1688);
IkReal x1695=(cj3*x1689);
IkReal x1696=(sj3*x1689);
IkReal x1697=(cj3*x1688);
IkReal x1698=((0.185)*x1697);
evalcond[0]=(((x1690*x1694))+(((-1.0)*x1690*x1695))+(((-0.0925)*x1694))+((x1693*x1694))+(((0.0925)*x1695))+(((-1.0)*x1693*x1695)));
evalcond[1]=((((-1.0)*x1692*x1695))+(((-1.0)*x1691*x1695))+(((0.04)*x1695))+((x1691*x1694))+(((-0.04)*x1694))+((x1692*x1694)));
evalcond[2]=((0.0925)+(((-1.0)*x1693))+(((-1.0)*x1690))+((x1691*x1696))+((x1691*x1697))+(((-0.04)*x1696))+(((-0.04)*x1697))+((x1692*x1697))+((x1692*x1696)));
evalcond[3]=((0.04)+((x1690*x1697))+((x1690*x1696))+(((-1.0)*x1691))+(((-1.0)*x1692))+(((-0.0925)*x1697))+(((-0.0925)*x1696))+((x1693*x1697))+((x1693*x1696)));
evalcond[4]=((-0.0694882)+(((-1.0)*x1692*x1698))+(((-1.0)*(px*px)))+(((0.08)*x1692))+(((0.08)*x1691))+(((-0.185)*x1692*x1696))+(((0.0074)*x1697))+(((0.0074)*x1696))+(((-0.185)*x1691*x1696))+(((0.7284)*cj0*py))+(((-1.0)*x1691*x1698))+(((-0.7284)*px*sj0))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1699=(cj4*sj3);
IkReal x1700=((0.0925)*sj3);
IkReal x1701=(cj0*px);
IkReal x1702=((0.0325)*cj4);
IkReal x1703=(sj3*sj4);
IkReal x1704=((0.2688)*sj4);
IkReal x1705=((0.0925)*cj3);
IkReal x1706=(py*sj0);
IkReal x1707=(cj3*pz);
IkReal x1708=(cj3*x1706);
CheckValue<IkReal> x1709=IKPowWithIntegerCheck(IKsign(((-0.08080969)+(((0.0060125)*cj4))+(((0.07119719)*(cj4*cj4)))+(((-0.017472)*cj4*sj4))+(((0.049728)*sj4)))),-1);
if(!x1709.valid){
continue;
}
CheckValue<IkReal> x1710 = IKatan2WithCheck(IkReal(((((-1.0)*x1702*x1708))+(((-1.0)*pz*x1700))+(((-0.0037)*cj3))+((x1705*x1706))+(((-1.0)*x1704*x1708))+(((0.2688)*pz*x1703))+(((0.0325)*pz*x1699))+((x1701*x1705))+(((-1.0)*cj3*x1701*x1704))+(((-1.0)*cj3*x1701*x1702))+(((0.010752)*cj3*sj4))+(((0.0013)*cj3*cj4)))),IkReal(((((-1.0)*x1702*x1707))+(((0.0013)*x1699))+(((-0.2688)*x1701*x1703))+(((0.010752)*x1703))+((x1700*x1701))+((x1700*x1706))+(((-1.0)*x1704*x1707))+(((-0.0325)*x1699*x1701))+(((-0.0325)*x1699*x1706))+(((-0.0037)*sj3))+(((-0.2688)*x1703*x1706))+((pz*x1705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1710.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1709.value)))+(x1710.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1711=IKsin(j1);
IkReal x1712=IKcos(j1);
IkReal x1713=((0.0325)*cj4);
IkReal x1714=(py*sj0);
IkReal x1715=((0.185)*pz);
IkReal x1716=(cj0*px);
IkReal x1717=((0.2688)*sj4);
IkReal x1718=(sj3*x1711);
IkReal x1719=(cj3*x1712);
IkReal x1720=((0.185)*x1716);
IkReal x1721=(sj3*x1712);
IkReal x1722=(cj3*x1711);
evalcond[0]=((((-1.0)*x1713*x1719))+((x1713*x1718))+(((0.0925)*x1719))+pz+(((-0.0925)*x1718))+(((-1.0)*x1717*x1719))+((x1717*x1718)));
evalcond[1]=((0.04)+(((-0.0925)*x1722))+(((-0.0925)*x1721))+(((-1.0)*x1716))+(((-1.0)*x1714))+((x1717*x1721))+((x1717*x1722))+((x1713*x1721))+((x1713*x1722)));
evalcond[2]=((((-1.0)*x1716*x1719))+((pz*x1721))+((pz*x1722))+((x1714*x1718))+(((-1.0)*x1714*x1719))+((x1716*x1718))+(((0.04)*x1719))+(((-0.04)*x1718)));
evalcond[3]=((0.0925)+(((-1.0)*pz*x1718))+(((-0.04)*x1721))+(((-0.04)*x1722))+(((-1.0)*x1717))+(((-1.0)*x1713))+((x1714*x1721))+((x1714*x1722))+((pz*x1719))+((x1716*x1722))+((x1716*x1721)));
evalcond[4]=((-0.0694882)+(((-1.0)*x1720*x1721))+(((-1.0)*x1720*x1722))+(((0.7284)*cj0*py))+(((0.0074)*x1721))+(((0.0074)*x1722))+(((-0.185)*x1714*x1721))+(((-0.185)*x1714*x1722))+(((-0.7284)*px*sj0))+(((-1.0)*pp))+(((-1.0)*x1715*x1719))+((x1715*x1718))+(((0.08)*x1716))+(((0.08)*x1714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1723=pz*pz;
IkReal x1724=cj4*cj4;
IkReal x1725=((0.0060125)*cj4);
IkReal x1726=(cj0*px);
IkReal x1727=((0.2688)*sj4);
IkReal x1728=(py*sj0);
IkReal x1729=(pz*sj3);
IkReal x1730=((0.0325)*cj4);
IkReal x1731=((0.049728)*sj4);
IkReal x1732=((1.0)*cj3*pz);
IkReal x1733=((0.07119719)*x1724);
IkReal x1734=((0.017472)*cj4*sj4);
CheckValue<IkReal> x1735=IKPowWithIntegerCheck(IKsign(((-0.0037)+(((0.0925)*x1728))+(((0.0925)*x1726))+(((-1.0)*x1728*x1730))+(((-1.0)*x1726*x1730))+(((-1.0)*x1726*x1727))+(((0.010752)*sj4))+(((0.0013)*cj4))+(((-1.0)*x1727*x1728)))),-1);
if(!x1735.valid){
continue;
}
CheckValue<IkReal> x1736 = IKatan2WithCheck(IkReal((((x1728*x1729))+(((-0.04)*x1729))+((cj3*x1725))+((cj3*x1723))+((x1726*x1729))+((cj3*x1731))+((cj3*x1733))+(((-1.0)*cj3*x1734))+(((-0.08080969)*cj3)))),IkReal((((sj3*x1723))+((sj3*x1725))+(((-1.0)*x1728*x1732))+(((-1.0)*x1726*x1732))+(((-0.08080969)*sj3))+(((0.04)*cj3*pz))+(((-1.0)*sj3*x1734))+((sj3*x1733))+((sj3*x1731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1736.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1735.value)))+(x1736.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1737=IKsin(j1);
IkReal x1738=IKcos(j1);
IkReal x1739=((0.0325)*cj4);
IkReal x1740=(py*sj0);
IkReal x1741=((0.185)*pz);
IkReal x1742=(cj0*px);
IkReal x1743=((0.2688)*sj4);
IkReal x1744=(sj3*x1737);
IkReal x1745=(cj3*x1738);
IkReal x1746=((0.185)*x1742);
IkReal x1747=(sj3*x1738);
IkReal x1748=(cj3*x1737);
evalcond[0]=(((x1739*x1744))+(((0.0925)*x1745))+(((-1.0)*x1739*x1745))+(((-0.0925)*x1744))+pz+((x1743*x1744))+(((-1.0)*x1743*x1745)));
evalcond[1]=((0.04)+((x1739*x1748))+((x1739*x1747))+(((-0.0925)*x1748))+(((-0.0925)*x1747))+(((-1.0)*x1740))+(((-1.0)*x1742))+((x1743*x1747))+((x1743*x1748)));
evalcond[2]=(((pz*x1747))+((pz*x1748))+(((0.04)*x1745))+(((-1.0)*x1740*x1745))+((x1742*x1744))+(((-1.0)*x1742*x1745))+((x1740*x1744))+(((-0.04)*x1744)));
evalcond[3]=((0.0925)+((pz*x1745))+(((-1.0)*pz*x1744))+(((-1.0)*x1743))+((x1742*x1747))+((x1742*x1748))+((x1740*x1748))+((x1740*x1747))+(((-1.0)*x1739))+(((-0.04)*x1747))+(((-0.04)*x1748)));
evalcond[4]=((-0.0694882)+(((-1.0)*x1741*x1745))+(((0.08)*x1742))+(((0.08)*x1740))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-1.0)*pp))+(((0.0074)*x1747))+(((0.0074)*x1748))+(((-1.0)*x1746*x1748))+(((-1.0)*x1746*x1747))+(((-0.185)*x1740*x1747))+(((-0.185)*x1740*x1748))+((x1741*x1744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1749=pz*pz;
IkReal x1750=(cj3*pz);
IkReal x1751=(pz*sj3);
IkReal x1752=((1.0)*py*sj0);
IkReal x1753=((1.0)*cj0*px);
CheckValue<IkReal> x1754 = IKatan2WithCheck(IkReal(((((0.04)*x1750))+(((-1.0)*x1750*x1753))+(((-1.0)*x1750*x1752))+((sj3*x1749)))),IkReal(((((0.04)*x1751))+(((-1.0)*x1751*x1752))+(((-1.0)*x1751*x1753))+(((-1.0)*cj3*x1749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1754.valid){
continue;
}
CheckValue<IkReal> x1755=IKPowWithIntegerCheck(IKsign(((((-0.0325)*cj4*pz))+(((-0.2688)*pz*sj4))+(((0.0925)*pz)))),-1);
if(!x1755.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1754.value)+(((1.5707963267949)*(x1755.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1756=IKsin(j1);
IkReal x1757=IKcos(j1);
IkReal x1758=((0.0325)*cj4);
IkReal x1759=(py*sj0);
IkReal x1760=((0.185)*pz);
IkReal x1761=(cj0*px);
IkReal x1762=((0.2688)*sj4);
IkReal x1763=(sj3*x1756);
IkReal x1764=(cj3*x1757);
IkReal x1765=((0.185)*x1761);
IkReal x1766=(sj3*x1757);
IkReal x1767=(cj3*x1756);
evalcond[0]=((((-1.0)*x1762*x1764))+((x1758*x1763))+((x1762*x1763))+pz+(((-1.0)*x1758*x1764))+(((0.0925)*x1764))+(((-0.0925)*x1763)));
evalcond[1]=((0.04)+(((-1.0)*x1761))+((x1758*x1766))+((x1758*x1767))+((x1762*x1767))+((x1762*x1766))+(((-1.0)*x1759))+(((-0.0925)*x1766))+(((-0.0925)*x1767)));
evalcond[2]=((((-1.0)*x1759*x1764))+(((-1.0)*x1761*x1764))+((x1759*x1763))+(((-0.04)*x1763))+((pz*x1766))+((pz*x1767))+(((0.04)*x1764))+((x1761*x1763)));
evalcond[3]=((0.0925)+(((-1.0)*pz*x1763))+(((-1.0)*x1762))+((x1759*x1767))+((x1759*x1766))+(((-0.04)*x1766))+(((-0.04)*x1767))+((pz*x1764))+(((-1.0)*x1758))+((x1761*x1766))+((x1761*x1767)));
evalcond[4]=((-0.0694882)+(((0.08)*x1759))+(((0.0074)*x1766))+(((0.0074)*x1767))+(((0.7284)*cj0*py))+(((-0.7284)*px*sj0))+(((-1.0)*pp))+(((-1.0)*x1765*x1766))+(((-1.0)*x1765*x1767))+(((-1.0)*x1760*x1764))+(((0.08)*x1761))+(((-0.185)*x1759*x1766))+(((-0.185)*x1759*x1767))+((x1760*x1763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1768=pz*pz;
IkReal x1769=(pz*sj4);
IkReal x1770=(cj4*pz);
IkReal x1771=((25.0)*sj3);
IkReal x1772=((25.0)*cj3);
IkReal x1773=(py*pz*sj0);
IkReal x1774=(cj0*px*pz);
j1eval[0]=(x1770+(((-2.84615384615385)*pz))+(((8.27076923076923)*x1769)));
j1eval[1]=((IKabs(((((-1.0)*x1772*x1773))+(((-1.0)*x1772*x1774))+((cj3*pz))+(((-1.0)*x1768*x1771)))))+(IKabs((((x1771*x1773))+((x1771*x1774))+(((-1.0)*pz*sj3))+(((-1.0)*x1768*x1772))))));
j1eval[2]=IKsign(((((0.0325)*x1770))+(((-0.0925)*pz))+(((0.2688)*x1769))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1775=(py*sj0);
IkReal x1776=((0.2688)*sj4);
IkReal x1777=(cj0*px);
IkReal x1778=((206.769230769231)*sj4);
IkReal x1779=(cj4*x1777);
j1eval[0]=((-2.84615384615385)+(((-25.0)*x1779))+(((8.27076923076923)*sj4))+(((-25.0)*cj4*x1775))+cj4+(((71.1538461538462)*x1777))+(((71.1538461538462)*x1775))+(((-1.0)*x1775*x1778))+(((-1.0)*x1777*x1778)));
j1eval[1]=IKsign(((-0.0037)+(((-0.0325)*x1779))+(((-1.0)*x1776*x1777))+(((0.0925)*x1775))+(((0.0925)*x1777))+(((0.010752)*sj4))+(((0.0013)*cj4))+(((-1.0)*x1775*x1776))+(((-0.0325)*cj4*x1775))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1780=cj4*cj4;
IkReal x1781=(cj4*sj4);
j1eval[0]=((-13.4402810810811)+(((8.27076923076923)*sj4))+cj4+(((11.8415284823285)*x1780))+(((-2.90594594594595)*x1781)));
j1eval[1]=IKsign(((-0.08080969)+(((0.0060125)*cj4))+(((0.07119719)*x1780))+(((0.049728)*sj4))+(((-0.017472)*x1781))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1782=pz*pz;
IkReal x1783=IKabs(pz);
IkReal x1784=x1782;
CheckValue<IkReal> x1790=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*x1783)),-1);
if(!x1790.valid){
continue;
}
IkReal x1785=x1790.value;
IkReal x1791 = x1784;
if(IKabs(x1791)==0){
continue;
}
IkReal x1786=pow(x1791,-0.5);
CheckValue<IkReal> x1792=IKPowWithIntegerCheck(x1783,-2);
if(!x1792.valid){
continue;
}
if((((1.0)+(((-0.116713765942811)*x1782*(x1792.value))))) < -0.00001)
continue;
IkReal x1787=IKsqrt(((1.0)+(((-0.116713765942811)*x1782*(x1792.value)))));
IkReal x1788=(x1782*x1785*x1786);
IkReal x1789=(pz*x1786*x1787);
if((x1784) < -0.00001)
continue;
CheckValue<IkReal> x1793=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x1784)))),-1);
if(!x1793.valid){
continue;
}
if( (((925.0)*pz*(x1793.value))) < -1-IKFAST_SINCOS_THRESH || (((925.0)*pz*(x1793.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1794 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1794.valid){
continue;
}
IkReal gconst46=((IKasin(((925.0)*pz*(x1793.value))))+(((-1.0)*(x1794.value))));
IkReal gconst47=((((-0.12003355521946)*x1789))+(((918.312097531275)*x1788)));
IkReal gconst48=((((111.031038578)*x1788))+(((0.992769835168946)*x1789)));
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x1795=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(pz*pz)))),-1);
if(!x1795.valid){
continue;
}
if( (((925.0)*pz*(x1795.value))) < -1-IKFAST_SINCOS_THRESH || (((925.0)*pz*(x1795.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1796 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1796.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin(((925.0)*pz*(x1795.value))))))+(x1796.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x1797=pz*pz;
IkReal x1798=IKabs(pz);
IkReal x1799=x1797;
IkReal x1800=x1785;
IkReal x1806 = x1799;
if(IKabs(x1806)==0){
continue;
}
IkReal x1801=pow(x1806,-0.5);
IkReal x1802=x1787;
if((x1799) < -0.00001)
continue;
CheckValue<IkReal> x1807=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x1799)))),-1);
if(!x1807.valid){
continue;
}
if( (((925.0)*pz*(x1807.value))) < -1-IKFAST_SINCOS_THRESH || (((925.0)*pz*(x1807.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1803=IKasin(((925.0)*pz*(x1807.value)));
IkReal x1804=(x1797*x1800*x1801);
IkReal x1805=(pz*x1801*x1802);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=gconst47;
cj4=gconst48;
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076910047281)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
j4=(x1803+(((-1.0)*(x1808.value))));
CheckValue<IkReal> x1809 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1809.valid){
continue;
}
IkReal gconst46=(x1803+(((-1.0)*(x1809.value))));
IkReal gconst47=((((-0.12003355521946)*x1805))+(((918.312097531275)*x1804)));
IkReal gconst48=((((111.031038578)*x1804))+(((0.992769835168946)*x1805)));
IkReal x1810=cj0*cj0;
IkReal x1811=py*py;
IkReal x1812=px*px;
IkReal x1813=pz*pz;
IkReal x1814=(py*sj0);
IkReal x1815=(cj0*px);
IkReal x1816=(x1810*x1811);
IkReal x1817=(x1810*x1812);
j1eval[0]=((-1.0)+(((-625.0)*x1817))+(((-625.0)*x1811))+(((-625.0)*x1813))+(((625.0)*x1816))+(((-1250.0)*x1814*x1815))+(((50.0)*x1815))+(((50.0)*x1814)));
j1eval[1]=IKsign(((-0.0016)+(((0.08)*x1815))+(((0.08)*x1814))+(((-2.0)*x1814*x1815))+x1816+(((-1.0)*x1817))+(((-1.0)*x1811))+(((-1.0)*x1813))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1818=py*py;
IkReal x1819=cj0*cj0;
IkReal x1820=(cj3*gconst48);
IkReal x1821=(py*sj0);
IkReal x1822=(cj0*px);
IkReal x1823=((0.0925)*sj3);
IkReal x1824=((0.0925)*cj3);
IkReal x1825=(gconst47*sj3);
IkReal x1826=((0.0325)*gconst48*sj3);
IkReal x1827=((0.2688)*cj3*gconst47);
CheckValue<IkReal> x1828=IKPowWithIntegerCheck(IKsign(((-0.0016)+((x1818*x1819))+(((-2.0)*x1821*x1822))+(((0.08)*x1822))+(((0.08)*x1821))+(((-1.0)*(pz*pz)))+(((-1.0)*x1819*(px*px)))+(((-1.0)*x1818)))),-1);
if(!x1828.valid){
continue;
}
CheckValue<IkReal> x1829 = IKatan2WithCheck(IkReal(((((0.2688)*pz*x1825))+(((-1.0)*x1821*x1824))+((pz*x1826))+(((-1.0)*pz*x1823))+(((0.0037)*cj3))+((x1822*x1827))+((x1821*x1827))+(((-0.010752)*cj3*gconst47))+(((-1.0)*x1822*x1824))+(((0.0325)*x1820*x1822))+(((0.0325)*x1820*x1821))+(((-0.0013)*x1820)))),IkReal(((((-1.0)*x1821*x1826))+((pz*x1827))+(((-0.2688)*x1821*x1825))+(((0.0013)*gconst48*sj3))+(((0.010752)*x1825))+(((-1.0)*pz*x1824))+(((-0.2688)*x1822*x1825))+((x1822*x1823))+(((-0.0037)*sj3))+((x1821*x1823))+(((-1.0)*x1822*x1826))+(((0.0325)*pz*x1820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1829.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1828.value)))+(x1829.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1830=IKcos(j1);
IkReal x1831=IKsin(j1);
IkReal x1832=(cj0*px);
IkReal x1833=((1.0)*pz);
IkReal x1834=((0.2688)*gconst47);
IkReal x1835=((0.0325)*gconst48);
IkReal x1836=(py*sj0);
IkReal x1837=((0.185)*pz);
IkReal x1838=(sj3*x1831);
IkReal x1839=(sj3*x1830);
IkReal x1840=(cj3*x1830);
IkReal x1841=(cj3*x1831);
IkReal x1842=((1.0)*cj3*x1832);
IkReal x1843=((0.185)*x1841);
evalcond[0]=((((-0.0925)*x1838))+((x1834*x1840))+((x1835*x1838))+(((-0.0925)*x1840))+pz+((x1834*x1838))+((x1835*x1840)));
evalcond[1]=((0.04)+(((-0.0925)*x1839))+(((-1.0)*x1836))+(((-1.0)*x1832))+((x1835*x1839))+(((-1.0)*x1835*x1841))+((x1834*x1839))+(((-1.0)*x1834*x1841))+(((0.0925)*x1841)));
evalcond[2]=((((-1.0)*x1836*x1840))+(((-1.0)*x1832*x1838))+(((-1.0)*x1833*x1839))+(((0.04)*x1838))+((pz*x1841))+(((-1.0)*x1832*x1840))+(((-1.0)*x1836*x1838))+(((0.04)*x1840)));
evalcond[3]=((0.0925)+(((-1.0)*x1836*x1841))+(((-1.0)*x1833*x1838))+(((-1.0)*x1834))+(((-1.0)*x1835))+(((-1.0)*x1832*x1841))+((x1832*x1839))+((x1836*x1839))+(((0.04)*x1841))+(((-0.04)*x1839))+(((-1.0)*x1833*x1840)));
evalcond[4]=((0.05879744)+(((-0.0074)*x1841))+((x1836*x1843))+((x1837*x1840))+(((0.132)*px*sj0))+((x1832*x1843))+(((-0.185)*x1832*x1839))+(((-1.0)*pp))+(((-0.185)*x1836*x1839))+(((0.08)*x1836))+(((0.08)*x1832))+((x1837*x1838))+(((-0.132)*cj0*py))+(((0.0074)*x1839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1844=pz*pz;
IkReal x1845=IKabs(pz);
IkReal x1846=x1844;
CheckValue<IkReal> x1852=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*x1845)),-1);
if(!x1852.valid){
continue;
}
IkReal x1847=x1852.value;
IkReal x1853 = x1846;
if(IKabs(x1853)==0){
continue;
}
IkReal x1848=pow(x1853,-0.5);
CheckValue<IkReal> x1854=IKPowWithIntegerCheck(x1845,-2);
if(!x1854.valid){
continue;
}
if((((1.0)+(((-0.116713765942811)*x1844*(x1854.value))))) < -0.00001)
continue;
IkReal x1849=IKsqrt(((1.0)+(((-0.116713765942811)*x1844*(x1854.value)))));
IkReal x1850=(x1844*x1847*x1848);
IkReal x1851=(pz*x1848*x1849);
if((x1846) < -0.00001)
continue;
CheckValue<IkReal> x1855=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x1846)))),-1);
if(!x1855.valid){
continue;
}
if( (((925.0)*pz*(x1855.value))) < -1-IKFAST_SINCOS_THRESH || (((925.0)*pz*(x1855.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
IkReal gconst49=((3.14159265358979)+(((-1.0)*(IKasin(((925.0)*pz*(x1855.value))))))+(((-1.0)*(x1856.value))));
IkReal gconst50=((((918.312097531275)*x1850))+(((0.12003355521946)*x1851)));
IkReal gconst51=((((111.031038578)*x1850))+(((-0.992769835168946)*x1851)));
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x1857=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(pz*pz)))),-1);
if(!x1857.valid){
continue;
}
if( (((925.0)*pz*(x1857.value))) < -1-IKFAST_SINCOS_THRESH || (((925.0)*pz*(x1857.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1858 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1858.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin(((925.0)*pz*(x1857.value))))+(x1858.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1859=pz*pz;
IkReal x1860=IKabs(pz);
IkReal x1861=x1859;
IkReal x1862=x1847;
IkReal x1868 = x1861;
if(IKabs(x1868)==0){
continue;
}
IkReal x1863=pow(x1868,-0.5);
IkReal x1864=x1849;
if((x1861) < -0.00001)
continue;
CheckValue<IkReal> x1869=IKPowWithIntegerCheck(IKabs(((2707.57622238045)*(IKsqrt(x1861)))),-1);
if(!x1869.valid){
continue;
}
if( (((925.0)*pz*(x1869.value))) < -1-IKFAST_SINCOS_THRESH || (((925.0)*pz*(x1869.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1865=((1.0)*(IKasin(((925.0)*pz*(x1869.value)))));
IkReal x1866=(x1859*x1862*x1863);
IkReal x1867=(pz*x1863*x1864);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj4=gconst50;
cj4=gconst51;
CheckValue<IkReal> x1870 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076910047281)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1870.valid){
continue;
}
j4=((3.14159265)+(((-1.0)*(x1870.value)))+(((-1.0)*x1865)));
CheckValue<IkReal> x1871 = IKatan2WithCheck(IkReal(pz),IkReal(((8.27076923076923)*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x1871.valid){
continue;
}
IkReal gconst49=((3.14159265358979)+(((-1.0)*x1865))+(((-1.0)*(x1871.value))));
IkReal gconst50=((((918.312097531275)*x1866))+(((0.12003355521946)*x1867)));
IkReal gconst51=((((-0.992769835168946)*x1867))+(((111.031038578)*x1866)));
IkReal x1872=pz*pz;
IkReal x1873=(cj0*px);
IkReal x1874=(py*sj0);
IkReal x1875=(cj3*pz);
IkReal x1876=((25.0)*pz*sj3);
IkReal x1877=((25.0)*x1872);
j1eval[0]=((IKabs(((((-25.0)*x1873*x1875))+(((-1.0)*sj3*x1877))+(((-25.0)*x1874*x1875))+x1875)))+(IKabs((((x1874*x1876))+(((-1.0)*cj3*x1877))+(((-1.0)*pz*sj3))+((x1873*x1876))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1878=pz*pz;
IkReal x1879=gconst51*gconst51;
IkReal x1880=gconst50*gconst50;
IkReal x1881=(cj3*pz);
IkReal x1882=(py*sj0);
IkReal x1883=(cj3*gconst50);
IkReal x1884=(cj0*px);
IkReal x1885=((0.0325)*gconst51);
IkReal x1886=((0.017472)*gconst51);
IkReal x1887=(pz*sj3);
IkReal x1888=(gconst50*sj3);
IkReal x1889=((0.2688)*gconst50);
IkReal x1890=((0.0060125)*gconst51);
IkReal x1891=((0.00105625)*x1879);
IkReal x1892=((0.07225344)*x1880);
CheckValue<IkReal> x1893=IKPowWithIntegerCheck(IKsign(((-0.0037)+(((-1.0)*x1882*x1889))+(((-1.0)*x1882*x1885))+(((0.0925)*x1882))+(((0.0925)*x1884))+(((-1.0)*x1884*x1885))+(((-1.0)*x1884*x1889))+(((0.0013)*gconst51))+(((0.010752)*gconst50)))),-1);
if(!x1893.valid){
continue;
}
CheckValue<IkReal> x1894 = IKatan2WithCheck(IkReal(((((0.00855625)*cj3))+(((-1.0)*cj3*x1878))+((x1883*x1886))+((x1882*x1887))+(((-0.049728)*x1883))+(((-0.04)*x1887))+((cj3*x1892))+((cj3*x1891))+(((-1.0)*cj3*x1890))+((x1884*x1887)))),IkReal((((x1881*x1882))+((x1881*x1884))+(((-0.00855625)*sj3))+(((-1.0)*sj3*x1892))+(((-1.0)*sj3*x1891))+((sj3*x1890))+((sj3*x1878))+(((-0.04)*x1881))+(((0.049728)*x1888))+(((-1.0)*x1886*x1888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1894.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1893.value)))+(x1894.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1895=IKcos(j1);
IkReal x1896=IKsin(j1);
IkReal x1897=((0.0325)*gconst51);
IkReal x1898=((1.0)*pz);
IkReal x1899=(py*sj0);
IkReal x1900=((0.185)*pz);
IkReal x1901=(cj0*px);
IkReal x1902=((0.2688)*gconst50);
IkReal x1903=(sj3*x1896);
IkReal x1904=(sj3*x1895);
IkReal x1905=(cj3*x1895);
IkReal x1906=(cj3*x1896);
IkReal x1907=(x1901*x1906);
evalcond[0]=((((-0.0925)*x1903))+(((-0.0925)*x1905))+pz+((x1902*x1903))+((x1902*x1905))+((x1897*x1903))+((x1897*x1905)));
evalcond[1]=((0.04)+(((-1.0)*x1902*x1906))+(((0.0925)*x1906))+(((-1.0)*x1901))+(((-0.0925)*x1904))+(((-1.0)*x1899))+((x1902*x1904))+(((-1.0)*x1897*x1906))+((x1897*x1904)));
evalcond[2]=((((-1.0)*x1898*x1904))+(((0.04)*x1905))+(((0.04)*x1903))+((pz*x1906))+(((-1.0)*x1899*x1905))+(((-1.0)*x1899*x1903))+(((-1.0)*x1901*x1905))+(((-1.0)*x1901*x1903)));
evalcond[3]=((0.0925)+((x1901*x1904))+(((-0.04)*x1904))+(((-1.0)*x1898*x1905))+(((-1.0)*x1898*x1903))+(((0.04)*x1906))+(((-1.0)*x1907))+(((-1.0)*x1899*x1906))+((x1899*x1904))+(((-1.0)*x1897))+(((-1.0)*x1902)));
evalcond[4]=((0.05879744)+(((0.185)*x1899*x1906))+(((0.08)*x1899))+(((0.132)*px*sj0))+(((0.08)*x1901))+(((0.185)*x1907))+((x1900*x1905))+((x1900*x1903))+(((-0.185)*x1901*x1904))+(((-1.0)*pp))+(((-0.0074)*x1906))+(((-0.132)*cj0*py))+(((-0.185)*x1899*x1904))+(((0.0074)*x1904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1908=pz*pz;
IkReal x1909=(cj3*pz);
IkReal x1910=(py*sj0);
IkReal x1911=(pz*sj3);
IkReal x1912=(cj0*px);
IkReal x1913=((1.0)*x1908);
CheckValue<IkReal> x1914=IKPowWithIntegerCheck(IKsign(((((0.0325)*gconst51*pz))+(((-0.0925)*pz))+(((0.2688)*gconst50*pz)))),-1);
if(!x1914.valid){
continue;
}
CheckValue<IkReal> x1915 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x1913))+(((0.04)*x1909))+(((-1.0)*x1909*x1912))+(((-1.0)*x1909*x1910)))),IkReal((((x1910*x1911))+((x1911*x1912))+(((-0.04)*x1911))+(((-1.0)*cj3*x1913)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1915.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1914.value)))+(x1915.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1916=IKcos(j1);
IkReal x1917=IKsin(j1);
IkReal x1918=((0.0325)*gconst51);
IkReal x1919=((1.0)*pz);
IkReal x1920=(py*sj0);
IkReal x1921=((0.185)*pz);
IkReal x1922=(cj0*px);
IkReal x1923=((0.2688)*gconst50);
IkReal x1924=(sj3*x1917);
IkReal x1925=(sj3*x1916);
IkReal x1926=(cj3*x1916);
IkReal x1927=(cj3*x1917);
IkReal x1928=(x1922*x1927);
evalcond[0]=(((x1918*x1926))+((x1918*x1924))+((x1923*x1924))+((x1923*x1926))+(((-0.0925)*x1926))+(((-0.0925)*x1924))+pz);
evalcond[1]=((0.04)+(((-1.0)*x1918*x1927))+((x1918*x1925))+(((-1.0)*x1920))+(((-1.0)*x1922))+((x1923*x1925))+(((-0.0925)*x1925))+(((0.0925)*x1927))+(((-1.0)*x1923*x1927)));
evalcond[2]=(((pz*x1927))+(((-1.0)*x1920*x1926))+(((-1.0)*x1920*x1924))+(((-1.0)*x1919*x1925))+(((0.04)*x1924))+(((0.04)*x1926))+(((-1.0)*x1922*x1924))+(((-1.0)*x1922*x1926)));
evalcond[3]=((0.0925)+(((-0.04)*x1925))+(((-1.0)*x1928))+(((-1.0)*x1920*x1927))+(((-1.0)*x1923))+(((-1.0)*x1919*x1924))+(((-1.0)*x1919*x1926))+(((0.04)*x1927))+((x1920*x1925))+(((-1.0)*x1918))+((x1922*x1925)));
evalcond[4]=((0.05879744)+(((-0.0074)*x1927))+((x1921*x1926))+((x1921*x1924))+(((0.132)*px*sj0))+(((0.0074)*x1925))+(((-1.0)*pp))+(((-0.185)*x1922*x1925))+(((-0.132)*cj0*py))+(((0.185)*x1920*x1927))+(((-0.185)*x1920*x1925))+(((0.185)*x1928))+(((0.08)*x1922))+(((0.08)*x1920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
IkReal x1929=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1929);
rxp0_1=(px*r20);
rxp1_0=(r21*x1929);
rxp1_1=(px*r21);
rxp2_0=(r22*x1929);
rxp2_1=(px*r22);
IkReal x1930=cj4*cj4;
IkReal x1931=(cj3*sj4);
IkReal x1932=(cj0*px);
IkReal x1933=((25.0)*cj4);
IkReal x1934=((0.2688)*sj4);
IkReal x1935=(py*sj0);
IkReal x1936=((206.769230769231)*sj4);
IkReal x1937=((0.0325)*cj4);
IkReal x1938=((1747200.0)*cj4);
IkReal x1939=(sj3*sj4);
IkReal x1940=((601250.0)*cj4);
IkReal x1941=((7119719.0)*x1930);
j1eval[0]=((2.84615384615385)+((x1932*x1933))+((x1932*x1936))+((x1935*x1936))+(((-8.27076923076923)*sj4))+((x1933*x1935))+(((-1.0)*cj4))+(((-71.1538461538462)*x1932))+(((-71.1538461538462)*x1935)));
j1eval[1]=IKsign(((0.0037)+((x1934*x1935))+(((-0.0013)*cj4))+((x1932*x1937))+((x1932*x1934))+(((-0.0925)*x1935))+(((-0.0925)*x1932))+((x1935*x1937))+(((-0.010752)*sj4))));
j1eval[2]=((IKabs((((cj3*x1940))+((cj3*x1941))+(((4972800.0)*x1931))+(((-8080969.0)*cj3))+(((-1.0)*x1931*x1938)))))+(IKabs(((((-1.0)*sj3*x1941))+(((-1.0)*sj3*x1940))+(((8080969.0)*sj3))+(((-4972800.0)*x1939))+((x1938*x1939))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1942=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1942);
rxp0_1=(px*r20);
rxp1_0=(r21*x1942);
rxp1_1=(px*r21);
rxp2_0=(r22*x1942);
rxp2_1=(px*r22);
IkReal x1943=cj4*cj4;
IkReal x1944=(cj4*sj4);
j1eval[0]=((13.4402810810811)+(((-11.8415284823285)*x1943))+(((2.90594594594595)*x1944))+(((-8.27076923076923)*sj4))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.08080969)+(((-0.0060125)*cj4))+(((-0.07119719)*x1943))+(((0.017472)*x1944))+(((-0.049728)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1945=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1945);
rxp0_1=(px*r20);
rxp1_0=(r21*x1945);
rxp1_1=(px*r21);
rxp2_0=(r22*x1945);
rxp2_1=(px*r22);
IkReal x1946=(py*sj0);
IkReal x1947=((0.2688)*sj4);
IkReal x1948=(cj0*px);
IkReal x1949=((206.769230769231)*sj4);
IkReal x1950=(cj4*x1948);
j1eval[0]=((-2.84615384615385)+(((8.27076923076923)*sj4))+cj4+(((-1.0)*x1946*x1949))+(((-25.0)*x1950))+(((-25.0)*cj4*x1946))+(((71.1538461538462)*x1948))+(((71.1538461538462)*x1946))+(((-1.0)*x1948*x1949)));
j1eval[1]=IKsign(((-0.0037)+(((-0.0325)*x1950))+(((0.0925)*x1948))+(((0.0925)*x1946))+(((-1.0)*x1947*x1948))+(((0.010752)*sj4))+(((-1.0)*x1946*x1947))+(((0.0013)*cj4))+(((-0.0325)*cj4*x1946))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1951=cj0*cj0;
IkReal x1952=py*py;
IkReal x1953=px*px;
IkReal x1954=(cj0*px);
IkReal x1955=((0.08)*cj3);
IkReal x1956=((0.2688)*sj4);
IkReal x1957=(py*sj0);
IkReal x1958=((0.0325)*cj4);
IkReal x1959=(sj3*x1957);
IkReal x1960=(sj3*x1952);
IkReal x1961=(cj3*x1951);
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal(((((-1.0)*x1954*x1955))+((cj3*x1952))+(((2.0)*cj3*x1954*x1957))+(((0.0016)*cj3))+(((-1.0)*x1955*x1957))+((x1953*x1961))+(((-1.0)*x1952*x1961)))),IkReal(((((-0.0016)*sj3))+(((0.08)*x1959))+((x1951*x1960))+(((-1.0)*x1960))+(((-2.0)*x1954*x1959))+(((-1.0)*sj3*x1951*x1953))+(((0.08)*sj3*x1954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
CheckValue<IkReal> x1963=IKPowWithIntegerCheck(IKsign(((-0.0037)+(((-1.0)*x1957*x1958))+(((-1.0)*x1954*x1958))+(((-1.0)*x1954*x1956))+(((0.0925)*x1957))+(((0.0925)*x1954))+(((0.010752)*sj4))+(((0.0013)*cj4))+(((-1.0)*x1956*x1957)))),-1);
if(!x1963.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1962.value)+(((1.5707963267949)*(x1963.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1964=IKcos(j1);
IkReal x1965=IKsin(j1);
IkReal x1966=((0.0325)*cj4);
IkReal x1967=(py*sj0);
IkReal x1968=(cj0*px);
IkReal x1969=((0.2688)*sj4);
IkReal x1970=(sj3*x1965);
IkReal x1971=(cj3*x1964);
IkReal x1972=(sj3*x1964);
IkReal x1973=(cj3*x1965);
IkReal x1974=(x1968*x1973);
evalcond[0]=(((x1969*x1970))+((x1969*x1971))+(((-0.0925)*x1970))+(((-0.0925)*x1971))+((x1966*x1971))+((x1966*x1970)));
evalcond[1]=((((0.04)*x1971))+(((0.04)*x1970))+(((-1.0)*x1967*x1971))+(((-1.0)*x1967*x1970))+(((-1.0)*x1968*x1970))+(((-1.0)*x1968*x1971)));
evalcond[2]=((0.04)+((x1969*x1972))+(((0.0925)*x1973))+(((-0.0925)*x1972))+(((-1.0)*x1967))+(((-1.0)*x1968))+(((-1.0)*x1966*x1973))+((x1966*x1972))+(((-1.0)*x1969*x1973)));
evalcond[3]=((0.0925)+((x1967*x1972))+(((0.04)*x1973))+(((-1.0)*x1966))+(((-1.0)*x1969))+(((-1.0)*x1974))+(((-0.04)*x1972))+(((-1.0)*x1967*x1973))+((x1968*x1972)));
evalcond[4]=((0.05879744)+(((0.185)*x1974))+(((-1.0)*(px*px)))+(((-0.185)*x1967*x1972))+(((0.132)*px*sj0))+(((0.185)*x1967*x1973))+(((-0.0074)*x1973))+(((-0.185)*x1968*x1972))+(((0.08)*x1968))+(((0.08)*x1967))+(((0.0074)*x1972))+(((-0.132)*cj0*py))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1975=((0.0013)*cj4);
IkReal x1976=(sj3*sj4);
IkReal x1977=((0.2688)*sj4);
IkReal x1978=(py*sj0);
IkReal x1979=((0.0325)*cj4);
IkReal x1980=(cj0*px);
IkReal x1981=((0.0925)*x1980);
IkReal x1982=(cj3*x1978);
CheckValue<IkReal> x1983 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x1979*x1980))+((cj3*x1981))+(((-1.0)*cj3*x1977*x1980))+(((0.0925)*x1982))+(((-1.0)*x1979*x1982))+((cj3*x1975))+(((-0.0037)*cj3))+(((0.010752)*cj3*sj4))+(((-1.0)*x1977*x1982)))),IkReal(((((0.2688)*x1976*x1978))+(((-0.0925)*sj3*x1978))+(((0.2688)*x1976*x1980))+(((0.0037)*sj3))+(((-1.0)*sj3*x1975))+((sj3*x1978*x1979))+(((-0.010752)*x1976))+(((-1.0)*sj3*x1981))+((sj3*x1979*x1980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1983.valid){
continue;
}
CheckValue<IkReal> x1984=IKPowWithIntegerCheck(IKsign(((0.08080969)+(((-0.07119719)*(cj4*cj4)))+(((-0.0060125)*cj4))+(((0.017472)*cj4*sj4))+(((-0.049728)*sj4)))),-1);
if(!x1984.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1983.value)+(((1.5707963267949)*(x1984.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1985=IKcos(j1);
IkReal x1986=IKsin(j1);
IkReal x1987=((0.0325)*cj4);
IkReal x1988=(py*sj0);
IkReal x1989=(cj0*px);
IkReal x1990=((0.2688)*sj4);
IkReal x1991=(sj3*x1986);
IkReal x1992=(cj3*x1985);
IkReal x1993=(sj3*x1985);
IkReal x1994=(cj3*x1986);
IkReal x1995=(x1989*x1994);
evalcond[0]=((((-0.0925)*x1992))+(((-0.0925)*x1991))+((x1990*x1991))+((x1990*x1992))+((x1987*x1991))+((x1987*x1992)));
evalcond[1]=((((-1.0)*x1989*x1992))+(((-1.0)*x1989*x1991))+(((-1.0)*x1988*x1992))+(((-1.0)*x1988*x1991))+(((0.04)*x1992))+(((0.04)*x1991)));
evalcond[2]=((0.04)+(((-0.0925)*x1993))+(((-1.0)*x1987*x1994))+(((-1.0)*x1990*x1994))+(((-1.0)*x1989))+(((-1.0)*x1988))+((x1990*x1993))+((x1987*x1993))+(((0.0925)*x1994)));
evalcond[3]=((0.0925)+(((-1.0)*x1987))+((x1988*x1993))+(((-1.0)*x1990))+(((-1.0)*x1988*x1994))+((x1989*x1993))+(((0.04)*x1994))+(((-1.0)*x1995))+(((-0.04)*x1993)));
evalcond[4]=((0.05879744)+(((-1.0)*(px*px)))+(((0.132)*px*sj0))+(((0.185)*x1988*x1994))+(((-0.185)*x1988*x1993))+(((0.08)*x1989))+(((0.08)*x1988))+(((0.0074)*x1993))+(((-0.132)*cj0*py))+(((-0.185)*x1989*x1993))+(((-1.0)*(py*py)))+(((0.185)*x1995))+(((-0.0074)*x1994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1996=cj4*cj4;
IkReal x1997=(cj0*px);
IkReal x1998=(cj4*sj3);
IkReal x1999=((0.017472)*sj4);
IkReal x2000=((0.0325)*cj4);
IkReal x2001=(py*sj0);
IkReal x2002=((0.2688)*sj4);
IkReal x2003=((0.049728)*sj4);
IkReal x2004=(cj3*cj4);
IkReal x2005=((0.07119719)*x1996);
CheckValue<IkReal> x2006 = IKatan2WithCheck(IkReal(((((-0.08080969)*cj3))+((cj3*x2003))+((cj3*x2005))+(((0.0060125)*x2004))+(((-1.0)*x1999*x2004)))),IkReal(((((-0.0060125)*x1998))+((x1998*x1999))+(((-1.0)*sj3*x2005))+(((-1.0)*sj3*x2003))+(((0.08080969)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2006.valid){
continue;
}
CheckValue<IkReal> x2007=IKPowWithIntegerCheck(IKsign(((0.0037)+(((-0.0925)*x1997))+((x1997*x2002))+((x1997*x2000))+((x2000*x2001))+(((-0.0925)*x2001))+(((-0.0013)*cj4))+(((-0.010752)*sj4))+((x2001*x2002)))),-1);
if(!x2007.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2006.value)+(((1.5707963267949)*(x2007.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2008=IKcos(j1);
IkReal x2009=IKsin(j1);
IkReal x2010=((0.0325)*cj4);
IkReal x2011=(py*sj0);
IkReal x2012=(cj0*px);
IkReal x2013=((0.2688)*sj4);
IkReal x2014=(sj3*x2009);
IkReal x2015=(cj3*x2008);
IkReal x2016=(sj3*x2008);
IkReal x2017=(cj3*x2009);
IkReal x2018=(x2012*x2017);
evalcond[0]=((((-0.0925)*x2014))+(((-0.0925)*x2015))+((x2010*x2014))+((x2010*x2015))+((x2013*x2015))+((x2013*x2014)));
evalcond[1]=((((-1.0)*x2011*x2015))+(((-1.0)*x2011*x2014))+(((0.04)*x2015))+(((0.04)*x2014))+(((-1.0)*x2012*x2015))+(((-1.0)*x2012*x2014)));
evalcond[2]=((0.04)+(((-1.0)*x2010*x2017))+(((-1.0)*x2013*x2017))+(((-0.0925)*x2016))+(((0.0925)*x2017))+((x2010*x2016))+(((-1.0)*x2012))+(((-1.0)*x2011))+((x2013*x2016)));
evalcond[3]=((0.0925)+(((-1.0)*x2013))+(((-1.0)*x2010))+(((-0.04)*x2016))+((x2011*x2016))+(((-1.0)*x2011*x2017))+((x2012*x2016))+(((-1.0)*x2018))+(((0.04)*x2017)));
evalcond[4]=((0.05879744)+(((-1.0)*(px*px)))+(((0.132)*px*sj0))+(((0.0074)*x2016))+(((0.185)*x2018))+(((-0.185)*x2011*x2016))+(((0.08)*x2012))+(((0.08)*x2011))+(((-0.0074)*x2017))+(((-0.132)*cj0*py))+(((-0.185)*x2012*x2016))+(((0.185)*x2011*x2017))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2019=(cj4*sj3);
IkReal x2020=((0.0925)*sj3);
IkReal x2021=(cj0*px);
IkReal x2022=((0.0325)*cj4);
IkReal x2023=(sj3*sj4);
IkReal x2024=((0.2688)*sj4);
IkReal x2025=((0.0925)*cj3);
IkReal x2026=(py*sj0);
IkReal x2027=(cj3*pz);
IkReal x2028=(cj3*x2026);
CheckValue<IkReal> x2029 = IKatan2WithCheck(IkReal(((((-1.0)*x2021*x2025))+((x2024*x2028))+(((0.0325)*pz*x2019))+(((-0.0013)*cj3*cj4))+(((0.0037)*cj3))+(((-1.0)*pz*x2020))+((x2022*x2028))+(((0.2688)*pz*x2023))+(((-1.0)*x2025*x2026))+(((-0.010752)*cj3*sj4))+((cj3*x2021*x2022))+((cj3*x2021*x2024)))),IkReal(((((0.0013)*x2019))+(((0.010752)*x2023))+((x2020*x2021))+((x2020*x2026))+((x2024*x2027))+(((-0.0325)*x2019*x2026))+(((-0.0325)*x2019*x2021))+(((-1.0)*pz*x2025))+((x2022*x2027))+(((-0.2688)*x2023*x2026))+(((-0.0037)*sj3))+(((-0.2688)*x2021*x2023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2029.valid){
continue;
}
CheckValue<IkReal> x2030=IKPowWithIntegerCheck(IKsign(((-0.08080969)+(((0.0060125)*cj4))+(((0.07119719)*(cj4*cj4)))+(((-0.017472)*cj4*sj4))+(((0.049728)*sj4)))),-1);
if(!x2030.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2029.value)+(((1.5707963267949)*(x2030.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2031=IKcos(j1);
IkReal x2032=IKsin(j1);
IkReal x2033=((0.0325)*cj4);
IkReal x2034=(cj0*px);
IkReal x2035=((1.0)*pz);
IkReal x2036=(py*sj0);
IkReal x2037=((0.185)*pz);
IkReal x2038=((0.2688)*sj4);
IkReal x2039=(sj3*x2032);
IkReal x2040=(cj3*x2031);
IkReal x2041=(sj3*x2031);
IkReal x2042=(cj3*x2032);
evalcond[0]=(((x2033*x2039))+((x2033*x2040))+(((-0.0925)*x2039))+((x2038*x2039))+pz+(((-0.0925)*x2040))+((x2038*x2040)));
evalcond[1]=((0.04)+((x2033*x2041))+(((-1.0)*x2036))+(((-1.0)*x2034))+(((-0.0925)*x2041))+(((-1.0)*x2033*x2042))+(((-1.0)*x2038*x2042))+(((0.0925)*x2042))+((x2038*x2041)));
evalcond[2]=((((-1.0)*x2036*x2040))+(((0.04)*x2040))+(((-1.0)*x2034*x2040))+(((-1.0)*x2034*x2039))+((pz*x2042))+(((-1.0)*x2035*x2041))+(((-1.0)*x2036*x2039))+(((0.04)*x2039)));
evalcond[3]=((0.0925)+(((-1.0)*x2035*x2039))+(((-1.0)*x2036*x2042))+(((0.04)*x2042))+(((-1.0)*x2034*x2042))+(((-1.0)*x2033))+(((-1.0)*x2038))+(((-1.0)*x2035*x2040))+((x2034*x2041))+((x2036*x2041))+(((-0.04)*x2041)));
evalcond[4]=((0.05879744)+(((0.0074)*x2041))+((x2037*x2040))+(((0.08)*x2034))+(((0.08)*x2036))+(((0.132)*px*sj0))+(((-0.0074)*x2042))+(((0.185)*x2036*x2042))+(((-1.0)*pp))+(((-0.185)*x2034*x2041))+(((0.185)*x2034*x2042))+(((-0.132)*cj0*py))+(((-0.185)*x2036*x2041))+((x2037*x2039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2043=pz*pz;
IkReal x2044=cj4*cj4;
IkReal x2045=(cj0*px);
IkReal x2046=((0.0060125)*cj4);
IkReal x2047=(cj3*pz);
IkReal x2048=(py*sj0);
IkReal x2049=((0.2688)*sj4);
IkReal x2050=(pz*sj3);
IkReal x2051=((0.0325)*cj4);
IkReal x2052=((0.049728)*sj4);
IkReal x2053=((0.07119719)*x2044);
IkReal x2054=((0.017472)*cj4*sj4);
CheckValue<IkReal> x2055=IKPowWithIntegerCheck(IKsign(((-0.0037)+(((-1.0)*x2045*x2051))+(((-1.0)*x2045*x2049))+(((0.010752)*sj4))+(((-1.0)*x2048*x2051))+(((0.0013)*cj4))+(((-1.0)*x2048*x2049))+(((0.0925)*x2045))+(((0.0925)*x2048)))),-1);
if(!x2055.valid){
continue;
}
CheckValue<IkReal> x2056 = IKatan2WithCheck(IkReal(((((-0.04)*x2050))+(((-1.0)*cj3*x2053))+(((-1.0)*cj3*x2052))+(((-1.0)*cj3*x2046))+(((-1.0)*cj3*x2043))+((x2045*x2050))+((x2048*x2050))+((cj3*x2054))+(((0.08080969)*cj3)))),IkReal(((((-0.08080969)*sj3))+((sj3*x2052))+((sj3*x2053))+(((-1.0)*sj3*x2054))+((x2045*x2047))+((x2047*x2048))+(((-0.04)*x2047))+((sj3*x2043))+((sj3*x2046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2056.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2055.value)))+(x2056.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2057=IKcos(j1);
IkReal x2058=IKsin(j1);
IkReal x2059=((0.0325)*cj4);
IkReal x2060=(cj0*px);
IkReal x2061=((1.0)*pz);
IkReal x2062=(py*sj0);
IkReal x2063=((0.185)*pz);
IkReal x2064=((0.2688)*sj4);
IkReal x2065=(sj3*x2058);
IkReal x2066=(cj3*x2057);
IkReal x2067=(sj3*x2057);
IkReal x2068=(cj3*x2058);
evalcond[0]=(((x2059*x2066))+((x2059*x2065))+pz+((x2064*x2065))+((x2064*x2066))+(((-0.0925)*x2066))+(((-0.0925)*x2065)));
evalcond[1]=((0.04)+(((-1.0)*x2064*x2068))+((x2059*x2067))+(((-1.0)*x2062))+(((-1.0)*x2060))+(((-1.0)*x2059*x2068))+((x2064*x2067))+(((0.0925)*x2068))+(((-0.0925)*x2067)));
evalcond[2]=((((0.04)*x2065))+(((0.04)*x2066))+(((-1.0)*x2060*x2066))+(((-1.0)*x2060*x2065))+(((-1.0)*x2061*x2067))+(((-1.0)*x2062*x2066))+(((-1.0)*x2062*x2065))+((pz*x2068)));
evalcond[3]=((0.0925)+(((0.04)*x2068))+(((-1.0)*x2060*x2068))+(((-1.0)*x2064))+(((-1.0)*x2061*x2065))+(((-1.0)*x2061*x2066))+((x2060*x2067))+(((-1.0)*x2062*x2068))+((x2062*x2067))+(((-1.0)*x2059))+(((-0.04)*x2067)));
evalcond[4]=((0.05879744)+(((-0.185)*x2062*x2067))+(((-0.0074)*x2068))+(((0.08)*x2062))+(((0.08)*x2060))+(((0.132)*px*sj0))+(((0.185)*x2062*x2068))+(((-1.0)*pp))+(((0.185)*x2060*x2068))+(((-0.132)*cj0*py))+((x2063*x2065))+((x2063*x2066))+(((0.0074)*x2067))+(((-0.185)*x2060*x2067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2069=pz*pz;
IkReal x2070=(cj3*pz);
IkReal x2071=(py*sj0);
IkReal x2072=(pz*sj3);
IkReal x2073=(cj0*px);
IkReal x2074=((1.0)*x2069);
CheckValue<IkReal> x2075=IKPowWithIntegerCheck(IKsign(((((0.0325)*cj4*pz))+(((0.2688)*pz*sj4))+(((-0.0925)*pz)))),-1);
if(!x2075.valid){
continue;
}
CheckValue<IkReal> x2076 = IKatan2WithCheck(IkReal(((((-1.0)*x2070*x2073))+(((-1.0)*x2070*x2071))+(((0.04)*x2070))+(((-1.0)*sj3*x2074)))),IkReal(((((-1.0)*cj3*x2074))+((x2071*x2072))+((x2072*x2073))+(((-0.04)*x2072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2076.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2075.value)))+(x2076.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2077=IKcos(j1);
IkReal x2078=IKsin(j1);
IkReal x2079=((0.0325)*cj4);
IkReal x2080=(cj0*px);
IkReal x2081=((1.0)*pz);
IkReal x2082=(py*sj0);
IkReal x2083=((0.185)*pz);
IkReal x2084=((0.2688)*sj4);
IkReal x2085=(sj3*x2078);
IkReal x2086=(cj3*x2077);
IkReal x2087=(sj3*x2077);
IkReal x2088=(cj3*x2078);
evalcond[0]=(((x2084*x2086))+((x2084*x2085))+(((-0.0925)*x2086))+(((-0.0925)*x2085))+pz+((x2079*x2085))+((x2079*x2086)));
evalcond[1]=((0.04)+(((-1.0)*x2080))+(((-1.0)*x2082))+((x2084*x2087))+(((-0.0925)*x2087))+(((-1.0)*x2084*x2088))+(((0.0925)*x2088))+(((-1.0)*x2079*x2088))+((x2079*x2087)));
evalcond[2]=((((-1.0)*x2082*x2086))+(((-1.0)*x2082*x2085))+((pz*x2088))+(((-1.0)*x2081*x2087))+(((0.04)*x2085))+(((0.04)*x2086))+(((-1.0)*x2080*x2085))+(((-1.0)*x2080*x2086)));
evalcond[3]=((0.0925)+(((-1.0)*x2082*x2088))+(((-1.0)*x2084))+(((-1.0)*x2079))+(((-0.04)*x2087))+(((-1.0)*x2081*x2086))+(((-1.0)*x2081*x2085))+(((0.04)*x2088))+((x2082*x2087))+((x2080*x2087))+(((-1.0)*x2080*x2088)));
evalcond[4]=((0.05879744)+(((0.132)*px*sj0))+(((0.185)*x2080*x2088))+(((-1.0)*pp))+((x2083*x2086))+((x2083*x2085))+(((0.08)*x2080))+(((0.08)*x2082))+(((0.0074)*x2087))+(((-0.0074)*x2088))+(((-0.132)*cj0*py))+(((-0.185)*x2080*x2087))+(((0.185)*x2082*x2088))+(((-0.185)*x2082*x2087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2089=((25.0)*cj4);
IkReal x2090=(cj0*px);
IkReal x2091=(pz*sj2);
IkReal x2092=(py*sj0);
IkReal x2093=((206.769230769231)*sj4);
IkReal x2094=((0.0325)*cj4);
IkReal x2095=((0.2688)*sj4);
j1eval[0]=((2.84615384615385)+(((25.0)*sj4*x2091))+(((-165.461538461538)*x2091))+(((-71.1538461538462)*x2090))+(((-71.1538461538462)*x2092))+((x2090*x2093))+((x2089*x2092))+((x2089*x2090))+((x2092*x2093))+(((-8.27076923076923)*sj4))+(((-206.769230769231)*cj4*x2091))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.0037)+(((0.0325)*sj4*x2091))+(((-0.0925)*x2092))+(((-0.0925)*x2090))+(((-0.0013)*cj4))+(((-0.2688)*cj4*x2091))+((x2090*x2094))+((x2090*x2095))+((x2092*x2094))+((x2092*x2095))+(((-0.2151)*x2091))+(((-0.010752)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2096=((0.2688)*cj4);
IkReal x2097=((25.0)*sj4);
IkReal x2098=((0.0325)*sj4);
IkReal x2099=(pz*sj4);
IkReal x2100=((206.769230769231)*cj4);
IkReal x2101=(cj4*pz);
IkReal x2102=(sj2*sj4);
IkReal x2103=(cj4*sj2);
IkReal x2104=(py*sj0*sj2);
IkReal x2105=(cj0*px*sj2);
j1eval[0]=((((-6.61846153846154)*sj2))+(((165.461538461538)*x2105))+(((165.461538461538)*x2104))+(((-1.0)*x2097*x2104))+(((-1.0)*x2097*x2105))+(((-8.27076923076923)*x2103))+x2102+(((25.0)*x2101))+((x2100*x2105))+((x2100*x2104))+(((206.769230769231)*x2099))+(((-71.1538461538462)*pz)));
j1eval[1]=IKsign(((((0.2151)*x2104))+(((0.2151)*x2105))+(((-0.010752)*x2103))+(((0.0013)*x2102))+(((0.2688)*x2099))+(((-0.0925)*pz))+(((-0.008604)*sj2))+((x2096*x2104))+((x2096*x2105))+(((-1.0)*x2098*x2105))+(((-1.0)*x2098*x2104))+(((0.0325)*x2101))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2106=cj0*cj0;
IkReal x2107=py*py;
IkReal x2108=px*px;
IkReal x2109=pz*pz;
IkReal x2110=(py*sj0);
IkReal x2111=(cj0*cj2*px);
IkReal x2112=(cj2*x2106);
IkReal x2113=((12.5)*x2107);
IkReal x2114=(cj2*x2109);
j1eval[0]=((((-1.0)*x2112*x2113))+(((-1.0)*cj2*x2110))+(((0.02)*cj2))+(((25.0)*x2110*x2111))+(((12.5)*x2108*x2112))+(((-1.0)*x2111))+(((12.5)*x2114))+((cj2*x2113)));
j1eval[1]=IKsign(((((-0.08)*cj2*x2110))+x2114+(((-0.08)*x2111))+(((0.0016)*cj2))+((cj2*x2107))+(((2.0)*x2110*x2111))+(((-1.0)*x2107*x2112))+((x2108*x2112))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x2115=(py*sj0);
IkReal x2116=((0.0325)*sj4);
IkReal x2117=(pz*sj4);
IkReal x2118=((0.2688)*cj4);
IkReal x2119=(cj4*pz);
IkReal x2120=(cj0*px);
IkReal x2121=((25.0)*sj4);
IkReal x2122=((206.769230769231)*cj4);
j1eval[0]=((6.61846153846154)+(((-165.461538461538)*x2120))+(((-1.0)*sj4))+(((-206.769230769231)*x2117))+(((-1.0)*x2120*x2122))+((x2115*x2121))+((x2120*x2121))+(((-1.0)*x2115*x2122))+(((-165.461538461538)*x2115))+(((71.1538461538462)*pz))+(((8.27076923076923)*cj4))+(((-25.0)*x2119)));
j1eval[1]=IKsign(((0.008604)+(((-0.2151)*x2115))+(((-0.0013)*sj4))+(((-0.2688)*x2117))+(((-1.0)*x2118*x2120))+(((-0.0325)*x2119))+(((-0.2151)*x2120))+(((0.0925)*pz))+((x2115*x2116))+(((-1.0)*x2115*x2118))+((x2116*x2120))+(((0.010752)*cj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x2123=(cj0*px);
IkReal x2124=((25.0)*cj4);
IkReal x2125=(cj4*pz);
IkReal x2126=((0.2688)*sj4);
IkReal x2127=(pz*sj4);
IkReal x2128=(py*sj0);
IkReal x2129=((206.769230769231)*sj4);
IkReal x2130=((0.0325)*cj4);
j1eval[0]=((2.84615384615385)+((x2123*x2129))+((x2123*x2124))+(((-71.1538461538462)*x2123))+(((-71.1538461538462)*x2128))+((x2128*x2129))+(((25.0)*x2127))+(((-165.461538461538)*pz))+(((-206.769230769231)*x2125))+((x2124*x2128))+(((-8.27076923076923)*sj4))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.0037)+(((-0.2688)*x2125))+((x2123*x2126))+(((-0.0013)*cj4))+(((-0.2151)*pz))+((x2128*x2130))+(((-0.010752)*sj4))+((x2123*x2130))+((x2126*x2128))+(((-0.0925)*x2123))+(((-0.0925)*x2128))+(((0.0325)*x2127))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=((-2.01122203125123)+sj4+(((-1.72070507538122)*cj4)));
j1eval[1]=IKsign(((-0.12813395)+(((-0.10962526)*cj4))+(((0.0637095)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2131=(py*sj0);
IkReal x2132=((0.0325)*sj4);
IkReal x2133=((0.2688)*cj4);
IkReal x2134=((0.2688)*sj4);
IkReal x2135=(cj0*px);
IkReal x2136=((0.0325)*cj4);
CheckValue<IkReal> x2137=IKPowWithIntegerCheck(IKsign(((-0.12813395)+(((-0.10962526)*cj4))+(((0.0637095)*sj4)))),-1);
if(!x2137.valid){
continue;
}
CheckValue<IkReal> x2138 = IKatan2WithCheck(IkReal(((0.008604)+(((-0.0013)*sj4))+((x2131*x2132))+((pz*x2134))+((pz*x2136))+(((-0.0925)*pz))+(((-1.0)*x2133*x2135))+((x2132*x2135))+(((-1.0)*x2131*x2133))+(((0.010752)*cj4))+(((-0.2151)*x2135))+(((-0.2151)*x2131)))),IkReal(((-0.0037)+(((-1.0)*x2134*x2135))+(((-1.0)*x2135*x2136))+(((0.010752)*sj4))+((pz*x2132))+(((-0.2151)*pz))+(((0.0013)*cj4))+(((0.0925)*x2135))+(((0.0925)*x2131))+(((-1.0)*x2131*x2134))+(((-1.0)*x2131*x2136))+(((-1.0)*pz*x2133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2138.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2137.value)))+(x2138.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2139=IKcos(j1);
IkReal x2140=IKsin(j1);
IkReal x2141=(cj0*px);
IkReal x2142=(py*sj0);
IkReal x2143=((0.2688)*cj4);
IkReal x2144=((0.0325)*cj4);
IkReal x2145=((0.0325)*sj4);
IkReal x2146=((0.2688)*sj4);
IkReal x2147=((1.0)*x2140);
IkReal x2148=(sj4*x2140);
IkReal x2149=(pz*x2139);
IkReal x2150=((0.185)*x2139);
IkReal x2151=((0.4302)*x2140);
evalcond[0]=((0.0925)+(((-1.0)*x2144))+(((-1.0)*x2146))+(((-1.0)*pz*x2147))+(((-0.04)*x2139))+((x2139*x2141))+((x2139*x2142)));
evalcond[1]=((0.2151)+(((0.04)*x2140))+(((-1.0)*x2149))+(((-1.0)*x2142*x2147))+x2143+(((-1.0)*x2145))+(((-1.0)*x2141*x2147)));
evalcond[2]=((((-0.0925)*x2140))+((x2140*x2146))+((x2140*x2144))+pz+(((-1.0)*x2139*x2143))+((x2139*x2145))+(((-0.2151)*x2139)));
evalcond[3]=((0.04)+(((-1.0)*x2141))+(((-1.0)*x2142))+(((0.2151)*x2140))+((x2140*x2143))+(((-1.0)*x2140*x2145))+(((-0.0925)*x2139))+((x2139*x2144))+((x2139*x2146)));
evalcond[4]=((-0.00534538)+(((-1.0)*x2141*x2150))+(((-0.2982)*px*sj0))+(((-1.0)*x2142*x2150))+(((-0.017208)*x2140))+(((0.4302)*x2149))+((x2142*x2151))+(((0.08)*x2142))+(((0.08)*x2141))+(((0.0074)*x2139))+(((0.2982)*cj0*py))+((x2141*x2151))+(((-1.0)*pp))+(((0.185)*pz*x2140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2152=cj4*cj4;
IkReal x2153=(cj0*px);
IkReal x2154=((0.2688)*sj4);
IkReal x2155=(cj4*sj4);
IkReal x2156=((0.0325)*cj4);
IkReal x2157=(py*sj0);
IkReal x2158=((1.0)*pz);
CheckValue<IkReal> x2159=IKPowWithIntegerCheck(IKsign(((0.0037)+(((-0.2688)*cj4*pz))+((x2154*x2157))+(((-0.0013)*cj4))+((x2156*x2157))+(((-0.0925)*x2157))+(((-0.0925)*x2153))+(((-0.2151)*pz))+(((-0.010752)*sj4))+((x2153*x2154))+((x2153*x2156))+(((0.0325)*pz*sj4)))),-1);
if(!x2159.valid){
continue;
}
CheckValue<IkReal> x2160 = IKatan2WithCheck(IkReal(((-0.02863275)+(((0.04)*pz))+(((-0.01787325)*cj4))+(((0.06082513)*sj4))+(((-1.0)*x2157*x2158))+(((0.017472)*x2152))+(((-1.0)*x2153*x2158))+(((0.07119719)*x2155)))),IkReal(((0.08080969)+(((-0.07119719)*x2152))+(((-0.0060125)*cj4))+(((0.017472)*x2155))+(((-1.0)*pz*x2158))+(((-0.049728)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2160.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2159.value)))+(x2160.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2161=IKcos(j1);
IkReal x2162=IKsin(j1);
IkReal x2163=(cj0*px);
IkReal x2164=(py*sj0);
IkReal x2165=((0.2688)*cj4);
IkReal x2166=((0.0325)*cj4);
IkReal x2167=((0.0325)*sj4);
IkReal x2168=((0.2688)*sj4);
IkReal x2169=((1.0)*x2162);
IkReal x2170=(sj4*x2162);
IkReal x2171=(pz*x2161);
IkReal x2172=((0.185)*x2161);
IkReal x2173=((0.4302)*x2162);
evalcond[0]=((0.0925)+(((-1.0)*pz*x2169))+((x2161*x2164))+((x2161*x2163))+(((-0.04)*x2161))+(((-1.0)*x2168))+(((-1.0)*x2166)));
evalcond[1]=((0.2151)+(((-1.0)*x2163*x2169))+(((0.04)*x2162))+x2165+(((-1.0)*x2164*x2169))+(((-1.0)*x2171))+(((-1.0)*x2167)));
evalcond[2]=((((-0.2151)*x2161))+(((-1.0)*x2161*x2165))+((x2161*x2167))+pz+(((-0.0925)*x2162))+((x2162*x2166))+((x2162*x2168)));
evalcond[3]=((0.04)+(((0.2151)*x2162))+((x2161*x2168))+((x2161*x2166))+(((-0.0925)*x2161))+((x2162*x2165))+(((-1.0)*x2163))+(((-1.0)*x2164))+(((-1.0)*x2162*x2167)));
evalcond[4]=((-0.00534538)+((x2163*x2173))+(((-0.2982)*px*sj0))+(((0.185)*pz*x2162))+((x2164*x2173))+(((-1.0)*x2163*x2172))+(((0.0074)*x2161))+(((-1.0)*x2164*x2172))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.017208)*x2162))+(((0.08)*x2164))+(((0.08)*x2163))+(((0.4302)*x2171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2174=cj4*cj4;
IkReal x2175=(py*sj0);
IkReal x2176=((0.0325)*sj4);
IkReal x2177=((0.2688)*cj4);
IkReal x2178=(cj4*sj4);
IkReal x2179=(cj0*px);
IkReal x2180=((1.0)*pz);
CheckValue<IkReal> x2181=IKPowWithIntegerCheck(IKsign(((0.008604)+(((-0.0013)*sj4))+(((-0.0325)*cj4*pz))+(((-0.2151)*x2179))+(((-0.2151)*x2175))+(((-0.2688)*pz*sj4))+((x2176*x2179))+(((0.0925)*pz))+((x2175*x2176))+(((-1.0)*x2175*x2177))+(((-1.0)*x2177*x2179))+(((0.010752)*cj4)))),-1);
if(!x2181.valid){
continue;
}
CheckValue<IkReal> x2182 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((0.017472)*x2178))+(((0.0139815)*sj4))+(pz*pz)+(((-0.07119719)*x2174)))),IkReal(((0.02863275)+(((0.04)*pz))+(((0.01787325)*cj4))+(((-1.0)*x2175*x2180))+(((-0.06082513)*sj4))+(((-0.07119719)*x2178))+(((-0.017472)*x2174))+(((-1.0)*x2179*x2180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2182.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2181.value)))+(x2182.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2183=IKcos(j1);
IkReal x2184=IKsin(j1);
IkReal x2185=(cj0*px);
IkReal x2186=(py*sj0);
IkReal x2187=((0.2688)*cj4);
IkReal x2188=((0.0325)*cj4);
IkReal x2189=((0.0325)*sj4);
IkReal x2190=((0.2688)*sj4);
IkReal x2191=((1.0)*x2184);
IkReal x2192=(sj4*x2184);
IkReal x2193=(pz*x2183);
IkReal x2194=((0.185)*x2183);
IkReal x2195=((0.4302)*x2184);
evalcond[0]=((0.0925)+(((-0.04)*x2183))+(((-1.0)*pz*x2191))+((x2183*x2186))+((x2183*x2185))+(((-1.0)*x2188))+(((-1.0)*x2190)));
evalcond[1]=((0.2151)+(((-1.0)*x2193))+(((-1.0)*x2186*x2191))+x2187+(((-1.0)*x2185*x2191))+(((-1.0)*x2189))+(((0.04)*x2184)));
evalcond[2]=((((-0.0925)*x2184))+((x2183*x2189))+(((-0.2151)*x2183))+pz+(((-1.0)*x2183*x2187))+((x2184*x2188))+((x2184*x2190)));
evalcond[3]=((0.04)+(((-0.0925)*x2183))+(((-1.0)*x2185))+(((-1.0)*x2186))+((x2183*x2188))+((x2183*x2190))+(((-1.0)*x2184*x2189))+(((0.2151)*x2184))+((x2184*x2187)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+((x2186*x2195))+(((-1.0)*x2186*x2194))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-1.0)*x2185*x2194))+(((0.08)*x2186))+(((0.08)*x2185))+(((0.185)*pz*x2184))+(((0.0074)*x2183))+((x2185*x2195))+(((0.4302)*x2193))+(((-0.017208)*x2184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2196=(cj4*pz);
IkReal x2197=(py*sj0);
IkReal x2198=((0.0325)*sj4);
IkReal x2199=((25.0)*sj4);
IkReal x2200=(cj0*px);
IkReal x2201=((0.2688)*cj4);
IkReal x2202=((206.769230769231)*cj4);
IkReal x2203=(pz*sj4);
j1eval[0]=((-6.61846153846154)+(((-206.769230769231)*x2203))+(((-8.27076923076923)*cj4))+sj4+(((-25.0)*x2196))+((x2200*x2202))+(((-1.0)*x2197*x2199))+(((71.1538461538462)*pz))+(((165.461538461538)*x2200))+(((-1.0)*x2199*x2200))+(((165.461538461538)*x2197))+((x2197*x2202)));
j1eval[1]=IKsign(((-0.008604)+(((-0.2688)*x2203))+(((-0.0325)*x2196))+((x2200*x2201))+(((-1.0)*x2197*x2198))+(((0.0925)*pz))+(((0.2151)*x2200))+(((-1.0)*x2198*x2200))+(((0.2151)*x2197))+(((-0.010752)*cj4))+((x2197*x2201))+(((0.0013)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2204=(cj0*px);
IkReal x2205=((25.0)*cj4);
IkReal x2206=(cj4*pz);
IkReal x2207=((0.2688)*sj4);
IkReal x2208=(pz*sj4);
IkReal x2209=(py*sj0);
IkReal x2210=((206.769230769231)*sj4);
IkReal x2211=((0.0325)*cj4);
j1eval[0]=((2.84615384615385)+(((165.461538461538)*pz))+(((-71.1538461538462)*x2209))+(((-71.1538461538462)*x2204))+((x2204*x2205))+((x2205*x2209))+((x2204*x2210))+(((-25.0)*x2208))+(((206.769230769231)*x2206))+(((-8.27076923076923)*sj4))+((x2209*x2210))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.0037)+(((-0.0013)*cj4))+(((0.2688)*x2206))+(((-0.0925)*x2204))+(((-0.0925)*x2209))+((x2204*x2207))+((x2204*x2211))+(((-0.0325)*x2208))+(((-0.010752)*sj4))+((x2207*x2209))+((x2209*x2211))+(((0.2151)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2212=cj0*cj0;
IkReal x2213=py*py;
IkReal x2214=pz*pz;
IkReal x2215=px*px;
IkReal x2216=(py*sj0);
IkReal x2217=(cj0*px);
IkReal x2218=(x2212*x2213);
IkReal x2219=(x2212*x2215);
j1eval[0]=((1.0)+(((-625.0)*x2218))+(((1250.0)*x2216*x2217))+(((625.0)*x2213))+(((625.0)*x2214))+(((625.0)*x2219))+(((-50.0)*x2216))+(((-50.0)*x2217)));
j1eval[1]=IKsign(((0.0016)+(((-1.0)*x2218))+x2213+x2214+x2219+(((2.0)*x2216*x2217))+(((-0.08)*x2217))+(((-0.08)*x2216))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2220=cj0*cj0;
IkReal x2221=py*py;
IkReal x2222=(py*sj0);
IkReal x2223=((0.0325)*sj4);
IkReal x2224=((0.2688)*cj4);
IkReal x2225=((0.2688)*sj4);
IkReal x2226=(cj0*px);
IkReal x2227=((0.0325)*cj4);
CheckValue<IkReal> x2228 = IKatan2WithCheck(IkReal(((0.008604)+(((-1.0)*x2222*x2224))+(((-0.0013)*sj4))+(((-1.0)*pz*x2225))+(((-1.0)*pz*x2227))+(((-1.0)*x2224*x2226))+((x2222*x2223))+(((0.0925)*pz))+(((-0.2151)*x2226))+(((-0.2151)*x2222))+((x2223*x2226))+(((0.010752)*cj4)))),IkReal(((0.0037)+((x2226*x2227))+(((-1.0)*pz*x2224))+(((-0.0013)*cj4))+((x2225*x2226))+((x2222*x2225))+((x2222*x2227))+(((-0.2151)*pz))+(((-0.0925)*x2226))+(((-0.0925)*x2222))+(((-0.010752)*sj4))+((pz*x2223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2228.valid){
continue;
}
CheckValue<IkReal> x2229=IKPowWithIntegerCheck(IKsign(((0.0016)+x2221+(((-1.0)*x2220*x2221))+(((-0.08)*x2222))+(((-0.08)*x2226))+(((2.0)*x2222*x2226))+(pz*pz)+((x2220*(px*px))))),-1);
if(!x2229.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2228.value)+(((1.5707963267949)*(x2229.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2230=IKsin(j1);
IkReal x2231=IKcos(j1);
IkReal x2232=((0.0325)*sj4);
IkReal x2233=(py*sj0);
IkReal x2234=((0.2688)*sj4);
IkReal x2235=((0.2688)*cj4);
IkReal x2236=((0.0325)*cj4);
IkReal x2237=(cj0*px);
IkReal x2238=(pz*x2231);
IkReal x2239=(pz*x2230);
IkReal x2240=((0.4302)*x2230);
IkReal x2241=(x2231*x2237);
evalcond[0]=((0.2151)+x2238+x2235+(((-0.04)*x2230))+(((-1.0)*x2232))+((x2230*x2237))+((x2230*x2233)));
evalcond[1]=((0.0925)+x2241+(((-0.04)*x2231))+(((-1.0)*x2236))+(((-1.0)*x2234))+(((-1.0)*x2239))+((x2231*x2233)));
evalcond[2]=(((x2230*x2236))+((x2230*x2234))+(((-0.0925)*x2230))+pz+((x2231*x2235))+(((-1.0)*x2231*x2232))+(((0.2151)*x2231)));
evalcond[3]=((0.04)+((x2230*x2232))+(((-0.0925)*x2231))+(((-1.0)*x2233))+(((-1.0)*x2237))+(((-0.2151)*x2230))+((x2231*x2234))+((x2231*x2236))+(((-1.0)*x2230*x2235)));
evalcond[4]=((-0.00534538)+(((-1.0)*x2237*x2240))+(((-0.2982)*px*sj0))+(((0.0074)*x2231))+(((-1.0)*x2233*x2240))+(((-0.4302)*x2238))+(((-0.185)*x2241))+(((0.017208)*x2230))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.08)*x2233))+(((0.08)*x2237))+(((-0.185)*x2231*x2233))+(((0.185)*x2239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2242=cj4*cj4;
IkReal x2243=(cj0*px);
IkReal x2244=((0.2688)*sj4);
IkReal x2245=(cj4*sj4);
IkReal x2246=((0.0325)*cj4);
IkReal x2247=(py*sj0);
IkReal x2248=((1.0)*pz);
CheckValue<IkReal> x2249 = IKatan2WithCheck(IkReal(((0.02863275)+(((0.04)*pz))+(((0.01787325)*cj4))+(((-0.07119719)*x2245))+(((-1.0)*x2247*x2248))+(((-0.06082513)*sj4))+(((-1.0)*x2243*x2248))+(((-0.017472)*x2242)))),IkReal(((0.08080969)+(((-0.07119719)*x2242))+(((-0.0060125)*cj4))+(((-0.049728)*sj4))+(((-1.0)*pz*x2248))+(((0.017472)*x2245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2249.valid){
continue;
}
CheckValue<IkReal> x2250=IKPowWithIntegerCheck(IKsign(((0.0037)+(((-0.0325)*pz*sj4))+((x2243*x2246))+((x2243*x2244))+((x2246*x2247))+(((-0.0013)*cj4))+((x2244*x2247))+(((0.2688)*cj4*pz))+(((-0.010752)*sj4))+(((-0.0925)*x2247))+(((-0.0925)*x2243))+(((0.2151)*pz)))),-1);
if(!x2250.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2249.value)+(((1.5707963267949)*(x2250.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2251=IKsin(j1);
IkReal x2252=IKcos(j1);
IkReal x2253=((0.0325)*sj4);
IkReal x2254=(py*sj0);
IkReal x2255=((0.2688)*sj4);
IkReal x2256=((0.2688)*cj4);
IkReal x2257=((0.0325)*cj4);
IkReal x2258=(cj0*px);
IkReal x2259=(pz*x2252);
IkReal x2260=(pz*x2251);
IkReal x2261=((0.4302)*x2251);
IkReal x2262=(x2252*x2258);
evalcond[0]=((0.2151)+(((-0.04)*x2251))+x2259+x2256+(((-1.0)*x2253))+((x2251*x2258))+((x2251*x2254)));
evalcond[1]=((0.0925)+(((-0.04)*x2252))+x2262+((x2252*x2254))+(((-1.0)*x2255))+(((-1.0)*x2257))+(((-1.0)*x2260)));
evalcond[2]=(((x2252*x2256))+(((-1.0)*x2252*x2253))+pz+(((0.2151)*x2252))+((x2251*x2257))+((x2251*x2255))+(((-0.0925)*x2251)));
evalcond[3]=((0.04)+(((-0.2151)*x2251))+(((-1.0)*x2254))+(((-1.0)*x2258))+((x2252*x2257))+((x2252*x2255))+((x2251*x2253))+(((-1.0)*x2251*x2256))+(((-0.0925)*x2252)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((-0.185)*x2262))+(((-1.0)*x2254*x2261))+(((0.0074)*x2252))+(((0.017208)*x2251))+(((-1.0)*x2258*x2261))+(((0.08)*x2254))+(((0.08)*x2258))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.4302)*x2259))+(((0.185)*x2260))+(((-0.185)*x2252*x2254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2263=cj4*cj4;
IkReal x2264=((0.0325)*sj4);
IkReal x2265=(cj0*px);
IkReal x2266=(py*sj0);
IkReal x2267=((0.2688)*cj4);
IkReal x2268=(cj4*sj4);
IkReal x2269=((1.0)*pz);
CheckValue<IkReal> x2270=IKPowWithIntegerCheck(IKsign(((-0.008604)+(((0.2151)*x2266))+(((0.2151)*x2265))+(((-0.0325)*cj4*pz))+(((-0.2688)*pz*sj4))+(((0.0925)*pz))+(((-0.010752)*cj4))+((x2266*x2267))+((x2265*x2267))+(((0.0013)*sj4))+(((-1.0)*x2264*x2266))+(((-1.0)*x2264*x2265)))),-1);
if(!x2270.valid){
continue;
}
CheckValue<IkReal> x2271 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((-0.07119719)*x2263))+(((0.017472)*x2268))+(((0.0139815)*sj4))+(pz*pz))),IkReal(((-0.02863275)+(((0.04)*pz))+(((-0.01787325)*cj4))+(((0.06082513)*sj4))+(((0.017472)*x2263))+(((-1.0)*x2265*x2269))+(((0.07119719)*x2268))+(((-1.0)*x2266*x2269)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2271.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2270.value)))+(x2271.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2272=IKsin(j1);
IkReal x2273=IKcos(j1);
IkReal x2274=((0.0325)*sj4);
IkReal x2275=(py*sj0);
IkReal x2276=((0.2688)*sj4);
IkReal x2277=((0.2688)*cj4);
IkReal x2278=((0.0325)*cj4);
IkReal x2279=(cj0*px);
IkReal x2280=(pz*x2273);
IkReal x2281=(pz*x2272);
IkReal x2282=((0.4302)*x2272);
IkReal x2283=(x2273*x2279);
evalcond[0]=((0.2151)+x2280+x2277+(((-0.04)*x2272))+((x2272*x2279))+((x2272*x2275))+(((-1.0)*x2274)));
evalcond[1]=((0.0925)+((x2273*x2275))+x2283+(((-1.0)*x2281))+(((-0.04)*x2273))+(((-1.0)*x2276))+(((-1.0)*x2278)));
evalcond[2]=(((x2273*x2277))+(((0.2151)*x2273))+(((-1.0)*x2273*x2274))+(((-0.0925)*x2272))+pz+((x2272*x2278))+((x2272*x2276)));
evalcond[3]=((0.04)+((x2273*x2276))+((x2273*x2278))+(((-0.0925)*x2273))+(((-0.2151)*x2272))+((x2272*x2274))+(((-1.0)*x2272*x2277))+(((-1.0)*x2279))+(((-1.0)*x2275)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((0.185)*x2281))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-1.0)*x2279*x2282))+(((0.017208)*x2272))+(((-0.4302)*x2280))+(((-0.185)*x2283))+(((-0.185)*x2273*x2275))+(((-1.0)*x2275*x2282))+(((0.08)*x2275))+(((0.08)*x2279))+(((0.0074)*x2273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2284=cj0*cj0;
IkReal x2285=px*px;
IkReal x2286=py*py;
IkReal x2287=(py*sj2);
IkReal x2288=((0.2688)*sj4);
IkReal x2289=(px*sj2);
IkReal x2290=(cj2*pz);
IkReal x2291=((0.0325)*cj4);
IkReal x2292=((1.0)*sj0);
IkReal x2293=(cj0*sj2);
IkReal x2294=(cj2*x2286);
IkReal x2295=(cj0*cj2*px);
IkReal x2296=(cj2*py*sj0);
CheckValue<IkReal> x2297 = IKatan2WithCheck(IkReal(((((0.005964)*sj2))+(((0.0925)*x2290))+(((-0.04)*cj0*x2287))+(((-0.1491)*sj0*x2287))+(((-1.0)*x2288*x2290))+((sj0*x2286*x2293))+(((-1.0)*x2285*x2292*x2293))+(((-0.1491)*cj0*x2289))+(((0.04)*sj0*x2289))+(((-1.0)*x2290*x2291))+(((2.0)*px*x2284*x2287))+(((-1.0)*px*x2287)))),IkReal(((((-1.0)*pz*x2289*x2292))+((x2291*x2295))+((x2291*x2296))+(((0.0037)*cj2))+(((-0.0925)*x2296))+(((-0.0925)*x2295))+(((-0.010752)*cj2*sj4))+((cj0*pz*x2287))+(((-0.0013)*cj2*cj4))+(((-0.1491)*pz*sj2))+((x2288*x2296))+((x2288*x2295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2297.valid){
continue;
}
CheckValue<IkReal> x2298=IKPowWithIntegerCheck(IKsign(((((-0.08)*x2296))+(((-0.08)*x2295))+((pz*x2290))+x2294+(((2.0)*py*sj0*x2295))+(((0.0016)*cj2))+(((-1.0)*x2284*x2294))+((cj2*x2284*x2285)))),-1);
if(!x2298.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2297.value)+(((1.5707963267949)*(x2298.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2299=IKcos(j1);
IkReal x2300=IKsin(j1);
IkReal x2301=(px*sj2);
IkReal x2302=((0.4302)*cj0);
IkReal x2303=(cj0*py);
IkReal x2304=((0.2688)*sj4);
IkReal x2305=(cj2*py);
IkReal x2306=(py*sj0);
IkReal x2307=((0.0325)*cj4);
IkReal x2308=(cj0*px);
IkReal x2309=((0.2688)*cj4);
IkReal x2310=((0.0325)*sj4);
IkReal x2311=(px*sj0);
IkReal x2312=(sj2*x2300);
IkReal x2313=(sj2*x2299);
IkReal x2314=((1.0)*x2300);
IkReal x2315=(cj2*x2300);
IkReal x2316=(x2299*x2308);
evalcond[0]=((0.0925)+(((-1.0)*pz*x2314))+x2316+(((-0.04)*x2299))+(((-1.0)*x2307))+(((-1.0)*x2304))+((x2299*x2306)));
evalcond[1]=(((x2300*x2307))+((x2300*x2304))+(((-0.2151)*x2313))+(((-1.0)*x2309*x2313))+pz+(((-0.0925)*x2300))+((x2310*x2313)));
evalcond[2]=(((sj0*x2300*x2305))+((sj0*x2301))+((x2308*x2315))+(((-0.04)*x2315))+(((0.1491)*sj2))+(((-1.0)*sj2*x2303))+((cj2*pz*x2299)));
evalcond[3]=((0.04)+(((-1.0)*x2308))+(((-1.0)*x2306))+(((0.2151)*x2312))+((x2309*x2312))+(((-1.0)*x2310*x2312))+((x2299*x2304))+((x2299*x2307))+(((-0.0925)*x2299)));
evalcond[4]=((0.2151)+(((-1.0)*cj0*x2301*x2314))+((cj2*x2311))+x2309+(((0.1491)*cj2))+(((-1.0)*x2306*x2312))+(((-1.0)*pz*x2313))+(((0.04)*x2312))+(((-1.0)*x2310))+(((-1.0)*cj2*x2303)));
evalcond[5]=((-0.00534538)+(((-0.2982)*x2311))+(((-0.4302)*cj2*x2311))+(((0.0074)*x2299))+(((-0.185)*x2299*x2306))+(((-0.185)*x2316))+(((0.2982)*x2303))+(((-0.017208)*x2312))+(((0.185)*pz*x2300))+(((0.4302)*pz*x2313))+(((0.4302)*x2306*x2312))+((x2300*x2301*x2302))+(((-1.0)*pp))+(((0.08)*x2308))+(((0.08)*x2306))+(((-0.06414282)*cj2))+((x2302*x2305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2317=cj0*cj0;
IkReal x2318=py*py;
IkReal x2319=cj4*cj4;
IkReal x2320=(cj4*sj2);
IkReal x2321=((0.0325)*sj4);
IkReal x2322=(cj0*px);
IkReal x2323=(py*sj0);
IkReal x2324=(sj2*sj4);
IkReal x2325=(sj2*x2323);
CheckValue<IkReal> x2326 = IKatan2WithCheck(IkReal(((-0.07920969)+((x2317*(px*px)))+(((0.0060125)*cj4))+x2318+(((-1.0)*x2317*x2318))+(((-0.017472)*cj4*sj4))+(((2.0)*x2322*x2323))+(((0.049728)*sj4))+(((0.07119719)*x2319))+(((-0.08)*x2323))+(((-0.08)*x2322)))),IkReal(((((0.06082513)*x2324))+(((-0.01787325)*x2320))+(((-0.04)*pz))+(((0.017472)*sj2*x2319))+((pz*x2322))+((pz*x2323))+(((0.07119719)*sj4*x2320))+(((-0.02863275)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2326.valid){
continue;
}
CheckValue<IkReal> x2327=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2321*x2325))+(((-1.0)*sj2*x2321*x2322))+(((0.0325)*cj4*pz))+(((0.2151)*x2325))+(((0.2688)*x2320*x2323))+(((0.2688)*x2320*x2322))+(((0.2688)*pz*sj4))+(((-0.0925)*pz))+(((-0.008604)*sj2))+(((-0.010752)*x2320))+(((0.2151)*sj2*x2322))+(((0.0013)*x2324)))),-1);
if(!x2327.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2326.value)+(((1.5707963267949)*(x2327.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2328=IKcos(j1);
IkReal x2329=IKsin(j1);
IkReal x2330=(px*sj2);
IkReal x2331=((0.4302)*cj0);
IkReal x2332=(cj0*py);
IkReal x2333=((0.2688)*sj4);
IkReal x2334=(cj2*py);
IkReal x2335=(py*sj0);
IkReal x2336=((0.0325)*cj4);
IkReal x2337=(cj0*px);
IkReal x2338=((0.2688)*cj4);
IkReal x2339=((0.0325)*sj4);
IkReal x2340=(px*sj0);
IkReal x2341=(sj2*x2329);
IkReal x2342=(sj2*x2328);
IkReal x2343=((1.0)*x2329);
IkReal x2344=(cj2*x2329);
IkReal x2345=(x2328*x2337);
evalcond[0]=((0.0925)+(((-1.0)*x2336))+(((-1.0)*x2333))+x2345+(((-1.0)*pz*x2343))+(((-0.04)*x2328))+((x2328*x2335)));
evalcond[1]=(((x2329*x2336))+((x2329*x2333))+pz+((x2339*x2342))+(((-0.0925)*x2329))+(((-1.0)*x2338*x2342))+(((-0.2151)*x2342)));
evalcond[2]=(((sj0*x2329*x2334))+((cj2*pz*x2328))+(((-1.0)*sj2*x2332))+((sj0*x2330))+(((-0.04)*x2344))+((x2337*x2344))+(((0.1491)*sj2)));
evalcond[3]=((0.04)+(((-1.0)*x2339*x2341))+(((0.2151)*x2341))+((x2338*x2341))+(((-0.0925)*x2328))+(((-1.0)*x2337))+(((-1.0)*x2335))+((x2328*x2333))+((x2328*x2336)));
evalcond[4]=((0.2151)+(((-1.0)*x2339))+(((-1.0)*cj0*x2330*x2343))+(((-1.0)*x2335*x2341))+x2338+(((0.04)*x2341))+(((0.1491)*cj2))+((cj2*x2340))+(((-1.0)*cj2*x2332))+(((-1.0)*pz*x2342)));
evalcond[5]=((-0.00534538)+((x2331*x2334))+(((-0.4302)*cj2*x2340))+(((-0.185)*x2328*x2335))+(((0.4302)*x2335*x2341))+(((-0.2982)*x2340))+(((-0.185)*x2345))+((x2329*x2330*x2331))+(((0.0074)*x2328))+(((0.185)*pz*x2329))+(((0.08)*x2337))+(((0.08)*x2335))+(((-1.0)*pp))+(((-0.017208)*x2341))+(((0.4302)*pz*x2342))+(((-0.06414282)*cj2))+(((0.2982)*x2332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2346=cj4*cj4;
IkReal x2347=(cj4*sj2);
IkReal x2348=((0.0325)*cj4);
IkReal x2349=(cj0*px);
IkReal x2350=(py*sj0);
IkReal x2351=((0.2688)*sj4);
IkReal x2352=((1.0)*pz);
IkReal x2353=(pz*sj2);
CheckValue<IkReal> x2354 = IKatan2WithCheck(IkReal(((((0.04)*pz))+(((0.07119719)*sj4*x2347))+(((0.017472)*sj2*x2346))+(((-0.01787325)*x2347))+(((0.06082513)*sj2*sj4))+(((-1.0)*x2350*x2352))+(((-0.02863275)*sj2))+(((-1.0)*x2349*x2352)))),IkReal(((0.08080969)+(((-1.0)*pz*x2352))+(((-0.0060125)*cj4))+(((0.017472)*cj4*sj4))+(((-0.07119719)*x2346))+(((-0.049728)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2354.valid){
continue;
}
CheckValue<IkReal> x2355=IKPowWithIntegerCheck(IKsign(((0.0037)+(((-0.2151)*x2353))+(((-0.0013)*cj4))+((x2348*x2350))+((x2348*x2349))+(((-0.2688)*pz*x2347))+((x2350*x2351))+(((-0.010752)*sj4))+((x2349*x2351))+(((-0.0925)*x2349))+(((0.0325)*sj4*x2353))+(((-0.0925)*x2350)))),-1);
if(!x2355.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2354.value)+(((1.5707963267949)*(x2355.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2356=IKcos(j1);
IkReal x2357=IKsin(j1);
IkReal x2358=(px*sj2);
IkReal x2359=((0.4302)*cj0);
IkReal x2360=(cj0*py);
IkReal x2361=((0.2688)*sj4);
IkReal x2362=(cj2*py);
IkReal x2363=(py*sj0);
IkReal x2364=((0.0325)*cj4);
IkReal x2365=(cj0*px);
IkReal x2366=((0.2688)*cj4);
IkReal x2367=((0.0325)*sj4);
IkReal x2368=(px*sj0);
IkReal x2369=(sj2*x2357);
IkReal x2370=(sj2*x2356);
IkReal x2371=((1.0)*x2357);
IkReal x2372=(cj2*x2357);
IkReal x2373=(x2356*x2365);
evalcond[0]=((0.0925)+x2373+(((-1.0)*x2364))+(((-1.0)*x2361))+(((-0.04)*x2356))+(((-1.0)*pz*x2371))+((x2356*x2363)));
evalcond[1]=(((x2367*x2370))+pz+((x2357*x2361))+((x2357*x2364))+(((-1.0)*x2366*x2370))+(((-0.2151)*x2370))+(((-0.0925)*x2357)));
evalcond[2]=(((sj0*x2358))+((x2365*x2372))+((sj0*x2357*x2362))+(((-0.04)*x2372))+(((0.1491)*sj2))+(((-1.0)*sj2*x2360))+((cj2*pz*x2356)));
evalcond[3]=((0.04)+((x2366*x2369))+(((-1.0)*x2363))+(((-1.0)*x2365))+(((0.2151)*x2369))+(((-1.0)*x2367*x2369))+((x2356*x2364))+((x2356*x2361))+(((-0.0925)*x2356)));
evalcond[4]=((0.2151)+x2366+(((-1.0)*x2367))+(((-1.0)*x2363*x2369))+(((0.04)*x2369))+(((0.1491)*cj2))+(((-1.0)*cj0*x2358*x2371))+((cj2*x2368))+(((-1.0)*pz*x2370))+(((-1.0)*cj2*x2360)));
evalcond[5]=((-0.00534538)+(((-0.017208)*x2369))+(((0.2982)*x2360))+(((0.0074)*x2356))+(((-0.185)*x2356*x2363))+(((-0.185)*x2373))+(((-0.4302)*cj2*x2368))+(((0.185)*pz*x2357))+((x2359*x2362))+(((-1.0)*pp))+(((0.08)*x2365))+(((0.08)*x2363))+(((-0.2982)*x2368))+(((0.4302)*pz*x2370))+((x2357*x2358*x2359))+(((0.4302)*x2363*x2369))+(((-0.06414282)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2374=((25.0)*cj4);
IkReal x2375=(cj0*px);
IkReal x2376=(pz*sj2);
IkReal x2377=(py*sj0);
IkReal x2378=((206.769230769231)*sj4);
IkReal x2379=((0.0325)*cj4);
IkReal x2380=((0.2688)*sj4);
j1eval[0]=((2.84615384615385)+((x2375*x2378))+(((-25.0)*sj4*x2376))+(((206.769230769231)*cj4*x2376))+(((165.461538461538)*x2376))+((x2374*x2375))+((x2374*x2377))+((x2377*x2378))+(((-8.27076923076923)*sj4))+(((-71.1538461538462)*x2375))+(((-71.1538461538462)*x2377))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.0037)+((x2375*x2379))+(((0.2688)*cj4*x2376))+(((-0.0013)*cj4))+(((0.2151)*x2376))+(((-0.0925)*x2377))+(((-0.0925)*x2375))+((x2375*x2380))+(((-0.010752)*sj4))+(((-0.0325)*sj4*x2376))+((x2377*x2379))+((x2377*x2380))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2381=(sj2*sj4);
IkReal x2382=(cj0*px);
IkReal x2383=(py*sj0);
IkReal x2384=((165.461538461538)*sj2);
IkReal x2385=(cj4*sj2);
IkReal x2386=((0.2151)*sj2);
IkReal x2387=(pz*sj4);
IkReal x2388=(cj4*pz);
IkReal x2389=(x2383*x2385);
j1eval[0]=((((206.769230769231)*x2387))+(((25.0)*x2381*x2382))+(((25.0)*x2381*x2383))+(((-206.769230769231)*x2389))+(((6.61846153846154)*sj2))+(((-1.0)*x2382*x2384))+(((-1.0)*x2381))+(((-1.0)*x2383*x2384))+(((25.0)*x2388))+(((-71.1538461538462)*pz))+(((-206.769230769231)*x2382*x2385))+(((8.27076923076923)*x2385)));
j1eval[1]=IKsign(((((-0.2688)*x2382*x2385))+(((-0.0013)*x2381))+(((0.2688)*x2387))+(((0.0325)*x2388))+(((-0.2688)*x2389))+(((-1.0)*x2382*x2386))+(((-1.0)*x2383*x2386))+(((0.010752)*x2385))+(((-0.0925)*pz))+(((0.008604)*sj2))+(((0.0325)*x2381*x2383))+(((0.0325)*x2381*x2382))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2390=py*py;
IkReal x2391=cj0*cj0;
IkReal x2392=pz*pz;
IkReal x2393=px*px;
IkReal x2394=(py*sj0);
IkReal x2395=((1.0)*cj2);
IkReal x2396=(cj0*cj2*px);
IkReal x2397=(cj2*x2390);
IkReal x2398=((625.0)*x2391);
IkReal x2399=(cj2*x2392);
j1eval[0]=((((-625.0)*x2399))+(((-625.0)*x2397))+(((50.0)*x2396))+(((-1.0)*cj2*x2393*x2398))+(((-1.0)*x2395))+(((50.0)*cj2*x2394))+((x2397*x2398))+(((-1250.0)*x2394*x2396)));
j1eval[1]=IKsign(((((0.08)*x2396))+(((-1.0)*x2390*x2395))+(((-2.0)*x2394*x2396))+(((0.08)*cj2*x2394))+(((-0.0016)*cj2))+(((-1.0)*x2391*x2393*x2395))+((x2391*x2397))+(((-1.0)*x2392*x2395))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x2400=cj4*cj4;
IkReal x2401=(cj0*px);
IkReal x2402=((25.0)*cj4);
IkReal x2403=(cj4*pz);
IkReal x2404=((0.2688)*sj4);
IkReal x2405=(cj4*sj4);
IkReal x2406=(pz*sj4);
IkReal x2407=(py*sj0);
IkReal x2408=((206.769230769231)*sj4);
IkReal x2409=((0.0325)*cj4);
j1eval[0]=((2.84615384615385)+(((-25.0)*x2406))+(((165.461538461538)*pz))+((x2401*x2402))+((x2401*x2408))+(((206.769230769231)*x2403))+((x2402*x2407))+(((-8.27076923076923)*sj4))+((x2407*x2408))+(((-71.1538461538462)*x2407))+(((-71.1538461538462)*x2401))+(((-1.0)*cj4)));
j1eval[1]=IKsign(((0.0037)+(((-0.0925)*x2401))+(((-0.0925)*x2407))+(((-0.0013)*cj4))+((x2401*x2404))+((x2401*x2409))+(((0.2688)*x2403))+(((-0.010752)*sj4))+((x2404*x2407))+(((-0.0325)*x2406))+((x2407*x2409))+(((0.2151)*pz))));
j1eval[2]=((IKabs(((-0.02863275)+(((-0.01787325)*cj4))+(((0.06082513)*sj4))+(((0.017472)*x2400))+(((-0.04)*pz))+(((0.07119719)*x2405))+((pz*x2401))+((pz*x2407)))))+(IKabs(((-0.08080969)+(((0.0060125)*cj4))+(((-0.017472)*x2405))+(pz*pz)+(((0.07119719)*x2400))+(((0.049728)*sj4))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x2410=(py*sj0);
IkReal x2411=((0.0325)*sj4);
IkReal x2412=(pz*sj4);
IkReal x2413=((0.2688)*cj4);
IkReal x2414=(cj4*pz);
IkReal x2415=(cj0*px);
IkReal x2416=((25.0)*sj4);
IkReal x2417=((206.769230769231)*cj4);
j1eval[0]=((6.61846153846154)+(((-1.0)*sj4))+((x2410*x2416))+(((-165.461538461538)*x2415))+(((-165.461538461538)*x2410))+(((-1.0)*x2415*x2417))+((x2415*x2416))+(((25.0)*x2414))+(((8.27076923076923)*cj4))+(((206.769230769231)*x2412))+(((-71.1538461538462)*pz))+(((-1.0)*x2410*x2417)));
j1eval[1]=IKsign(((0.008604)+(((-0.0013)*sj4))+((x2410*x2411))+(((0.2688)*x2412))+(((0.0325)*x2414))+(((-0.0925)*pz))+(((-0.2151)*x2415))+(((-0.2151)*x2410))+((x2411*x2415))+(((-1.0)*x2413*x2415))+(((-1.0)*x2410*x2413))+(((0.010752)*cj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=((-2.01122203125123)+sj4+(((-1.72070507538122)*cj4)));
j1eval[1]=IKsign(((-0.12813395)+(((-0.10962526)*cj4))+(((0.0637095)*sj4))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2418=(py*sj0);
IkReal x2419=((0.0325)*sj4);
IkReal x2420=((0.2688)*cj4);
IkReal x2421=((0.2688)*sj4);
IkReal x2422=(cj0*px);
IkReal x2423=((0.0325)*cj4);
CheckValue<IkReal> x2424 = IKatan2WithCheck(IkReal(((0.008604)+(((-0.0013)*sj4))+(((-0.2151)*x2422))+(((-1.0)*x2420*x2422))+(((0.0925)*pz))+(((-1.0)*x2418*x2420))+(((-0.2151)*x2418))+((x2418*x2419))+((x2419*x2422))+(((-1.0)*pz*x2423))+(((-1.0)*pz*x2421))+(((0.010752)*cj4)))),IkReal(((0.0037)+((x2418*x2423))+((x2418*x2421))+((pz*x2419))+(((-0.0013)*cj4))+((x2422*x2423))+(((-0.2151)*pz))+(((-0.010752)*sj4))+(((-0.0925)*x2422))+((x2421*x2422))+(((-1.0)*pz*x2420))+(((-0.0925)*x2418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2424.valid){
continue;
}
CheckValue<IkReal> x2425=IKPowWithIntegerCheck(IKsign(((-0.12813395)+(((-0.10962526)*cj4))+(((0.0637095)*sj4)))),-1);
if(!x2425.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2424.value)+(((1.5707963267949)*(x2425.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2426=IKcos(j1);
IkReal x2427=IKsin(j1);
IkReal x2428=(cj0*px);
IkReal x2429=(py*sj0);
IkReal x2430=((0.2688)*cj4);
IkReal x2431=((0.0325)*cj4);
IkReal x2432=((0.0325)*sj4);
IkReal x2433=((0.2688)*sj4);
IkReal x2434=((1.0)*x2428);
IkReal x2435=((1.0)*x2426);
IkReal x2436=((0.185)*x2426);
IkReal x2437=(sj4*x2427);
IkReal x2438=(pz*x2427);
IkReal x2439=((0.4302)*x2427);
evalcond[0]=((0.0925)+x2438+(((-1.0)*x2431))+(((-1.0)*x2433))+(((-1.0)*x2426*x2434))+(((0.04)*x2426))+(((-1.0)*x2429*x2435)));
evalcond[1]=((0.2151)+x2430+(((-1.0)*x2432))+(((-1.0)*pz*x2435))+(((-1.0)*x2427*x2434))+(((0.04)*x2427))+(((-1.0)*x2427*x2429)));
evalcond[2]=((((-1.0)*x2426*x2430))+(((-0.2151)*x2426))+(((-1.0)*x2427*x2433))+(((-1.0)*x2427*x2431))+pz+(((0.0925)*x2427))+((x2426*x2432)));
evalcond[3]=((0.04)+(((-1.0)*x2434))+(((-1.0)*x2426*x2431))+(((-1.0)*x2426*x2433))+(((-1.0)*x2427*x2432))+(((-1.0)*x2429))+(((0.0925)*x2426))+((x2427*x2430))+(((0.2151)*x2427)));
evalcond[4]=((-0.00534538)+((x2429*x2436))+((x2429*x2439))+(((-0.2982)*px*sj0))+((x2428*x2436))+((x2428*x2439))+(((0.08)*x2429))+(((0.08)*x2428))+(((0.4302)*pz*x2426))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.185)*x2438))+(((-0.017208)*x2427))+(((-0.0074)*x2426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2440=cj4*cj4;
IkReal x2441=((0.0325)*sj4);
IkReal x2442=(cj0*px);
IkReal x2443=(py*sj0);
IkReal x2444=((0.2688)*cj4);
IkReal x2445=(cj4*sj4);
IkReal x2446=((1.0)*pz);
CheckValue<IkReal> x2447 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((-0.07119719)*x2440))+(((0.0139815)*sj4))+(pz*pz)+(((0.017472)*x2445)))),IkReal(((-0.02863275)+(((-1.0)*x2443*x2446))+(((0.04)*pz))+(((-0.01787325)*cj4))+(((0.07119719)*x2445))+(((0.06082513)*sj4))+(((0.017472)*x2440))+(((-1.0)*x2442*x2446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2447.valid){
continue;
}
CheckValue<IkReal> x2448=IKPowWithIntegerCheck(IKsign(((0.008604)+(((-1.0)*x2443*x2444))+(((-0.0013)*sj4))+(((0.0325)*cj4*pz))+(((-0.2151)*x2443))+(((-0.2151)*x2442))+(((0.2688)*pz*sj4))+(((-0.0925)*pz))+((x2441*x2442))+((x2441*x2443))+(((-1.0)*x2442*x2444))+(((0.010752)*cj4)))),-1);
if(!x2448.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2447.value)+(((1.5707963267949)*(x2448.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2449=IKcos(j1);
IkReal x2450=IKsin(j1);
IkReal x2451=(cj0*px);
IkReal x2452=(py*sj0);
IkReal x2453=((0.2688)*cj4);
IkReal x2454=((0.0325)*cj4);
IkReal x2455=((0.0325)*sj4);
IkReal x2456=((0.2688)*sj4);
IkReal x2457=((1.0)*x2451);
IkReal x2458=((1.0)*x2449);
IkReal x2459=((0.185)*x2449);
IkReal x2460=(sj4*x2450);
IkReal x2461=(pz*x2450);
IkReal x2462=((0.4302)*x2450);
evalcond[0]=((0.0925)+x2461+(((-1.0)*x2452*x2458))+(((-1.0)*x2449*x2457))+(((0.04)*x2449))+(((-1.0)*x2456))+(((-1.0)*x2454)));
evalcond[1]=((0.2151)+(((-1.0)*x2450*x2457))+x2453+(((-1.0)*pz*x2458))+(((-1.0)*x2450*x2452))+(((0.04)*x2450))+(((-1.0)*x2455)));
evalcond[2]=((((-1.0)*x2450*x2454))+(((-1.0)*x2450*x2456))+(((0.0925)*x2450))+((x2449*x2455))+(((-0.2151)*x2449))+(((-1.0)*x2449*x2453))+pz);
evalcond[3]=((0.04)+(((-1.0)*x2450*x2455))+(((0.2151)*x2450))+((x2450*x2453))+(((0.0925)*x2449))+(((-1.0)*x2452))+(((-1.0)*x2449*x2456))+(((-1.0)*x2449*x2454))+(((-1.0)*x2457)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((0.08)*x2451))+(((0.08)*x2452))+((x2452*x2459))+((x2452*x2462))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.017208)*x2450))+(((0.4302)*pz*x2449))+((x2451*x2459))+((x2451*x2462))+(((-0.0074)*x2449))+(((-0.185)*x2461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2463=cj4*cj4;
IkReal x2464=(cj0*px);
IkReal x2465=(cj4*sj4);
IkReal x2466=((0.0325)*cj4);
IkReal x2467=(py*sj0);
IkReal x2468=((0.2688)*sj4);
CheckValue<IkReal> x2469=IKPowWithIntegerCheck(IKsign(((0.0037)+((x2467*x2468))+(((-0.0325)*pz*sj4))+(((-0.0013)*cj4))+((x2464*x2468))+((x2464*x2466))+((x2466*x2467))+(((0.2688)*cj4*pz))+(((-0.010752)*sj4))+(((-0.0925)*x2467))+(((-0.0925)*x2464))+(((0.2151)*pz)))),-1);
if(!x2469.valid){
continue;
}
CheckValue<IkReal> x2470 = IKatan2WithCheck(IkReal(((-0.02863275)+(((-0.01787325)*cj4))+(((0.06082513)*sj4))+((pz*x2467))+((pz*x2464))+(((-0.04)*pz))+(((0.017472)*x2463))+(((0.07119719)*x2465)))),IkReal(((-0.08080969)+(((0.0060125)*cj4))+(pz*pz)+(((-0.017472)*x2465))+(((0.049728)*sj4))+(((0.07119719)*x2463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2470.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2469.value)))+(x2470.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2471=IKcos(j1);
IkReal x2472=IKsin(j1);
IkReal x2473=(cj0*px);
IkReal x2474=(py*sj0);
IkReal x2475=((0.2688)*cj4);
IkReal x2476=((0.0325)*cj4);
IkReal x2477=((0.0325)*sj4);
IkReal x2478=((0.2688)*sj4);
IkReal x2479=((1.0)*x2473);
IkReal x2480=((1.0)*x2471);
IkReal x2481=((0.185)*x2471);
IkReal x2482=(sj4*x2472);
IkReal x2483=(pz*x2472);
IkReal x2484=((0.4302)*x2472);
evalcond[0]=((0.0925)+x2483+(((-1.0)*x2478))+(((-1.0)*x2476))+(((-1.0)*x2471*x2479))+(((-1.0)*x2474*x2480))+(((0.04)*x2471)));
evalcond[1]=((0.2151)+x2475+(((-1.0)*pz*x2480))+(((-1.0)*x2472*x2479))+(((-1.0)*x2477))+(((0.04)*x2472))+(((-1.0)*x2472*x2474)));
evalcond[2]=(((x2471*x2477))+(((-1.0)*x2472*x2478))+(((-1.0)*x2472*x2476))+(((-0.2151)*x2471))+pz+(((-1.0)*x2471*x2475))+(((0.0925)*x2472)));
evalcond[3]=((0.04)+(((-1.0)*x2474))+(((-1.0)*x2472*x2477))+(((-1.0)*x2479))+(((0.2151)*x2472))+(((-1.0)*x2471*x2476))+(((-1.0)*x2471*x2478))+(((0.0925)*x2471))+((x2472*x2475)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((-0.0074)*x2471))+(((0.4302)*pz*x2471))+((x2474*x2481))+((x2474*x2484))+((x2473*x2481))+((x2473*x2484))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-0.185)*x2483))+(((0.08)*x2473))+(((0.08)*x2474))+(((-0.017208)*x2472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2485=cj4*cj4;
IkReal x2486=(cj0*px);
IkReal x2487=((25.0)*cj4);
IkReal x2488=(cj4*pz);
IkReal x2489=(cj4*sj4);
IkReal x2490=(pz*sj4);
IkReal x2491=(py*sj0);
IkReal x2492=((206.769230769231)*sj4);
IkReal x2493=((0.0325)*cj4);
IkReal x2494=((0.2688)*sj4);
j1eval[0]=((2.84615384615385)+(((-206.769230769231)*x2488))+((x2487*x2491))+(((-71.1538461538462)*x2491))+(((-71.1538461538462)*x2486))+(((-165.461538461538)*pz))+((x2486*x2487))+(((-8.27076923076923)*sj4))+((x2491*x2492))+((x2486*x2492))+(((-1.0)*cj4))+(((25.0)*x2490)));
j1eval[1]=((IKabs(((0.02863275)+(((-0.07119719)*x2489))+(((0.01787325)*cj4))+(((-0.06082513)*sj4))+(((-0.04)*pz))+(((-0.017472)*x2485))+((pz*x2486))+((pz*x2491)))))+(IKabs(((-0.08080969)+(((0.07119719)*x2485))+(((0.0060125)*cj4))+(pz*pz)+(((-0.017472)*x2489))+(((0.049728)*sj4))))));
j1eval[2]=IKsign(((0.0037)+(((-0.0013)*cj4))+(((-0.2688)*x2488))+(((-0.2151)*pz))+(((-0.0925)*x2491))+(((-0.010752)*sj4))+(((-0.0925)*x2486))+((x2491*x2493))+((x2491*x2494))+((x2486*x2493))+((x2486*x2494))+(((0.0325)*x2490))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2495=(cj4*pz);
IkReal x2496=(py*sj0);
IkReal x2497=((0.0325)*sj4);
IkReal x2498=((25.0)*sj4);
IkReal x2499=(cj0*px);
IkReal x2500=((0.2688)*cj4);
IkReal x2501=((206.769230769231)*cj4);
IkReal x2502=(pz*sj4);
j1eval[0]=((-6.61846153846154)+(((-1.0)*x2496*x2498))+(((-8.27076923076923)*cj4))+sj4+((x2496*x2501))+((x2499*x2501))+(((-1.0)*x2498*x2499))+(((-71.1538461538462)*pz))+(((206.769230769231)*x2502))+(((165.461538461538)*x2496))+(((165.461538461538)*x2499))+(((25.0)*x2495)));
j1eval[1]=IKsign(((-0.008604)+(((-1.0)*x2496*x2497))+(((-1.0)*x2497*x2499))+((x2496*x2500))+(((0.2688)*x2502))+((x2499*x2500))+(((-0.0925)*pz))+(((-0.010752)*cj4))+(((0.2151)*x2499))+(((0.2151)*x2496))+(((0.0013)*sj4))+(((0.0325)*x2495))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x2503=(pz*sj4);
IkReal x2504=(py*sj0);
IkReal x2505=((0.2688)*sj4);
IkReal x2506=(cj0*px);
IkReal x2507=(cj4*pz);
IkReal x2508=((206.769230769231)*sj4);
IkReal x2509=(cj4*x2506);
j1eval[0]=((-2.84615384615385)+(((8.27076923076923)*sj4))+cj4+(((165.461538461538)*pz))+(((-1.0)*x2504*x2508))+(((71.1538461538462)*x2504))+(((71.1538461538462)*x2506))+(((206.769230769231)*x2507))+(((-25.0)*cj4*x2504))+(((-25.0)*x2509))+(((-25.0)*x2503))+(((-1.0)*x2506*x2508)));
j1eval[1]=IKsign(((-0.0037)+(((-0.0325)*x2503))+(((-0.0325)*x2509))+(((0.2688)*x2507))+(((-1.0)*x2504*x2505))+(((0.010752)*sj4))+(((0.0013)*cj4))+(((-0.0325)*cj4*x2504))+(((-1.0)*x2505*x2506))+(((0.0925)*x2504))+(((0.0925)*x2506))+(((0.2151)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2510=cj0*cj0;
IkReal x2511=py*py;
IkReal x2512=cj4*cj4;
IkReal x2513=(cj4*sj4);
IkReal x2514=(cj0*px);
IkReal x2515=(py*sj0);
IkReal x2516=((0.0325)*cj4);
IkReal x2517=((0.2688)*sj4);
IkReal x2518=((1.0)*pz);
CheckValue<IkReal> x2519 = IKatan2WithCheck(IkReal(((-0.02863275)+(((0.04)*pz))+(((-0.01787325)*cj4))+(((0.06082513)*sj4))+(((0.07119719)*x2513))+(((-1.0)*x2515*x2518))+(((-1.0)*x2514*x2518))+(((0.017472)*x2512)))),IkReal(((-0.04572426)+(((-0.11563776)*cj4))+x2511+((x2510*(px*px)))+(((-1.0)*x2510*x2511))+(((-0.08)*x2515))+(((-0.08)*x2514))+(((2.0)*x2514*x2515))+(((0.0139815)*sj4))+(((-0.07119719)*x2512))+(((0.017472)*x2513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2519.valid){
continue;
}
CheckValue<IkReal> x2520=IKPowWithIntegerCheck(IKsign(((-0.0037)+(((-0.0325)*pz*sj4))+(((0.010752)*sj4))+(((-1.0)*x2515*x2517))+(((-1.0)*x2515*x2516))+(((-1.0)*x2514*x2516))+(((-1.0)*x2514*x2517))+(((0.2688)*cj4*pz))+(((0.0925)*x2514))+(((0.0925)*x2515))+(((0.0013)*cj4))+(((0.2151)*pz)))),-1);
if(!x2520.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2519.value)+(((1.5707963267949)*(x2520.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2521=IKsin(j1);
IkReal x2522=IKcos(j1);
IkReal x2523=(cj0*px);
IkReal x2524=(py*sj0);
IkReal x2525=((0.2688)*cj4);
IkReal x2526=((0.0325)*cj4);
IkReal x2527=((0.0325)*sj4);
IkReal x2528=((0.2688)*sj4);
IkReal x2529=(sj4*x2521);
IkReal x2530=((0.185)*x2522);
IkReal x2531=((1.0)*x2522);
IkReal x2532=(pz*x2522);
IkReal x2533=(pz*x2521);
IkReal x2534=((0.4302)*x2521);
evalcond[0]=((0.2151)+x2525+x2532+(((-0.04)*x2521))+((x2521*x2523))+((x2521*x2524))+(((-1.0)*x2527)));
evalcond[1]=((0.0925)+x2533+(((-1.0)*x2524*x2531))+(((0.04)*x2522))+(((-1.0)*x2523*x2531))+(((-1.0)*x2526))+(((-1.0)*x2528)));
evalcond[2]=((((0.0925)*x2521))+((x2522*x2525))+(((-1.0)*x2522*x2527))+pz+(((0.2151)*x2522))+(((-1.0)*x2521*x2528))+(((-1.0)*x2521*x2526)));
evalcond[3]=((0.04)+(((0.0925)*x2522))+(((-1.0)*x2523))+(((-1.0)*x2524))+(((-0.2151)*x2521))+(((-1.0)*x2522*x2528))+(((-1.0)*x2522*x2526))+((x2521*x2527))+(((-1.0)*x2521*x2525)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+(((0.017208)*x2521))+(((-0.0074)*x2522))+((x2523*x2530))+(((0.08)*x2524))+(((0.08)*x2523))+(((-1.0)*x2524*x2534))+(((-0.4302)*x2532))+(((-0.185)*x2533))+(((0.2982)*cj0*py))+(((-1.0)*x2523*x2534))+(((-1.0)*pp))+((x2524*x2530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2535=cj4*cj4;
IkReal x2536=((0.0325)*sj4);
IkReal x2537=(cj0*px);
IkReal x2538=(py*sj0);
IkReal x2539=((0.2688)*cj4);
IkReal x2540=(cj4*sj4);
IkReal x2541=((1.0)*pz);
CheckValue<IkReal> x2542=IKPowWithIntegerCheck(IKsign(((-0.008604)+(((0.0325)*cj4*pz))+(((0.2151)*x2538))+(((0.2151)*x2537))+(((0.2688)*pz*sj4))+(((-0.0925)*pz))+(((-1.0)*x2536*x2537))+(((-1.0)*x2536*x2538))+(((-0.010752)*cj4))+((x2538*x2539))+(((0.0013)*sj4))+((x2537*x2539)))),-1);
if(!x2542.valid){
continue;
}
CheckValue<IkReal> x2543 = IKatan2WithCheck(IkReal(((-0.04732426)+(((-0.11563776)*cj4))+(((0.017472)*x2540))+(((0.0139815)*sj4))+(pz*pz)+(((-0.07119719)*x2535)))),IkReal(((0.02863275)+(((0.04)*pz))+(((-0.017472)*x2535))+(((0.01787325)*cj4))+(((-0.07119719)*x2540))+(((-0.06082513)*sj4))+(((-1.0)*x2538*x2541))+(((-1.0)*x2537*x2541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2543.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2542.value)))+(x2543.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2544=IKsin(j1);
IkReal x2545=IKcos(j1);
IkReal x2546=(cj0*px);
IkReal x2547=(py*sj0);
IkReal x2548=((0.2688)*cj4);
IkReal x2549=((0.0325)*cj4);
IkReal x2550=((0.0325)*sj4);
IkReal x2551=((0.2688)*sj4);
IkReal x2552=(sj4*x2544);
IkReal x2553=((0.185)*x2545);
IkReal x2554=((1.0)*x2545);
IkReal x2555=(pz*x2545);
IkReal x2556=(pz*x2544);
IkReal x2557=((0.4302)*x2544);
evalcond[0]=((0.2151)+x2555+x2548+(((-0.04)*x2544))+(((-1.0)*x2550))+((x2544*x2547))+((x2544*x2546)));
evalcond[1]=((0.0925)+x2556+(((0.04)*x2545))+(((-1.0)*x2546*x2554))+(((-1.0)*x2549))+(((-1.0)*x2547*x2554))+(((-1.0)*x2551)));
evalcond[2]=((((0.0925)*x2544))+(((-1.0)*x2544*x2549))+pz+(((-1.0)*x2544*x2551))+(((0.2151)*x2545))+(((-1.0)*x2545*x2550))+((x2545*x2548)));
evalcond[3]=((0.04)+(((0.0925)*x2545))+(((-0.2151)*x2544))+(((-1.0)*x2546))+(((-1.0)*x2547))+(((-1.0)*x2545*x2549))+(((-1.0)*x2544*x2548))+(((-1.0)*x2545*x2551))+((x2544*x2550)));
evalcond[4]=((-0.00534538)+(((-0.2982)*px*sj0))+((x2547*x2553))+(((0.08)*x2546))+(((0.08)*x2547))+(((0.017208)*x2544))+(((-0.0074)*x2545))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((-1.0)*x2546*x2557))+(((-1.0)*x2547*x2557))+(((-0.185)*x2556))+(((-0.4302)*x2555))+((x2546*x2553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2558=cj4*cj4;
IkReal x2559=(cj0*px);
IkReal x2560=((0.2688)*sj4);
IkReal x2561=(cj4*sj4);
IkReal x2562=((0.0325)*cj4);
IkReal x2563=(py*sj0);
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal(((0.02863275)+(((-0.07119719)*x2561))+(((0.01787325)*cj4))+(((-0.06082513)*sj4))+(((-0.04)*pz))+(((-0.017472)*x2558))+((pz*x2563))+((pz*x2559)))),IkReal(((-0.08080969)+(((0.0060125)*cj4))+(pz*pz)+(((0.07119719)*x2558))+(((0.049728)*sj4))+(((-0.017472)*x2561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
CheckValue<IkReal> x2565=IKPowWithIntegerCheck(IKsign(((0.0037)+((x2560*x2563))+(((-0.2688)*cj4*pz))+(((-0.0013)*cj4))+(((-0.0925)*x2563))+((x2559*x2562))+((x2559*x2560))+((x2562*x2563))+(((-0.2151)*pz))+(((-0.010752)*sj4))+(((-0.0925)*x2559))+(((0.0325)*pz*sj4)))),-1);
if(!x2565.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2564.value)+(((1.5707963267949)*(x2565.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2566=IKsin(j1);
IkReal x2567=IKcos(j1);
IkReal x2568=(cj0*px);
IkReal x2569=(py*sj0);
IkReal x2570=((0.2688)*cj4);
IkReal x2571=((0.0325)*cj4);
IkReal x2572=((0.0325)*sj4);
IkReal x2573=((0.2688)*sj4);
IkReal x2574=(sj4*x2566);
IkReal x2575=((0.185)*x2567);
IkReal x2576=((1.0)*x2567);
IkReal x2577=(pz*x2567);
IkReal x2578=(pz*x2566);
IkReal x2579=((0.4302)*x2566);
evalcond[0]=((0.2151)+(((-0.04)*x2566))+x2577+x2570+((x2566*x2568))+((x2566*x2569))+(((-1.0)*x2572)));
evalcond[1]=((0.0925)+(((-1.0)*x2569*x2576))+x2578+(((-1.0)*x2568*x2576))+(((0.04)*x2567))+(((-1.0)*x2573))+(((-1.0)*x2571)));
evalcond[2]=((((-1.0)*x2566*x2571))+(((-1.0)*x2566*x2573))+((x2567*x2570))+(((0.0925)*x2566))+pz+(((-1.0)*x2567*x2572))+(((0.2151)*x2567)));
evalcond[3]=((0.04)+(((-1.0)*x2566*x2570))+(((-1.0)*x2568))+(((-1.0)*x2569))+(((0.0925)*x2567))+(((-0.2151)*x2566))+(((-1.0)*x2567*x2573))+(((-1.0)*x2567*x2571))+((x2566*x2572)));
evalcond[4]=((-0.00534538)+(((-1.0)*x2569*x2579))+(((-0.2982)*px*sj0))+(((-0.185)*x2578))+(((0.08)*x2568))+(((0.08)*x2569))+((x2568*x2575))+(((-1.0)*x2568*x2579))+(((-0.0074)*x2567))+(((0.2982)*cj0*py))+(((-1.0)*pp))+(((0.017208)*x2566))+((x2569*x2575))+(((-0.4302)*x2577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2580=cj0*cj0;
IkReal x2581=py*py;
IkReal x2582=px*px;
IkReal x2583=(cj0*px);
IkReal x2584=((0.08)*cj2);
IkReal x2585=((1.0)*cj2);
IkReal x2586=(py*sj2);
IkReal x2587=(cj2*sj4);
IkReal x2588=(py*sj0);
IkReal x2589=((0.1491)*sj2);
IkReal x2590=(cj2*pz);
IkReal x2591=((0.0325)*cj4);
IkReal x2592=((0.0925)*cj2);
IkReal x2593=(cj0*sj0*sj2);
IkReal x2594=(px*sj0*sj2);
CheckValue<IkReal> x2595 = IKatan2WithCheck(IkReal(((((-0.04)*x2594))+(((-1.0)*x2590*x2591))+(((0.0925)*x2590))+(((0.04)*cj0*x2586))+(((-0.005964)*sj2))+(((-0.2688)*pz*x2587))+((px*x2586))+((x2582*x2593))+(((-1.0)*x2581*x2593))+(((-2.0)*px*x2580*x2586))+(((0.1491)*sj0*x2586))+((x2583*x2589)))),IkReal(((((0.2688)*x2587*x2588))+((cj2*x2583*x2591))+(((0.2688)*x2583*x2587))+(((0.0037)*cj2))+(((-1.0)*cj0*pz*x2586))+(((-0.010752)*x2587))+(((-1.0)*x2588*x2592))+((cj2*x2588*x2591))+((pz*x2594))+(((-1.0)*x2583*x2592))+((pz*x2589))+(((-0.0013)*cj2*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2595.valid){
continue;
}
CheckValue<IkReal> x2596=IKPowWithIntegerCheck(IKsign((((x2584*x2588))+((cj2*x2580*x2581))+(((-1.0)*x2585*(pz*pz)))+(((-0.0016)*cj2))+(((-2.0)*cj2*x2583*x2588))+((x2583*x2584))+(((-1.0)*x2580*x2582*x2585))+(((-1.0)*x2581*x2585)))),-1);
if(!x2596.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2595.value)+(((1.5707963267949)*(x2596.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2597=IKcos(j1);
IkReal x2598=IKsin(j1);
IkReal x2599=(cj0*px);
IkReal x2600=(cj0*py);
IkReal x2601=((0.2688)*sj4);
IkReal x2602=(py*sj0);
IkReal x2603=((0.4302)*cj2);
IkReal x2604=((0.0325)*cj4);
IkReal x2605=((0.2688)*cj4);
IkReal x2606=((0.0325)*sj4);
IkReal x2607=(px*sj0);
IkReal x2608=(sj2*x2598);
IkReal x2609=((1.0)*x2597);
IkReal x2610=(pz*x2598);
IkReal x2611=((0.185)*x2597);
IkReal x2612=(sj2*x2597);
IkReal x2613=(cj2*x2598);
evalcond[0]=((0.0925)+(((0.04)*x2597))+(((-1.0)*x2602*x2609))+(((-1.0)*x2604))+(((-1.0)*x2601))+x2610+(((-1.0)*x2599*x2609)));
evalcond[1]=((((-0.2151)*x2612))+(((0.0925)*x2598))+pz+((x2606*x2612))+(((-1.0)*x2598*x2601))+(((-1.0)*x2598*x2604))+(((-1.0)*x2605*x2612)));
evalcond[2]=(((sj2*x2600))+(((0.04)*x2613))+(((-1.0)*x2602*x2613))+(((-1.0)*cj2*pz*x2609))+(((-1.0)*x2599*x2613))+(((-0.1491)*sj2))+(((-1.0)*sj2*x2607)));
evalcond[3]=((0.04)+(((-1.0)*x2597*x2604))+(((-1.0)*x2597*x2601))+(((-1.0)*x2599))+(((0.2151)*x2608))+(((-1.0)*x2602))+(((0.0925)*x2597))+((x2605*x2608))+(((-1.0)*x2606*x2608)));
evalcond[4]=((0.2151)+(((-1.0)*pz*sj2*x2609))+(((0.1491)*cj2))+(((-1.0)*x2602*x2608))+((cj2*x2607))+(((0.04)*x2608))+(((-1.0)*x2606))+(((-1.0)*x2599*x2608))+(((-1.0)*cj2*x2600))+x2605);
evalcond[5]=((-0.00534538)+(((0.08)*x2599))+((x2602*x2611))+(((0.08)*x2602))+(((-0.0074)*x2597))+(((0.4302)*pz*x2612))+(((-0.017208)*x2608))+(((-0.185)*x2610))+((x2600*x2603))+(((0.4302)*x2602*x2608))+(((-1.0)*pp))+(((0.2982)*x2600))+((x2599*x2611))+(((-0.2982)*x2607))+(((-1.0)*x2603*x2607))+(((0.4302)*x2599*x2608))+(((-0.06414282)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2614=py*py;
IkReal x2615=cj0*cj0;
IkReal x2616=cj4*cj4;
IkReal x2617=(cj4*sj2);
IkReal x2618=(py*sj0);
IkReal x2619=(sj2*sj4);
IkReal x2620=(cj0*px);
IkReal x2621=((0.2151)*sj2);
IkReal x2622=((1.0)*pz);
CheckValue<IkReal> x2623=IKPowWithIntegerCheck(IKsign(((((0.0325)*cj4*pz))+(((0.010752)*x2617))+(((0.0325)*x2619*x2620))+(((-1.0)*x2618*x2621))+(((-0.2688)*x2617*x2618))+(((0.2688)*pz*sj4))+(((-0.2688)*x2617*x2620))+(((-0.0925)*pz))+(((0.008604)*sj2))+(((-0.0013)*x2619))+(((0.0325)*x2618*x2619))+(((-1.0)*x2620*x2621)))),-1);
if(!x2623.valid){
continue;
}
CheckValue<IkReal> x2624 = IKatan2WithCheck(IkReal(((0.07920969)+(((-2.0)*x2618*x2620))+(((-0.07119719)*x2616))+(((0.08)*x2620))+(((-0.0060125)*cj4))+(((-1.0)*x2614))+(((0.08)*x2618))+((x2614*x2615))+(((-1.0)*x2615*(px*px)))+(((0.017472)*cj4*sj4))+(((-0.049728)*sj4)))),IkReal(((((0.04)*pz))+(((-0.01787325)*x2617))+(((-1.0)*x2618*x2622))+(((0.07119719)*sj4*x2617))+(((0.06082513)*x2619))+(((0.017472)*sj2*x2616))+(((-0.02863275)*sj2))+(((-1.0)*x2620*x2622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2624.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2623.value)))+(x2624.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2625=IKcos(j1);
IkReal x2626=IKsin(j1);
IkReal x2627=(cj0*px);
IkReal x2628=(cj0*py);
IkReal x2629=((0.2688)*sj4);
IkReal x2630=(py*sj0);
IkReal x2631=((0.4302)*cj2);
IkReal x2632=((0.0325)*cj4);
IkReal x2633=((0.2688)*cj4);
IkReal x2634=((0.0325)*sj4);
IkReal x2635=(px*sj0);
IkReal x2636=(sj2*x2626);
IkReal x2637=((1.0)*x2625);
IkReal x2638=(pz*x2626);
IkReal x2639=((0.185)*x2625);
IkReal x2640=(sj2*x2625);
IkReal x2641=(cj2*x2626);
evalcond[0]=((0.0925)+(((-1.0)*x2632))+(((0.04)*x2625))+(((-1.0)*x2629))+(((-1.0)*x2630*x2637))+x2638+(((-1.0)*x2627*x2637)));
evalcond[1]=((((0.0925)*x2626))+(((-1.0)*x2626*x2629))+pz+(((-0.2151)*x2640))+((x2634*x2640))+(((-1.0)*x2633*x2640))+(((-1.0)*x2626*x2632)));
evalcond[2]=((((-1.0)*sj2*x2635))+(((-1.0)*x2630*x2641))+(((-1.0)*cj2*pz*x2637))+(((-1.0)*x2627*x2641))+(((0.04)*x2641))+(((-0.1491)*sj2))+((sj2*x2628)));
evalcond[3]=((0.04)+(((0.0925)*x2625))+(((-1.0)*x2625*x2629))+(((-1.0)*x2627))+(((0.2151)*x2636))+(((-1.0)*x2634*x2636))+((x2633*x2636))+(((-1.0)*x2630))+(((-1.0)*x2625*x2632)));
evalcond[4]=((0.2151)+((cj2*x2635))+(((-1.0)*pz*sj2*x2637))+(((-1.0)*x2634))+(((0.1491)*cj2))+(((-1.0)*x2630*x2636))+(((-1.0)*x2627*x2636))+(((-1.0)*cj2*x2628))+(((0.04)*x2636))+x2633);
evalcond[5]=((-0.00534538)+(((-0.185)*x2638))+(((-0.017208)*x2636))+(((0.4302)*x2627*x2636))+(((0.08)*x2627))+(((-0.0074)*x2625))+(((0.4302)*pz*x2640))+(((-0.2982)*x2635))+(((0.2982)*x2628))+(((-1.0)*pp))+((x2628*x2631))+(((0.08)*x2630))+((x2630*x2639))+(((0.4302)*x2630*x2636))+(((-1.0)*x2631*x2635))+((x2627*x2639))+(((-0.06414282)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2642=cj4*cj4;
IkReal x2643=(cj4*sj2);
IkReal x2644=(cj0*px);
IkReal x2645=((0.2688)*sj4);
IkReal x2646=((0.0325)*cj4);
IkReal x2647=(py*sj0);
IkReal x2648=(sj2*sj4);
CheckValue<IkReal> x2649=IKPowWithIntegerCheck(IKsign(((0.0037)+(((-0.0925)*x2647))+(((-0.0925)*x2644))+(((0.2688)*pz*x2643))+(((-0.0325)*pz*x2648))+(((-0.0013)*cj4))+(((0.2151)*pz*sj2))+((x2644*x2645))+((x2644*x2646))+((x2645*x2647))+((x2646*x2647))+(((-0.010752)*sj4)))),-1);
if(!x2649.valid){
continue;
}
CheckValue<IkReal> x2650 = IKatan2WithCheck(IkReal(((((0.07119719)*sj4*x2643))+(((-0.01787325)*x2643))+(((0.06082513)*x2648))+(((-0.04)*pz))+(((0.017472)*sj2*x2642))+((pz*x2647))+((pz*x2644))+(((-0.02863275)*sj2)))),IkReal(((-0.08080969)+(((0.07119719)*x2642))+(((0.0060125)*cj4))+(pz*pz)+(((-0.017472)*cj4*sj4))+(((0.049728)*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2650.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2649.value)))+(x2650.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2651=IKcos(j1);
IkReal x2652=IKsin(j1);
IkReal x2653=(cj0*px);
IkReal x2654=(cj0*py);
IkReal x2655=((0.2688)*sj4);
IkReal x2656=(py*sj0);
IkReal x2657=((0.4302)*cj2);
IkReal x2658=((0.0325)*cj4);
IkReal x2659=((0.2688)*cj4);
IkReal x2660=((0.0325)*sj4);
IkReal x2661=(px*sj0);
IkReal x2662=(sj2*x2652);
IkReal x2663=((1.0)*x2651);
IkReal x2664=(pz*x2652);
IkReal x2665=((0.185)*x2651);
IkReal x2666=(sj2*x2651);
IkReal x2667=(cj2*x2652);
evalcond[0]=((0.0925)+(((-1.0)*x2653*x2663))+(((-1.0)*x2658))+(((-1.0)*x2655))+(((0.04)*x2651))+(((-1.0)*x2656*x2663))+x2664);
evalcond[1]=((((-1.0)*x2652*x2655))+(((-1.0)*x2652*x2658))+(((0.0925)*x2652))+(((-0.2151)*x2666))+pz+(((-1.0)*x2659*x2666))+((x2660*x2666)));
evalcond[2]=((((-1.0)*sj2*x2661))+(((-1.0)*x2653*x2667))+(((-1.0)*x2656*x2667))+(((0.04)*x2667))+(((-1.0)*cj2*pz*x2663))+(((-0.1491)*sj2))+((sj2*x2654)));
evalcond[3]=((0.04)+(((-1.0)*x2651*x2658))+(((-1.0)*x2651*x2655))+(((-1.0)*x2660*x2662))+((x2659*x2662))+(((0.0925)*x2651))+(((0.2151)*x2662))+(((-1.0)*x2656))+(((-1.0)*x2653)));
evalcond[4]=((0.2151)+(((-1.0)*x2653*x2662))+(((-1.0)*pz*sj2*x2663))+(((0.1491)*cj2))+(((-1.0)*x2656*x2662))+(((-1.0)*x2660))+(((-1.0)*cj2*x2654))+(((0.04)*x2662))+((cj2*x2661))+x2659);
evalcond[5]=((-0.00534538)+(((-0.2982)*x2661))+(((0.4302)*pz*x2666))+(((-0.185)*x2664))+(((0.08)*x2656))+(((0.08)*x2653))+(((0.4302)*x2653*x2662))+((x2653*x2665))+(((-0.0074)*x2651))+((x2656*x2665))+((x2654*x2657))+(((0.2982)*x2654))+(((-1.0)*pp))+(((-1.0)*x2657*x2661))+(((0.4302)*x2656*x2662))+(((-0.06414282)*cj2))+(((-0.017208)*x2662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2668 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*px*pz*sj2))+(((-0.2688)*cj0*cj2*py*sj3*sj4))+(((-0.0925)*cj2*px*sj0*sj3))+(((-1.0)*py*pz*sj0*sj2))+(((0.0925)*cj0*cj2*py*sj3))+(((0.06082513)*sj3*sj4))+(((0.2688)*cj2*px*sj0*sj3*sj4))+(((-0.0325)*cj0*cj2*cj4*py*sj3))+(((0.04007808)*cj2*sj3*sj4))+(((-0.01379175)*cj2*sj3))+(((0.017472)*sj3*(cj4*cj4)))+(((-0.02863275)*sj3))+(((0.0325)*cj2*cj4*px*sj0*sj3))+(((0.04)*pz*sj2))+(((0.00484575)*cj2*cj4*sj3))+(((0.07119719)*cj4*sj3*sj4))+(((-0.01787325)*cj4*sj3)))),IkReal(((((0.2688)*cj0*cj3*py*sj4*(cj2*cj2)))+(((0.01787325)*cj2*cj3*cj4))+(((0.02863275)*cj2*cj3))+(((0.0325)*cj2*px*sj0*sj2*sj4))+(((-0.06082513)*cj2*cj3*sj4))+(((-0.017472)*cj2*cj3*(cj4*cj4)))+(((0.01379175)*cj3*(cj2*cj2)))+(((-0.03207141)*cj2*sj2))+(((0.0139815)*sj2*sj4))+(((0.00484575)*cj2*sj2*sj4))+(((-0.00484575)*cj3*cj4*(cj2*cj2)))+(((-0.08)*py*sj0*sj2))+(((-0.07119719)*cj2*cj3*cj4*sj4))+(((-0.2151)*cj2*px*sj0*sj2))+(((0.0325)*cj0*cj3*cj4*py*(cj2*cj2)))+(((0.2688)*cj0*cj2*cj4*py*sj2))+(((-0.2688)*cj3*px*sj0*sj4*(cj2*cj2)))+(((-0.2688)*cj2*cj4*px*sj0*sj2))+(((-0.0925)*cj0*cj3*py*(cj2*cj2)))+(((0.017472)*cj4*sj2*sj4))+(((-0.08)*cj0*px*sj2))+((sj2*(cj0*cj0)*(px*px)))+(((-0.04572426)*sj2))+(((-0.0325)*cj0*cj2*py*sj2*sj4))+(((-0.0325)*cj3*cj4*px*sj0*(cj2*cj2)))+(((2.0)*cj0*px*py*sj0*sj2))+(((0.2151)*cj0*cj2*py*sj2))+(((-0.04007808)*cj2*cj4*sj2))+(((-1.0)*sj2*(cj0*cj0)*(py*py)))+(((-0.07119719)*sj2*(cj4*cj4)))+(((-0.11563776)*cj4*sj2))+(((-0.04007808)*cj3*sj4*(cj2*cj2)))+(((0.0925)*cj3*px*sj0*(cj2*cj2)))+((sj2*(py*py))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2668.valid){
continue;
}
CheckValue<IkReal> x2669=IKPowWithIntegerCheck(IKsign(((((-0.010752)*sj2*sj3*sj4))+(((-0.2688)*cj4*pz))+(((-0.0325)*pz*sj4*(cj2*cj2)))+(((0.0037)*sj2*sj3))+(((-0.0325)*cj2*cj3*cj4*pz*sj2))+(((-0.2688)*cj2*cj3*pz*sj2*sj4))+(((-0.0925)*cj0*px*sj2*sj3))+(((0.2151)*pz*(cj2*cj2)))+(((-0.2151)*pz))+(((0.0925)*cj2*cj3*pz*sj2))+(((-0.0013)*cj4*sj2*sj3))+(((0.0325)*cj0*cj4*px*sj2*sj3))+(((0.2688)*cj4*pz*(cj2*cj2)))+(((0.0325)*cj4*py*sj0*sj2*sj3))+(((-0.0925)*py*sj0*sj2*sj3))+(((0.2688)*cj0*px*sj2*sj3*sj4))+(((0.2688)*py*sj0*sj2*sj3*sj4))+(((0.0325)*pz*sj4)))),-1);
if(!x2669.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2668.value)+(((1.5707963267949)*(x2669.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2670=IKsin(j1);
IkReal x2671=IKcos(j1);
IkReal x2672=((0.2688)*sj4);
IkReal x2673=(cj0*px);
IkReal x2674=(px*sj0);
IkReal x2675=((0.0325)*sj4);
IkReal x2676=(cj0*py);
IkReal x2677=(py*sj0);
IkReal x2678=(cj3*sj2);
IkReal x2679=((1.0)*pz);
IkReal x2680=(sj2*sj3);
IkReal x2681=((0.4302)*cj2);
IkReal x2682=(cj3*pz);
IkReal x2683=((0.0325)*cj4);
IkReal x2684=((0.2688)*cj4);
IkReal x2685=(sj3*x2670);
IkReal x2686=(sj3*x2671);
IkReal x2687=(sj2*x2670);
IkReal x2688=(sj2*x2671);
IkReal x2689=(cj2*x2671);
IkReal x2690=(cj2*cj3*x2670);
IkReal x2691=((1.0)*cj3*x2671);
evalcond[0]=((0.2151)+(((-1.0)*x2677*x2687))+(((0.1491)*cj2))+(((-1.0)*cj2*x2676))+(((-1.0)*x2673*x2687))+(((-1.0)*x2679*x2688))+(((0.04)*x2687))+(((-1.0)*x2675))+((cj2*x2674))+x2684);
evalcond[1]=((((0.0925)*cj3*x2689))+((x2672*x2685))+(((-1.0)*cj3*x2672*x2689))+(((-1.0)*x2684*x2688))+(((-0.0925)*x2685))+((x2683*x2685))+pz+(((-1.0)*cj3*x2683*x2689))+((x2675*x2688))+(((-0.2151)*x2688)));
evalcond[2]=((0.04)+((x2672*x2690))+(((-1.0)*x2677))+(((-1.0)*x2673))+((x2672*x2686))+(((-0.0925)*x2690))+(((-0.0925)*x2686))+((x2684*x2687))+((x2683*x2686))+((x2683*x2690))+(((-1.0)*x2675*x2687))+(((0.2151)*x2687)));
evalcond[3]=(((cj2*x2677*x2685))+(((0.04)*cj3*x2671))+((cj2*x2673*x2685))+((x2674*x2680))+((x2670*x2682))+(((-1.0)*x2676*x2680))+((cj2*pz*x2686))+(((-0.04)*cj2*x2685))+(((-1.0)*x2673*x2691))+(((-1.0)*x2677*x2691))+(((0.1491)*x2680)));
evalcond[4]=((0.0925)+((x2673*x2686))+(((0.1491)*x2678))+(((-1.0)*x2679*x2685))+(((-0.04)*x2686))+(((-1.0)*x2683))+(((-1.0)*x2672))+(((-1.0)*x2676*x2678))+(((-0.04)*x2690))+((x2682*x2689))+((x2677*x2686))+((x2677*x2690))+((x2674*x2678))+((x2673*x2690)));
evalcond[5]=((-0.00534538)+(((0.08)*x2673))+(((0.08)*x2677))+(((-0.185)*x2673*x2690))+(((0.4302)*pz*x2688))+(((0.2982)*x2676))+(((-0.185)*x2682*x2689))+(((0.0074)*x2686))+(((0.4302)*x2677*x2687))+(((-0.185)*x2677*x2686))+(((-0.185)*x2674*x2678))+(((-1.0)*pp))+(((0.0074)*x2690))+(((0.185)*x2676*x2678))+(((0.185)*pz*x2685))+(((0.4302)*x2673*x2687))+(((-0.0275835)*x2678))+(((-0.185)*x2677*x2690))+((x2676*x2681))+(((-1.0)*x2674*x2681))+(((-0.06414282)*cj2))+(((-0.017208)*x2687))+(((-0.185)*x2673*x2686))+(((-0.2982)*x2674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2692=cj2*cj2;
IkReal x2693=cj4*cj4;
IkReal x2694=cj3*cj3;
IkReal x2695=(py*sj0);
IkReal x2696=(cj2*cj3);
IkReal x2697=(cj4*sj3);
IkReal x2698=(cj0*px);
IkReal x2699=((0.0925)*sj3);
IkReal x2700=(sj2*sj4);
IkReal x2701=((0.2688)*sj4);
IkReal x2702=((0.2151)*sj2);
IkReal x2703=((0.010752)*sj4);
IkReal x2704=((0.0325)*pz);
IkReal x2705=((0.0325)*cj4);
IkReal x2706=(cj4*sj2);
IkReal x2707=((0.017472)*cj4);
IkReal x2708=((0.2688)*x2706);
IkReal x2709=(sj4*x2694);
IkReal x2710=((0.08080969)*x2694);
IkReal x2711=(sj4*x2692);
IkReal x2712=((0.0060125)*cj4*x2694);
IkReal x2713=((0.07119719)*x2692*x2693);
CheckValue<IkReal> x2714 = IKatan2WithCheck(IkReal((((pz*sj3*x2701))+(((0.0325)*x2698*x2700))+(((-1.0)*pz*x2699))+(((0.0925)*x2696*x2698))+(((-1.0)*x2695*x2696*x2701))+(((-1.0)*x2695*x2696*x2705))+((x2697*x2704))+(((0.0325)*x2695*x2700))+(((-0.0013)*x2700))+(((-1.0)*x2696*x2698*x2701))+(((-1.0)*x2696*x2698*x2705))+(((0.0925)*x2695*x2696))+(((0.008604)*sj2))+(((-1.0)*x2695*x2702))+(((-1.0)*x2695*x2708))+(((0.0013)*cj4*x2696))+(((-0.0037)*x2696))+((x2696*x2703))+(((0.010752)*x2706))+(((-1.0)*x2698*x2702))+(((-1.0)*x2698*x2708)))),IkReal(((((0.0013)*x2697))+(((-1.0)*pz*x2696*x2701))+(((-1.0)*pz*x2702))+(((-1.0)*pz*x2708))+(((-1.0)*sj3*x2695*x2701))+(((-1.0)*cj4*x2696*x2704))+((x2698*x2699))+(((-0.0037)*sj3))+(((0.0925)*pz*x2696))+((x2700*x2704))+((x2695*x2699))+(((-0.0325)*x2695*x2697))+((sj3*x2703))+(((-0.0325)*x2697*x2698))+(((-1.0)*sj3*x2698*x2701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2714.valid){
continue;
}
CheckValue<IkReal> x2715=IKPowWithIntegerCheck(IKsign(((-0.12813395)+x2713+x2710+(((-1.0)*x2712))+(((-0.12165026)*x2696*x2700))+(((-0.14239438)*cj4*x2696*x2700))+(((0.04732426)*x2692))+(((0.0572655)*sj2*x2696))+(((-0.10962526)*cj4))+(((-0.049728)*x2709))+(((-1.0)*x2692*x2707*x2709))+(((0.049728)*x2692*x2709))+(((-0.0139815)*x2711))+(((-0.034944)*sj2*x2693*x2696))+(((0.11563776)*cj4*x2692))+((x2707*x2709))+(((0.0357465)*x2696*x2706))+((x2694*x2713))+(((-1.0)*x2692*x2710))+(((0.0637095)*sj4))+(((-0.07119719)*x2693*x2694))+(((-1.0)*x2707*x2711))+((x2692*x2712)))),-1);
if(!x2715.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2714.value)+(((1.5707963267949)*(x2715.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2716=IKsin(j1);
IkReal x2717=IKcos(j1);
IkReal x2718=((0.2688)*sj4);
IkReal x2719=(cj0*px);
IkReal x2720=(px*sj0);
IkReal x2721=((0.0325)*sj4);
IkReal x2722=(cj0*py);
IkReal x2723=(py*sj0);
IkReal x2724=(cj3*sj2);
IkReal x2725=((1.0)*pz);
IkReal x2726=(sj2*sj3);
IkReal x2727=((0.4302)*cj2);
IkReal x2728=(cj3*pz);
IkReal x2729=((0.0325)*cj4);
IkReal x2730=((0.2688)*cj4);
IkReal x2731=(sj3*x2716);
IkReal x2732=(sj3*x2717);
IkReal x2733=(sj2*x2716);
IkReal x2734=(sj2*x2717);
IkReal x2735=(cj2*x2717);
IkReal x2736=(cj2*cj3*x2716);
IkReal x2737=((1.0)*cj3*x2717);
evalcond[0]=((0.2151)+x2730+(((-1.0)*x2725*x2734))+(((0.1491)*cj2))+((cj2*x2720))+(((-1.0)*x2723*x2733))+(((-1.0)*x2719*x2733))+(((-1.0)*x2721))+(((0.04)*x2733))+(((-1.0)*cj2*x2722)));
evalcond[1]=((((-1.0)*x2730*x2734))+(((0.0925)*cj3*x2735))+(((-1.0)*cj3*x2729*x2735))+(((-0.2151)*x2734))+((x2721*x2734))+((x2718*x2731))+pz+(((-0.0925)*x2731))+(((-1.0)*cj3*x2718*x2735))+((x2729*x2731)));
evalcond[2]=((0.04)+(((-1.0)*x2719))+(((-1.0)*x2723))+((x2718*x2736))+((x2718*x2732))+(((-1.0)*x2721*x2733))+((x2730*x2733))+(((-0.0925)*x2736))+(((-0.0925)*x2732))+(((0.2151)*x2733))+((x2729*x2736))+((x2729*x2732)));
evalcond[3]=((((-0.04)*cj2*x2731))+((cj2*x2719*x2731))+((cj2*pz*x2732))+(((-1.0)*x2719*x2737))+(((-1.0)*x2722*x2726))+(((-1.0)*x2723*x2737))+((x2720*x2726))+((cj2*x2723*x2731))+(((0.1491)*x2726))+((x2716*x2728))+(((0.04)*cj3*x2717)));
evalcond[4]=((0.0925)+(((-0.04)*x2732))+(((-0.04)*x2736))+(((-1.0)*x2718))+(((-1.0)*x2725*x2731))+(((-1.0)*x2722*x2724))+((x2719*x2732))+((x2719*x2736))+((x2728*x2735))+((x2720*x2724))+((x2723*x2732))+((x2723*x2736))+(((0.1491)*x2724))+(((-1.0)*x2729)));
evalcond[5]=((-0.00534538)+(((0.185)*x2722*x2724))+(((-0.185)*x2728*x2735))+(((-0.185)*x2720*x2724))+(((0.4302)*x2719*x2733))+(((-0.017208)*x2733))+(((-0.185)*x2723*x2732))+(((-0.185)*x2723*x2736))+(((0.0074)*x2732))+(((0.0074)*x2736))+(((0.08)*x2723))+(((-1.0)*x2720*x2727))+(((-1.0)*pp))+(((-0.2982)*x2720))+(((-0.185)*x2719*x2736))+(((-0.185)*x2719*x2732))+(((0.4302)*x2723*x2733))+((x2722*x2727))+(((0.4302)*pz*x2734))+(((0.2982)*x2722))+(((0.185)*pz*x2731))+(((-0.0275835)*x2724))+(((0.08)*x2719))+(((-0.06414282)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2738=cj0*cj0;
IkReal x2739=py*py;
IkReal x2740=px*px;
IkReal x2741=(pz*sj3);
IkReal x2742=((0.0325)*sj4);
IkReal x2743=(cj0*py);
IkReal x2744=(cj0*px);
IkReal x2745=(cj3*sj2);
IkReal x2746=(cj2*sj3);
IkReal x2747=(cj2*cj3);
IkReal x2748=((0.2151)*cj3);
IkReal x2749=((0.010752)*cj4);
IkReal x2750=((0.04)*sj3);
IkReal x2751=(cj0*sj0);
IkReal x2752=(py*sj0);
IkReal x2753=(px*sj0);
IkReal x2754=((0.2688)*cj4);
IkReal x2755=((0.0013)*sj4);
IkReal x2756=((0.1491)*sj3);
IkReal x2757=(px*py);
IkReal x2758=(cj3*pz);
IkReal x2759=((1.0)*x2740);
IkReal x2760=((2.0)*x2738);
CheckValue<IkReal> x2761=IKPowWithIntegerCheck(IKsign(((((0.08)*x2745*x2752))+((x2738*x2739*x2745))+(((-2.0)*x2743*x2745*x2753))+(((-1.0)*x2738*x2745*x2759))+(((-0.0016)*x2745))+(((-1.0)*x2739*x2745))+(((-1.0)*x2745*(pz*pz)))+(((0.08)*x2744*x2745)))),-1);
if(!x2761.valid){
continue;
}
CheckValue<IkReal> x2762 = IKatan2WithCheck(IkReal((((x2747*x2757*x2760))+(((0.04)*x2747*x2753))+(((-1.0)*cj3*x2752*x2754))+(((0.1491)*x2741))+(((-1.0)*x2744*x2748))+((x2739*x2747*x2751))+(((-0.1491)*x2744*x2747))+(((-1.0)*cj2*x2741*x2742))+(((0.008604)*cj3))+((cj2*x2741*x2754))+(((-1.0)*x2747*x2757))+(((-1.0)*cj3*x2755))+(((0.005964)*x2747))+((cj3*x2749))+(((-1.0)*x2748*x2752))+(((-1.0)*x2741*x2743))+(((-1.0)*x2747*x2751*x2759))+(((0.2151)*cj2*x2741))+(((-0.1491)*x2747*x2752))+((x2741*x2753))+((cj3*x2742*x2752))+(((-0.04)*x2743*x2747))+((cj3*x2742*x2744))+(((-1.0)*cj3*x2744*x2754)))),IkReal(((((-1.0)*x2744*x2756))+(((-1.0)*x2744*x2746*x2754))+(((0.005964)*sj3))+(((0.008604)*x2746))+(((-1.0)*x2752*x2756))+((x2746*x2749))+((x2742*x2758))+(((-1.0)*sj3*x2751*x2759))+(((-1.0)*pz*x2747*x2753))+(((-1.0)*pz*x2748))+((pz*x2743*x2747))+((x2750*x2753))+(((-0.2151)*x2744*x2746))+((sj3*x2757*x2760))+((x2742*x2744*x2746))+(((-1.0)*x2746*x2755))+(((-0.1491)*pz*x2747))+(((-1.0)*x2754*x2758))+(((-0.2151)*x2746*x2752))+(((-1.0)*sj3*x2757))+((x2742*x2746*x2752))+(((-1.0)*x2746*x2752*x2754))+((sj3*x2739*x2751))+(((-1.0)*x2743*x2750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2762.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2761.value)))+(x2762.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2763=IKsin(j1);
IkReal x2764=IKcos(j1);
IkReal x2765=((0.2688)*sj4);
IkReal x2766=(cj0*px);
IkReal x2767=(px*sj0);
IkReal x2768=((0.0325)*sj4);
IkReal x2769=(cj0*py);
IkReal x2770=(py*sj0);
IkReal x2771=(cj3*sj2);
IkReal x2772=((1.0)*pz);
IkReal x2773=(sj2*sj3);
IkReal x2774=((0.4302)*cj2);
IkReal x2775=(cj3*pz);
IkReal x2776=((0.0325)*cj4);
IkReal x2777=((0.2688)*cj4);
IkReal x2778=(sj3*x2763);
IkReal x2779=(sj3*x2764);
IkReal x2780=(sj2*x2763);
IkReal x2781=(sj2*x2764);
IkReal x2782=(cj2*x2764);
IkReal x2783=(cj2*cj3*x2763);
IkReal x2784=((1.0)*cj3*x2764);
evalcond[0]=((0.2151)+x2777+(((-1.0)*x2766*x2780))+(((0.1491)*cj2))+(((-1.0)*x2770*x2780))+(((-1.0)*x2768))+(((-1.0)*cj2*x2769))+((cj2*x2767))+(((0.04)*x2780))+(((-1.0)*x2772*x2781)));
evalcond[1]=((((-0.0925)*x2778))+(((-0.2151)*x2781))+(((-1.0)*cj3*x2765*x2782))+(((-1.0)*cj3*x2776*x2782))+pz+((x2765*x2778))+((x2768*x2781))+((x2776*x2778))+(((-1.0)*x2777*x2781))+(((0.0925)*cj3*x2782)));
evalcond[2]=((0.04)+(((-0.0925)*x2779))+(((-1.0)*x2770))+(((-1.0)*x2766))+(((0.2151)*x2780))+((x2765*x2783))+((x2777*x2780))+((x2776*x2783))+(((-1.0)*x2768*x2780))+(((-0.0925)*x2783))+((x2765*x2779))+((x2776*x2779)));
evalcond[3]=(((x2763*x2775))+((cj2*x2766*x2778))+(((-1.0)*x2769*x2773))+(((0.04)*cj3*x2764))+(((0.1491)*x2773))+(((-0.04)*cj2*x2778))+((cj2*pz*x2779))+(((-1.0)*x2766*x2784))+((x2767*x2773))+(((-1.0)*x2770*x2784))+((cj2*x2770*x2778)));
evalcond[4]=((0.0925)+((x2770*x2779))+(((-1.0)*x2769*x2771))+((x2766*x2779))+(((-0.04)*x2783))+(((0.1491)*x2771))+(((-1.0)*x2765))+((x2770*x2783))+(((-1.0)*x2772*x2778))+(((-1.0)*x2776))+((x2766*x2783))+((x2775*x2782))+(((-0.04)*x2779))+((x2767*x2771)));
evalcond[5]=((-0.00534538)+(((0.0074)*x2783))+(((0.08)*x2766))+((x2769*x2774))+(((0.185)*pz*x2778))+(((-0.185)*x2766*x2779))+(((0.08)*x2770))+(((-0.185)*x2770*x2779))+(((0.4302)*x2766*x2780))+(((-0.185)*x2775*x2782))+(((0.185)*x2769*x2771))+(((0.2982)*x2769))+(((-1.0)*pp))+(((-1.0)*x2767*x2774))+(((0.0074)*x2779))+(((0.4302)*x2770*x2780))+(((-0.185)*x2766*x2783))+(((-0.185)*x2767*x2771))+(((-0.0275835)*x2771))+(((0.4302)*pz*x2781))+(((-0.2982)*x2767))+(((-0.185)*x2770*x2783))+(((-0.06414282)*cj2))+(((-0.017208)*x2780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x247=((1.0)*sj2);
IkReal x248=(cj2*cj4);
IkReal x249=(sj0*sj3);
IkReal x250=((1.0)*sj0);
IkReal x251=(cj4*sj3);
IkReal x252=((1.0)*cj2);
IkReal x253=(sj1*sj3);
IkReal x254=(cj3*sj4);
IkReal x255=((1.0)*sj1);
IkReal x256=(sj1*x251);
IkReal x257=((1.0)*cj1*sj3);
IkReal x258=((-1.0)*cj1);
IkReal x259=((((-1.0)*x252*x253))+((cj1*cj3)));
IkReal x260=((((-1.0)*sj4*x247))+((cj3*x248)));
IkReal x261=(((cj2*sj4))+((cj3*cj4*sj2)));
IkReal x262=((((-1.0)*x247*x254))+x248);
IkReal x263=(cj0*x259);
IkReal x264=(cj0*x261);
IkReal x265=((1.0)*x260);
IkReal x266=((((-1.0)*cj1*sj3*x252))+(((-1.0)*cj3*x255)));
IkReal x267=((((-1.0)*cj4*x247))+(((-1.0)*x252*x254)));
IkReal x268=((-1.0)*sj0*x261);
IkReal x269=(((sj0*x259))+((cj0*sj2*sj3)));
IkReal x270=((((-1.0)*sj2*x249))+x263);
IkReal x271=(((x258*x260))+x256);
IkReal x272=((((-1.0)*x255*x260))+(((-1.0)*cj1*x251)));
IkReal x273=((((-1.0)*x255*x267))+((cj1*sj3*sj4)));
IkReal x274=(((x251*x258))+(((-1.0)*sj1*x260)));
IkReal x275=(cj0*x272);
IkReal x276=(((x258*x267))+(((-1.0)*sj4*x253)));
IkReal x277=(x264+((sj0*x272)));
IkReal x278=((((-1.0)*x250*x262))+((cj0*x273)));
IkReal x279=(((cj0*x262))+((sj0*x273)));
new_r00=(((r10*x269))+((r00*x270))+((r20*x266)));
new_r01=(((r21*x266))+((r01*x270))+((r11*x269)));
new_r02=(((r22*x266))+((r02*((x263+(((-1.0)*x247*x249))))))+((r12*x269)));
new_r10=(((r20*(((((-1.0)*cj1*x265))+x256))))+((r10*((x264+((sj0*x274))))))+((r00*((x268+((cj0*x274)))))));
new_r11=(((r21*x271))+((r11*x277))+((r01*((x268+x275)))));
new_r12=(((r22*x271))+((r12*x277))+((r02*(((((-1.0)*x250*x261))+x275)))));
new_r20=(((r00*x278))+((r10*x279))+((r20*x276)));
new_r21=(((r21*x276))+((r01*x278))+((r11*x279)));
new_r22=(((r02*x278))+((r22*x276))+((r12*x279)));
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
sj6array[0]=((-1.0)*new_r22);
if( sj6array[0] >= -1-IKFAST_SINCOS_THRESH && sj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKasin(sj6array[0]);
    cj6array[0] = IKcos(j6array[0]);
    sj6array[1] = sj6array[0];
    j6array[1] = j6array[0] > 0 ? (IKPI-j6array[0]) : (-IKPI-j6array[0]);
    cj6array[1] = -cj6array[0];
}
else if( isnan(sj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
j7eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
j5eval[0]=cj6;
j5eval[1]=IKsign(cj6);
j5eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj6;
j5eval[1]=new_r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j7mul = 1;
j7=0;
j5mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].fmul = j7mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 7;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j7mul = 1;
j7=0;
j5mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5=IKatan2(((-1.0)*new_r01), new_r11);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].fmul = j5mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].fmul = j7mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 7;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x280=new_r22*new_r22;
IkReal x281=((16.0)*new_r10);
IkReal x282=((16.0)*new_r01);
IkReal x283=((16.0)*new_r00);
IkReal x284=(new_r11*new_r22);
IkReal x285=((8.0)*new_r00);
IkReal x286=(x280*x281);
IkReal x287=(x280*x282);
j5eval[0]=((IKabs((((new_r22*x285))+(((-8.0)*new_r11)))))+(IKabs((x286+(((-1.0)*x281)))))+(IKabs(((((-32.0)*new_r11*x280))+(((16.0)*new_r11))+((new_r22*x283)))))+(IKabs(((((-8.0)*x284))+((x280*x285)))))+(IKabs((x282+(((-1.0)*x287)))))+(IKabs((x287+(((-1.0)*x282)))))+(IKabs((x281+(((-1.0)*x286)))))+(IKabs(((((32.0)*new_r00))+(((-1.0)*x280*x283))+(((-16.0)*x284))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5, j7]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j5evalpoly[1];
IkReal x288=new_r22*new_r22;
IkReal x289=((16.0)*new_r01);
IkReal x290=(new_r00*new_r22);
IkReal x291=(x288*x289);
IkReal x292=((((-8.0)*new_r11))+(((8.0)*x290)));
op[0]=x292;
op[1]=(x291+(((-1.0)*x289)));
op[2]=((((-32.0)*new_r11*x288))+(((16.0)*new_r11))+(((16.0)*x290)));
op[3]=((((-1.0)*x291))+x289);
op[4]=x292;
polyroots4(op,zeror,numroots);
IkReal j5array[4], cj5array[4], sj5array[4], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[4]={true,true,true,true};
_nj5 = 4;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x293=new_r22*new_r22;
IkReal x294=((16.0)*new_r10);
IkReal x295=(new_r11*new_r22);
IkReal x296=((8.0)*x295);
IkReal x297=(new_r00*x293);
IkReal x298=((8.0)*x297);
IkReal x299=(x293*x294);
j5evalpoly[0]=((((-1.0)*x296))+((htj5*(((((-1.0)*x294))+x299))))+(((htj5*htj5)*(((((32.0)*new_r00))+(((-16.0)*x297))+(((-16.0)*x295))))))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x296))+x298))))+(((htj5*htj5*htj5)*(((((-1.0)*x299))+x294))))+x298);
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j7eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x300=cj5*cj5;
IkReal x301=new_r22*new_r22;
IkReal x302=(new_r22*sj5);
IkReal x303=((((-1.0)*x300))+(((-1.0)*x301))+((x300*x301)));
j7eval[0]=x303;
j7eval[1]=((IKabs((((new_r00*x302))+((cj5*new_r01)))))+(IKabs(((((-1.0)*cj5*new_r00))+((new_r01*x302))))));
j7eval[2]=IKsign(x303);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=new_r22;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=cj5;
j7eval[1]=new_r22;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x304=IKsin(j7);
IkReal x305=IKcos(j7);
IkReal x306=((1.0)*new_r01);
IkReal x307=((1.0)*new_r00);
IkReal x308=((1.0)*x305);
IkReal x309=((1.0)*x304);
evalcond[0]=(x304+new_r11);
evalcond[1]=(new_r10+(((-1.0)*x308)));
evalcond[2]=((((-1.0)*new_r22*x309))+(((-1.0)*x307)));
evalcond[3]=((((-1.0)*new_r22*x308))+(((-1.0)*x306)));
evalcond[4]=((((-1.0)*new_r22*x307))+(((-1.0)*x309)));
evalcond[5]=((((-1.0)*new_r22*x306))+(((-1.0)*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x310=IKsin(j7);
IkReal x311=IKcos(j7);
IkReal x312=((1.0)*x311);
IkReal x313=((1.0)*x310);
evalcond[0]=(x310+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*new_r22*x313))+new_r00);
evalcond[2]=((((-1.0)*new_r22*x312))+new_r01);
evalcond[3]=((((-1.0)*x312))+(((-1.0)*new_r10)));
evalcond[4]=(((new_r00*new_r22))+(((-1.0)*x313)));
evalcond[5]=(((new_r01*new_r22))+(((-1.0)*x312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x314=new_r22*new_r22;
CheckValue<IkReal> x315=IKPowWithIntegerCheck(((-1.0)+x314),-1);
if(!x315.valid){
continue;
}
if(((x314*(x315.value))) < -0.00001)
continue;
IkReal gconst58=IKsqrt((x314*(x315.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst58))+cj5)))+(IKabs(((-1.0)+(IKsign(sj5)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst58*gconst58))))) < -0.00001)
continue;
IkReal x316=IKsqrt(((1.0)+(((-1.0)*(gconst58*gconst58)))));
if( IKabs(((((-1.0)*new_r11*x316))+(((-1.0)*gconst58*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r10*x316))+((gconst58*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*x316))+(((-1.0)*gconst58*new_r01))))+IKsqr((((new_r10*x316))+((gconst58*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r11*x316))+(((-1.0)*gconst58*new_r01))), (((new_r10*x316))+((gconst58*new_r00))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x317=IKcos(j7);
IkReal x318=IKsin(j7);
IkReal x319=((1.0)*new_r00);
IkReal x320=(gconst58*new_r11);
IkReal x321=((1.0)*new_r01);
IkReal x322=(gconst58*new_r10);
IkReal x323=((1.0)*x317);
IkReal x324=((1.0)*x318);
IkReal x325=(new_r22*x323);
IkReal x326=x316;
IkReal x327=(new_r22*x326);
evalcond[0]=(x318+((new_r11*x326))+((gconst58*new_r01)));
evalcond[1]=((((-1.0)*x323))+((new_r10*x326))+((gconst58*new_r00)));
evalcond[2]=(((x317*x327))+((gconst58*x318))+new_r01);
evalcond[3]=(((x318*x326))+new_r11+(((-1.0)*gconst58*x325)));
evalcond[4]=((((-1.0)*new_r22*x324))+x322+(((-1.0)*x319*x326)));
evalcond[5]=((((-1.0)*x321*x326))+(((-1.0)*x325))+x320);
evalcond[6]=(((x318*x327))+new_r00+(((-1.0)*gconst58*x323)));
evalcond[7]=((((-1.0)*x323*x326))+(((-1.0)*gconst58*new_r22*x324))+new_r10);
evalcond[8]=(((new_r22*x322))+(((-1.0)*x324))+(((-1.0)*x319*x327)));
evalcond[9]=(((new_r22*x320))+(((-1.0)*x321*x327))+(((-1.0)*x323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x328=new_r22*new_r22;
CheckValue<IkReal> x329=IKPowWithIntegerCheck(((-1.0)+x328),-1);
if(!x329.valid){
continue;
}
if(((x328*(x329.value))) < -0.00001)
continue;
IkReal gconst58=IKsqrt((x328*(x329.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst58))+cj5)))+(IKabs(((1.0)+(IKsign(sj5)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst58*gconst58))))) < -0.00001)
continue;
IkReal x330=IKsqrt(((1.0)+(((-1.0)*(gconst58*gconst58)))));
if( IKabs((((new_r11*x330))+(((-1.0)*gconst58*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r10*x330))+((gconst58*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*x330))+(((-1.0)*gconst58*new_r01))))+IKsqr(((((-1.0)*new_r10*x330))+((gconst58*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((new_r11*x330))+(((-1.0)*gconst58*new_r01))), ((((-1.0)*new_r10*x330))+((gconst58*new_r00))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x331=IKsin(j7);
IkReal x332=IKcos(j7);
IkReal x333=(gconst58*new_r11);
IkReal x334=(gconst58*new_r10);
IkReal x335=(gconst58*new_r22);
IkReal x336=((1.0)*x332);
IkReal x337=((1.0)*x331);
IkReal x338=x330;
IkReal x339=(new_r00*x338);
IkReal x340=(new_r22*x338);
IkReal x341=((1.0)*x338);
evalcond[0]=((((-1.0)*new_r11*x341))+x331+((gconst58*new_r01)));
evalcond[1]=((((-1.0)*new_r10*x341))+(((-1.0)*x336))+((gconst58*new_r00)));
evalcond[2]=((((-1.0)*new_r22*x337))+x339+x334);
evalcond[3]=((((-1.0)*new_r22*x336))+((new_r01*x338))+x333);
evalcond[4]=(((gconst58*x331))+(((-1.0)*x336*x340))+new_r01);
evalcond[5]=(((x332*x338))+new_r10+(((-1.0)*x335*x337)));
evalcond[6]=(((new_r22*x334))+((new_r22*x339))+(((-1.0)*x337)));
evalcond[7]=(((new_r22*x333))+((new_r01*x340))+(((-1.0)*x336)));
evalcond[8]=((((-1.0)*x337*x338))+new_r11+(((-1.0)*x335*x336)));
evalcond[9]=((((-1.0)*gconst58*x336))+(((-1.0)*x337*x340))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x342=new_r22*new_r22;
CheckValue<IkReal> x343=IKPowWithIntegerCheck(((-1.0)+x342),-1);
if(!x343.valid){
continue;
}
if(((x342*(x343.value))) < -0.00001)
continue;
IkReal gconst59=((-1.0)*(IKsqrt((x342*(x343.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj5)))))+(IKabs(((((-1.0)*gconst59))+cj5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst59*gconst59))))) < -0.00001)
continue;
IkReal x344=IKsqrt(((1.0)+(((-1.0)*(gconst59*gconst59)))));
if( IKabs(((((-1.0)*new_r11*x344))+(((-1.0)*gconst59*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst59*new_r00))+((new_r10*x344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*x344))+(((-1.0)*gconst59*new_r01))))+IKsqr((((gconst59*new_r00))+((new_r10*x344))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r11*x344))+(((-1.0)*gconst59*new_r01))), (((gconst59*new_r00))+((new_r10*x344))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x345=IKcos(j7);
IkReal x346=IKsin(j7);
IkReal x347=(gconst59*new_r11);
IkReal x348=(gconst59*new_r10);
IkReal x349=(gconst59*new_r22);
IkReal x350=((1.0)*x345);
IkReal x351=((1.0)*x346);
IkReal x352=x344;
IkReal x353=(new_r22*x352);
IkReal x354=((1.0)*x352);
IkReal x355=(new_r01*x354);
evalcond[0]=(((gconst59*new_r01))+x346+((new_r11*x352)));
evalcond[1]=(((gconst59*new_r00))+(((-1.0)*x350))+((new_r10*x352)));
evalcond[2]=(((x345*x353))+new_r01+((gconst59*x346)));
evalcond[3]=(((x346*x352))+(((-1.0)*x349*x350))+new_r11);
evalcond[4]=((((-1.0)*new_r22*x351))+x348+(((-1.0)*new_r00*x354)));
evalcond[5]=((((-1.0)*new_r22*x350))+(((-1.0)*x355))+x347);
evalcond[6]=(((x346*x353))+new_r00+(((-1.0)*gconst59*x350)));
evalcond[7]=((((-1.0)*x349*x351))+new_r10+(((-1.0)*x350*x352)));
evalcond[8]=(((new_r22*x348))+(((-1.0)*x351))+(((-1.0)*new_r00*x353)));
evalcond[9]=(((new_r22*x347))+(((-1.0)*x350))+(((-1.0)*new_r01*x353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x356=new_r22*new_r22;
CheckValue<IkReal> x357=IKPowWithIntegerCheck(((-1.0)+x356),-1);
if(!x357.valid){
continue;
}
if(((x356*(x357.value))) < -0.00001)
continue;
IkReal gconst59=((-1.0)*(IKsqrt((x356*(x357.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst59))+cj5)))+(IKabs(((1.0)+(IKsign(sj5)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if((((1.0)+(((-1.0)*(gconst59*gconst59))))) < -0.00001)
continue;
IkReal x358=IKsqrt(((1.0)+(((-1.0)*(gconst59*gconst59)))));
if( IKabs(((((-1.0)*gconst59*new_r01))+((new_r11*x358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst59*new_r00))+(((-1.0)*new_r10*x358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst59*new_r01))+((new_r11*x358))))+IKsqr((((gconst59*new_r00))+(((-1.0)*new_r10*x358))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*gconst59*new_r01))+((new_r11*x358))), (((gconst59*new_r00))+(((-1.0)*new_r10*x358))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x359=IKsin(j7);
IkReal x360=IKcos(j7);
IkReal x361=(gconst59*new_r11);
IkReal x362=(gconst59*new_r10);
IkReal x363=((1.0)*x360);
IkReal x364=((1.0)*new_r22*x359);
IkReal x365=x358;
IkReal x366=(new_r00*x365);
IkReal x367=((1.0)*x365);
IkReal x368=(new_r01*x365);
IkReal x369=(x360*x365);
evalcond[0]=(((gconst59*new_r01))+x359+(((-1.0)*new_r11*x367)));
evalcond[1]=((((-1.0)*x363))+((gconst59*new_r00))+(((-1.0)*new_r10*x367)));
evalcond[2]=((((-1.0)*x364))+x362+x366);
evalcond[3]=((((-1.0)*new_r22*x363))+x368+x361);
evalcond[4]=(((gconst59*x359))+new_r01+(((-1.0)*new_r22*x363*x365)));
evalcond[5]=(x369+new_r10+(((-1.0)*gconst59*x364)));
evalcond[6]=(((new_r22*x366))+((new_r22*x362))+(((-1.0)*x359)));
evalcond[7]=(((new_r22*x361))+((new_r22*x368))+(((-1.0)*x363)));
evalcond[8]=((((-1.0)*gconst59*new_r22*x363))+(((-1.0)*x359*x367))+new_r11);
evalcond[9]=((((-1.0)*x364*x365))+new_r00+(((-1.0)*gconst59*x363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x370=((1.0)*cj5*new_r01);
CheckValue<IkReal> x371=IKPowWithIntegerCheck(cj5,-1);
if(!x371.valid){
continue;
}
CheckValue<IkReal> x372=IKPowWithIntegerCheck(new_r22,-1);
if(!x372.valid){
continue;
}
if( IKabs(((((-1.0)*x370))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x371.value)*(x372.value)*((((new_r11*(cj5*cj5)))+(((-1.0)*sj5*x370)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x370))+(((-1.0)*new_r11*sj5))))+IKsqr(((x371.value)*(x372.value)*((((new_r11*(cj5*cj5)))+(((-1.0)*sj5*x370))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*x370))+(((-1.0)*new_r11*sj5))), ((x371.value)*(x372.value)*((((new_r11*(cj5*cj5)))+(((-1.0)*sj5*x370))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x373=IKsin(j7);
IkReal x374=IKcos(j7);
IkReal x375=((1.0)*sj5);
IkReal x376=(cj5*new_r22);
IkReal x377=((1.0)*x374);
IkReal x378=((1.0)*x373);
IkReal x379=(sj5*x373);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x373);
evalcond[1]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x377)));
evalcond[2]=(((new_r22*sj5*x374))+((cj5*x373))+new_r01);
evalcond[3]=(x379+(((-1.0)*x376*x377))+new_r11);
evalcond[4]=((((-1.0)*new_r00*x375))+((cj5*new_r10))+(((-1.0)*new_r22*x378)));
evalcond[5]=(((cj5*new_r11))+(((-1.0)*new_r22*x377))+(((-1.0)*new_r01*x375)));
evalcond[6]=((((-1.0)*cj5*x377))+new_r00+((new_r22*x379)));
evalcond[7]=((((-1.0)*x374*x375))+(((-1.0)*x376*x378))+new_r10);
evalcond[8]=((((-1.0)*x378))+(((-1.0)*new_r00*new_r22*x375))+((new_r10*x376)));
evalcond[9]=((((-1.0)*x377))+(((-1.0)*new_r01*new_r22*x375))+((new_r11*x376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x380=((1.0)*new_r01);
CheckValue<IkReal> x381=IKPowWithIntegerCheck(new_r22,-1);
if(!x381.valid){
continue;
}
if( IKabs(((((-1.0)*cj5*x380))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x381.value)*(((((-1.0)*sj5*x380))+((cj5*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x380))+(((-1.0)*new_r11*sj5))))+IKsqr(((x381.value)*(((((-1.0)*sj5*x380))+((cj5*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj5*x380))+(((-1.0)*new_r11*sj5))), ((x381.value)*(((((-1.0)*sj5*x380))+((cj5*new_r11))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x382=IKsin(j7);
IkReal x383=IKcos(j7);
IkReal x384=((1.0)*sj5);
IkReal x385=(cj5*new_r22);
IkReal x386=((1.0)*x383);
IkReal x387=((1.0)*x382);
IkReal x388=(sj5*x382);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x382);
evalcond[1]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x386)));
evalcond[2]=(((new_r22*sj5*x383))+((cj5*x382))+new_r01);
evalcond[3]=(x388+new_r11+(((-1.0)*x385*x386)));
evalcond[4]=(((cj5*new_r10))+(((-1.0)*new_r00*x384))+(((-1.0)*new_r22*x387)));
evalcond[5]=(((cj5*new_r11))+(((-1.0)*new_r01*x384))+(((-1.0)*new_r22*x386)));
evalcond[6]=(((new_r22*x388))+(((-1.0)*cj5*x386))+new_r00);
evalcond[7]=(new_r10+(((-1.0)*x385*x387))+(((-1.0)*x383*x384)));
evalcond[8]=((((-1.0)*new_r00*new_r22*x384))+((new_r10*x385))+(((-1.0)*x387)));
evalcond[9]=((((-1.0)*new_r01*new_r22*x384))+((new_r11*x385))+(((-1.0)*x386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x389=cj5*cj5;
IkReal x390=new_r22*new_r22;
IkReal x391=(new_r22*sj5);
CheckValue<IkReal> x392 = IKatan2WithCheck(IkReal((((cj5*new_r01))+((new_r00*x391)))),IkReal(((((-1.0)*cj5*new_r00))+((new_r01*x391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x392.valid){
continue;
}
CheckValue<IkReal> x393=IKPowWithIntegerCheck(IKsign(((((-1.0)*x390))+(((-1.0)*x389))+((x389*x390)))),-1);
if(!x393.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x392.value)+(((1.5707963267949)*(x393.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[10];
IkReal x394=IKsin(j7);
IkReal x395=IKcos(j7);
IkReal x396=((1.0)*sj5);
IkReal x397=(cj5*new_r22);
IkReal x398=((1.0)*x395);
IkReal x399=((1.0)*x394);
IkReal x400=(sj5*x394);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x394);
evalcond[1]=((((-1.0)*x398))+((new_r10*sj5))+((cj5*new_r00)));
evalcond[2]=(((cj5*x394))+new_r01+((new_r22*sj5*x395)));
evalcond[3]=(x400+(((-1.0)*x397*x398))+new_r11);
evalcond[4]=((((-1.0)*new_r22*x399))+((cj5*new_r10))+(((-1.0)*new_r00*x396)));
evalcond[5]=((((-1.0)*new_r01*x396))+(((-1.0)*new_r22*x398))+((cj5*new_r11)));
evalcond[6]=((((-1.0)*cj5*x398))+((new_r22*x400))+new_r00);
evalcond[7]=((((-1.0)*x395*x396))+(((-1.0)*x397*x399))+new_r10);
evalcond[8]=((((-1.0)*x399))+(((-1.0)*new_r00*new_r22*x396))+((new_r10*x397)));
evalcond[9]=(((new_r11*x397))+(((-1.0)*x398))+(((-1.0)*new_r01*new_r22*x396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5, j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x402=IKPowWithIntegerCheck(cj6,-1);
if(!x402.valid){
continue;
}
IkReal x401=x402.value;
CheckValue<IkReal> x403=IKPowWithIntegerCheck(new_r02,-1);
if(!x403.valid){
continue;
}
CheckValue<IkReal> x404=IKPowWithIntegerCheck(x401,-2);
if(!x404.valid){
continue;
}
if( IKabs((x401*(x403.value)*(((x404.value)+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x401)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x401*(x403.value)*(((x404.value)+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x401))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x401*(x403.value)*(((x404.value)+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x401));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x405=IKsin(j5);
IkReal x406=IKcos(j5);
IkReal x407=(new_r12*x406);
IkReal x408=(cj6*x406);
IkReal x409=(new_r02*x405);
IkReal x410=((1.0)*cj6*x405);
evalcond[0]=(x408+new_r12);
evalcond[1]=(new_r02+(((-1.0)*x410)));
evalcond[2]=(((new_r12*x405))+((new_r02*x406)));
evalcond[3]=(cj6+x407+(((-1.0)*x409)));
evalcond[4]=(((new_r20*sj6))+((new_r10*x408))+(((-1.0)*new_r00*x410)));
evalcond[5]=(((new_r11*x408))+((new_r21*sj6))+(((-1.0)*new_r01*x410)));
evalcond[6]=(((sj6*x409))+(((-1.0)*sj6*x407))+((cj6*new_r22)));
evalcond[7]=((1.0)+(((-1.0)*cj6*x409))+((new_r22*sj6))+((cj6*x407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
j7eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj6;
j7eval[1]=sj5;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=sj5;
j7eval[2]=sj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x411=((1.0)*cj5);
if( IKabs(((((-1.0)*new_r11*sj5))+(((-1.0)*new_r01*x411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj5))+(((-1.0)*new_r11*x411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj5))+(((-1.0)*new_r01*x411))))+IKsqr((((new_r01*sj5))+(((-1.0)*new_r11*x411))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r11*sj5))+(((-1.0)*new_r01*x411))), (((new_r01*sj5))+(((-1.0)*new_r11*x411))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x412=IKsin(j7);
IkReal x413=IKcos(j7);
IkReal x414=((1.0)*sj5);
IkReal x415=(cj5*x412);
IkReal x416=(cj5*x413);
IkReal x417=(x413*x414);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x412);
evalcond[1]=(((cj5*new_r10))+x412+(((-1.0)*new_r00*x414)));
evalcond[2]=(((cj5*new_r11))+x413+(((-1.0)*new_r01*x414)));
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x413)));
evalcond[4]=(((sj5*x412))+x416+new_r11);
evalcond[5]=(x415+new_r01+(((-1.0)*x417)));
evalcond[6]=(x415+new_r10+(((-1.0)*x417)));
evalcond[7]=((((-1.0)*x412*x414))+new_r00+(((-1.0)*x416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x418=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj5*x418))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x418))+((cj5*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x418))+(((-1.0)*new_r11*sj5))))+IKsqr(((((-1.0)*sj5*x418))+((cj5*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj5*x418))+(((-1.0)*new_r11*sj5))), ((((-1.0)*sj5*x418))+((cj5*new_r11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x419=IKsin(j7);
IkReal x420=IKcos(j7);
IkReal x421=((1.0)*sj5);
IkReal x422=((1.0)*x420);
IkReal x423=(sj5*x419);
IkReal x424=((1.0)*x419);
IkReal x425=(cj5*x422);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x419);
evalcond[1]=(((new_r10*sj5))+(((-1.0)*x422))+((cj5*new_r00)));
evalcond[2]=(((cj5*x419))+((sj5*x420))+new_r01);
evalcond[3]=((((-1.0)*x425))+x423+new_r11);
evalcond[4]=((((-1.0)*new_r00*x421))+((cj5*new_r10))+(((-1.0)*x424)));
evalcond[5]=(((cj5*new_r11))+(((-1.0)*x422))+(((-1.0)*new_r01*x421)));
evalcond[6]=((((-1.0)*x425))+x423+new_r00);
evalcond[7]=((((-1.0)*x420*x421))+(((-1.0)*cj5*x424))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x426=IKcos(j7);
IkReal x427=IKsin(j7);
IkReal x428=((1.0)*sj6);
IkReal x429=((1.0)*x426);
IkReal x430=((1.0)*x427);
evalcond[0]=(x427+new_r01);
evalcond[1]=((((-1.0)*x429))+new_r00);
evalcond[2]=(((sj6*x426))+new_r11);
evalcond[3]=(((sj6*x427))+new_r10);
evalcond[4]=((((-1.0)*cj6*x430))+new_r20);
evalcond[5]=((((-1.0)*cj6*x429))+new_r21);
evalcond[6]=((((-1.0)*x430))+(((-1.0)*new_r10*x428))+((cj6*new_r20)));
evalcond[7]=((((-1.0)*x429))+(((-1.0)*new_r11*x428))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x431=IKsin(j7);
IkReal x432=IKcos(j7);
IkReal x433=((1.0)*x432);
IkReal x434=((1.0)*x431);
evalcond[0]=(x431+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*cj6*x434))+new_r20);
evalcond[2]=((((-1.0)*cj6*x433))+new_r21);
evalcond[3]=(new_r11+(((-1.0)*sj6*x433)));
evalcond[4]=((((-1.0)*x433))+(((-1.0)*new_r00)));
evalcond[5]=(((sj6*x431))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x434))+((new_r10*sj6))+((cj6*new_r20)));
evalcond[7]=((((-1.0)*x433))+((new_r11*sj6))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r20, new_r21);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x435=IKsin(j7);
IkReal x436=IKcos(j7);
IkReal x437=((1.0)*x436);
evalcond[0]=((((-1.0)*x435))+new_r20);
evalcond[1]=((((-1.0)*x437))+new_r21);
evalcond[2]=(new_r11+((new_r02*x435)));
evalcond[3]=(((cj5*x435))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x437))+new_r10);
evalcond[5]=((((-1.0)*cj5*x437))+new_r00);
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x435);
evalcond[7]=((((-1.0)*x437))+((new_r10*sj5))+((cj5*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x438=IKsin(j7);
IkReal x439=IKcos(j7);
IkReal x440=((1.0)*x439);
evalcond[0]=(x438+new_r20);
evalcond[1]=(x439+new_r21);
evalcond[2]=(((cj5*x438))+new_r01);
evalcond[3]=(new_r10+((new_r02*x439)));
evalcond[4]=((((-1.0)*new_r02*x438))+new_r11);
evalcond[5]=((((-1.0)*cj5*x440))+new_r00);
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x438);
evalcond[7]=((((-1.0)*x440))+((new_r10*sj5))+((cj5*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x442=IKPowWithIntegerCheck(cj6,-1);
if(!x442.valid){
continue;
}
IkReal x441=x442.value;
CheckValue<IkReal> x443=IKPowWithIntegerCheck(sj5,-1);
if(!x443.valid){
continue;
}
CheckValue<IkReal> x444=IKPowWithIntegerCheck(sj6,-1);
if(!x444.valid){
continue;
}
if( IKabs((new_r20*x441)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x441*(x443.value)*(x444.value)*((((cj5*new_r20))+((cj6*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x441))+IKsqr((x441*(x443.value)*(x444.value)*((((cj5*new_r20))+((cj6*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x441), (x441*(x443.value)*(x444.value)*((((cj5*new_r20))+((cj6*new_r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x445=IKsin(j7);
IkReal x446=IKcos(j7);
IkReal x447=(new_r01*sj5);
IkReal x448=((1.0)*sj5);
IkReal x449=(cj5*sj6);
IkReal x450=(sj5*sj6);
IkReal x451=((1.0)*x446);
IkReal x452=(sj6*x445);
IkReal x453=((1.0)*x445);
evalcond[0]=((((-1.0)*cj6*x453))+new_r20);
evalcond[1]=((((-1.0)*cj6*x451))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x445);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x451)));
evalcond[4]=(((x446*x449))+((sj5*x445))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x448))+((cj5*new_r10))+x452);
evalcond[6]=(((sj6*x446))+((cj5*new_r11))+(((-1.0)*x447)));
evalcond[7]=((((-1.0)*sj6*x446*x448))+((cj5*x445))+new_r01);
evalcond[8]=(((x445*x449))+new_r10+(((-1.0)*x446*x448)));
evalcond[9]=((((-1.0)*cj5*x451))+new_r00+(((-1.0)*x448*x452)));
evalcond[10]=(((new_r00*x450))+(((-1.0)*new_r10*x449))+(((-1.0)*x453))+((cj6*new_r20)));
evalcond[11]=(((sj6*x447))+(((-1.0)*new_r11*x449))+(((-1.0)*x451))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x455=IKPowWithIntegerCheck(cj6,-1);
if(!x455.valid){
continue;
}
IkReal x454=x455.value;
CheckValue<IkReal> x456=IKPowWithIntegerCheck(sj5,-1);
if(!x456.valid){
continue;
}
if( IKabs((new_r20*x454)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x454*(x456.value)*((((cj6*new_r10))+((cj5*new_r20*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x454))+IKsqr((x454*(x456.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x454), (x454*(x456.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x457=IKsin(j7);
IkReal x458=IKcos(j7);
IkReal x459=(new_r01*sj5);
IkReal x460=((1.0)*sj5);
IkReal x461=(cj5*sj6);
IkReal x462=(sj5*sj6);
IkReal x463=((1.0)*x458);
IkReal x464=(sj6*x457);
IkReal x465=((1.0)*x457);
evalcond[0]=(new_r20+(((-1.0)*cj6*x465)));
evalcond[1]=(new_r21+(((-1.0)*cj6*x463)));
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x457);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x463)));
evalcond[4]=(new_r11+((x458*x461))+((sj5*x457)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*new_r00*x460))+x464);
evalcond[6]=(((sj6*x458))+((cj5*new_r11))+(((-1.0)*x459)));
evalcond[7]=(((cj5*x457))+new_r01+(((-1.0)*sj6*x458*x460)));
evalcond[8]=((((-1.0)*x458*x460))+new_r10+((x457*x461)));
evalcond[9]=((((-1.0)*x460*x464))+(((-1.0)*cj5*x463))+new_r00);
evalcond[10]=(((new_r00*x462))+(((-1.0)*new_r10*x461))+(((-1.0)*x465))+((cj6*new_r20)));
evalcond[11]=(((sj6*x459))+(((-1.0)*new_r11*x461))+(((-1.0)*x463))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x466=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x466.valid){
continue;
}
CheckValue<IkReal> x467 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x467.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x466.value)))+(x467.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x468=IKsin(j7);
IkReal x469=IKcos(j7);
IkReal x470=(new_r01*sj5);
IkReal x471=((1.0)*sj5);
IkReal x472=(cj5*sj6);
IkReal x473=(sj5*sj6);
IkReal x474=((1.0)*x469);
IkReal x475=(sj6*x468);
IkReal x476=((1.0)*x468);
evalcond[0]=(new_r20+(((-1.0)*cj6*x476)));
evalcond[1]=(new_r21+(((-1.0)*cj6*x474)));
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x468);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x474)));
evalcond[4]=(((x469*x472))+new_r11+((sj5*x468)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*new_r00*x471))+x475);
evalcond[6]=(((sj6*x469))+((cj5*new_r11))+(((-1.0)*x470)));
evalcond[7]=(((cj5*x468))+new_r01+(((-1.0)*sj6*x469*x471)));
evalcond[8]=((((-1.0)*x469*x471))+new_r10+((x468*x472)));
evalcond[9]=((((-1.0)*cj5*x474))+(((-1.0)*x471*x475))+new_r00);
evalcond[10]=((((-1.0)*new_r10*x472))+(((-1.0)*x476))+((new_r00*x473))+((cj6*new_r20)));
evalcond[11]=(((sj6*x470))+(((-1.0)*new_r11*x472))+(((-1.0)*x474))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x477=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x477.valid){
continue;
}
CheckValue<IkReal> x478 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x478.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x477.value)))+(x478.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x479=IKsin(j5);
IkReal x480=IKcos(j5);
IkReal x481=(new_r12*x480);
IkReal x482=(cj6*x480);
IkReal x483=(new_r02*x479);
IkReal x484=((1.0)*cj6*x479);
evalcond[0]=(x482+new_r12);
evalcond[1]=((((-1.0)*x484))+new_r02);
evalcond[2]=(((new_r12*x479))+((new_r02*x480)));
evalcond[3]=(cj6+(((-1.0)*x483))+x481);
evalcond[4]=(((new_r20*sj6))+(((-1.0)*new_r00*x484))+((new_r10*x482)));
evalcond[5]=((((-1.0)*new_r01*x484))+((new_r11*x482))+((new_r21*sj6)));
evalcond[6]=(((sj6*x483))+(((-1.0)*sj6*x481))+((cj6*new_r22)));
evalcond[7]=((1.0)+(((-1.0)*cj6*x483))+((new_r22*sj6))+((cj6*x481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=IKsign(cj6);
j7eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj6;
j7eval[1]=sj5;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
j7eval[0]=cj6;
j7eval[1]=sj5;
j7eval[2]=sj6;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x485=((1.0)*cj5);
if( IKabs(((((-1.0)*new_r01*x485))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x485))+((new_r01*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x485))+(((-1.0)*new_r11*sj5))))+IKsqr(((((-1.0)*new_r11*x485))+((new_r01*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*new_r01*x485))+(((-1.0)*new_r11*sj5))), ((((-1.0)*new_r11*x485))+((new_r01*sj5))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x486=IKsin(j7);
IkReal x487=IKcos(j7);
IkReal x488=((1.0)*sj5);
IkReal x489=(cj5*x486);
IkReal x490=(cj5*x487);
IkReal x491=(x487*x488);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x486);
evalcond[1]=(((cj5*new_r10))+(((-1.0)*new_r00*x488))+x486);
evalcond[2]=((((-1.0)*new_r01*x488))+((cj5*new_r11))+x487);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x487)));
evalcond[4]=(x490+((sj5*x486))+new_r11);
evalcond[5]=((((-1.0)*x491))+x489+new_r01);
evalcond[6]=((((-1.0)*x491))+x489+new_r10);
evalcond[7]=((((-1.0)*x486*x488))+(((-1.0)*x490))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x492=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj5*x492))+(((-1.0)*new_r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*new_r11))+(((-1.0)*sj5*x492)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*x492))+(((-1.0)*new_r11*sj5))))+IKsqr((((cj5*new_r11))+(((-1.0)*sj5*x492))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj5*x492))+(((-1.0)*new_r11*sj5))), (((cj5*new_r11))+(((-1.0)*sj5*x492))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x493=IKsin(j7);
IkReal x494=IKcos(j7);
IkReal x495=((1.0)*sj5);
IkReal x496=((1.0)*x494);
IkReal x497=(sj5*x493);
IkReal x498=((1.0)*x493);
IkReal x499=(cj5*x496);
evalcond[0]=(((new_r11*sj5))+((cj5*new_r01))+x493);
evalcond[1]=((((-1.0)*x496))+((new_r10*sj5))+((cj5*new_r00)));
evalcond[2]=(((cj5*x493))+new_r01+((sj5*x494)));
evalcond[3]=((((-1.0)*x499))+x497+new_r11);
evalcond[4]=((((-1.0)*new_r00*x495))+(((-1.0)*x498))+((cj5*new_r10)));
evalcond[5]=((((-1.0)*x496))+(((-1.0)*new_r01*x495))+((cj5*new_r11)));
evalcond[6]=((((-1.0)*x499))+x497+new_r00);
evalcond[7]=((((-1.0)*x494*x495))+(((-1.0)*cj5*x498))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x500=IKcos(j7);
IkReal x501=IKsin(j7);
IkReal x502=((1.0)*sj6);
IkReal x503=((1.0)*x500);
IkReal x504=((1.0)*x501);
evalcond[0]=(x501+new_r01);
evalcond[1]=((((-1.0)*x503))+new_r00);
evalcond[2]=(((sj6*x500))+new_r11);
evalcond[3]=(((sj6*x501))+new_r10);
evalcond[4]=((((-1.0)*cj6*x504))+new_r20);
evalcond[5]=((((-1.0)*cj6*x503))+new_r21);
evalcond[6]=((((-1.0)*x504))+(((-1.0)*new_r10*x502))+((cj6*new_r20)));
evalcond[7]=((((-1.0)*x503))+(((-1.0)*new_r11*x502))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x505=IKsin(j7);
IkReal x506=IKcos(j7);
IkReal x507=((1.0)*x506);
IkReal x508=((1.0)*x505);
evalcond[0]=(x505+(((-1.0)*new_r01)));
evalcond[1]=((((-1.0)*cj6*x508))+new_r20);
evalcond[2]=((((-1.0)*cj6*x507))+new_r21);
evalcond[3]=(new_r11+(((-1.0)*sj6*x507)));
evalcond[4]=((((-1.0)*x507))+(((-1.0)*new_r00)));
evalcond[5]=(((sj6*x505))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r10*sj6))+(((-1.0)*x508))+((cj6*new_r20)));
evalcond[7]=((((-1.0)*x507))+((new_r11*sj6))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r20, new_r21);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x509=IKsin(j7);
IkReal x510=IKcos(j7);
IkReal x511=((1.0)*x510);
evalcond[0]=(new_r20+(((-1.0)*x509)));
evalcond[1]=(new_r21+(((-1.0)*x511)));
evalcond[2]=(((new_r02*x509))+new_r11);
evalcond[3]=(((cj5*x509))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x511))+new_r10);
evalcond[5]=((((-1.0)*cj5*x511))+new_r00);
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x509);
evalcond[7]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x512=IKsin(j7);
IkReal x513=IKcos(j7);
IkReal x514=((1.0)*x513);
evalcond[0]=(x512+new_r20);
evalcond[1]=(x513+new_r21);
evalcond[2]=(((cj5*x512))+new_r01);
evalcond[3]=(((new_r02*x513))+new_r10);
evalcond[4]=(new_r11+(((-1.0)*new_r02*x512)));
evalcond[5]=((((-1.0)*cj5*x514))+new_r00);
evalcond[6]=(((new_r11*sj5))+((cj5*new_r01))+x512);
evalcond[7]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x516=IKPowWithIntegerCheck(cj6,-1);
if(!x516.valid){
continue;
}
IkReal x515=x516.value;
CheckValue<IkReal> x517=IKPowWithIntegerCheck(sj5,-1);
if(!x517.valid){
continue;
}
CheckValue<IkReal> x518=IKPowWithIntegerCheck(sj6,-1);
if(!x518.valid){
continue;
}
if( IKabs((new_r20*x515)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x515*(x517.value)*(x518.value)*((((cj5*new_r20))+((cj6*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x515))+IKsqr((x515*(x517.value)*(x518.value)*((((cj5*new_r20))+((cj6*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x515), (x515*(x517.value)*(x518.value)*((((cj5*new_r20))+((cj6*new_r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x519=IKsin(j7);
IkReal x520=IKcos(j7);
IkReal x521=(new_r01*sj5);
IkReal x522=((1.0)*sj5);
IkReal x523=(cj5*sj6);
IkReal x524=(sj5*sj6);
IkReal x525=((1.0)*x520);
IkReal x526=(sj6*x519);
IkReal x527=((1.0)*x519);
evalcond[0]=((((-1.0)*cj6*x527))+new_r20);
evalcond[1]=((((-1.0)*cj6*x525))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x519);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x525)));
evalcond[4]=(((sj5*x519))+((x520*x523))+new_r11);
evalcond[5]=(((cj5*new_r10))+(((-1.0)*new_r00*x522))+x526);
evalcond[6]=(((cj5*new_r11))+(((-1.0)*x521))+((sj6*x520)));
evalcond[7]=(((cj5*x519))+(((-1.0)*sj6*x520*x522))+new_r01);
evalcond[8]=(((x519*x523))+(((-1.0)*x520*x522))+new_r10);
evalcond[9]=((((-1.0)*x522*x526))+new_r00+(((-1.0)*cj5*x525)));
evalcond[10]=((((-1.0)*x527))+(((-1.0)*new_r10*x523))+((new_r00*x524))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x525))+(((-1.0)*new_r11*x523))+((sj6*x521))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x529=IKPowWithIntegerCheck(cj6,-1);
if(!x529.valid){
continue;
}
IkReal x528=x529.value;
CheckValue<IkReal> x530=IKPowWithIntegerCheck(sj5,-1);
if(!x530.valid){
continue;
}
if( IKabs((new_r20*x528)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x528*(x530.value)*((((cj6*new_r10))+((cj5*new_r20*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x528))+IKsqr((x528*(x530.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r20*x528), (x528*(x530.value)*((((cj6*new_r10))+((cj5*new_r20*sj6))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x531=IKsin(j7);
IkReal x532=IKcos(j7);
IkReal x533=(new_r01*sj5);
IkReal x534=((1.0)*sj5);
IkReal x535=(cj5*sj6);
IkReal x536=(sj5*sj6);
IkReal x537=((1.0)*x532);
IkReal x538=(sj6*x531);
IkReal x539=((1.0)*x531);
evalcond[0]=((((-1.0)*cj6*x539))+new_r20);
evalcond[1]=((((-1.0)*cj6*x537))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x531);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x537)));
evalcond[4]=(((sj5*x531))+new_r11+((x532*x535)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*new_r00*x534))+x538);
evalcond[6]=(((cj5*new_r11))+(((-1.0)*x533))+((sj6*x532)));
evalcond[7]=(((cj5*x531))+(((-1.0)*sj6*x532*x534))+new_r01);
evalcond[8]=((((-1.0)*x532*x534))+((x531*x535))+new_r10);
evalcond[9]=((((-1.0)*x534*x538))+new_r00+(((-1.0)*cj5*x537)));
evalcond[10]=((((-1.0)*x539))+(((-1.0)*new_r10*x535))+((new_r00*x536))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x537))+((sj6*x533))+(((-1.0)*new_r11*x535))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x540=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x540.valid){
continue;
}
CheckValue<IkReal> x541 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x541.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x540.value)))+(x541.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[12];
IkReal x542=IKsin(j7);
IkReal x543=IKcos(j7);
IkReal x544=(new_r01*sj5);
IkReal x545=((1.0)*sj5);
IkReal x546=(cj5*sj6);
IkReal x547=(sj5*sj6);
IkReal x548=((1.0)*x543);
IkReal x549=(sj6*x542);
IkReal x550=((1.0)*x542);
evalcond[0]=((((-1.0)*cj6*x550))+new_r20);
evalcond[1]=((((-1.0)*cj6*x548))+new_r21);
evalcond[2]=(((new_r11*sj5))+((cj5*new_r01))+x542);
evalcond[3]=(((new_r10*sj5))+((cj5*new_r00))+(((-1.0)*x548)));
evalcond[4]=(((x543*x546))+((sj5*x542))+new_r11);
evalcond[5]=(((cj5*new_r10))+(((-1.0)*new_r00*x545))+x549);
evalcond[6]=((((-1.0)*x544))+((cj5*new_r11))+((sj6*x543)));
evalcond[7]=(((cj5*x542))+(((-1.0)*sj6*x543*x545))+new_r01);
evalcond[8]=(((x542*x546))+new_r10+(((-1.0)*x543*x545)));
evalcond[9]=((((-1.0)*x545*x549))+new_r00+(((-1.0)*cj5*x548)));
evalcond[10]=(((new_r00*x547))+(((-1.0)*x550))+(((-1.0)*new_r10*x546))+((cj6*new_r20)));
evalcond[11]=((((-1.0)*x548))+((sj6*x544))+(((-1.0)*new_r11*x546))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x551=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x551.valid){
continue;
}
CheckValue<IkReal> x552 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x552.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x551.value)))+(x552.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x553=((1.0)*cj6);
evalcond[0]=((((-1.0)*x553*(IKsin(j7))))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x553*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=cj6;
j5eval[1]=IKsign(cj6);
j5eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj6;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x554=((1.0)*sj7);
IkReal x555=(((new_r10*new_r11))+((new_r00*new_r01)));
j5eval[0]=x555;
j5eval[1]=IKsign(x555);
j5eval[2]=((IKabs((((new_r01*sj7))+(((-1.0)*new_r10*x554)))))+(IKabs(((((-1.0)*new_r11*x554))+(((-1.0)*new_r00*x554))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x556=((1.0)*new_r11);
IkReal x557=((new_r01*new_r01)+(new_r11*new_r11));
j5eval[0]=x557;
j5eval[1]=((IKabs(((((-1.0)*new_r01*sj7))+(((-1.0)*cj7*x556)))))+(IKabs(((((-1.0)*sj7*x556))+((cj7*new_r01))))));
j5eval[2]=IKsign(x557);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x558=(((new_r11*sj7))+((cj7*new_r01)));
j5eval[0]=x558;
j5eval[1]=IKsign(x558);
j5eval[2]=((IKabs(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj7*sj7)))))+(IKabs(((-1.0)+(cj7*cj7)+(new_r01*new_r01)))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x560 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x560)==0){
continue;
}
IkReal x559=pow(x560,-0.5);
CheckValue<IkReal> x561 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x561.valid){
continue;
}
IkReal gconst52=((-1.0)*(x561.value));
IkReal gconst53=((-1.0)*new_r01*x559);
IkReal gconst54=(new_r11*x559);
CheckValue<IkReal> x562 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x562.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x562.value)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x565 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x565.valid){
continue;
}
IkReal x563=((-1.0)*(x565.value));
IkReal x564=x559;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x563;
IkReal gconst52=x563;
IkReal gconst53=((-1.0)*new_r01*x564);
IkReal gconst54=(new_r11*x564);
IkReal x566=new_r01*new_r01;
IkReal x567=(new_r00*new_r01);
IkReal x568=(((new_r10*new_r11))+x567);
IkReal x569=x559;
IkReal x570=(new_r01*x569);
j5eval[0]=x568;
j5eval[1]=((IKabs((((new_r10*x570))+(((-1.0)*x566*x569)))))+(IKabs((((new_r11*x570))+((x567*x569))))));
j5eval[2]=IKsign(x568);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x573 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x573.valid){
continue;
}
IkReal x571=((-1.0)*(x573.value));
IkReal x572=x559;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x571;
IkReal gconst52=x571;
IkReal gconst53=((-1.0)*new_r01*x572);
IkReal gconst54=(new_r11*x572);
IkReal x574=((new_r01*new_r01)+(new_r11*new_r11));
j5eval[0]=x574;
j5eval[1]=IKsign(x574);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x577 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x577.valid){
continue;
}
IkReal x575=((-1.0)*(x577.value));
IkReal x576=x559;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x575;
IkReal gconst52=x575;
IkReal gconst53=((-1.0)*new_r01*x576);
IkReal gconst54=(new_r11*x576);
IkReal x578=new_r01*new_r01;
IkReal x579=new_r11*new_r11;
IkReal x580=((1.0)*x578);
CheckValue<IkReal> x586=IKPowWithIntegerCheck((x579+x578),-1);
if(!x586.valid){
continue;
}
IkReal x581=x586.value;
CheckValue<IkReal> x587=IKPowWithIntegerCheck(((((-1.0)*x579))+(((-1.0)*x580))),-1);
if(!x587.valid){
continue;
}
IkReal x582=x587.value;
IkReal x583=((1.0)*x582);
IkReal x584=(new_r11*x583);
IkReal x585=(new_r01*x583);
j5eval[0]=((IKabs(((((-1.0)*new_r01*x584))+(((-1.0)*x584*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x584*(new_r11*new_r11))))))+(IKabs(((((-1.0)*x580*x581))+((x581*(x579*x579)))+((x578*x579*x581))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x589 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x589.valid){
continue;
}
IkReal x588=((-1.0)*(x589.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x588;
new_r11=0;
new_r00=0;
IkReal gconst52=x588;
IkReal x590 = new_r01*new_r01;
if(IKabs(x590)==0){
continue;
}
IkReal gconst53=((-1.0)*new_r01*(pow(x590,-0.5)));
IkReal gconst54=0;
j5eval[0]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x592 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x592.valid){
continue;
}
IkReal x591=((-1.0)*(x592.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x591;
new_r11=0;
new_r00=0;
IkReal gconst52=x591;
IkReal x593 = new_r01*new_r01;
if(IKabs(x593)==0){
continue;
}
IkReal gconst53=((-1.0)*new_r01*(pow(x593,-0.5)));
IkReal gconst54=0;
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x594=IKPowWithIntegerCheck(gconst53,-1);
if(!x594.valid){
continue;
}
cj5array[0]=((-1.0)*new_r01*(x594.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x595=IKsin(j5);
IkReal x596=IKcos(j5);
evalcond[0]=(new_r10*x595);
evalcond[1]=(gconst53*x595);
evalcond[2]=((-1.0)*new_r01*x595);
evalcond[3]=(gconst53+((new_r01*x596)));
evalcond[4]=(((new_r10*x596))+gconst53);
evalcond[5]=(((gconst53*x596))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x597=IKPowWithIntegerCheck(new_r10,-1);
if(!x597.valid){
continue;
}
cj5array[0]=((-1.0)*gconst53*(x597.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x598=IKsin(j5);
IkReal x599=IKcos(j5);
IkReal x600=(gconst53*x599);
evalcond[0]=(new_r10*x598);
evalcond[1]=(gconst53*x598);
evalcond[2]=((-1.0)*new_r01*x598);
evalcond[3]=(gconst53+((new_r01*x599)));
evalcond[4]=(x600+new_r01);
evalcond[5]=(x600+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x601=IKPowWithIntegerCheck(new_r01,-1);
if(!x601.valid){
continue;
}
cj5array[0]=((-1.0)*gconst53*(x601.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x602=IKsin(j5);
IkReal x603=IKcos(j5);
IkReal x604=(gconst53*x603);
evalcond[0]=(new_r10*x602);
evalcond[1]=(gconst53*x602);
evalcond[2]=((-1.0)*new_r01*x602);
evalcond[3]=(gconst53+((new_r10*x603)));
evalcond[4]=(x604+new_r01);
evalcond[5]=(x604+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst53;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x606 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x606.valid){
continue;
}
IkReal x605=((-1.0)*(x606.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x605;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst52=x605;
IkReal gconst53=((-1.0)*new_r01);
IkReal gconst54=new_r11;
j5eval[0]=-1.0;
j5eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j5eval[2]=-1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x608 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x608.valid){
continue;
}
IkReal x607=((-1.0)*(x608.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x607;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst52=x607;
IkReal gconst53=((-1.0)*new_r01);
IkReal gconst54=new_r11;
j5eval[0]=-1.0;
j5eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j5eval[2]=-1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x610 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x610.valid){
continue;
}
IkReal x609=((-1.0)*(x610.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x609;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst52=x609;
IkReal gconst53=((-1.0)*new_r01);
IkReal gconst54=new_r11;
j5eval[0]=1.0;
j5eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j5eval[2]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x611=((1.0)*gconst53);
CheckValue<IkReal> x612=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x612.valid){
continue;
}
CheckValue<IkReal> x613 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x611))+((gconst54*new_r01)))),IkReal(((((-1.0)*new_r01*x611))+(((-1.0)*gconst54*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x613.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x612.value)))+(x613.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x614=IKcos(j5);
IkReal x615=IKsin(j5);
IkReal x616=(gconst53*x614);
IkReal x617=(gconst53*x615);
IkReal x618=((1.0)*x615);
IkReal x619=(gconst54*x614);
IkReal x620=(gconst54*x618);
evalcond[0]=(gconst53+((new_r11*x615))+((new_r01*x614)));
evalcond[1]=(x619+x617+new_r11);
evalcond[2]=((((-1.0)*x620))+x616);
evalcond[3]=(gconst54+((new_r11*x614))+(((-1.0)*new_r01*x618)));
evalcond[4]=((((-1.0)*x620))+x616+new_r01);
evalcond[5]=((((-1.0)*x617))+(((-1.0)*x619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x621 = IKatan2WithCheck(IkReal((gconst53*new_r11)),IkReal((gconst54*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x621.valid){
continue;
}
CheckValue<IkReal> x622=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst53*gconst53)))+(((-1.0)*(gconst54*gconst54))))),-1);
if(!x622.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x621.value)+(((1.5707963267949)*(x622.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x623=IKcos(j5);
IkReal x624=IKsin(j5);
IkReal x625=(gconst53*x623);
IkReal x626=(gconst53*x624);
IkReal x627=((1.0)*x624);
IkReal x628=(gconst54*x623);
IkReal x629=(gconst54*x627);
evalcond[0]=(gconst53+((new_r01*x623))+((new_r11*x624)));
evalcond[1]=(x626+x628+new_r11);
evalcond[2]=((((-1.0)*x629))+x625);
evalcond[3]=((((-1.0)*new_r01*x627))+gconst54+((new_r11*x623)));
evalcond[4]=((((-1.0)*x629))+x625+new_r01);
evalcond[5]=((((-1.0)*x628))+(((-1.0)*x626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x630=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst54*new_r11))+((gconst53*new_r01)))),-1);
if(!x630.valid){
continue;
}
CheckValue<IkReal> x631 = IKatan2WithCheck(IkReal((gconst53*gconst54)),IkReal(((-1.0)*(gconst53*gconst53))),IKFAST_ATAN2_MAGTHRESH);
if(!x631.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x630.value)))+(x631.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x632=IKcos(j5);
IkReal x633=IKsin(j5);
IkReal x634=(gconst53*x632);
IkReal x635=(gconst53*x633);
IkReal x636=((1.0)*x633);
IkReal x637=(gconst54*x632);
IkReal x638=(gconst54*x636);
evalcond[0]=(gconst53+((new_r01*x632))+((new_r11*x633)));
evalcond[1]=(x637+x635+new_r11);
evalcond[2]=((((-1.0)*x638))+x634);
evalcond[3]=((((-1.0)*new_r01*x636))+gconst54+((new_r11*x632)));
evalcond[4]=((((-1.0)*x638))+x634+new_r01);
evalcond[5]=((((-1.0)*x637))+(((-1.0)*x635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x639=IKPowWithIntegerCheck(gconst54,-1);
if(!x639.valid){
continue;
}
cj5array[0]=(new_r00*(x639.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x640=IKsin(j5);
IkReal x641=IKcos(j5);
IkReal x642=((-1.0)*x640);
evalcond[0]=(new_r11*x640);
evalcond[1]=(new_r00*x642);
evalcond[2]=(gconst54*x642);
evalcond[3]=(((gconst54*x641))+new_r11);
evalcond[4]=(gconst54+((new_r11*x641)));
evalcond[5]=((((-1.0)*gconst54))+((new_r00*x641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x644 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x644.valid){
continue;
}
IkReal x643=((-1.0)*(x644.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x643;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst52=x643;
IkReal gconst53=0;
IkReal x645 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x645)==0){
continue;
}
IkReal gconst54=(new_r11*(pow(x645,-0.5)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x647 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x647.valid){
continue;
}
IkReal x646=((-1.0)*(x647.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x646;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst52=x646;
IkReal gconst53=0;
IkReal x648 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x648)==0){
continue;
}
IkReal gconst54=(new_r11*(pow(x648,-0.5)));
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x650 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x650.valid){
continue;
}
IkReal x649=((-1.0)*(x650.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x649;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst52=x649;
IkReal gconst53=0;
IkReal x651 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x651)==0){
continue;
}
IkReal gconst54=(new_r11*(pow(x651,-0.5)));
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x652=IKPowWithIntegerCheck(new_r10,-1);
if(!x652.valid){
continue;
}
CheckValue<IkReal> x653=IKPowWithIntegerCheck(gconst54,-1);
if(!x653.valid){
continue;
}
if( IKabs((gconst54*(x652.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x653.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst54*(x652.value)))+IKsqr(((-1.0)*new_r11*(x653.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((gconst54*(x652.value)), ((-1.0)*new_r11*(x653.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x654=IKsin(j5);
IkReal x655=IKcos(j5);
IkReal x656=((1.0)*gconst54);
IkReal x657=((-1.0)*gconst54);
evalcond[0]=(new_r11*x654);
evalcond[1]=(new_r10*x655);
evalcond[2]=(x654*x657);
evalcond[3]=(x655*x657);
evalcond[4]=(((gconst54*x655))+new_r11);
evalcond[5]=(gconst54+((new_r11*x655)));
evalcond[6]=(new_r10+(((-1.0)*x654*x656)));
evalcond[7]=((((-1.0)*x656))+((new_r10*x654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x658=IKPowWithIntegerCheck(gconst54,-1);
if(!x658.valid){
continue;
}
CheckValue<IkReal> x659=IKPowWithIntegerCheck(new_r11,-1);
if(!x659.valid){
continue;
}
if( IKabs((new_r10*(x658.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst54*(x659.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x658.value)))+IKsqr(((-1.0)*gconst54*(x659.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r10*(x658.value)), ((-1.0)*gconst54*(x659.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x660=IKsin(j5);
IkReal x661=IKcos(j5);
IkReal x662=((1.0)*gconst54);
IkReal x663=((-1.0)*gconst54);
evalcond[0]=(new_r11*x660);
evalcond[1]=(new_r10*x661);
evalcond[2]=(x660*x663);
evalcond[3]=(x661*x663);
evalcond[4]=(((gconst54*x661))+new_r11);
evalcond[5]=(gconst54+((new_r11*x661)));
evalcond[6]=((((-1.0)*x660*x662))+new_r10);
evalcond[7]=(((new_r10*x660))+(((-1.0)*x662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x664=IKPowWithIntegerCheck(IKsign(gconst54),-1);
if(!x664.valid){
continue;
}
CheckValue<IkReal> x665 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x665.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x664.value)))+(x665.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x666=IKsin(j5);
IkReal x667=IKcos(j5);
IkReal x668=((1.0)*gconst54);
IkReal x669=((-1.0)*gconst54);
evalcond[0]=(new_r11*x666);
evalcond[1]=(new_r10*x667);
evalcond[2]=(x666*x669);
evalcond[3]=(x667*x669);
evalcond[4]=(((gconst54*x667))+new_r11);
evalcond[5]=(gconst54+((new_r11*x667)));
evalcond[6]=((((-1.0)*x666*x668))+new_r10);
evalcond[7]=(((new_r10*x666))+(((-1.0)*x668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x671 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x671.valid){
continue;
}
IkReal x670=((-1.0)*(x671.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x670;
new_r01=0;
IkReal gconst52=x670;
IkReal gconst53=0;
IkReal x672 = new_r11*new_r11;
if(IKabs(x672)==0){
continue;
}
IkReal gconst54=(new_r11*(pow(x672,-0.5)));
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x674 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x674.valid){
continue;
}
IkReal x673=((-1.0)*(x674.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x673;
new_r01=0;
IkReal gconst52=x673;
IkReal gconst53=0;
IkReal x675 = new_r11*new_r11;
if(IKabs(x675)==0){
continue;
}
IkReal gconst54=(new_r11*(pow(x675,-0.5)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x677 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x677.valid){
continue;
}
IkReal x676=((-1.0)*(x677.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst53;
cj7=gconst54;
j7=x676;
new_r01=0;
IkReal gconst52=x676;
IkReal gconst53=0;
IkReal x678 = new_r11*new_r11;
if(IKabs(x678)==0){
continue;
}
IkReal gconst54=(new_r11*(pow(x678,-0.5)));
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x679=IKPowWithIntegerCheck(gconst54,-1);
if(!x679.valid){
continue;
}
CheckValue<IkReal> x680=IKPowWithIntegerCheck(new_r11,-1);
if(!x680.valid){
continue;
}
if( IKabs((new_r10*(x679.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst54*(x680.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x679.value)))+IKsqr(((-1.0)*gconst54*(x680.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r10*(x679.value)), ((-1.0)*gconst54*(x680.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x681=IKsin(j5);
IkReal x682=IKcos(j5);
IkReal x683=((1.0)*gconst54);
IkReal x684=(gconst54*x681);
evalcond[0]=(new_r11*x681);
evalcond[1]=((-1.0)*x684);
evalcond[2]=(((gconst54*x682))+new_r11);
evalcond[3]=(gconst54+((new_r11*x682)));
evalcond[4]=((((-1.0)*x681*x683))+new_r10);
evalcond[5]=((((-1.0)*x682*x683))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x681))+((new_r10*x682)));
evalcond[7]=((((-1.0)*x683))+((new_r00*x682))+((new_r10*x681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x685=IKPowWithIntegerCheck(IKsign(gconst54),-1);
if(!x685.valid){
continue;
}
CheckValue<IkReal> x686 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x686.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x685.value)))+(x686.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x687=IKsin(j5);
IkReal x688=IKcos(j5);
IkReal x689=((1.0)*gconst54);
IkReal x690=(gconst54*x687);
evalcond[0]=(new_r11*x687);
evalcond[1]=((-1.0)*x690);
evalcond[2]=(((gconst54*x688))+new_r11);
evalcond[3]=(gconst54+((new_r11*x688)));
evalcond[4]=((((-1.0)*x687*x689))+new_r10);
evalcond[5]=((((-1.0)*x688*x689))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x687))+((new_r10*x688)));
evalcond[7]=((((-1.0)*x689))+((new_r00*x688))+((new_r10*x687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x691=IKPowWithIntegerCheck(IKsign(gconst54),-1);
if(!x691.valid){
continue;
}
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x691.value)))+(x692.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x693=IKsin(j5);
IkReal x694=IKcos(j5);
IkReal x695=((1.0)*gconst54);
IkReal x696=(gconst54*x693);
evalcond[0]=(new_r11*x693);
evalcond[1]=((-1.0)*x696);
evalcond[2]=(((gconst54*x694))+new_r11);
evalcond[3]=(gconst54+((new_r11*x694)));
evalcond[4]=((((-1.0)*x693*x695))+new_r10);
evalcond[5]=((((-1.0)*x694*x695))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x693))+((new_r10*x694)));
evalcond[7]=(((new_r10*x693))+(((-1.0)*x695))+((new_r00*x694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x697=((1.0)*new_r11);
CheckValue<IkReal> x698=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst54*x697))+((gconst53*new_r01)))),-1);
if(!x698.valid){
continue;
}
CheckValue<IkReal> x699 = IKatan2WithCheck(IkReal(((((-1.0)*new_r01*x697))+((gconst53*gconst54)))),IkReal(((new_r11*new_r11)+(((-1.0)*(gconst53*gconst53))))),IKFAST_ATAN2_MAGTHRESH);
if(!x699.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x698.value)))+(x699.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x700=IKcos(j5);
IkReal x701=IKsin(j5);
IkReal x702=((1.0)*gconst54);
IkReal x703=(gconst53*x700);
IkReal x704=(gconst53*x701);
IkReal x705=((1.0)*x701);
IkReal x706=(x701*x702);
evalcond[0]=(((new_r01*x700))+gconst53+((new_r11*x701)));
evalcond[1]=(((gconst54*x700))+x704+new_r11);
evalcond[2]=(gconst53+((new_r10*x700))+(((-1.0)*new_r00*x705)));
evalcond[3]=(gconst54+((new_r11*x700))+(((-1.0)*new_r01*x705)));
evalcond[4]=((((-1.0)*x706))+x703+new_r01);
evalcond[5]=((((-1.0)*x706))+x703+new_r10);
evalcond[6]=(((new_r00*x700))+(((-1.0)*x702))+((new_r10*x701)));
evalcond[7]=((((-1.0)*x704))+new_r00+(((-1.0)*x700*x702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x707=((1.0)*gconst53);
CheckValue<IkReal> x708=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x708.valid){
continue;
}
CheckValue<IkReal> x709 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x707))+((gconst54*new_r01)))),IkReal(((((-1.0)*new_r01*x707))+(((-1.0)*gconst54*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x709.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x708.value)))+(x709.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x710=IKcos(j5);
IkReal x711=IKsin(j5);
IkReal x712=((1.0)*gconst54);
IkReal x713=(gconst53*x710);
IkReal x714=(gconst53*x711);
IkReal x715=((1.0)*x711);
IkReal x716=(x711*x712);
evalcond[0]=(((new_r01*x710))+gconst53+((new_r11*x711)));
evalcond[1]=(((gconst54*x710))+x714+new_r11);
evalcond[2]=(gconst53+((new_r10*x710))+(((-1.0)*new_r00*x715)));
evalcond[3]=(gconst54+((new_r11*x710))+(((-1.0)*new_r01*x715)));
evalcond[4]=((((-1.0)*x716))+x713+new_r01);
evalcond[5]=((((-1.0)*x716))+x713+new_r10);
evalcond[6]=(((new_r00*x710))+(((-1.0)*x712))+((new_r10*x711)));
evalcond[7]=((((-1.0)*x710*x712))+(((-1.0)*x714))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x717=((1.0)*gconst53);
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x717))+((gconst53*new_r01)))),IkReal(((((-1.0)*new_r11*x717))+(((-1.0)*new_r00*x717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
CheckValue<IkReal> x719=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x719.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x718.value)+(((1.5707963267949)*(x719.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x720=IKcos(j5);
IkReal x721=IKsin(j5);
IkReal x722=((1.0)*gconst54);
IkReal x723=(gconst53*x720);
IkReal x724=(gconst53*x721);
IkReal x725=((1.0)*x721);
IkReal x726=(x721*x722);
evalcond[0]=(gconst53+((new_r01*x720))+((new_r11*x721)));
evalcond[1]=(((gconst54*x720))+x724+new_r11);
evalcond[2]=(gconst53+(((-1.0)*new_r00*x725))+((new_r10*x720)));
evalcond[3]=(gconst54+((new_r11*x720))+(((-1.0)*new_r01*x725)));
evalcond[4]=((((-1.0)*x726))+x723+new_r01);
evalcond[5]=((((-1.0)*x726))+x723+new_r10);
evalcond[6]=(((new_r00*x720))+(((-1.0)*x722))+((new_r10*x721)));
evalcond[7]=((((-1.0)*x724))+(((-1.0)*x720*x722))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x728 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x728)==0){
continue;
}
IkReal x727=pow(x728,-0.5);
CheckValue<IkReal> x729 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x729.valid){
continue;
}
IkReal gconst55=((3.14159265358979)+(((-1.0)*(x729.value))));
IkReal gconst56=((1.0)*new_r01*x727);
IkReal gconst57=((-1.0)*new_r11*x727);
CheckValue<IkReal> x730 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x730.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x730.value)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x733 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x733.valid){
continue;
}
IkReal x731=((1.0)*(x733.value));
IkReal x732=x727;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x731)));
IkReal gconst55=((3.14159265358979)+(((-1.0)*x731)));
IkReal gconst56=((1.0)*new_r01*x732);
IkReal gconst57=((-1.0)*new_r11*x732);
IkReal x734=new_r01*new_r01;
IkReal x735=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x736=x727;
IkReal x737=((1.0)*new_r01*x736);
j5eval[0]=x735;
j5eval[1]=((IKabs(((((-1.0)*new_r00*x737))+(((-1.0)*new_r11*x737)))))+(IKabs((((x734*x736))+(((-1.0)*new_r10*x737))))));
j5eval[2]=IKsign(x735);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
CheckValue<IkReal> x740 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x740.valid){
continue;
}
IkReal x738=((1.0)*(x740.value));
IkReal x739=x727;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x738)));
IkReal gconst55=((3.14159265358979)+(((-1.0)*x738)));
IkReal gconst56=((1.0)*new_r01*x739);
IkReal gconst57=((-1.0)*new_r11*x739);
IkReal x741=((new_r01*new_r01)+(new_r11*new_r11));
j5eval[0]=x741;
j5eval[1]=IKsign(x741);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x744 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x744.valid){
continue;
}
IkReal x742=((1.0)*(x744.value));
IkReal x743=x727;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x742)));
IkReal gconst55=((3.14159265358979)+(((-1.0)*x742)));
IkReal gconst56=((1.0)*new_r01*x743);
IkReal gconst57=((-1.0)*new_r11*x743);
IkReal x745=new_r01*new_r01;
IkReal x746=new_r11*new_r11;
IkReal x747=((1.0)*x745);
CheckValue<IkReal> x753=IKPowWithIntegerCheck((x746+x745),-1);
if(!x753.valid){
continue;
}
IkReal x748=x753.value;
CheckValue<IkReal> x754=IKPowWithIntegerCheck(((((-1.0)*x746))+(((-1.0)*x747))),-1);
if(!x754.valid){
continue;
}
IkReal x749=x754.value;
IkReal x750=((1.0)*x749);
IkReal x751=(new_r11*x750);
IkReal x752=(new_r01*x750);
j5eval[0]=((IKabs((((x748*(x746*x746)))+(((-1.0)*x747*x748))+((x745*x746*x748)))))+(IKabs(((((-1.0)*new_r01*x751))+(((-1.0)*new_r01*x751*(new_r11*new_r11)))+(((-1.0)*x751*(new_r01*new_r01*new_r01)))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x756 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x756.valid){
continue;
}
IkReal x755=((1.0)*(x756.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x755)));
new_r11=0;
new_r00=0;
IkReal gconst55=((3.14159265358979)+(((-1.0)*x755)));
IkReal x757 = new_r01*new_r01;
if(IKabs(x757)==0){
continue;
}
IkReal gconst56=((1.0)*new_r01*(pow(x757,-0.5)));
IkReal gconst57=0;
j5eval[0]=new_r01;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x759 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x759.valid){
continue;
}
IkReal x758=((1.0)*(x759.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x758)));
new_r11=0;
new_r00=0;
IkReal gconst55=((3.14159265358979)+(((-1.0)*x758)));
IkReal x760 = new_r01*new_r01;
if(IKabs(x760)==0){
continue;
}
IkReal gconst56=((1.0)*new_r01*(pow(x760,-0.5)));
IkReal gconst57=0;
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x761=IKPowWithIntegerCheck(gconst56,-1);
if(!x761.valid){
continue;
}
cj5array[0]=((-1.0)*new_r01*(x761.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x762=IKsin(j5);
IkReal x763=IKcos(j5);
evalcond[0]=(new_r10*x762);
evalcond[1]=(gconst56*x762);
evalcond[2]=((-1.0)*new_r01*x762);
evalcond[3]=(gconst56+((new_r01*x763)));
evalcond[4]=(((new_r10*x763))+gconst56);
evalcond[5]=(new_r10+((gconst56*x763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x764=IKPowWithIntegerCheck(new_r10,-1);
if(!x764.valid){
continue;
}
cj5array[0]=((-1.0)*gconst56*(x764.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x765=IKsin(j5);
IkReal x766=IKcos(j5);
IkReal x767=(gconst56*x766);
evalcond[0]=(new_r10*x765);
evalcond[1]=(gconst56*x765);
evalcond[2]=((-1.0)*new_r01*x765);
evalcond[3]=(gconst56+((new_r01*x766)));
evalcond[4]=(x767+new_r01);
evalcond[5]=(x767+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x768=IKPowWithIntegerCheck(new_r01,-1);
if(!x768.valid){
continue;
}
cj5array[0]=((-1.0)*gconst56*(x768.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x769=IKsin(j5);
IkReal x770=IKcos(j5);
IkReal x771=(gconst56*x770);
evalcond[0]=(new_r10*x769);
evalcond[1]=(gconst56*x769);
evalcond[2]=((-1.0)*new_r01*x769);
evalcond[3]=(gconst56+((new_r10*x770)));
evalcond[4]=(x771+new_r01);
evalcond[5]=(x771+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst56;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[4];
CheckValue<IkReal> x773 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x773.valid){
continue;
}
IkReal x772=((1.0)*(x773.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x772)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst55=((3.14159265358979)+(((-1.0)*x772)));
IkReal gconst56=((1.0)*new_r01);
IkReal gconst57=((-1.0)*new_r11);
j5eval[0]=1.0;
j5eval[1]=1.0;
j5eval[2]=new_r01;
j5eval[3]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x775 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x775.valid){
continue;
}
IkReal x774=((1.0)*(x775.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x774)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst55=((3.14159265358979)+(((-1.0)*x774)));
IkReal gconst56=((1.0)*new_r01);
IkReal gconst57=((-1.0)*new_r11);
j5eval[0]=-1.0;
j5eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j5eval[2]=-1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
CheckValue<IkReal> x777 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x777.valid){
continue;
}
IkReal x776=((1.0)*(x777.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x776)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst55=((3.14159265358979)+(((-1.0)*x776)));
IkReal gconst56=((1.0)*new_r01);
IkReal gconst57=((-1.0)*new_r11);
j5eval[0]=1.0;
j5eval[1]=1.0;
j5eval[2]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x778=((1.0)*new_r11);
CheckValue<IkReal> x779 = IKatan2WithCheck(IkReal(((((-1.0)*gconst56*x778))+((gconst57*new_r01)))),IkReal(((((-1.0)*gconst56*new_r01))+(((-1.0)*gconst57*x778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x779.valid){
continue;
}
CheckValue<IkReal> x780=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x780.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x779.value)+(((1.5707963267949)*(x780.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x781=IKsin(j5);
IkReal x782=IKcos(j5);
IkReal x783=(gconst56*x782);
IkReal x784=(gconst57*x782);
IkReal x785=((1.0)*x781);
IkReal x786=(gconst57*x785);
evalcond[0]=(((new_r11*x781))+gconst56+((new_r01*x782)));
evalcond[1]=(((gconst56*x781))+x784+new_r11);
evalcond[2]=((((-1.0)*x786))+x783);
evalcond[3]=((((-1.0)*new_r01*x785))+((new_r11*x782))+gconst57);
evalcond[4]=((((-1.0)*x786))+x783+new_r01);
evalcond[5]=((((-1.0)*gconst56*x785))+(((-1.0)*x784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x787=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst57*gconst57)))+(((-1.0)*(gconst56*gconst56))))),-1);
if(!x787.valid){
continue;
}
CheckValue<IkReal> x788 = IKatan2WithCheck(IkReal((gconst56*new_r11)),IkReal((gconst57*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x788.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x787.value)))+(x788.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x789=IKsin(j5);
IkReal x790=IKcos(j5);
IkReal x791=(gconst56*x790);
IkReal x792=(gconst57*x790);
IkReal x793=((1.0)*x789);
IkReal x794=(gconst57*x793);
evalcond[0]=(((new_r11*x789))+gconst56+((new_r01*x790)));
evalcond[1]=(((gconst56*x789))+x792+new_r11);
evalcond[2]=((((-1.0)*x794))+x791);
evalcond[3]=((((-1.0)*new_r01*x793))+((new_r11*x790))+gconst57);
evalcond[4]=((((-1.0)*x794))+x791+new_r01);
evalcond[5]=((((-1.0)*gconst56*x793))+(((-1.0)*x792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x795 = IKatan2WithCheck(IkReal((gconst56*gconst57)),IkReal(((-1.0)*(gconst56*gconst56))),IKFAST_ATAN2_MAGTHRESH);
if(!x795.valid){
continue;
}
CheckValue<IkReal> x796=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst57*new_r11))+((gconst56*new_r01)))),-1);
if(!x796.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x795.value)+(((1.5707963267949)*(x796.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x797=IKsin(j5);
IkReal x798=IKcos(j5);
IkReal x799=(gconst56*x798);
IkReal x800=(gconst57*x798);
IkReal x801=((1.0)*x797);
IkReal x802=(gconst57*x801);
evalcond[0]=(((new_r11*x797))+gconst56+((new_r01*x798)));
evalcond[1]=(new_r11+x800+((gconst56*x797)));
evalcond[2]=(x799+(((-1.0)*x802)));
evalcond[3]=((((-1.0)*new_r01*x801))+((new_r11*x798))+gconst57);
evalcond[4]=(x799+new_r01+(((-1.0)*x802)));
evalcond[5]=((((-1.0)*x800))+(((-1.0)*gconst56*x801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x803=IKPowWithIntegerCheck(gconst57,-1);
if(!x803.valid){
continue;
}
cj5array[0]=(new_r00*(x803.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x804=IKsin(j5);
IkReal x805=IKcos(j5);
IkReal x806=((-1.0)*x804);
evalcond[0]=(new_r11*x804);
evalcond[1]=(new_r00*x806);
evalcond[2]=(gconst57*x806);
evalcond[3]=(new_r11+((gconst57*x805)));
evalcond[4]=(gconst57+((new_r11*x805)));
evalcond[5]=((((-1.0)*gconst57))+((new_r00*x805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x808 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x808.valid){
continue;
}
IkReal x807=((1.0)*(x808.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x807)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst55=((3.14159265358979)+(((-1.0)*x807)));
IkReal gconst56=0;
IkReal x809 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x809)==0){
continue;
}
IkReal gconst57=((-1.0)*new_r11*(pow(x809,-0.5)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x811 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x811.valid){
continue;
}
IkReal x810=((1.0)*(x811.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x810)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst55=((3.14159265358979)+(((-1.0)*x810)));
IkReal gconst56=0;
IkReal x812 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x812)==0){
continue;
}
IkReal gconst57=((-1.0)*new_r11*(pow(x812,-0.5)));
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x814 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x814.valid){
continue;
}
IkReal x813=((1.0)*(x814.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x813)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst55=((3.14159265358979)+(((-1.0)*x813)));
IkReal gconst56=0;
IkReal x815 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x815)==0){
continue;
}
IkReal gconst57=((-1.0)*new_r11*(pow(x815,-0.5)));
j5eval[0]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x816=IKPowWithIntegerCheck(new_r10,-1);
if(!x816.valid){
continue;
}
CheckValue<IkReal> x817=IKPowWithIntegerCheck(gconst57,-1);
if(!x817.valid){
continue;
}
if( IKabs((gconst57*(x816.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x817.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst57*(x816.value)))+IKsqr(((-1.0)*new_r11*(x817.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((gconst57*(x816.value)), ((-1.0)*new_r11*(x817.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x818=IKsin(j5);
IkReal x819=IKcos(j5);
IkReal x820=(gconst57*x818);
IkReal x821=(gconst57*x819);
evalcond[0]=(new_r11*x818);
evalcond[1]=(new_r10*x819);
evalcond[2]=((-1.0)*x820);
evalcond[3]=((-1.0)*x821);
evalcond[4]=(new_r11+x821);
evalcond[5]=(((new_r11*x819))+gconst57);
evalcond[6]=((((-1.0)*x820))+new_r10);
evalcond[7]=((((-1.0)*gconst57))+((new_r10*x818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x822=IKPowWithIntegerCheck(gconst57,-1);
if(!x822.valid){
continue;
}
CheckValue<IkReal> x823=IKPowWithIntegerCheck(new_r11,-1);
if(!x823.valid){
continue;
}
if( IKabs((new_r10*(x822.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst57*(x823.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x822.value)))+IKsqr(((-1.0)*gconst57*(x823.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r10*(x822.value)), ((-1.0)*gconst57*(x823.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x824=IKsin(j5);
IkReal x825=IKcos(j5);
IkReal x826=(gconst57*x824);
IkReal x827=(gconst57*x825);
evalcond[0]=(new_r11*x824);
evalcond[1]=(new_r10*x825);
evalcond[2]=((-1.0)*x826);
evalcond[3]=((-1.0)*x827);
evalcond[4]=(new_r11+x827);
evalcond[5]=(gconst57+((new_r11*x825)));
evalcond[6]=((((-1.0)*x826))+new_r10);
evalcond[7]=((((-1.0)*gconst57))+((new_r10*x824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x828 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x828.valid){
continue;
}
CheckValue<IkReal> x829=IKPowWithIntegerCheck(IKsign(gconst57),-1);
if(!x829.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x828.value)+(((1.5707963267949)*(x829.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x830=IKsin(j5);
IkReal x831=IKcos(j5);
IkReal x832=(gconst57*x830);
IkReal x833=(gconst57*x831);
evalcond[0]=(new_r11*x830);
evalcond[1]=(new_r10*x831);
evalcond[2]=((-1.0)*x832);
evalcond[3]=((-1.0)*x833);
evalcond[4]=(new_r11+x833);
evalcond[5]=(((new_r11*x831))+gconst57);
evalcond[6]=((((-1.0)*x832))+new_r10);
evalcond[7]=((((-1.0)*gconst57))+((new_r10*x830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
CheckValue<IkReal> x835 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x835.valid){
continue;
}
IkReal x834=((1.0)*(x835.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x834)));
new_r01=0;
IkReal gconst55=((3.14159265358979)+(((-1.0)*x834)));
IkReal gconst56=0;
IkReal x836 = new_r11*new_r11;
if(IKabs(x836)==0){
continue;
}
IkReal gconst57=((-1.0)*new_r11*(pow(x836,-0.5)));
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x838 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x838.valid){
continue;
}
IkReal x837=((1.0)*(x838.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x837)));
new_r01=0;
IkReal gconst55=((3.14159265358979)+(((-1.0)*x837)));
IkReal gconst56=0;
IkReal x839 = new_r11*new_r11;
if(IKabs(x839)==0){
continue;
}
IkReal gconst57=((-1.0)*new_r11*(pow(x839,-0.5)));
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
CheckValue<IkReal> x841 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
IkReal x840=((1.0)*(x841.value));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj7=gconst56;
cj7=gconst57;
j7=((3.14159265)+(((-1.0)*x840)));
new_r01=0;
IkReal gconst55=((3.14159265358979)+(((-1.0)*x840)));
IkReal gconst56=0;
IkReal x842 = new_r11*new_r11;
if(IKabs(x842)==0){
continue;
}
IkReal gconst57=((-1.0)*new_r11*(pow(x842,-0.5)));
j5eval[0]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x843=IKPowWithIntegerCheck(gconst57,-1);
if(!x843.valid){
continue;
}
CheckValue<IkReal> x844=IKPowWithIntegerCheck(new_r11,-1);
if(!x844.valid){
continue;
}
if( IKabs((new_r10*(x843.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst57*(x844.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x843.value)))+IKsqr(((-1.0)*gconst57*(x844.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r10*(x843.value)), ((-1.0)*gconst57*(x844.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x845=IKsin(j5);
IkReal x846=IKcos(j5);
IkReal x847=(gconst57*x845);
IkReal x848=(gconst57*x846);
evalcond[0]=(new_r11*x845);
evalcond[1]=((-1.0)*x847);
evalcond[2]=(new_r11+x848);
evalcond[3]=(gconst57+((new_r11*x846)));
evalcond[4]=((((-1.0)*x847))+new_r10);
evalcond[5]=((((-1.0)*x848))+new_r00);
evalcond[6]=(((new_r10*x846))+(((-1.0)*new_r00*x845)));
evalcond[7]=(((new_r10*x845))+(((-1.0)*gconst57))+((new_r00*x846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x849 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x849.valid){
continue;
}
CheckValue<IkReal> x850=IKPowWithIntegerCheck(IKsign(gconst57),-1);
if(!x850.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x849.value)+(((1.5707963267949)*(x850.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x851=IKsin(j5);
IkReal x852=IKcos(j5);
IkReal x853=(gconst57*x851);
IkReal x854=(gconst57*x852);
evalcond[0]=(new_r11*x851);
evalcond[1]=((-1.0)*x853);
evalcond[2]=(new_r11+x854);
evalcond[3]=(gconst57+((new_r11*x852)));
evalcond[4]=((((-1.0)*x853))+new_r10);
evalcond[5]=((((-1.0)*x854))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x851))+((new_r10*x852)));
evalcond[7]=((((-1.0)*gconst57))+((new_r10*x851))+((new_r00*x852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x855 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x855.valid){
continue;
}
CheckValue<IkReal> x856=IKPowWithIntegerCheck(IKsign(gconst57),-1);
if(!x856.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x855.value)+(((1.5707963267949)*(x856.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x857=IKsin(j5);
IkReal x858=IKcos(j5);
IkReal x859=(gconst57*x857);
IkReal x860=(gconst57*x858);
evalcond[0]=(new_r11*x857);
evalcond[1]=((-1.0)*x859);
evalcond[2]=(new_r11+x860);
evalcond[3]=(gconst57+((new_r11*x858)));
evalcond[4]=((((-1.0)*x859))+new_r10);
evalcond[5]=((((-1.0)*x860))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x857))+((new_r10*x858)));
evalcond[7]=((((-1.0)*gconst57))+((new_r10*x857))+((new_r00*x858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x861=((1.0)*new_r11);
CheckValue<IkReal> x862 = IKatan2WithCheck(IkReal((((gconst56*gconst57))+(((-1.0)*new_r01*x861)))),IkReal(((new_r11*new_r11)+(((-1.0)*(gconst56*gconst56))))),IKFAST_ATAN2_MAGTHRESH);
if(!x862.valid){
continue;
}
CheckValue<IkReal> x863=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst57*x861))+((gconst56*new_r01)))),-1);
if(!x863.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x862.value)+(((1.5707963267949)*(x863.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x864=IKsin(j5);
IkReal x865=IKcos(j5);
IkReal x866=(gconst56*x865);
IkReal x867=(gconst57*x865);
IkReal x868=((1.0)*x864);
IkReal x869=(gconst57*x868);
evalcond[0]=(((new_r01*x865))+gconst56+((new_r11*x864)));
evalcond[1]=(((gconst56*x864))+new_r11+x867);
evalcond[2]=((((-1.0)*new_r00*x868))+gconst56+((new_r10*x865)));
evalcond[3]=((((-1.0)*new_r01*x868))+gconst57+((new_r11*x865)));
evalcond[4]=((((-1.0)*x869))+new_r01+x866);
evalcond[5]=((((-1.0)*x869))+new_r10+x866);
evalcond[6]=(((new_r00*x865))+(((-1.0)*gconst57))+((new_r10*x864)));
evalcond[7]=((((-1.0)*x867))+new_r00+(((-1.0)*gconst56*x868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x870=((1.0)*new_r11);
CheckValue<IkReal> x871 = IKatan2WithCheck(IkReal(((((-1.0)*gconst56*x870))+((gconst57*new_r01)))),IkReal(((((-1.0)*gconst56*new_r01))+(((-1.0)*gconst57*x870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x871.valid){
continue;
}
CheckValue<IkReal> x872=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x872.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x871.value)+(((1.5707963267949)*(x872.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x873=IKsin(j5);
IkReal x874=IKcos(j5);
IkReal x875=(gconst56*x874);
IkReal x876=(gconst57*x874);
IkReal x877=((1.0)*x873);
IkReal x878=(gconst57*x877);
evalcond[0]=(((new_r01*x874))+gconst56+((new_r11*x873)));
evalcond[1]=(((gconst56*x873))+new_r11+x876);
evalcond[2]=((((-1.0)*new_r00*x877))+gconst56+((new_r10*x874)));
evalcond[3]=(gconst57+(((-1.0)*new_r01*x877))+((new_r11*x874)));
evalcond[4]=(new_r01+x875+(((-1.0)*x878)));
evalcond[5]=(new_r10+x875+(((-1.0)*x878)));
evalcond[6]=(((new_r00*x874))+(((-1.0)*gconst57))+((new_r10*x873)));
evalcond[7]=((((-1.0)*gconst56*x877))+(((-1.0)*x876))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x879=((1.0)*gconst56);
CheckValue<IkReal> x880=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x880.valid){
continue;
}
CheckValue<IkReal> x881 = IKatan2WithCheck(IkReal((((gconst56*new_r01))+(((-1.0)*new_r10*x879)))),IkReal(((((-1.0)*new_r00*x879))+(((-1.0)*new_r11*x879)))),IKFAST_ATAN2_MAGTHRESH);
if(!x881.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x880.value)))+(x881.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x882=IKsin(j5);
IkReal x883=IKcos(j5);
IkReal x884=(gconst56*x883);
IkReal x885=(gconst57*x883);
IkReal x886=((1.0)*x882);
IkReal x887=(gconst57*x886);
evalcond[0]=(((new_r01*x883))+((new_r11*x882))+gconst56);
evalcond[1]=(((gconst56*x882))+new_r11+x885);
evalcond[2]=(((new_r10*x883))+gconst56+(((-1.0)*new_r00*x886)));
evalcond[3]=(((new_r11*x883))+gconst57+(((-1.0)*new_r01*x886)));
evalcond[4]=((((-1.0)*x887))+new_r01+x884);
evalcond[5]=((((-1.0)*x887))+new_r10+x884);
evalcond[6]=((((-1.0)*gconst57))+((new_r10*x882))+((new_r00*x883)));
evalcond[7]=((((-1.0)*x885))+(((-1.0)*gconst56*x886))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r11=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x889 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x889.valid){
continue;
}
IkReal x888=x889.value;
j5array[0]=((-1.0)*x888);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x888)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j5))))+((new_r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x890=IKcos(j5);
IkReal x891=IKsin(j5);
IkReal x892=((1.0)*x891);
evalcond[0]=(new_r11+x890);
evalcond[1]=((((-1.0)*x892))+new_r01);
evalcond[2]=((((-1.0)*x892))+new_r10);
evalcond[3]=((((-1.0)*x890))+new_r00);
evalcond[4]=(((new_r11*x891))+((new_r01*x890)));
evalcond[5]=((-1.0)+((new_r00*x890))+((new_r10*x891)));
evalcond[6]=(((new_r10*x890))+(((-1.0)*new_r00*x892)));
evalcond[7]=((1.0)+((new_r11*x890))+(((-1.0)*new_r01*x892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x893=IKsin(j5);
IkReal x894=IKcos(j5);
IkReal x895=((1.0)*x893);
evalcond[0]=(new_r01+x893);
evalcond[1]=(new_r10+x893);
evalcond[2]=(new_r00+x894);
evalcond[3]=((((-1.0)*x894))+new_r11);
evalcond[4]=(((new_r11*x893))+((new_r01*x894)));
evalcond[5]=((1.0)+((new_r00*x894))+((new_r10*x893)));
evalcond[6]=(((new_r10*x894))+(((-1.0)*new_r00*x895)));
evalcond[7]=((-1.0)+((new_r11*x894))+(((-1.0)*new_r01*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r11=0;
new_r00=0;
j5eval[0]=new_r01;
j5eval[1]=IKsign(new_r01);
j5eval[2]=((IKabs(cj7))+(IKabs(sj7)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r11=0;
new_r00=0;
j5eval[0]=new_r01;
j5eval[1]=new_r10;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x896=IKPowWithIntegerCheck(new_r01,-1);
if(!x896.valid){
continue;
}
CheckValue<IkReal> x897=IKPowWithIntegerCheck(new_r10,-1);
if(!x897.valid){
continue;
}
if( IKabs((cj7*(x896.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj7*(x897.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*(x896.value)))+IKsqr(((-1.0)*sj7*(x897.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj7*(x896.value)), ((-1.0)*sj7*(x897.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x898=IKcos(j5);
IkReal x899=IKsin(j5);
IkReal x900=((1.0)*cj7);
IkReal x901=(sj7*x898);
IkReal x902=(x899*x900);
evalcond[0]=(sj7+((new_r01*x898)));
evalcond[1]=(sj7+((new_r10*x898)));
evalcond[2]=(cj7+(((-1.0)*new_r01*x899)));
evalcond[3]=(((new_r10*x899))+(((-1.0)*x900)));
evalcond[4]=(((cj7*x898))+((sj7*x899)));
evalcond[5]=((((-1.0)*x902))+new_r01+x901);
evalcond[6]=((((-1.0)*x902))+new_r10+x901);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x903=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x903.valid){
continue;
}
CheckValue<IkReal> x904 = IKatan2WithCheck(IkReal(cj7),IkReal(((-1.0)*sj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x904.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x903.value)))+(x904.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x905=IKcos(j5);
IkReal x906=IKsin(j5);
IkReal x907=((1.0)*cj7);
IkReal x908=(sj7*x905);
IkReal x909=(x906*x907);
evalcond[0]=(sj7+((new_r01*x905)));
evalcond[1]=(sj7+((new_r10*x905)));
evalcond[2]=(cj7+(((-1.0)*new_r01*x906)));
evalcond[3]=((((-1.0)*x907))+((new_r10*x906)));
evalcond[4]=(((sj7*x906))+((cj7*x905)));
evalcond[5]=((((-1.0)*x909))+new_r01+x908);
evalcond[6]=((((-1.0)*x909))+new_r10+x908);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x911 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x911.valid){
continue;
}
IkReal x910=x911.value;
j5array[0]=((-1.0)*x910);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x910)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j5))))+((new_r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x913 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x913.valid){
continue;
}
IkReal x912=x913.value;
j5array[0]=((-1.0)*x912);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x912)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j5))))+(((-1.0)*new_r01*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r10=0;
j5eval[0]=new_r11;
j5eval[1]=((IKabs(cj7))+(IKabs(sj7)));
j5eval[2]=IKsign(new_r11);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r10=0;
j5eval[0]=new_r00;
j5eval[1]=new_r11;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
new_r01=0;
new_r10=0;
j5eval[0]=new_r11;
j5eval[1]=cj7;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
sj5array[0]=new_r00;
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x914=IKcos(j5);
IkReal x915=IKsin(j5);
evalcond[0]=x914;
evalcond[1]=(new_r00*x914);
evalcond[2]=(new_r11+x915);
evalcond[3]=(new_r11*x914);
evalcond[4]=((1.0)+((new_r11*x915)));
evalcond[5]=((1.0)+(((-1.0)*new_r00*x915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
sj5array[0]=new_r11;
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x916=IKcos(j5);
IkReal x917=IKsin(j5);
evalcond[0]=(new_r00*x916);
evalcond[1]=(new_r11*x916);
evalcond[2]=((-1.0)*x916);
evalcond[3]=(new_r00+x917);
evalcond[4]=((-1.0)+((new_r11*x917)));
evalcond[5]=((-1.0)+(((-1.0)*new_r00*x917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x919=IKPowWithIntegerCheck(new_r11,-1);
if(!x919.valid){
continue;
}
IkReal x918=x919.value;
CheckValue<IkReal> x920=IKPowWithIntegerCheck(cj7,-1);
if(!x920.valid){
continue;
}
CheckValue<IkReal> x921=IKPowWithIntegerCheck(x918,-2);
if(!x921.valid){
continue;
}
if( IKabs(((-1.0)*sj7*x918)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x918*(x920.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(x921.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj7*x918))+IKsqr((x918*(x920.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(x921.value)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj7*x918), (x918*(x920.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(x921.value)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x922=IKsin(j5);
IkReal x923=IKcos(j5);
IkReal x924=((1.0)*cj7);
IkReal x925=((1.0)*x922);
evalcond[0]=(sj7+((new_r11*x922)));
evalcond[1]=(cj7+((new_r11*x923)));
evalcond[2]=(sj7+(((-1.0)*new_r00*x925)));
evalcond[3]=((((-1.0)*x924))+((new_r00*x923)));
evalcond[4]=(((cj7*x923))+new_r11+((sj7*x922)));
evalcond[5]=(((sj7*x923))+(((-1.0)*x922*x924)));
evalcond[6]=(new_r00+(((-1.0)*sj7*x925))+(((-1.0)*x923*x924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x926=IKPowWithIntegerCheck(new_r00,-1);
if(!x926.valid){
continue;
}
CheckValue<IkReal> x927=IKPowWithIntegerCheck(new_r11,-1);
if(!x927.valid){
continue;
}
if( IKabs((sj7*(x926.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj7*(x927.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj7*(x926.value)))+IKsqr(((-1.0)*cj7*(x927.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj7*(x926.value)), ((-1.0)*cj7*(x927.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x928=IKsin(j5);
IkReal x929=IKcos(j5);
IkReal x930=((1.0)*cj7);
IkReal x931=((1.0)*x928);
evalcond[0]=(sj7+((new_r11*x928)));
evalcond[1]=(cj7+((new_r11*x929)));
evalcond[2]=(sj7+(((-1.0)*new_r00*x931)));
evalcond[3]=(((new_r00*x929))+(((-1.0)*x930)));
evalcond[4]=(((cj7*x929))+new_r11+((sj7*x928)));
evalcond[5]=((((-1.0)*x928*x930))+((sj7*x929)));
evalcond[6]=((((-1.0)*x929*x930))+new_r00+(((-1.0)*sj7*x931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x932 = IKatan2WithCheck(IkReal(((-1.0)*sj7)),IkReal(((-1.0)*cj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x932.valid){
continue;
}
CheckValue<IkReal> x933=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x933.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x932.value)+(((1.5707963267949)*(x933.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[7];
IkReal x934=IKsin(j5);
IkReal x935=IKcos(j5);
IkReal x936=((1.0)*cj7);
IkReal x937=((1.0)*x934);
evalcond[0]=(sj7+((new_r11*x934)));
evalcond[1]=(cj7+((new_r11*x935)));
evalcond[2]=(sj7+(((-1.0)*new_r00*x937)));
evalcond[3]=(((new_r00*x935))+(((-1.0)*x936)));
evalcond[4]=(((cj7*x935))+new_r11+((sj7*x934)));
evalcond[5]=((((-1.0)*x934*x936))+((sj7*x935)));
evalcond[6]=((((-1.0)*x935*x936))+new_r00+(((-1.0)*sj7*x937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x938 = IKatan2WithCheck(IkReal(((-1.0)+(cj7*cj7)+(new_r01*new_r01))),IkReal(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj7*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x938.valid){
continue;
}
CheckValue<IkReal> x939=IKPowWithIntegerCheck(IKsign((((new_r11*sj7))+((cj7*new_r01)))),-1);
if(!x939.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x938.value)+(((1.5707963267949)*(x939.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x940=IKcos(j5);
IkReal x941=IKsin(j5);
IkReal x942=((1.0)*cj7);
IkReal x943=(sj7*x940);
IkReal x944=((1.0)*x941);
IkReal x945=(x941*x942);
evalcond[0]=(sj7+((new_r01*x940))+((new_r11*x941)));
evalcond[1]=(((sj7*x941))+((cj7*x940))+new_r11);
evalcond[2]=(sj7+((new_r10*x940))+(((-1.0)*new_r00*x944)));
evalcond[3]=(cj7+((new_r11*x940))+(((-1.0)*new_r01*x944)));
evalcond[4]=((((-1.0)*x945))+new_r01+x943);
evalcond[5]=((((-1.0)*x945))+new_r10+x943);
evalcond[6]=((((-1.0)*x942))+((new_r00*x940))+((new_r10*x941)));
evalcond[7]=((((-1.0)*sj7*x944))+new_r00+(((-1.0)*x940*x942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x946=((1.0)*sj7);
CheckValue<IkReal> x947=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x947.valid){
continue;
}
CheckValue<IkReal> x948 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x946))+((cj7*new_r01)))),IkReal(((((-1.0)*cj7*new_r11))+(((-1.0)*new_r01*x946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x948.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x947.value)))+(x948.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x949=IKcos(j5);
IkReal x950=IKsin(j5);
IkReal x951=((1.0)*cj7);
IkReal x952=(sj7*x949);
IkReal x953=((1.0)*x950);
IkReal x954=(x950*x951);
evalcond[0]=(sj7+((new_r01*x949))+((new_r11*x950)));
evalcond[1]=(((cj7*x949))+((sj7*x950))+new_r11);
evalcond[2]=(sj7+(((-1.0)*new_r00*x953))+((new_r10*x949)));
evalcond[3]=(cj7+(((-1.0)*new_r01*x953))+((new_r11*x949)));
evalcond[4]=(new_r01+(((-1.0)*x954))+x952);
evalcond[5]=(new_r10+(((-1.0)*x954))+x952);
evalcond[6]=(((new_r10*x950))+((new_r00*x949))+(((-1.0)*x951)));
evalcond[7]=((((-1.0)*x949*x951))+new_r00+(((-1.0)*sj7*x953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x955=((1.0)*sj7);
CheckValue<IkReal> x956 = IKatan2WithCheck(IkReal((((new_r01*sj7))+(((-1.0)*new_r10*x955)))),IkReal(((((-1.0)*new_r00*x955))+(((-1.0)*new_r11*x955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x956.valid){
continue;
}
CheckValue<IkReal> x957=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x957.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x956.value)+(((1.5707963267949)*(x957.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x958=IKcos(j5);
IkReal x959=IKsin(j5);
IkReal x960=((1.0)*cj7);
IkReal x961=(sj7*x958);
IkReal x962=((1.0)*x959);
IkReal x963=(x959*x960);
evalcond[0]=(sj7+((new_r01*x958))+((new_r11*x959)));
evalcond[1]=(((sj7*x959))+new_r11+((cj7*x958)));
evalcond[2]=(((new_r10*x958))+sj7+(((-1.0)*new_r00*x962)));
evalcond[3]=(cj7+(((-1.0)*new_r01*x962))+((new_r11*x958)));
evalcond[4]=(new_r01+x961+(((-1.0)*x963)));
evalcond[5]=(new_r10+x961+(((-1.0)*x963)));
evalcond[6]=(((new_r10*x959))+((new_r00*x958))+(((-1.0)*x960)));
evalcond[7]=((((-1.0)*x958*x960))+new_r00+(((-1.0)*sj7*x962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x964=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj7*x964))+(((-1.0)*new_r11*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj7*x964))+((cj7*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*x964))+(((-1.0)*new_r11*sj7))))+IKsqr(((((-1.0)*sj7*x964))+((cj7*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj7*x964))+(((-1.0)*new_r11*sj7))), ((((-1.0)*sj7*x964))+((cj7*new_r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x965=IKcos(j5);
IkReal x966=IKsin(j5);
IkReal x967=((1.0)*cj7);
IkReal x968=((1.0)*sj7);
IkReal x969=(sj7*x966);
IkReal x970=((1.0)*x966);
IkReal x971=(x965*x967);
evalcond[0]=(((new_r11*x966))+((new_r01*x965))+sj7);
evalcond[1]=(((sj7*x965))+new_r01+((cj7*x966)));
evalcond[2]=(new_r11+x969+(((-1.0)*x971)));
evalcond[3]=(new_r00+x969+(((-1.0)*x971)));
evalcond[4]=(((new_r00*x965))+(((-1.0)*x967))+((new_r10*x966)));
evalcond[5]=((((-1.0)*x965*x968))+(((-1.0)*x966*x967))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x970))+(((-1.0)*x968))+((new_r10*x965)));
evalcond[7]=(((new_r11*x965))+(((-1.0)*new_r01*x970))+(((-1.0)*x967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x973 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x973.valid){
continue;
}
IkReal x972=x973.value;
j5array[0]=((-1.0)*x972);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x972)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x974=IKsin(j5);
IkReal x975=IKcos(j5);
IkReal x976=((1.0)*x974);
IkReal x977=(new_r11*x975);
evalcond[0]=(((new_r01*x975))+((new_r11*x974)));
evalcond[1]=(((new_r10*x974))+((new_r00*x975)));
evalcond[2]=((((-1.0)*new_r00*x976))+((new_r10*x975)));
evalcond[3]=((((-1.0)*new_r01*x976))+x977);
evalcond[4]=((((-1.0)*new_r01*new_r22*x976))+((new_r22*x977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x979 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x979.valid){
continue;
}
IkReal x978=x979.value;
j5array[0]=((-1.0)*x978);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x978)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x980=IKcos(j5);
IkReal x981=IKsin(j5);
IkReal x982=(new_r11*x980);
IkReal x983=((1.0)*x981);
IkReal x984=(new_r10*x980);
IkReal x985=(new_r22*x983);
evalcond[0]=(((new_r11*x981))+((new_r01*x980)));
evalcond[1]=((((-1.0)*new_r00*x983))+x984);
evalcond[2]=((((-1.0)*new_r01*x983))+x982);
evalcond[3]=(((new_r22*x984))+(((-1.0)*new_r00*x985)));
evalcond[4]=((((-1.0)*new_r01*x985))+((new_r22*x982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x987 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x987.valid){
continue;
}
IkReal x986=x987.value;
j5array[0]=((-1.0)*x986);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x986)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x988=IKcos(j5);
IkReal x989=IKsin(j5);
IkReal x990=(new_r11*x988);
IkReal x991=((1.0)*x989);
IkReal x992=(new_r10*x988);
IkReal x993=(new_r22*x991);
evalcond[0]=(((new_r00*x988))+((new_r10*x989)));
evalcond[1]=((((-1.0)*new_r00*x991))+x992);
evalcond[2]=((((-1.0)*new_r01*x991))+x990);
evalcond[3]=((((-1.0)*new_r00*x993))+((new_r22*x992)));
evalcond[4]=((((-1.0)*new_r01*x993))+((new_r22*x990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x995=IKPowWithIntegerCheck(cj6,-1);
if(!x995.valid){
continue;
}
IkReal x994=x995.value;
CheckValue<IkReal> x996=IKPowWithIntegerCheck(new_r11,-1);
if(!x996.valid){
continue;
}
if( IKabs((x994*(x996.value)*((((new_r01*new_r12))+(((-1.0)*cj6*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x994)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x994*(x996.value)*((((new_r01*new_r12))+(((-1.0)*cj6*sj7))))))+IKsqr(((-1.0)*new_r12*x994))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x994*(x996.value)*((((new_r01*new_r12))+(((-1.0)*cj6*sj7))))), ((-1.0)*new_r12*x994));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x997=IKsin(j5);
IkReal x998=IKcos(j5);
IkReal x999=((1.0)*cj7);
IkReal x1000=(cj7*sj6);
IkReal x1001=((1.0)*x998);
IkReal x1002=(new_r11*x998);
IkReal x1003=(sj7*x998);
IkReal x1004=(new_r00*x997);
IkReal x1005=(sj7*x997);
IkReal x1006=(new_r12*x998);
IkReal x1007=(sj6*x997);
IkReal x1008=(cj6*x998);
IkReal x1009=((1.0)*x997);
IkReal x1010=(cj6*x1009);
evalcond[0]=(x1008+new_r12);
evalcond[1]=((((-1.0)*x1010))+new_r02);
evalcond[2]=(((new_r12*x997))+((new_r02*x998)));
evalcond[3]=(sj7+((new_r11*x997))+((new_r01*x998)));
evalcond[4]=(x1006+(((-1.0)*new_r02*x1009))+cj6);
evalcond[5]=(((x1000*x998))+x1005+new_r11);
evalcond[6]=(((new_r10*x997))+(((-1.0)*x999))+((new_r00*x998)));
evalcond[7]=(x1003+(((-1.0)*x1007*x999))+new_r01);
evalcond[8]=(((sj6*x1003))+(((-1.0)*x997*x999))+new_r10);
evalcond[9]=((((-1.0)*x1004))+((new_r10*x998))+((sj6*sj7)));
evalcond[10]=(x1002+x1000+(((-1.0)*new_r01*x1009)));
evalcond[11]=((((-1.0)*sj6*x1005))+new_r00+(((-1.0)*x998*x999)));
evalcond[12]=(((new_r20*sj6))+(((-1.0)*cj6*x1004))+((new_r10*x1008)));
evalcond[13]=(((cj6*x1002))+(((-1.0)*new_r01*x1010))+((new_r21*sj6)));
evalcond[14]=((((-1.0)*new_r12*sj6*x1001))+((new_r02*x1007))+((cj6*new_r22)));
evalcond[15]=((1.0)+((cj6*x1006))+(((-1.0)*new_r02*x1010))+((new_r22*sj6)));
evalcond[16]=(((sj6*x1004))+(((-1.0)*sj7))+(((-1.0)*new_r10*sj6*x1001))+((cj6*new_r20)));
evalcond[17]=((((-1.0)*x999))+(((-1.0)*new_r11*sj6*x1001))+((new_r01*x1007))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1011=IKPowWithIntegerCheck(IKsign(cj6),-1);
if(!x1011.valid){
continue;
}
CheckValue<IkReal> x1012 = IKatan2WithCheck(IkReal(new_r02),IkReal(((-1.0)*new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1012.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1011.value)))+(x1012.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[18];
IkReal x1013=IKsin(j5);
IkReal x1014=IKcos(j5);
IkReal x1015=((1.0)*cj7);
IkReal x1016=(cj7*sj6);
IkReal x1017=((1.0)*x1014);
IkReal x1018=(new_r11*x1014);
IkReal x1019=(sj7*x1014);
IkReal x1020=(new_r00*x1013);
IkReal x1021=(sj7*x1013);
IkReal x1022=(new_r12*x1014);
IkReal x1023=(sj6*x1013);
IkReal x1024=(cj6*x1014);
IkReal x1025=((1.0)*x1013);
IkReal x1026=(cj6*x1025);
evalcond[0]=(x1024+new_r12);
evalcond[1]=((((-1.0)*x1026))+new_r02);
evalcond[2]=(((new_r02*x1014))+((new_r12*x1013)));
evalcond[3]=(sj7+((new_r11*x1013))+((new_r01*x1014)));
evalcond[4]=((((-1.0)*new_r02*x1025))+x1022+cj6);
evalcond[5]=(((x1014*x1016))+x1021+new_r11);
evalcond[6]=((((-1.0)*x1015))+((new_r10*x1013))+((new_r00*x1014)));
evalcond[7]=(x1019+(((-1.0)*x1015*x1023))+new_r01);
evalcond[8]=(((sj6*x1019))+(((-1.0)*x1013*x1015))+new_r10);
evalcond[9]=((((-1.0)*x1020))+((new_r10*x1014))+((sj6*sj7)));
evalcond[10]=(x1018+x1016+(((-1.0)*new_r01*x1025)));
evalcond[11]=((((-1.0)*sj6*x1021))+(((-1.0)*x1014*x1015))+new_r00);
evalcond[12]=(((new_r10*x1024))+((new_r20*sj6))+(((-1.0)*cj6*x1020)));
evalcond[13]=(((cj6*x1018))+((new_r21*sj6))+(((-1.0)*new_r01*x1026)));
evalcond[14]=(((new_r02*x1023))+(((-1.0)*new_r12*sj6*x1017))+((cj6*new_r22)));
evalcond[15]=((1.0)+(((-1.0)*new_r02*x1026))+((new_r22*sj6))+((cj6*x1022)));
evalcond[16]=((((-1.0)*new_r10*sj6*x1017))+(((-1.0)*sj7))+((sj6*x1020))+((cj6*new_r20)));
evalcond[17]=((((-1.0)*x1015))+(((-1.0)*new_r11*sj6*x1017))+((new_r01*x1023))+((cj6*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "7d555a1344b3f84c9691ae370be1239c"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
